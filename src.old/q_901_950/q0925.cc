#include <gtest/gtest.h>
#include <iostream>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 925.
 *      Long Pressed Name
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Your friend is typing his ‘name’ into a keyboard. Sometimes, when
 *   typing a character ‘c’ , the key might get “long pressed” , and the
 *   character will be typed 1 or more
 *   You examine the ‘typed’ characters of the keyboard. Return ‘True’ if
 *   it is possible that it was your friends name, with some characters
 *   (possibly none) being long pressed.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ name.length, typed.length ≤ 1000’
 *   • ‘name’ and ‘typed’ consist of only lowercase English letters.
 *
 */

struct q925 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    bool isLongPressedName(string name, string typed) {
      auto nbeg = name.begin();
      auto tbeg = typed.begin();
      while (nbeg != name.end() || tbeg != typed.end()) {
        auto x = *nbeg++;
        if (x != *tbeg) {
          return false;
        }
        ++tbeg;
        if (*nbeg != *tbeg) {
          while (*tbeg == x) {
            ++tbeg;
          }
        }
      }
      return true;
    }
  };

  class Solution *solution;
};

TEST_F(q925, sample_input01) {
  solution     = new Solution();
  string name  = "alex";
  string typed = "aaleex";
  bool   exp   = true;
  bool   act   = solution->isLongPressedName(name, typed);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q925, sample_input02) {
  solution     = new Solution();
  string name  = "saeed";
  string typed = "ssaaedd";
  bool   exp   = false;
  bool   act   = solution->isLongPressedName(name, typed);
  EXPECT_EQ(act, exp);
  delete solution;
}