#include <algorithm>
#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 933.
 *      Number of Recent Calls
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You have a ‘RecentCounter’ class which counts the number of recent
 *   requests within a certain time
 *   Implement the ‘RecentCounter’
 *       -  ‘RecentCounter()’ Initializes the counter with zero recent
 *       -  ‘int ping(int t)’ Adds a new request at time ‘t’ , where ‘t’
 *   represents some time in milliseconds, and returns the number of
 *   requests that has happened in the past ‘3000’ milliseconds (including
 *   the new request). Specifically, return the number of requests that
 *   have happened in the inclusive range ‘[t - 3000, t]’
 *   It is “guaranteed” that every call to ‘ping’ uses a strictly larger
 *   value of ‘t’ than the previous call.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ t ≤ 10⁹’
 *   • Each test case will call ‘ping’ with “strictly increasing” values of ‘t’
 * . • At most ‘10⁴’ calls will be made to ‘ping’ .
 *
 */

struct q933 : public ::testing::Test {
  // Leetcode answer here
  class RecentCounter {
  private:
    vector<int> reqs;

  public:
    RecentCounter() {}

    int ping(int t) {
      auto pos = upper_bound(reqs.begin(), reqs.end(), t);
      reqs.insert(pos, t);
      auto end = upper_bound(reqs.begin(), reqs.end(), t);
      auto fst = upper_bound(reqs.begin(), end, t - 3001);
      return distance(fst, end);
    }
  };

  class RecentCounter *recent_counter;
};

TEST_F(q933, sample_input01) {
  recent_counter = new RecentCounter();
  EXPECT_EQ(recent_counter->ping(1), 1);
  EXPECT_EQ(recent_counter->ping(100), 2);
  EXPECT_EQ(recent_counter->ping(3001), 3);
  EXPECT_EQ(recent_counter->ping(3002), 3);
  delete recent_counter;
}