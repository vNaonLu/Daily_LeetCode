#include <algorithm>
#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 908.
 *      Smallest Range I
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an integer array ‘nums’ and an integer ‘k’
 *   In one operation, you can choose any index ‘i’ where ‘0 ≤ i <
 *   nums.length’ and change ‘nums[i]’ to ‘nums[i] + x’ where ‘x’ is an
 *   integer from the range ‘[-k, k]’ . You can apply this operation “at
 *   most once” for each index ‘i’
 *   The “score” of ‘nums’ is the difference between the maximum and
 *   minimum elements in ‘nums’
 *   Return “the minimum “score” of ” ‘nums’ “ after applying the mentioned
 *   operation at most once for each index in it” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 10⁴’
 *   • ‘0 ≤ nums[i] ≤ 10⁴’
 *   • ‘0 ≤ k ≤ 10⁴’
 *
 */

struct q908 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int smallestRangeI(vector<int> &nums, int k) {
      auto mx = *max_element(nums.begin(), nums.end());
      auto mn = *min_element(nums.begin(), nums.end());
      return max(0, mx - mn - k - k);
    }
  };
  class Solution *solution;
};

TEST_F(q908, sample_input01) {
  solution         = new Solution();
  vector<int> nums = {1};
  int         k    = 0;
  int         exp  = 0;
  int         act  = solution->smallestRangeI(nums, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q908, sample_input02) {
  solution         = new Solution();
  vector<int> nums = {0, 10};
  int         k    = 2;
  int         exp  = 6;
  int         act  = solution->smallestRangeI(nums, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q908, sample_input03) {
  solution         = new Solution();
  vector<int> nums = {1, 3, 6};
  int         k    = 3;
  int         exp  = 0;
  int         act  = solution->smallestRangeI(nums, k);
  EXPECT_EQ(act, exp);
  delete solution;
}