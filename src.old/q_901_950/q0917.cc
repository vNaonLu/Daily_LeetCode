#include <gtest/gtest.h>
#include <iostream>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 917.
 *      Reverse Only Letters
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a string ‘s’ , reverse the string according to the following
 *       - All the characters that are not English letters remain in the
 *   same
 *       - All the English letters (lowercase or uppercase) should be
 *   Return ‘s’ “ after reversing it” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s.length ≤ 100’
 *   • ‘s’ consists of characters with ASCII values in the range ‘[33, 122]’ .
 *   • ‘s’ does not contain ‘'\''’ or ‘'\\'’ .
 *
 */

struct q917 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    bool isValidLetter(const char &c) {
      return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z');
    }
   public:
    string reverseOnlyLetters(string s) {
      int l = 0, r = s.size() - 1;
      while (l < r) {
        if (!isValidLetter(s[l])) {
          ++l;
          continue;
        }
        if (!isValidLetter(s[r])) {
          --r;
          continue;
        }
        char t = s[l];
        s[l++] = s[r];
        s[r--] = t;
      }
      return s;
    }
  };

  class Solution *solution;
};

TEST_F(q917, sample_input01) {
  solution = new Solution();
  string s = "ab-cd";
  string exp = "dc-ba";
  EXPECT_EQ(solution->reverseOnlyLetters(s), exp);
  delete solution;
}

TEST_F(q917, sample_input02) {
  solution = new Solution();
  string s = "a-bC-dEf-ghIj";
  string exp = "j-Ih-gfE-dCba";
  EXPECT_EQ(solution->reverseOnlyLetters(s), exp);
  delete solution;
}

TEST_F(q917, sample_input03) {
  solution = new Solution();
  string s = "Test1ng-Leet=code-Q!";
  string exp = "Qedo1ct-eeLg=ntse-T!";
  EXPECT_EQ(solution->reverseOnlyLetters(s), exp);
  delete solution;
}