#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 923.
 *      3Sum With Multiplicity
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an integer array ‘arr’ , and an integer ‘target’ , return the
 *   number of tuples ‘i, j, k’ such that ‘i < j < k’ and ‘arr[i] + arr[j]
 *   + arr[k] = target’
 *   As the answer can be very large, return it “modulo” ‘10⁹ + 7’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘3 ≤ arr.length ≤ 3000’
 *   • ‘0 ≤ arr[i] ≤ 100’
 *   • ‘0 ≤ target ≤ 300’
 *
 */

struct q923 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    constexpr static size_t kMod = 1e9 + 7;

   public:
    int threeSumMulti(vector<int> &arr, int target) {
      vector<long> count(101, 0);
      for (auto &x : arr) {
        ++count[x];
      }

      long res = 0;
      for (int x = 0; x <= 100; ++x) {
        if (count[x] == 0) continue;
        for (int y = x + 1; y <= 100; ++y) {
          if (count[y] == 0) continue;
          int z = target - x - y;
          if (y < z && z <= 100) {
            res += count[x] * count[y] * count[z];
            res %= kMod;
          }
        }
      }

      for (int x = 0; x <= 100; ++x) {
        if (count[x] == 0) continue;
        int z = target - 2 * x;
        if (x < z && z <= 100) {
          res += count[x] * (count[x] - 1) / 2 * count[z];
          res %= kMod;
        }
      }

      for (int x = 0; x <= 100; ++x) {
        if (count[x] == 0) continue;
        if (target % 2 == x % 2) {
          int z = (target - x) / 2;
          if (x < z && z <= 100) {
            res += count[x] * count[z] * (count[z] - 1) / 2;
            res %= kMod;
          }
        }
      }

      if (target % 3 == 0) {
        int x = target / 3;
        if (x >= 0 && x <= 100) {
          res += count[x] * (count[x] - 1) * (count[x] - 2) / 6;
          res %= kMod;
        }
      }
      return (int)res;
    }
  };

  class Solution *solution;
};

TEST_F(q923, sample_input01) {
  solution = new Solution();
  vector<int> arr = {1, 1, 2, 2, 3, 3, 4, 4, 5, 5};
  int target = 8;
  int exp = 20;
  int act = solution->threeSumMulti(arr, target);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q923, sample_input02) {
  solution = new Solution();
  vector<int> arr = {1, 1, 2, 2, 2, 2};
  int target = 5;
  int exp = 12;
  int act = solution->threeSumMulti(arr, target);
  EXPECT_EQ(act, exp);
  delete solution;
}