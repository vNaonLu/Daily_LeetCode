#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 912.
 *      Sort an Array
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an array of integers ‘nums’ , sort the array in ascending order.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 5 × 10⁴’
 *   • ‘-5 × 10⁴ ≤ nums[i] ≤ 5 × 10⁴’
 *
 */

struct q912 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    inline void combine(vector<int> &arr, int l, int r) {
      vector<int> tmp(arr.begin() + l, arr.begin() + r);
      int m = (r - l) / 2;
      int i = 0,
          j = m,
          idx = l;
      while (i != m && j != tmp.size()) {
        if (tmp[i] < tmp[j]) {
          arr[idx++] = tmp[i++];
        } else {
          arr[idx++] = tmp[j++];
        }
      }
      while (i != m) {
        arr[idx++] = tmp[i++];
      }
      while (j != tmp.size()) {
        arr[idx++] = tmp[j++];
      }
    }

    inline void merge_sort(vector<int> &arr, int l, int r) {
      if (l >= r - 1) {
        return;
      }
      int m = l + (r - l) / 2;
      merge_sort(arr, l, m);
      merge_sort(arr, m, r);
      combine(arr, l, r);
    }

   public:
    vector<int> sortArray(vector<int> &nums) {
      merge_sort(nums, 0, nums.size());
      return nums;
    }
  };

  class Solution *solution;
};

TEST_F(q912, sample_input01) {
  solution = new Solution();
  vector<int> nums = {5, 2, 3, 1};
  vector<int> exp = {1, 2, 3, 5};
  vector<int> act = solution->sortArray(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q912, sample_input02) {
  solution = new Solution();
  vector<int> nums = {5, 1, 1, 2, 0, 0};
  vector<int> exp = {0, 0, 1, 1, 2, 5};
  vector<int> act = solution->sortArray(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}