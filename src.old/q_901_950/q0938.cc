#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/treenode.hpp>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 938.
 *      Range Sum of BST
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given the ‘root’ node of a binary search tree and two integers ‘low’
 *   and ‘high’ , return “the sum of values of all nodes with a value in
 *   the “inclusive” range ” ‘[low, high]’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The number of nodes in the tree is in the range ‘[1, 2 × 10⁴]’ .
 *   • ‘1 ≤ Node.val ≤ 10⁵’
 *   • ‘1 ≤ low ≤ high ≤ 10⁵’
 *   • All ‘Node.val’ are “unique” .
 *
 */

struct q938 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int rangeSumBST(TreeNode* root, int low, int high) {
      if (root == nullptr) return 0;
      if (root->val < low)        return rangeSumBST(root->right, low, high);
      else if (root->val > high)  return rangeSumBST(root->left, low, high);
      else if (root->val == high) return root->val + rangeSumBST(root->left, low, high);
      else if (root->val == low)  return root->val + rangeSumBST(root->right, low, high);
      else return root->val + rangeSumBST(root->left, low, high) + rangeSumBST(root->right, low, high);
    }
  };

  class Solution *solution;
};

TEST_F(q938, sample_input01) {
  solution = new Solution();
  TreeNode* root = TreeNode::generate({10, 5, 15, 3, 7, NULL_TREENODE, 18});
  int low = 7;
  int high = 15;
  int exp = 32;
  EXPECT_EQ(solution->rangeSumBST(root, low, high), exp);
  delete solution;
}

TEST_F(q938, sample_input02) {
  solution = new Solution();
  TreeNode* root = TreeNode::generate({10, 5, 15, 3, 7, 13, 18, 1, NULL_TREENODE, 6});
  int low = 6;
  int high = 10;
  int exp = 23;
  EXPECT_EQ(solution->rangeSumBST(root, low, high), exp);
  delete solution;
}