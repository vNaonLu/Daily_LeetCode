#include <gtest/gtest.h>
#include <iostream>
#include <set>
#include <unordered_set>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 2215.
 *       Find the Difference of Two Arrays
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given two “0-indexed” integer arrays ‘nums1’ and ‘nums2’ , return “a
 *   list” ‘answer’ “of size” ‘2’ “where:”
 *       -  ‘answer[0]’ “is a list of all “distinct” integers in” ‘nums1’
 *   “which are “not” present in” ‘nums2’ “.”
 *       -  ‘answer[1]’ “is a list of all “distinct” integers in” ‘nums2’
 *   “which are “not” present in” ‘nums1’
 *    “Note” that the integers in the lists may be returned in “any” order.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums1.length, nums2.length ≤ 1000’
 *   • ‘-1000 ≤ nums1[i], nums2[i] ≤ 1000’
 *
 */

struct q2215 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    vector<vector<int>> findDifference(vector<int> &nums1, vector<int> &nums2) {
      unordered_set<int> occ1(nums1.begin(), nums1.end());
      unordered_set<int> occ2(nums2.begin(), nums2.end());
      vector<set<int>>   res(2);
      for (auto x : nums1) {
        if (!occ2.count(x)) {
          res[0].emplace(x);
        }
      }
      for (auto x : nums2) {
        if (!occ1.count(x)) {
          res[1].emplace(x);
        }
      }
      return vector<vector<int>>{vector<int>(res[0].begin(), res[0].end()),
                                 vector<int>(res[1].begin(), res[1].end())};
    }
  };

  class Solution *solution;
};

TEST_F(q2215, sample_input01) {
  solution                  = new Solution();
  vector<int>         nums1 = {1, 2, 3};
  vector<int>         nums2 = {2, 4, 6};
  vector<vector<int>> exp   = {
      {1, 3},
      {4, 6}
  };
  vector<vector<int>> act = solution->findDifference(nums1, nums2);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2215, sample_input02) {
  solution                  = new Solution();
  vector<int>         nums1 = {1, 2, 3, 3};
  vector<int>         nums2 = {1, 1, 2, 2};
  vector<vector<int>> exp   = {{3}, {}};
  vector<vector<int>> act   = solution->findDifference(nums1, nums2);
  EXPECT_EQ(act, exp);
  delete solution;
}
