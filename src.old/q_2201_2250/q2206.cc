#include <gtest/gtest.h>
#include <iostream>
#include <unordered_map>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 2206.
 *       Divide Array Into Equal Pairs
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an integer array ‘nums’ consisting of ‘2 × n’
 *   You need to divide ‘nums’ into ‘n’ pairs such
 *       - Each element belongs to “exactly one”
 *       - The elements present in a pair are “equal”
 *   Return ‘true’ “if nums can be divided into” ‘n’ “pairs, otherwise
 *   return” ‘false’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘nums.length = 2 × n’
 *   • ‘1 ≤ n ≤ 500’
 *   • ‘1 ≤ nums[i] ≤ 500’
 *
 */

struct q2206 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    bool divideArray(vector<int> &nums) {
      unordered_map<int, int> freq;
      for (auto x : nums) {
        ++freq[x];
      }

      for (auto [x, cnt] : freq) {
        if (cnt & 1) {
          return false;
        }
      }

      return true;
    }
  };

  class Solution *solution;
};

TEST_F(q2206, sample_input01) {
  solution         = new Solution();
  vector<int> nums = {3, 2, 3, 2, 2, 2};
  bool        exp  = true;
  bool        act  = solution->divideArray(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2206, sample_input02) {
  solution         = new Solution();
  vector<int> nums = {1, 2, 3, 4};
  bool        exp  = false;
  bool        act  = solution->divideArray(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}
