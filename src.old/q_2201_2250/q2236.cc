#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/treenode.hpp>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 2236.
 *       Root Equals Sum of Children
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given the ‘root’ of a “binary tree” that consists of exactly
 *   ‘3’ nodes: the root, its left child, and its right
 *   Return ‘true’ “if the value of the root is equal to the “sum” of the
 *   values of its two children, or ” ‘false’ “ otherwise” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The tree consists only of the root, its left child, and its right child.
 *   • ‘-100 ≤ Node.val ≤ 100’
 *
 */

struct q2236 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    bool checkTree(TreeNode *root) {
      return root->val == root->left->val + root->right->val;
    }
  };

  class Solution *solution;
};

TEST_F(q2236, sample_input01) {
  solution       = new Solution();
  TreeNode *root = TreeNode::generate({10, 4, 6});
  bool      exp  = true;
  bool      act  = solution->checkTree(root);
  EXPECT_EQ(act, exp);
  TreeNode::release(root);
  delete solution;
}

TEST_F(q2236, sample_input02) {
  solution       = new Solution();
  TreeNode *root = TreeNode::generate({5, 3, 1});
  bool      exp  = false;
  bool      act  = solution->checkTree(root);
  EXPECT_EQ(act, exp);
  TreeNode::release(root);
  delete solution;
}