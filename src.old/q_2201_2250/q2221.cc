#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 2221.
 *       Find Triangular Sum of an Array
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given a “0-indexed” integer array ‘nums’ , where ‘nums[i]’ is
 *   a digit between ‘0’ and ‘9’ ( “inclusive”
 *   The “triangular sum” of ‘nums’ is the value of the only element
 *   present in ‘nums’ after the following process
 *       1. Let ‘nums’ comprise of ‘n’ elements. If ‘n = 1’ , “end” the
 *   process. Otherwise, “create” a new “0-indexed” integer array ‘newNums’
 *   of length ‘n - 1’
 *       2. For each index ‘i’ , where ‘0 ≤ i <n - 1’ , “assign” the value
 *   of ‘newNums[i]’ as ‘(nums[i] + nums[i+1]) % 10’ , where ‘%’ denotes
 *   modulo
 *       3.  “Replace” the array ‘nums’ with ‘newNums’
 *       4.  “Repeat” the entire process starting from step
 *   Return “the triangular sum of” ‘nums’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 1000’
 *   • ‘0 ≤ nums[i] ≤ 9’
 *
 */

struct q2221 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int triangularSum(vector<int> &nums) {
      auto end = nums.end();

      while (nums.begin() + 1 != end) {
        auto beg = nums.begin();
        while (beg + 1 != end) {
          *beg += *(beg + 1);
          *beg %= 10;
          ++beg;
        }
        --end;
      }

      return nums.front();
    }
  };

  class Solution *solution;
};

TEST_F(q2221, sample_input01) {
  solution = new Solution();
  vector<int> nums = {1, 2, 3, 4, 5};
  int exp = 8;
  int act = solution->triangularSum(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2221, sample_input02) {
  solution = new Solution();
  vector<int> nums = {5};
  int exp = 5;
  int act = solution->triangularSum(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}