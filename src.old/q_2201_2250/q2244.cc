#include <gtest/gtest.h>
#include <unordered_map>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 2244.
 *       Minimum Rounds to Complete All Tasks
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given a “0-indexed” integer array ‘tasks’ , where ‘tasks[i]’
 *   represents the difficulty level of a task. In each round, you can
 *   complete either 2 or 3 tasks of the “same difficulty level”
 *   Return “the “minimum” rounds required to complete all the tasks, or ”
 *   ‘-1’ “ if it is not possible to complete all the tasks.” 
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ tasks.length ≤ 10⁵’
 *   • ‘1 ≤ tasks[i] ≤ 10⁹’
 *
 */

struct q2244 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int minimumRounds(vector<int>& tasks) {
      int res = 0;
      unordered_map<int, int> freq;
      for (auto x : tasks) {
        ++freq[x];
      }
      for (auto [x, cnt] : freq) {
        auto k = cnt;
        if (k == 1) {
          return -1;
        }
        if (k % 3 == 0) {
          res += k/3;
        } else {
          res += (k/3) + 1;
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q2244, sample_input01) {
  solution = new Solution();
  vector<int> tasks = {2, 2, 3, 3, 2, 4, 4, 4, 4, 4};
  int exp = 4;
  int act = solution->minimumRounds(tasks);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2244, sample_input02) {
  solution = new Solution();
  vector<int> tasks = {2, 3, 3};
  int exp = -1;
  int act = solution->minimumRounds(tasks);
  EXPECT_EQ(act, exp);
  delete solution;
}
