#include <gtest/gtest.h>
#include <iostream>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 91.
 *     Decode Ways
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   A message containing letters from ‘A-Z’ can be “encoded” into numbers
 *   using the following
 *   'A' ->
 *   'B' ->
 *   'Z' ->
 *   To “decode” an encoded message, all the digits must be grouped then
 *   mapped back into letters using the reverse of the mapping above (there
 *   may be multiple ways). For example, ‘'11106'’ can be mapped
 *       -  ‘'AAJF'’ with the grouping ‘(1 1 10 6)’
 *       -  ‘'KJF'’ with the grouping ‘(11 10 6)’
 *   Note that the grouping ‘(1 11 06)’ is invalid because ‘'06'’ cannot be
 *   mapped into ‘'F'’ since ‘'6'’ is different from ‘'06'’
 *   Given a string ‘s’ containing only digits, return “the “number” of
 *   ways to “decode” it”
 *   The answer is guaranteed to fit in a “32-bit” integer.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s.length ≤ 100’
 *   • ‘s’ contains only digits and may contain leading zero(s).
 *
 */

struct q91 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int numDecodings(string s) {
      vector<int> dp(s.size() + 1, 0);
      dp[0] = 1;
      dp[1] = s[0] == '0' ? 0 : 1;
      for (int i = 2; i <= s.size(); ++i){
        dp[i] = s[i - 1] == '0' ? 0 : dp[i - 1];
        if(s[i-2] == '1' || (s[i-2] == '2' && s[i-1] <= '6'))
          dp[i] += dp[i - 2];
      }
      return dp.back();
    }
  };

  class Solution *solution;
};

TEST_F(q91, sample_input01) {
  solution = new Solution();
  string s = "12";
  int exp = 2;
  EXPECT_EQ(solution->numDecodings(s), exp);
  delete solution;
}

TEST_F(q91, sample_input02) {
  solution = new Solution();
  string s = "226";
  int exp = 3;
  EXPECT_EQ(solution->numDecodings(s), exp);
  delete solution;
}

TEST_F(q91, sample_input03) {
  solution = new Solution();
  string s = "0";
  int exp = 0;
  EXPECT_EQ(solution->numDecodings(s), exp);
  delete solution;
}

TEST_F(q91, sample_input04) {
  solution = new Solution();
  string s = "06";
  int exp = 0;
  EXPECT_EQ(solution->numDecodings(s), exp);
  delete solution;
}