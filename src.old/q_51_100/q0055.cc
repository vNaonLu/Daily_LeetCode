#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 55.
 *     Jump Game
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an integer array ‘nums’ . You are initially positioned
 *   at the array's “first index” , and each element in the array
 *   represents your maximum jump length at that
 *   Return ‘true’ “ if you can reach the last index, or ” ‘false’ “
 *   otherwise” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 10⁴’
 *   • ‘0 ≤ nums[i] ≤ 10⁵’
 *
 */

struct q55 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    bool canJump(vector<int>& nums) {
      int current_position = 0;
      for (int i = 0; i < nums.size() && current_position < nums.size(); ++i) {
        if (current_position < i) return false;
        current_position = max(current_position,
                               nums[i] + i);
      }
      return true;
    }
  };

  class Solution *solution;
};

TEST_F(q55, sample_input01) {
  solution = new Solution();
  vector<int> nums = {2, 3, 1, 1, 4};
  bool exp = true;
  EXPECT_EQ(solution->canJump(nums), exp);
  delete solution;
}

TEST_F(q55, sample_input02) {
  solution = new Solution();
  vector<int> nums = {3, 2, 1, 0, 4};
  bool exp = false;
  EXPECT_EQ(solution->canJump(nums), exp);
  delete solution;
}