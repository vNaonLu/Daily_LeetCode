#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 75.
 *     Sort Colors
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an array ‘nums’ with ‘n’ objects colored red, white, or blue,
 *   sort them “<a href="https://en.wikipedia.org/wiki/In-place_algorithm"
 *   target="_blank">in-place</a> ” so that objects of the same color are
 *   adjacent, with the colors in the order red, white, and
 *   We will use the integers ‘0’ , ‘1’ , and ‘2’ to represent the color
 *   red, white, and blue,
 *   You must solve this problem without using the library's sort function.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘n = nums.length’
 *   • ‘1 ≤ n ≤ 300’
 *   • ‘nums[i]’ is ‘0’ , ‘1’ , or ‘2’ .
 *
 */

struct q75 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    void sortColors(vector<int>& nums) {
      vector<int> count(3, 0);
      for (const auto& x : nums) ++count[x];
      fill(nums.begin(), nums.begin() + count[0], 0);
      fill(nums.begin() + count[0], nums.begin() + count[0] + count[1], 1);
      fill(nums.begin() + count[0] + count[1], nums.end(), 2);
    }
  };

  class Solution *solution;
};

TEST_F(q75, sample_input01) {
  solution = new Solution();
  vector<int> nums = {2, 0, 2, 1, 1, 0};
  vector<int> exp = {0, 0, 1, 1, 2, 2};
  solution->sortColors(nums);
  // Assume the first argument is answer.
  EXPECT_EQ(nums, exp);
  delete solution;
}

TEST_F(q75, sample_input02) {
  solution = new Solution();
  vector<int> nums = {2, 0, 1};
  vector<int> exp = {0, 1, 2};
  solution->sortColors(nums);
  // Assume the first argument is answer.
  EXPECT_EQ(nums, exp);
  delete solution;
}

TEST_F(q75, sample_input03) {
  solution = new Solution();
  vector<int> nums = {0};
  vector<int> exp = {0};
  solution->sortColors(nums);
  // Assume the first argument is answer.
  EXPECT_EQ(nums, exp);
  delete solution;
}

TEST_F(q75, sample_input04) {
  solution = new Solution();
  vector<int> nums = {1};
  vector<int> exp = {1};
  solution->sortColors(nums);
  // Assume the first argument is answer.
  EXPECT_EQ(nums, exp);
  delete solution;
}