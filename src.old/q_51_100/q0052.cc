#include <gtest/gtest.h>
#include <iostream>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 52.
 *     N-Queens II
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   The “n-queens” puzzle is the problem of placing ‘n’ queens on an ‘n x
 *   n’ chessboard such that no two queens attack each
 *   Given an integer ‘n’ , return “the number of distinct solutions to the
 *   “n-queens puzzle” ” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ n ≤ 9’
 *
 */

struct q52 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    int         n, total;
    mutable int res;

    void solver(int col, int first, int second) const {
      if (col == total) {
        ++res;
        return;
      }

      int can = (~(col | first | second)) & total;
      while (can) {
        int t = can & (-can);
        solver(col | t, (first | t) >> 1, (second | t) << 1 & total);
        can &= ~t;
      }
    }

   public:
    int totalNQueens(int n) {
      this->n = n;
      total = (1 << n) - 1;
      res = 0;
      solver(0, 0, 0);
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q52, sample_input01) {
  solution = new Solution();
  int n = 4;
  int exp = 2;
  int act = solution->totalNQueens(n);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q52, sample_input02) {
  solution = new Solution();
  int n = 1;
  int exp = 1;
  int act = solution->totalNQueens(n);
  EXPECT_EQ(act, exp);
  delete solution;
}