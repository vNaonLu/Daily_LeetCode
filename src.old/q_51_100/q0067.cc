#include <gtest/gtest.h>
#include <iostream>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 67.
 *     Add Binary
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given two binary strings ‘a’ and ‘b’ , return “their sum as a binary
 *   string” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ a.length, b.length ≤ 10⁴’
 *   • ‘a’ and ‘b’ consistonly of ‘'0'’ or ‘'1'’ characters.
 *   • Each string does not contain leading zeros except for the zero itself.
 *
 */

struct q67 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    string addBinary(string a, string b) {
      int i = a.length() - 1;
      int j = b.length() - 1;
      string res;
      int carry = 0;

      while (i >= 0 || j >= 0 || carry) {
        if (i >= 0) {
          carry += a[i] - '0';
          i--;
        }
        if (j >= 0) {
          carry += b[j] - '0';
          j--;
        }

        res += (carry % 2 + '0');
        carry = carry / 2;
      }
      reverse(res.begin(), res.end());
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q67, sample_input01) {
  solution = new Solution();
  string a = "11";
  string b = "1";
  string exp = "100";
  string act = solution->addBinary(a, b);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q67, sample_input02) {
  solution = new Solution();
  string a = "1010";
  string b = "1011";
  string exp = "10101";
  string act = solution->addBinary(a, b);
  EXPECT_EQ(act, exp);
  delete solution;
}