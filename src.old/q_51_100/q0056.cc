#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 56.
 *     Merge Intervals
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an arrayof ‘intervals’ where ‘intervals[i] = [startᵢ, endᵢ]’ ,
 *   merge all overlapping intervals, and return “an array of the
 *   non-overlapping intervals that cover all the intervals in the input” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ intervals.length ≤ 10⁴’
 *   • ‘intervals[i].length = 2’
 *   • ‘0 ≤ startᵢ ≤ endᵢ ≤ 10⁴’
 *
 */

struct q56 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
      if (intervals.size() == 0) return vector<vector<int>>();
      sort(intervals.begin(), intervals.end());
      vector<vector<int>> ret;
      vector<int> cur;
      for (int i = 0; i < intervals.size(); i++) {
        if (cur.empty()) {
          cur = intervals[i];
        } else {
          if (cur[1] >= intervals[i][0]) {
            cur[1] = max(intervals[i][1], cur[1]);
          } else {
            ret.push_back(cur);
            cur = intervals[i];
          }
        }
      }
      if (!cur.empty()) ret.push_back(cur);
      return ret;
    }
  };

  class Solution *solution;
};

TEST_F(q56, sample_input01) {
  solution = new Solution();
  vector<vector<int>> intervals = {{1, 3}, {2, 6}, {8, 10}, {15, 18}};
  vector<vector<int>> exp = {{1, 6}, {8, 10}, {15, 18}};
  EXPECT_EQ(solution->merge(intervals), exp);
  delete solution;
}

TEST_F(q56, sample_input02) {
  solution = new Solution();
  vector<vector<int>> intervals = {{1, 4}, {4, 5}};
  vector<vector<int>> exp = {{1, 5}};
  EXPECT_EQ(solution->merge(intervals), exp);
  delete solution;
}