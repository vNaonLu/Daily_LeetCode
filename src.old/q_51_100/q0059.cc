#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 59.
 *     Spiral Matrix II
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a positive integer ‘n’ , generate an ‘n x n’  ‘matrix’ filled
 *   with elements from ‘1’ to ‘n²’ in spiral order.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ n ≤ 20’
 *
 */

struct q59 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    vector<vector<int>> generateMatrix(int n) {
      vector<vector<int>> res(n, vector<int>(n, 0));
      int cnt = 0;
      for (int i = 0; i < (n + 1) / 2; ++i) {
        for (int j = i; j < n - i; ++j)
          res[i][j] = ++cnt;
        for (int j = i + 1; j < n - i; ++j)
          res[j][n - i - 1] = ++cnt;
        for (int j = n - i - 2; j >= i; --j)
          res[n - i - 1][j] = ++cnt;
        for (int j = n - i - 2; j > i; --j)
          res[j][i] = ++cnt;
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q59, sample_input01) {
  solution = new Solution();
  int n = 3;
  vector<vector<int>> exp = {{1, 2, 3}, {8, 9, 4}, {7, 6, 5}};
  EXPECT_EQ(solution->generateMatrix(n), exp);
  delete solution;
}

TEST_F(q59, sample_input02) {
  solution = new Solution();
  int n = 1;
  vector<vector<int>> exp = {{1}};
  EXPECT_EQ(solution->generateMatrix(n), exp);
  delete solution;
}