#include <gtest/gtest.h>
#include <iostream>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 58.
 *     Length of Last Word
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a string ‘s’ consistingof some words separated by some number of
 *   spaces, return “the length of the “last” word in the string.”
 *   A “word” is a maximal substring consisting of non-space characters
 *   only.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s.length ≤ 10⁴’
 *   • ‘s’ consists of only English letters and spaces ‘' '’ .
 *   • There will be at least one word in ‘s’ .
 *
 */

struct q58 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int lengthOfLastWord(string s) {
      int res = 0;
      for (int i = 0; i < s.size(); ++i) {
        if (s[i] != ' ' && (i == 0 || s[i - 1] == ' ')) res = 1;
        else if (s[i] != ' ') ++res;
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q58, sample_input01) {
  solution = new Solution();
  string s = "Hello World";
  int exp = 5;
  int act = solution->lengthOfLastWord(s);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q58, sample_input02) {
  solution = new Solution();
  string s = "   fly me   to   the moon  ";
  int exp = 4;
  int act = solution->lengthOfLastWord(s);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q58, sample_input03) {
  solution = new Solution();
  string s = "luffy is still joyboy";
  int exp = 6;
  int act = solution->lengthOfLastWord(s);
  EXPECT_EQ(act, exp);
  delete solution;
}