#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 53.
 *     Maximum Subarray
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an integer array ‘nums’ , find the contiguous subarray
 *   (containing at least one number) which has the largest sum and return
 *   “its sum”
 *   A “subarray” is a “contiguous” part of an array.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 10⁵’
 *   • ‘-10⁴ ≤ nums[i] ≤ 10⁴’
 *
 */

struct q53 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int maxSubArray(vector<int>& nums) {
      int res = nums[0], mx = nums[0];
      for (int i = 1; i < nums.size(); ++i) {
        mx = max(nums[i], nums[i] + mx);
        res = max(res, mx);
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q53, sample_input01) {
  solution = new Solution();
  vector<int> nums = {-2, 1, -3, 4, -1, 2, 1, -5, 4};
  int exp = 6;
  EXPECT_EQ(solution->maxSubArray(nums), exp);
  delete solution;
}

TEST_F(q53, sample_input02) {
  solution = new Solution();
  vector<int> nums = {1};
  int exp = 1;
  EXPECT_EQ(solution->maxSubArray(nums), exp);
  delete solution;
}

TEST_F(q53, sample_input03) {
  solution = new Solution();
  vector<int> nums = {5, 4, -1, 7, 8};
  int exp = 23;
  EXPECT_EQ(solution->maxSubArray(nums), exp);
  delete solution;
}