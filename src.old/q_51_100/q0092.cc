#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/listnode.hpp>
#include <stack>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 92.
 *     Reverse Linked List II
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given the ‘head’ of a singly linked list and two integers ‘left’ and
 *   ‘right’ where ‘left ≤ right’ , reverse the nodes of the list from
 *   position ‘left’ to position ‘right’ , and return “the reversed list” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The number of nodes in the list is ‘n’ .
 *   • ‘1 ≤ n ≤ 500’
 *   • ‘-500 ≤ Node.val ≤ 500’
 *   • ‘1 ≤ left ≤ right ≤ n’
 *
 */

struct q92 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    ListNode* reverseBetween(ListNode* head, int left, int right) {
      stack<ListNode*> stk;
      ListNode dummy(0, head),
          *p = &dummy;

      int idx = 1;
      while (idx <= right) {
        if (idx < left) p = p->next;
        else            stk.emplace(head);
        ++idx;
        head = head->next;
      }

      ListNode* R = stk.top()->next;
      while (!stk.empty()) {
        p->next = stk.top();
        p = p->next;
        stk.pop();
      }
      p->next = R;

      return dummy.next;
    }
  };

  class Solution *solution;
};

TEST_F(q92, sample_input01) {
  solution = new Solution();
  ListNode* head = ListNode::generate({1, 2, 3, 4, 5});
  int left = 2;
  int right = 4;
  ListNode* exp = ListNode::generate({1, 4, 3, 2, 5});
  ListNode* act = solution->reverseBetween(head, left, right);
  EXPECT_LISTNODE_EQ(act, exp);
  ListNode::release(head, exp, act);
  delete solution;
}

TEST_F(q92, sample_input02) {
  solution = new Solution();
  ListNode* head = ListNode::generate({5});
  int left = 1;
  int right = 1;
  ListNode* exp = ListNode::generate({5});
  ListNode* act = solution->reverseBetween(head, left, right);
  EXPECT_LISTNODE_EQ(act, exp);
  ListNode::release(head, exp, act);
  delete solution;
}