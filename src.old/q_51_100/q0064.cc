#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 64.
 *     Minimum Path Sum
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a ‘m x n’  ‘grid’ filled with non-negative numbers, find a path
 *   from top left to bottom right, which minimizes the sum of all numbers
 *   along its
 *    “Note:” You can only move either down or right at any point in time.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘m = grid.length’
 *   • ‘n = grid[i].length’
 *   • ‘1 ≤ m, n ≤ 200’
 *   • ‘0 ≤ grid[i][j] ≤ 100’
 *
 */

struct q64 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int minPathSum(vector<vector<int>>& grid) {
      int m = grid.size(), n = grid[0].size();
      for (int i = m - 2; i >= 0; --i)
        grid[i][n - 1] += grid[i + 1].back();
      for (int i = n - 2; i >= 0; --i)
        grid[m - 1][i] += grid[m - 1][i + 1];
      for (int i = m - 2; i >= 0; --i) {
        for (int j = n - 2; j >= 0; --j) {
          grid[i][j] += min(grid[i + 1][j], grid[i][j + 1]);
        }
      }
      return grid.front().front();
    }
  };

  class Solution *solution;
};

TEST_F(q64, sample_input01) {
  solution = new Solution();
  vector<vector<int>> grid = {{1, 3, 1}, {1, 5, 1}, {4, 2, 1}};
  int exp = 7;
  EXPECT_EQ(solution->minPathSum(grid), exp);
  delete solution;
}

TEST_F(q64, sample_input02) {
  solution = new Solution();
  vector<vector<int>> grid = {{1, 2, 3}, {4, 5, 6}};
  int exp = 12;
  EXPECT_EQ(solution->minPathSum(grid), exp);
  delete solution;
}