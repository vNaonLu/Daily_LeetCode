#include <gtest/gtest.h>
#include <cmath>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1390.
 *       Four Divisors
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an integer array ‘nums’ , return “the sum of divisors of the
 *   integers in that array that have exactly four divisors” . If there is
 *   no such integer in the array, return ‘0’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 10⁴’
 *   • ‘1 ≤ nums[i] ≤ 10⁵’
 *
 */

struct q1390 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    int fillSum(int x) {
      int count = 0, local = 0;
      for (int i = 1; i <= sqrt(x); ++i) {
        if (x % i == 0) {
          ++count;
          local += i;
          if (x / i != i) {
            ++count;
            local += x / i;
          }
        }
      }
      return count == 4 ? local : 0;
    }

   public:
    int sumFourDivisors(vector<int> &nums) {
      vector<int> table(*max_element(nums.begin(), nums.end()) + 1, -1);
      int res = 0;
      for (const auto &x : nums) {
        if (table[x] == -1) {
          table[x] = fillSum(x);
        }
        res += table[x];
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1390, sample_input01) {
  solution = new Solution();
  vector<int> nums = {21, 4, 7};
  int exp = 32;
  int act = solution->sumFourDivisors(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1390, sample_input02) {
  solution = new Solution();
  vector<int> nums = {21, 21};
  int exp = 64;
  int act = solution->sumFourDivisors(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1390, sample_input03) {
  solution = new Solution();
  vector<int> nums = {1, 2, 3, 4, 5};
  int exp = 0;
  int act = solution->sumFourDivisors(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}