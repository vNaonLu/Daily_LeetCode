#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/treenode.hpp>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 530.
 *      Minimum Absolute Difference in BST
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given the ‘root’ of a Binary Search Tree (BST), return “the minimum
 *   absolute difference between the values of any two different nodes in
 *   the tree” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The number of nodes in the tree is in the range ‘[2, 10⁴]’ .
 *   • ‘0 ≤ Node.val ≤ 10⁵’
 *
 */

struct q530 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  private:
    TreeNode *prev = nullptr;

    void solve(TreeNode *p, int &res) {
      if (nullptr != p->left) {
        solve(p->left, res);
      }

      if (nullptr != prev) {
        res = min(res, abs(prev->val - p->val));
      }
      prev = p;

      if (nullptr != p->right) {
        solve(p->right, res);
      }
    }

  public:
    int getMinimumDifference(TreeNode *root) {
      auto res = numeric_limits<int>::max();
      prev     = nullptr;
      solve(root, res);
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q530, sample_input01) {
  solution       = new Solution();
  TreeNode *root = TreeNode::generate({4, 2, 6, 1, 3});
  int       exp  = 1;
  int       act  = solution->getMinimumDifference(root);
  EXPECT_EQ(act, exp);
  TreeNode::release(root);
  delete solution;
}

TEST_F(q530, sample_input02) {
  solution = new Solution();
  TreeNode *root =
      TreeNode::generate({1, 0, 48, NULL_TREENODE, NULL_TREENODE, 12, 49});
  int exp = 1;
  int act = solution->getMinimumDifference(root);
  EXPECT_EQ(act, exp);
  TreeNode::release(root);
  delete solution;
}