#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/treenode.hpp>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 515.
 *      Find Largest Value in Each Tree Row
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given the ‘root’ of a binary tree, return “an array of the largest
 *   value in each row” of the tree “(0-indexed)” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The number of nodes in the tree will be in the range ‘[0, 10⁴]’ .
 *   • ‘-2³¹ ≤ Node.val ≤ 2³¹ - 1’
 *
 */

struct q515 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    void helper(TreeNode* p, vector<int>& v, int curr) {
      if (nullptr == p) return;
      if (curr >= v.size()) v.resize(curr + 1, numeric_limits<int>::min());
      v[curr] = max(v[curr], p->val);
      helper(p->left, v, curr + 1);
      helper(p->right, v, curr + 1);
    }

   public:
    vector<int> largestValues(TreeNode* root) {
      vector<int> res;
      helper(root, res, 0);
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q515, sample_input01) {
  solution = new Solution();
  TreeNode* root = TreeNode::generate({1, 3, 2, 5, 3, NULL_TREENODE, 9});
  vector<int> exp = {1, 3, 9};
  vector<int> act = solution->largestValues(root);
  EXPECT_EQ(act, exp);
  TreeNode::release(root);
  delete solution;
}

TEST_F(q515, sample_input02) {
  solution = new Solution();
  TreeNode* root = TreeNode::generate({1, 2, 3});
  vector<int> exp = {1, 3};
  vector<int> act = solution->largestValues(root);
  EXPECT_EQ(act, exp);
  TreeNode::release(root);
  delete solution;
}