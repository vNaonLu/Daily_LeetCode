#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 542.
 *      01 Matrix
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an ‘m x n’ binary matrix ‘mat’ , return “the distance of the
 *   nearest ” ‘0’ “ for each cell”
 *   The distance between two adjacent cells is ‘1’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘m = mat.length’
 *   • ‘n = mat[i].length’
 *   • ‘1 ≤ m, n ≤ 10⁴’
 *   • ‘1 ≤ m × n ≤ 10⁴’
 *   • ‘mat[i][j]’ is either ‘0’ or ‘1’ .
 *   • There is at least one ‘0’ in ‘mat’ .
 *
 */

struct q542 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {
      int m = mat.size(), n = mat[0].size();
      vector<vector<int>> res(m, vector<int>(n, n * m));
      for (int i = 0; i < m; ++i) {
        for (int j = -0; j < n; ++j) {
          if (mat[i][j] == 0) {
            res[i][j] = 0;
          } else {
            if (i - 1 >= 0) res[i][j] = min(res[i][j], res[i - 1][j] + 1);
            if (j - 1 >= 0) res[i][j] = min(res[i][j], res[i][j - 1] + 1);
          }
        }
      }
      for (int i = m - 1; i > -1; --i) {
        for (int j = n - 1; j > -1; --j) {
          if (mat[i][j] == 0) {
            res[i][j] = 0;
          } else {
            if (i + 1 < m) res[i][j] = min(res[i][j], res[i + 1][j] + 1);
            if (j + 1 < n) res[i][j] = min(res[i][j], res[i][j + 1] + 1);
          }
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q542, sample_input01) {
  solution = new Solution();
  vector<vector<int>> mat = {{0, 0, 0}, {0, 1, 0}, {0, 0, 0}};
  vector<vector<int>> exp = {{0, 0, 0}, {0, 1, 0}, {0, 0, 0}};
  EXPECT_EQ(solution->updateMatrix(mat), exp);
  delete solution;
}

TEST_F(q542, sample_input02) {
  solution = new Solution();
  vector<vector<int>> mat = {{0, 0, 0}, {0, 1, 0}, {1, 1, 1}};
  vector<vector<int>> exp = {{0, 0, 0}, {0, 1, 0}, {1, 2, 1}};
  EXPECT_EQ(solution->updateMatrix(mat), exp);
  delete solution;
}