#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 525.
 *      Contiguous Array
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a binary array ‘nums’ , return “the maximum length of a
 *   contiguous subarray with an equal number of ” ‘0’ “ and ” ‘1’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 10⁵’
 *   • ‘nums[i]’ is either ‘0’ or ‘1’ .
 *
 */

struct q525 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int findMaxLength(vector<int>& nums) {
      vector<int> vs(2 * nums.size() + 1, -2);
      vs[nums.size()] = -1;
      int res = 0,
          cnt = 0;
      for (int i = 0; i < nums.size(); ++i) {
        cnt += nums[i] == 0 ? -1 : 1;
        if (vs[cnt + nums.size()] >= -1) {
          res = max(res, i - vs[cnt + nums.size()]);
        } else {
          vs[cnt + nums.size()] = i;
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q525, sample_input01) {
  solution = new Solution();
  vector<int> nums = {0, 1};
  int exp = 2;
  int act = solution->findMaxLength(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q525, sample_input02) {
  solution = new Solution();
  vector<int> nums = {0, 1, 0};
  int exp = 2;
  int act = solution->findMaxLength(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}