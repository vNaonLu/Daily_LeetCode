#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 507.
 *      Perfect Number
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   A <a href="https://en.wikipedia.org/wiki/Perfect_number"
 *   target="_blank"> “perfect number” </a> is a “positive integer” that is
 *   equal to the sum of its “positive divisors” , excluding the number
 *   itself. A “divisor” of an integer ‘x’ is an integer that can divide
 *   ‘x’
 *   Given an integer ‘n’ , return ‘true’ “ if ” ‘n’ “ is a perfect number,
 *   otherwise return ” ‘false’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ num ≤ 10⁸’
 *
 */

struct q507 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    bool checkPerfectNumber(int num) {
      if (num == 1) return false;
      int sum = 1;
      for (int i = 2; i * i <= num; i++)
        if (num % i == 0)
          sum += i + num / i;
      return sum == num;
    }
  };

  class Solution *solution;
};

TEST_F(q507, sample_input01) {
  solution = new Solution();
  int num = 28;
  bool exp = true;
  bool act = solution->checkPerfectNumber(num);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q507, sample_input02) {
  solution = new Solution();
  int num = 7;
  bool exp = false;
  bool act = solution->checkPerfectNumber(num);
  EXPECT_EQ(act, exp);
  delete solution;
}