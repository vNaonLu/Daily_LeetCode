#include <gtest/gtest.h>
#include <iostream>
#include <random>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 528.
 *      Random Pick with Weight
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given a “0-indexed” array of positive integers ‘w’ where
 *   ‘w[i]’ describes the “weight” of the ‘iᵗʰ’
 *   You need to implement the function ‘pickIndex()’ , which “randomly”
 *   picks an index in the range ‘[0, w.length - 1]’ ( “inclusive” ) and
 *   returns it. The “probability” of picking an index ‘i’ is ‘w[i] /
 *   sum(w)’
 *       - For example, if ‘w = [1, 3]’ , the probability of picking index
 *   ‘0’ is ‘1 / (1 + 3) = 0.25’ (i.e., ‘25%’ ), and the probability of
 *   picking index ‘1’ is ‘3 / (1 + 3) = 0.75’ (i.e., ‘75%’ ).
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ w.length ≤ 10⁴’
 *   • ‘1 ≤ w[i] ≤ 10⁵’
 *   • ‘pickIndex’ will be called at most ‘10⁴’ times.
 *
 */

struct q528 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  private:
    mt19937_64 rng;
    uniform_int_distribution<uint32_t> U_dist;
    vector<int> prefix;

  public:
    Solution(vector<int> &w) : rng{random_device{}()}, prefix{w} {
      for (auto it = prefix.begin() + 1; it != prefix.end(); ++it) {
        *it += *(it - 1);
      }

      U_dist.param(uniform_int_distribution<uint32_t>::param_type(0, prefix.back() - 1));
    }

    int pickIndex() {
      auto t = U_dist(rng);

      return distance(prefix.begin(), upper_bound(prefix.begin(), prefix.end(), t));
    }
  };

  class Solution *solution;
};

TEST_F(q528, NOT_IMPLEMENT) {
  EXPECT_TRUE("NOT IMPLEMENT");
}