#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 11.
 *     Container With Most Water
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given ‘n’ non-negative integers ‘a₁, a₂, ..., aₙ’ ⎽( ), where each
 *   represents a point at coordinate ‘(i, aᵢ)’ . ‘n’ vertical lines are
 *   drawn such that the two endpoints of the line ‘i’ is at ‘(i, aᵢ)’ and
 *   ‘(i, 0)’ . Find two lines, which, together with the x-axis forms a
 *   container, such that the container contains the most
 *    “Notice” that you may not slant the container.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘n = height.length’
 *   • ‘2 ≤ n ≤ 10⁵’
 *   • ‘0 ≤ height[i] ≤ 10⁴’
 *
 */

struct q11 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int maxArea(vector<int>& height) {
      int res = 0;
      int l = 0, r = height.size() - 1;
      while (l < r) {
        res = max(res, min(height[l], height[r]) * (r - l));
        if (height[l] <= height[r]) {
          ++l;
        } else {
          --r;
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q11, sample_input01) {
  solution = new Solution();
  vector<int> height = {1, 8, 6, 2, 5, 4, 8, 3, 7};
  int exp = 49;
  EXPECT_EQ(solution->maxArea(height), exp);
  delete solution;
}

TEST_F(q11, sample_input02) {
  solution = new Solution();
  vector<int> height = {1, 1};
  int exp = 1;
  EXPECT_EQ(solution->maxArea(height), exp);
  delete solution;
}

TEST_F(q11, sample_input03) {
  solution = new Solution();
  vector<int> height = {4, 3, 2, 1, 4};
  int exp = 16;
  EXPECT_EQ(solution->maxArea(height), exp);
  delete solution;
}

TEST_F(q11, sample_input04) {
  solution = new Solution();
  vector<int> height = {1, 2, 1};
  int exp = 2;
  EXPECT_EQ(solution->maxArea(height), exp);
  delete solution;
}