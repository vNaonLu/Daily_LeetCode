#include <array>
#include <gtest/gtest.h>
#include <iostream>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 3.
 *    Longest Substring Without Repeating Characters
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a string ‘s’ , find the length of the “longest substring”
 *   without repeating characters.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘0 ≤ s.length ≤ 5 × 10⁴’
 *   • ‘s’ consists of English letters, digits, symbols and spaces.
 *
 */

struct q3 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int lengthOfLongestSubstring(string s) {
      auto cnt = array<int, 128>();
      auto res = (int)0;
      auto beg = s.begin();
      auto it  = s.begin();
      while (it != s.end()) {
        if (++cnt[*it] > 1) {
          while (beg != it) {
            --cnt[*beg];
            if (*beg++ == *it) {
              break;
            }
          }
        }
        ++it;
        res = max<int>(res, distance(beg, it));
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q3, sample_input01) {
  solution   = new Solution();
  string s   = "abcabcbb";
  int    exp = 3;
  EXPECT_EQ(solution->lengthOfLongestSubstring(s), exp);
  delete solution;
}

TEST_F(q3, sample_input02) {
  solution   = new Solution();
  string s   = "bbbbb";
  int    exp = 1;
  EXPECT_EQ(solution->lengthOfLongestSubstring(s), exp);
  delete solution;
}

TEST_F(q3, sample_input03) {
  solution   = new Solution();
  string s   = "pwwkew";
  int    exp = 3;
  EXPECT_EQ(solution->lengthOfLongestSubstring(s), exp);
  delete solution;
}

TEST_F(q3, sample_input04) {
  solution   = new Solution();
  string s   = "";
  int    exp = 0;
  EXPECT_EQ(solution->lengthOfLongestSubstring(s), exp);
  delete solution;
}