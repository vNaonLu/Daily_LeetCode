#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 15.
 *     3Sum
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an integer array nums, return all the triplets ‘[nums[i],
 *   nums[j], nums[k]]’ such that ‘i ≠ j’ , ‘i ≠ k’ , and ‘j ≠ k’ , and
 *   ‘nums[i] + nums[j] + nums[k] = 0’
 *   Notice that the solution set must not contain duplicate triplets.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘0 ≤ nums.length ≤ 3000’
 *   • ‘-10⁵ ≤ nums[i] ≤ 10⁵’
 *
 */

struct q15 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    vector<vector<int>> threeSum(vector<int>& nums) {
      vector<vector<int>> res;
      sort(nums.begin(), nums.end());
      for (int k = 0; k < (int)nums.size() - 2; ++k) {
        if (nums[k] > 0) break;
        if (k > 0 && nums[k] == nums[k - 1]) continue;
        int target = 0 - nums[k], i = k + 1, j = (int)nums.size() - 1;
        while (i < j) {
          if (nums[i] + nums[j] == target) {
            res.push_back({nums[k], nums[i], nums[j]});
            while (i < j && nums[i] == nums[i + 1]) ++i;
            while (i < j && nums[j] == nums[j - 1]) --j;
            ++i;
            --j;
          } else if (nums[i] + nums[j] < target)
            ++i;
          else
            --j;
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q15, sample_input01) {
  solution = new Solution();
  vector<int> nums = {-1, 0, 1, 2, -1, -4};
  vector<vector<int>> exp = {{-1, -1, 2}, {-1, 0, 1}};
  EXPECT_EQ(solution->threeSum(nums), exp);
  delete solution;
}

TEST_F(q15, sample_input02) {
  solution = new Solution();
  vector<int> nums = {};
  vector<vector<int>> exp = {};
  EXPECT_EQ(solution->threeSum(nums), exp);
  delete solution;
}

TEST_F(q15, sample_input03) {
  solution = new Solution();
  vector<int> nums = {0};
  vector<vector<int>> exp = {};
  EXPECT_EQ(solution->threeSum(nums), exp);
  delete solution;
}