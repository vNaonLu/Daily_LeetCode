#include <gtest/gtest.h>
#include <iostream>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 7.
 *    Reverse Integer
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a signed 32-bit integer ‘x’ , return ‘x’ “ with its digits
 *   reversed” . If reversing ‘x’ causes the value to go outside the signed
 *   32-bit integer range ‘[-2³¹, 2³¹ - 1]’ , then return ‘0’
 *    “Assume the environment does not allow you to store 64-bit integers
 *   (signed or unsigned).” 
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘-2³¹ ≤ x ≤ 2³¹ - 1’
 *
 */

struct q7 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int reverse(int x) {
      int sign = x < 0 ? -1 : 1;
      long long res = 0;
      x = abs(x);
      while (x > 0) {
        res = res * 10 + x % 10;
        x /= 10;
      }
      res *= sign;
      return res > numeric_limits<int>::max() ? 0 : res < numeric_limits<int>::min() ? 0
                                                                                     : res;
    }
  };

  class Solution *solution;
};

TEST_F(q7, sample_input01) {
  solution = new Solution();
  int x = 123;
  int exp = 321;
  EXPECT_EQ(solution->reverse(x), exp);
  delete solution;
}

TEST_F(q7, sample_input02) {
  solution = new Solution();
  int x = -123;
  int exp = -321;
  EXPECT_EQ(solution->reverse(x), exp);
  delete solution;
}

TEST_F(q7, sample_input03) {
  solution = new Solution();
  int x = 120;
  int exp = 21;
  EXPECT_EQ(solution->reverse(x), exp);
  delete solution;
}

TEST_F(q7, sample_input04) {
  solution = new Solution();
  int x = 0;
  int exp = 0;
  EXPECT_EQ(solution->reverse(x), exp);
  delete solution;
}