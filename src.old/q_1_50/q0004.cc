#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 4.
 *    Median of Two Sorted Arrays
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given two sorted arrays ‘nums1’ and ‘nums2’ of size ‘m’ and ‘n’
 *   respectively, return “the median” of the two sorted
 *   The overall run time complexity should be ‘O(log (m+n))’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘nums1.length = m’
 *   • ‘nums2.length = n’
 *   • ‘0 ≤ m ≤ 1000’
 *   • ‘0 ≤ n ≤ 1000’
 *   • ‘1 ≤ m + n ≤ 2000’
 *   • ‘-10⁶ ≤ nums1[i], nums2[i] ≤ 10⁶’
 *
 */

struct q4 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
      int m = nums1.size(), n = nums2.size();
      int mid = (m + n) / 2;
      auto i1 = nums1.begin(), i2 = nums2.begin();
      double last, second;
      while(mid >= 0){
        second = last;
        --mid;
        if(i1 == nums1.end()){
          last = *(i2++);
        }else if(i2 == nums2.end()){
          last = *(i1++);
        } else {
          if (*i1 > *i2) {
            last = *(i2++);
          } else {
            last = *(i1++);
          }
        }
      }
      return (m + n) % 2 ? last : ((last + second) * 0.5);
    }
  };

  class Solution *solution;
};

TEST_F(q4, sample_input01) {
  solution = new Solution();
  vector<int> nums1 = {1, 3};
  vector<int> nums2 = {2};
  double exp = 2.00000;
  EXPECT_EQ(solution->findMedianSortedArrays(nums1, nums2), exp);
  delete solution;
}

TEST_F(q4, sample_input02) {
  solution = new Solution();
  vector<int> nums1 = {1, 2};
  vector<int> nums2 = {3, 4};
  double exp = 2.50000;
  EXPECT_EQ(solution->findMedianSortedArrays(nums1, nums2), exp);
  delete solution;
}

TEST_F(q4, sample_input03) {
  solution = new Solution();
  vector<int> nums1 = {0, 0};
  vector<int> nums2 = {0, 0};
  double exp = 0.00000;
  EXPECT_EQ(solution->findMedianSortedArrays(nums1, nums2), exp);
  delete solution;
}

TEST_F(q4, sample_input04) {
  solution = new Solution();
  vector<int> nums1 = {};
  vector<int> nums2 = {1};
  double exp = 1.00000;
  EXPECT_EQ(solution->findMedianSortedArrays(nums1, nums2), exp);
  delete solution;
}

TEST_F(q4, sample_input05) {
  solution = new Solution();
  vector<int> nums1 = {2};
  vector<int> nums2 = {};
  double exp = 2.00000;
  EXPECT_EQ(solution->findMedianSortedArrays(nums1, nums2), exp);
  delete solution;
}