#include <gtest/gtest.h>
#include <iostream>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 50.
 *     Pow(x, n)
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Implement <a href="http://www.cplusplus.com/reference/valarray/pow/"
 *   target="_blank">pow(x, n)</a>, which calculates ‘x’ raised to the
 *   power ‘n’ (i.e., ‘xⁿ’ ).
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘-100.0 <x< 100.0’
 *   • ‘-2³¹≤ n ≤2³¹-1’
 *   • ‘-10⁴ ≤ xⁿ ≤ 10⁴’
 *
 */

struct q50 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    double myPow(double x, int n) {
      double res = 1.0;
      long long y = n;
      while (abs(n)) {
        if (abs(n) % 2)
          res = res * x;
        x = x * x;
        n = abs(n) / 2;
      }
      if (y < 0)
        res = (double)(1.0) / (double)(res);
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q50, sample_input01) {
  solution = new Solution();
  double x = 2.00000;
  int n = 10;
  double exp = 1024.00000;
  EXPECT_DOUBLE_EQ(solution->myPow(x, n), exp);
  delete solution;
}

TEST_F(q50, sample_input02) {
  solution = new Solution();
  double x = 2.10000;
  int n = 3;
  double exp = 9.26100;
  EXPECT_DOUBLE_EQ(solution->myPow(x, n), exp);
  delete solution;
}

TEST_F(q50, sample_input03) {
  solution = new Solution();
  double x = 2.00000;
  int n = -2;
  double exp = 0.25000;
  EXPECT_DOUBLE_EQ(solution->myPow(x, n), exp);
  delete solution;
}