#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 35.
 *     Search Insert Position
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a sorted array of distinct integers and a target value, return
 *   the index if the target is found. If not, return the index where it
 *   would be if it were inserted in
 *   You mustwrite an algorithm with ‘O(log n)’ runtime complexity.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 10⁴’
 *   • ‘-10⁴ ≤ nums[i] ≤ 10⁴’
 *   • ‘nums’ contains “distinct” values sorted in “ascending” order.
 *   • ‘-10⁴ ≤ target ≤ 10⁴’
 *
 */

struct q35 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int searchInsert(vector<int>& nums, int target) {
      int l = 0, r = nums.size() - 1;
      while (l <= r) {
        int mid = l + (r - l) / 2;
        if (nums[mid] == target)
          return mid;
        else if (nums[mid] > target)
          r = mid - 1;
        else
          l = mid + 1;
      }
      return l;
    }
  };

  class Solution *solution;
};

TEST_F(q35, sample_input01) {
  solution = new Solution();
  vector<int> nums = {1, 3, 5, 6};
  int target = 5;
  int exp = 2;
  EXPECT_EQ(solution->searchInsert(nums, target), exp);
  delete solution;
}

TEST_F(q35, sample_input02) {
  solution = new Solution();
  vector<int> nums = {1, 3, 5, 6};
  int target = 2;
  int exp = 1;
  EXPECT_EQ(solution->searchInsert(nums, target), exp);
  delete solution;
}

TEST_F(q35, sample_input03) {
  solution = new Solution();
  vector<int> nums = {1, 3, 5, 6};
  int target = 7;
  int exp = 4;
  EXPECT_EQ(solution->searchInsert(nums, target), exp);
  delete solution;
}

TEST_F(q35, sample_input04) {
  solution = new Solution();
  vector<int> nums = {1, 3, 5, 6};
  int target = 0;
  int exp = 0;
  EXPECT_EQ(solution->searchInsert(nums, target), exp);
  delete solution;
}

TEST_F(q35, sample_input05) {
  solution = new Solution();
  vector<int> nums = {1};
  int target = 0;
  int exp = 0;
  EXPECT_EQ(solution->searchInsert(nums, target), exp);
  delete solution;
}