#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 33.
 *     Search in Rotated Sorted Array
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   There is an integer array ‘nums’ sorted in ascending order (with
 *   “distinct”
 *   Prior to being passed to your function, ‘nums’ is “possibly rotated”
 *   at an unknown pivot index ‘k’ ( ‘1 ≤ k < nums.length’ ) such that the
 *   resulting array is ‘[nums[k], nums[k+1], ..., nums[n-1], nums[0],
 *   nums[1], ..., nums[k-1]]’ ( “0-indexed” ). For example,
 *   ‘[0,1,2,4,5,6,7]’ might be rotated at pivot index ‘3’ and become
 *   ‘[4,5,6,7,0,1,2]’
 *   Given the array ‘nums’ “after” the possible rotation and an integer
 *   ‘target’ , return “the index of ” ‘target’ “ if it is in ” ‘nums’ “,
 *   or ” ‘-1’ “ if it is not in ” ‘nums’
 *   You must write an algorithm with ‘O(log n)’ runtime complexity.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 5000’
 *   • ‘-10⁴ ≤ nums[i] ≤ 10⁴’
 *   • All values of ‘nums’ are “unique” .
 *   • ‘nums’ is an ascending array that is possibly rotated.
 *   • ‘-10⁴ ≤ target ≤ 10⁴’
 *
 */

struct q33 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int search(vector<int>& nums, int target) {
      int l = 0, r = nums.size() - 1;
      while (l <= r) {
        int mid = l + (r - l) / 2;
        if (nums[mid] == target) return mid;
        if (nums[mid] < nums[r]) {
          if (nums[mid] < target && nums[r] >= target) {
            l = mid + 1;
          } else {
            r = mid - 1;
          }
        } else {
          if (nums[mid] > target && nums[l] <= target) {
            r = mid - 1;
          } else {
            l = mid + 1;
          }
        }
      }
      return -1;
    }
  };

  class Solution *solution;
};

TEST_F(q33, sample_input01) {
  solution = new Solution();
  vector<int> nums = {4, 5, 6, 7, 0, 1, 2};
  int target = 0;
  int exp = 4;
  EXPECT_EQ(solution->search(nums, target), exp);
  delete solution;
}

TEST_F(q33, sample_input02) {
  solution = new Solution();
  vector<int> nums = {4, 5, 6, 7, 0, 1, 2};
  int target = 3;
  int exp = -1;
  EXPECT_EQ(solution->search(nums, target), exp);
  delete solution;
}

TEST_F(q33, sample_input03) {
  solution = new Solution();
  vector<int> nums = {1};
  int target = 0;
  int exp = -1;
  EXPECT_EQ(solution->search(nums, target), exp);
  delete solution;
}