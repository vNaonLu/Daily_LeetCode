#include <gtest/gtest.h>
#include <iostream>
#include <string>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 14.
 *     Longest Common Prefix
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Write a function to find the longest common prefix string amongst an
 *   array of
 *   If there is no common prefix, return an empty string ‘''’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ strs.length ≤ 200’
 *   • ‘0 ≤ strs[i].length ≤ 200’
 *   • ‘strs[i]’ consists of only lower-case English letters.
 *
 */

struct q14 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    string longestCommonPrefix(vector<string> &strs) {
      auto &fst = strs.front();
      auto  end = fst.end();
      for (auto it = strs.begin() + 1; it != strs.end(); ++it) {
        auto local  = fst.begin();
        auto it_beg = (*it).begin();
        while (local != end && it_beg != (*it).end()) {
          if (*local != *it_beg) {
            break;
          }
          ++local;
          ++it_beg;
        }
        end = local;
      }
      return string(fst.begin(), end);
    }
  };

  class Solution *solution;
};

TEST_F(q14, sample_input01) {
  solution            = new Solution();
  vector<string> strs = {"flower", "flow", "flight"};
  string         exp  = "fl";
  EXPECT_EQ(solution->longestCommonPrefix(strs), exp);
  delete solution;
}

TEST_F(q14, sample_input02) {
  solution            = new Solution();
  vector<string> strs = {"dog", "racecar", "car"};
  string         exp  = "";
  EXPECT_EQ(solution->longestCommonPrefix(strs), exp);
  delete solution;
}