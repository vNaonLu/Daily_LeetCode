#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/anyorder.hpp>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 46.
 *     Permutations
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an array ‘nums’ of distinct integers, return “all the possible
 *   permutations” . You can return the answer in “any order” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 6’
 *   • ‘-10 ≤ nums[i] ≤ 10’
 *   • All the integers of ‘nums’ are “unique” .
 *
 */

struct q46 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    void helper(vector<vector<int>> &r, vector<int> &cur, int size) {
      if (size == 1) {
        r.push_back(cur);
      } else {
        for (int i = 0; i < size; ++i) {
          helper(r, cur, size - 1);
          if (size % 2) {
            swap(cur[0], cur[size - 1]);
          } else {
            swap(cur[i], cur[size - 1]);
          }
        }
      }
    }
   public:
    vector<vector<int>> permute(vector<int> &nums) {
      vector<vector<int>> res;
      helper(res, nums, nums.size());
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q46, sample_input01) {
  solution = new Solution();
  vector<int> nums = {1, 2, 3};
  vector<vector<int>> exp = {{1, 2, 3}, {1, 3, 2}, {2, 1, 3}, {2, 3, 1}, {3, 1, 2}, {3, 2, 1}};
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solution->permute(nums), exp);
  delete solution;
}

TEST_F(q46, sample_input02) {
  solution = new Solution();
  vector<int> nums = {0, 1};
  vector<vector<int>> exp = {{0, 1}, {1, 0}};
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solution->permute(nums), exp);
  delete solution;
}

TEST_F(q46, sample_input03) {
  solution = new Solution();
  vector<int> nums = {1};
  vector<vector<int>> exp = {{1}};
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solution->permute(nums), exp);
  delete solution;
}