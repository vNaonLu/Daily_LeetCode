#include <gtest/gtest.h>
#include <iostream>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 9.
 *    Palindrome Number
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an integer ‘x’ , return ‘true’ if ‘x’ is palindrome
 *   An integer is a “palindrome” when it reads the same backward as
 *       - For example, ‘121’ is a palindrome while ‘123’ is not.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘-2³¹≤ x ≤ 2³¹- 1’
 *
 */

struct q9 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    bool isPalindrome(int x) {
      if (x < 0) return false;
      double tmp = x;
      double reverse = 0;
      while (x > 0) {
        reverse = reverse * 10 + x % 10;
        x /= 10;
      }
      return reverse == tmp;
    }
  };

  class Solution *solution;
};

TEST_F(q9, sample_input01) {
  solution = new Solution();
  int x = 121;
  bool exp = true;
  EXPECT_EQ(solution->isPalindrome(x), exp);
  delete solution;
}

TEST_F(q9, sample_input02) {
  solution = new Solution();
  int x = -121;
  bool exp = false;
  EXPECT_EQ(solution->isPalindrome(x), exp);
  delete solution;
}

TEST_F(q9, sample_input03) {
  solution = new Solution();
  int x = 10;
  bool exp = false;
  EXPECT_EQ(solution->isPalindrome(x), exp);
  delete solution;
}

TEST_F(q9, sample_input04) {
  solution = new Solution();
  int x = -101;
  bool exp = false;
  EXPECT_EQ(solution->isPalindrome(x), exp);
  delete solution;
}