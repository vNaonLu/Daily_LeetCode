#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 45.
 *     Jump Game II
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an array of non-negative integers ‘nums’ , you are initially
 *   positioned at the first index of the
 *   Each element in the array represents your maximum jump length at that
 *   Your goal is to reach the last index in the minimum number of
 *   You can assume that you can always reach the last index.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 10⁴’
 *   • ‘0 ≤ nums[i] ≤ 1000’
 *
 */

struct q45 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int jump(vector<int>& nums) {
      int res = 0;
      int cur_max = 0, last = 0;
      for (int i = 0; i < nums.size() && last < nums.size() - 1; ++i) {
        cur_max = max(cur_max, i + nums[i]);
        if (i == last) {
          ++res;
          last = cur_max;
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q45, sample_input01) {
  solution = new Solution();
  vector<int> nums = {2, 3, 1, 1, 4};
  int exp = 2;
  EXPECT_EQ(solution->jump(nums), exp);
  delete solution;
}

TEST_F(q45, sample_input02) {
  solution = new Solution();
  vector<int> nums = {2, 3, 0, 1, 4};
  int exp = 2;
  EXPECT_EQ(solution->jump(nums), exp);
  delete solution;
}