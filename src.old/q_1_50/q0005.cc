#include <gtest/gtest.h>
#include <iostream>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 5.
 *    Longest Palindromic Substring
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a string ‘s’ , return “the longest palindromic substring” in ‘s’
 *   .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s.length ≤ 1000’
 *   • ‘s’ consist of only digits and English letters.
 *
 */

struct q5 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    int helper(const string &s, int l, int r) {
      while (l >= 0 && r < s.size() && s[l] == s[r]) {
        ++r;
        --l;
      }
      return r - l - 1;
    }
   public:
    string longestPalindrome(string s) {
      if (s.empty()) return "";
      int l = 0, maxl = 1;
      for (int i = 0; i < s.size(); ++i) {
        int len = max(helper(s, i, i), helper(s, i, i + 1));
        if (len > maxl) {
          maxl = len;
          l = i - (len - 1) / 2;
        }
      }
      return s.substr(l, maxl);
    }
  };

  class Solution *solution;
};

TEST_F(q5, sample_input01) {
  solution = new Solution();
  string s = "babad";
  string exp = "bab";
  EXPECT_EQ(solution->longestPalindrome(s), exp);
  delete solution;
}

TEST_F(q5, sample_input02) {
  solution = new Solution();
  string s = "cbbd";
  string exp = "bb";
  EXPECT_EQ(solution->longestPalindrome(s), exp);
  delete solution;
}

TEST_F(q5, sample_input03) {
  solution = new Solution();
  string s = "a";
  string exp = "a";
  EXPECT_EQ(solution->longestPalindrome(s), exp);
  delete solution;
}

TEST_F(q5, sample_input04) {
  solution = new Solution();
  string s = "ac";
  string exp = "a";
  EXPECT_EQ(solution->longestPalindrome(s), exp);
  delete solution;
}