#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 34.
 *     Find First and Last Position of Element in Sorted Array
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an array of integers ‘nums’ sorted in non-decreasing order, find
 *   the starting and ending position of a given ‘target’
 *   If ‘target’ is not found in the array, return ‘[-1, -1]’
 *   You mustwrite an algorithm with ‘O(log n)’ runtime complexity.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘0 ≤ nums.length ≤ 10⁵’
 *   • ‘-10⁹≤ nums[i]≤ 10⁹’
 *   • ‘nums’ is a non-decreasing array.
 *   • ‘-10⁹≤ target≤ 10⁹’
 *
 */

struct q34 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    vector<int> searchRange(vector<int> &nums, int target) {
      vector<int> res(2, -1);
      auto find = lower_bound(nums.begin(), nums.end(), target);

      if (find != nums.end() && *find == target) {
        res[0] = res[1] = find - nums.begin();

        int lo = 0,
            hi = res[0];

        while (lo <= hi) {
          int mid = lo + (hi - lo) / 2;
          if (nums[mid] != target) {
            lo = mid + 1;
          } else {
            res[0] = mid;
            hi = mid - 1;
          }
        }

        lo = res[1];
        hi = nums.size() - 1;
        while (lo <= hi) {
          int mid = lo + (hi - lo) / 2;
          if (nums[mid] != target) {
            hi = mid - 1;
          } else {
            res[1] = mid;
            lo = mid + 1;
          }
        }
      }

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q34, sample_input01) {
  solution = new Solution();
  vector<int> nums = {5, 7, 7, 8, 8, 10};
  int target = 8;
  vector<int> exp = {3, 4};
  EXPECT_EQ(solution->searchRange(nums, target), exp);
  delete solution;
}

TEST_F(q34, sample_input02) {
  solution = new Solution();
  vector<int> nums = {5, 7, 7, 8, 8, 10};
  int target = 6;
  vector<int> exp = {-1, -1};
  EXPECT_EQ(solution->searchRange(nums, target), exp);
  delete solution;
}

TEST_F(q34, sample_input03) {
  solution = new Solution();
  vector<int> nums = {};
  int target = 0;
  vector<int> exp = {-1, -1};
  EXPECT_EQ(solution->searchRange(nums, target), exp);
  delete solution;
}