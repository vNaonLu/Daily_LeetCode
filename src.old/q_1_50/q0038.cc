#include <gtest/gtest.h>
#include <iostream>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 38.
 *     Count and Say
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   The “count-and-say” sequence is a sequence of digit strings defined by
 *   the recursive
 *       -  ‘countAndSay(1) = '1'’
 *       -  ‘countAndSay(n)’ is the way you would 'say' the digit string
 *   from ‘countAndSay(n-1)’ , which is then converted into a different
 *   digit
 *   To determine how you 'say' a digit string, split it into the “minimal”
 *   number of groups so that each group is a contiguous section all of the
 *   “same character.” Then for each group, say the number of characters,
 *   then say the character. To convert the saying into a digit string,
 *   replace the counts with a number and concatenate every
 *   For example, the saying and conversion for digit string ‘'3322251'’
 *   Given a positive integer ‘n’ , return “the ” ‘nᵗʰ’ “ term of the
 *   “count-and-say” sequence” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ n ≤ 30’
 *
 */

struct q38 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    string countAndSay(int n) {
      string res = "1";

      for (int i = 2; i <= n; ++i) {
        string next;
        char cur = res.front();
        size_t count = 1;
        for (int j = 1; j < res.size(); ++j) {
          if (cur == res[j]) {
            ++count;
          } else {
            next += to_string(count);
            next += cur;
            cur = res[j];
            count = 1;
          }
        }
        next += to_string(count);
        next += cur;
        res = move(next);
      }

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q38, sample_input01) {
  solution = new Solution();
  int n = 1;
  string exp = "1";
  string act = solution->countAndSay(n);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q38, sample_input02) {
  solution = new Solution();
  int n = 4;
  string exp = "1211";
  string act = solution->countAndSay(n);
  EXPECT_EQ(act, exp);
  delete solution;
}