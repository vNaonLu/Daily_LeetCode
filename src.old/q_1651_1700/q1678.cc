#include <gtest/gtest.h>
#include <iostream>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1678.
 *       Goal Parser Interpretation
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You own a “Goal Parser” that can interpret a string ‘command’ . The
 *   ‘command’ consists of an alphabet of ‘'G'’ , ‘'()'’ and/or ‘'(al)'’ in
 *   some order. The Goal Parser will interpret ‘'G'’ as the string ‘'G'’ ,
 *   ‘'()'’ as the string ‘'o'’ , and ‘'(al)'’ as the string ‘'al'’ . The
 *   interpreted strings are then concatenated in the original
 *   Given the string ‘command’ , return “the “Goal Parser” 's
 *   interpretation of ” ‘command’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ command.length ≤ 100’
 *   • ‘command’ consists of ‘'G'’ , ‘'()'’ , and/or ‘'(al)'’ in some order.
 *
 */

struct q1678 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    string interpret(string command) {
      string res, sub;
      auto it = command.begin();
      while (it != command.end()) {
        if (*it == '(' && *(it + 1) == ')') {
          res.push_back('o');
          ++it;
        } else if (*it != '(' && *it != ')') {
          res.push_back(*it);
        }
        ++it;
      }

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1678, sample_input01) {
  solution = new Solution();
  string command = "G()(al)";
  string exp = "Goal";
  string act = solution->interpret(command);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1678, sample_input02) {
  solution = new Solution();
  string command = "G()()()()(al)";
  string exp = "Gooooal";
  string act = solution->interpret(command);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1678, sample_input03) {
  solution = new Solution();
  string command = "(al)G(al)()()G";
  string exp = "alGalooG";
  string act = solution->interpret(command);
  EXPECT_EQ(act, exp);
  delete solution;
}