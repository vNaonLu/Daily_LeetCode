#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1674.
 *       Minimum Moves to Make Array Complementary
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an integer array ‘nums’ of “even” length ‘n’ and an
 *   integer ‘limit’ . In one move, you can replace any integer from ‘nums’
 *   with another integer between ‘1’ and ‘limit’ ,
 *   The array ‘nums’ is “complementary” if for all indices ‘i’ (
 *   “0-indexed” ), ‘nums[i] + nums[n - 1 - i]’ equals the same number. For
 *   example, the array ‘[1,2,3,4]’ is complementary because for all
 *   indices ‘i’ , ‘nums[i] + nums[n - 1 - i] = 5’
 *   Return the “ “minimum” number of moves required to make ” ‘nums’ “
 *   “complementary” ” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘n = nums.length’
 *   • ‘2 ≤ n≤10⁵’
 *   • ‘1 ≤ nums[i]≤ limit ≤10⁵’
 *   • ‘n’ is even.
 *
 */

struct q1674 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int minMoves(vector<int>& nums, int limit) {
      int         n = nums.size(),
                  res = n;
      vector<int> moves(2 * limit + 2, 0);
      for (int i = 0; i < n / 2; ++i) {
        int mn = min(nums[i], nums[n - i - 1]),
            mx = max(nums[i], nums[n - i - 1]);
        ++moves[mn + 1];
        --moves[mx + limit + 1];

        --moves[mn + mx];
        ++moves[mn + mx + 1];

        moves[mx + limit + 1] += 2;
        moves[2 * limit + 1] -= 2;

        moves[2] += 2;
        moves[mn + 1] -= 2;
      }

      for (int i = 2; i <= limit * 2; ++i) {
        moves[i] += moves[i - 1];
        res = min(res, moves[i]);
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1674, sample_input01) {
  solution = new Solution();
  vector<int> nums = {1, 2, 4, 3};
  int limit = 4;
  int exp = 1;
  int act = solution->minMoves(nums, limit);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1674, sample_input02) {
  solution = new Solution();
  vector<int> nums = {1, 2, 2, 1};
  int limit = 2;
  int exp = 2;
  int act = solution->minMoves(nums, limit);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1674, sample_input03) {
  solution = new Solution();
  vector<int> nums = {1, 2, 1, 2};
  int limit = 2;
  int exp = 0;
  int act = solution->minMoves(nums, limit);
  EXPECT_EQ(act, exp);
  delete solution;
}