#include <gtest/gtest.h>
#include <iostream>
#include <map>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1128.
 *       Number of Equivalent Domino Pairs
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a list of ‘dominoes’ , ‘dominoes[i] = [a, b]’ is “equivalent to”
 *   ‘dominoes[j] = [c, d]’ if and only if either ( ‘a = c’ and ‘b = d’ ),
 *   or ( ‘a = d’ and ‘b = c’ ) - that is, one domino can be rotated to be
 *   equal to another
 *   Return “the number of pairs ” ‘(i, j)’ “ for which ” ‘0 ≤ i < j <
 *   dominoes.length’ “, and ” ‘dominoes[i]’ “ is “equivalent to” ”
 *   ‘dominoes[j]’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ dominoes.length ≤ 4 × 10⁴’
 *   • ‘dominoes[i].length = 2’
 *   • ‘1 ≤ dominoes[i][j] ≤ 9’
 *
 */

struct q1128 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int numEquivDominoPairs(vector<vector<int>> &dominoes) {
      int res = 0;
      map<pair<int, int>, int> mp;
      for (auto &v : dominoes) {
        auto find = mp.find({v[0], v[1]});

        if (find == mp.end()) {
          find = mp.find({v[1], v[0]});
        }

        if (find != mp.end()) {
          res += find->second;
          ++find->second;
        } else {
          mp.emplace(make_pair(v[0], v[1]), 1);
        }
      }

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1128, sample_input01) {
  solution = new Solution();
  vector<vector<int>> dominoes = {{1, 2}, {2, 1}, {3, 4}, {5, 6}};
  int exp = 1;
  int act = solution->numEquivDominoPairs(dominoes);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1128, sample_input02) {
  solution = new Solution();
  vector<vector<int>> dominoes = {{1, 2}, {1, 2}, {1, 1}, {1, 2}, {2, 2}};
  int exp = 3;
  int act = solution->numEquivDominoPairs(dominoes);
  EXPECT_EQ(act, exp);
  delete solution;
}