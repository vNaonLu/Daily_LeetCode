#include <gtest/gtest.h>
#include <iostream>
#include <unordered_map>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1124.
 *       Longest Well-Performing Interval
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   We are given ‘hours’ , a list of the number of hours worked per day
 *   for a given
 *   A day is considered to be a “tiring day” if and only if the number of
 *   hours worked is (strictly) greater than ‘8’
 *   A “well-performing interval” is an interval of days for which the
 *   number of tiring days is strictly larger than the number of non-tiring
 *   Return the length of the longest well-performing interval.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ hours.length ≤ 10⁴’
 *   • ‘0 ≤ hours[i] ≤ 16’
 *
 */

struct q1124 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int longestWPI(vector<int>& hours) {
      unordered_map<int, int> mp;
      int                     res = 0,
                              perf = 0;
      for (int i = 0; i < hours.size(); ++i) {
        perf += hours[i] > 8 ? 1 : -1;
        if (perf > 0)                       res = max(res, i + 1);
        else if (mp.find(perf) == mp.end()) mp[perf] = i;

        if (mp.find(perf - 1) != mp.end())  res = max(res, i - mp[perf - 1]);
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1124, sample_input01) {
  solution = new Solution();
  vector<int> hours = {9, 9, 6, 0, 6, 6, 9};
  int exp = 3;
  int act = solution->longestWPI(hours);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1124, sample_input02) {
  solution = new Solution();
  vector<int> hours = {6, 6, 6};
  int exp = 0;
  int act = solution->longestWPI(hours);
  EXPECT_EQ(act, exp);
  delete solution;
}