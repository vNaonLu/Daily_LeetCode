#include <gtest/gtest.h>
#include <iostream>
#include <string>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 763.
 *      Partition Labels
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given a string ‘s’ . We want to partition the string into as
 *   many parts as possible so that each letter appears in at most one
 *   Return “a list of integers representing the size of these parts” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s.length ≤ 500’
 *   • ‘s’ consists of lowercase English letters.
 *
 */

struct q763 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    vector<int> partitionLabels(string s) {
      vector<int> letter_last_appear(26, s.size());
      for (int i = 0; i < s.size(); ++i) letter_last_appear[s[i] - 'a'] = i;
      int last = 0, l = 0;
      vector<int> res;
      for (int i = 0; i < s.size(); ++i) {
        last = max(last, letter_last_appear[s[i] - 'a']);
        if (i == last) {
          res.push_back(i - l + 1);
          l = i + 1;
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q763, sample_input01) {
  solution = new Solution();
  string s = "ababcbacadefegdehijhklij";
  vector<int> exp = {9, 7, 8};
  EXPECT_EQ(solution->partitionLabels(s), exp);
  delete solution;
}

TEST_F(q763, sample_input02) {
  solution = new Solution();
  string s = "eccbbbbdec";
  vector<int> exp = {10};
  EXPECT_EQ(solution->partitionLabels(s), exp);
  delete solution;
}