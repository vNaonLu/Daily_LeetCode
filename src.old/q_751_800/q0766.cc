#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 766.
 *      Toeplitz Matrix
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an ‘m x n’  ‘matrix’ , return “ ‘true’ if the matrix is
 *   Toeplitz. Otherwise, return ‘false’ .”
 *   A matrix is “Toeplitz” if every diagonal from top-left to bottom-right
 *   has the same elements.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘m = matrix.length’
 *   • ‘n = matrix[i].length’
 *   • ‘1 ≤ m, n ≤ 20’
 *   • ‘0 ≤ matrix[i][j] ≤ 99’
 *   • What if the ‘matrix’ is stored on disk, and the memory is limited such
 * that you can only load at most one row of the matrix into the memory at once?
 *   • What if the ‘matrix’ is so large that you can only load up a partial row
 * into the memory at once?
 *
 */

struct q766 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    bool isToeplitzMatrix(vector<vector<int>> &matrix) {
      for (int i = 0; i < matrix.size(); ++i) {
        for (int j = 0; j < matrix.front().size(); ++j) {
          if (i > 0 && j > 0 && matrix[i - 1][j - 1] != matrix[i][j]) {
            return 0;
          }
        }
      }
      return true;
    }
  };

  class Solution *solution;
};

TEST_F(q766, sample_input01) {
  solution                   = new Solution();
  vector<vector<int>> matrix = {
      {1, 2, 3, 4},
      {5, 1, 2, 3},
      {9, 5, 1, 2}
  };
  bool exp = true;
  bool act = solution->isToeplitzMatrix(matrix);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q766, sample_input02) {
  solution                   = new Solution();
  vector<vector<int>> matrix = {
      {1, 2},
      {2, 2}
  };
  bool exp = false;
  bool act = solution->isToeplitzMatrix(matrix);
  EXPECT_EQ(act, exp);
  delete solution;
}