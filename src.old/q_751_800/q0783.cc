#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/treenode.hpp>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 783.
 *      Minimum Distance Between BST Nodes
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given the ‘root’ of a Binary Search Tree (BST), return “the minimum
 *   difference between the values of any two different nodes in the tree”
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The number of nodes in the tree is in the range ‘[2, 100]’ .
 *   • ‘0 ≤ Node.val ≤ 10⁵’
 *
 */

struct q783 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  private:
    void solve(TreeNode *p, int &prev, int &res) {
      if (nullptr != p) {
        solve(p->left, prev, res);
        if (prev != -1) {
          res = min(res, p->val - prev);
        }
        prev = p->val;
        solve(p->right, prev, res);
      }
    }

  public:
    int minDiffInBST(TreeNode *root) {
      auto res  = numeric_limits<int>::max();
      auto prev = -1;
      solve(root, prev, res);
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q783, sample_input01) {
  solution       = new Solution();
  TreeNode *root = TreeNode::generate({4, 2, 6, 1, 3});
  int       exp  = 1;
  int       act  = solution->minDiffInBST(root);
  EXPECT_EQ(act, exp);
  TreeNode::release(root);
  delete solution;
}

TEST_F(q783, sample_input02) {
  solution = new Solution();
  TreeNode *root =
      TreeNode::generate({1, 0, 48, NULL_TREENODE, NULL_TREENODE, 12, 49});
  int exp = 1;
  int act = solution->minDiffInBST(root);
  EXPECT_EQ(act, exp);
  TreeNode::release(root);
  delete solution;
}