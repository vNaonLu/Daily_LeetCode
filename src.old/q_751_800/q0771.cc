#include <gtest/gtest.h>
#include <iostream>
#include <string>
#include <unordered_set>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 771.
 *      Jewels and Stones
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You're given strings ‘jewels’ representing the types of stones that
 *   are jewels, and ‘stones’ representing the stones you have. Each
 *   character in ‘stones’ is a type of stone you have. You want to know
 *   how many of the stones you have are also
 *   Letters are case sensitive, so ‘'a'’ is considered a different type of
 *   stone from ‘'A'’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤jewels.length, stones.length ≤ 50’
 *   • ‘jewels’ and ‘stones’ consist of only English letters.
 *   • All the characters of ‘jewels’ are “unique” .
 *
 */

struct q771 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int numJewelsInStones(string jewels, string stones) {
      unordered_set<char> jewels_set(jewels.begin(), jewels.end());
      int res = 0;
      for (const auto &c : stones) {
        if (jewels_set.find(c) != jewels_set.end()) {
          ++res;
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q771, sample_input01) {
  solution = new Solution();
  string jewels = "aA";
  string stones = "aAAbbbb";
  int exp = 3;
  int act = solution->numJewelsInStones(jewels, stones);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q771, sample_input02) {
  solution = new Solution();
  string jewels = "z";
  string stones = "ZZ";
  int exp = 0;
  int act = solution->numJewelsInStones(jewels, stones);
  EXPECT_EQ(act, exp);
  delete solution;
}