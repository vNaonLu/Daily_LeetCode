#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/anyorder.hpp>
#include <string>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 784.
 *      Letter Case Permutation
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a string ‘s’ , we can transform every letter individually to be
 *   lowercase or uppercase to create another
 *   Return “a list of all possible strings we could create” . You can
 *   return the outputin “any order” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘s’ will be a string with length between ‘1’ and ‘12’ .
 *   • ‘s’ will consist only of letters or digits.
 *
 */

struct q784 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    bool isLetter(const char &c) {
      return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z');
    }
    string helper(string s, vector<int> &l, int c) {
      for (int i = 0; i < l.size(); ++i) {
        auto bit = 1 << i;
        s[l[i]] = bit & c ? toupper(s[l[i]]) : tolower(s[l[i]]);
      }
      return s;
    }
   public:
    vector<string> letterCasePermutation(string s) {
      vector<string> res;
      vector<int> letters;
      for (int i = 0; i < s.size(); ++i)
        if (isLetter(s[i]))
          letters.push_back(i);
      for (int i = 0; i < (1 << letters.size()); ++i) {
        res.emplace_back(helper(s, letters, i));
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q784, sample_input01) {
  solution = new Solution();
  string s = "a1b2";
  vector<string> exp = {"a1b2", "a1B2", "A1b2", "A1B2"};
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solution->letterCasePermutation(s), exp);
  delete solution;
}

TEST_F(q784, sample_input02) {
  solution = new Solution();
  string s = "3z4";
  vector<string> exp = {"3z4", "3Z4"};
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solution->letterCasePermutation(s), exp);
  delete solution;
}

TEST_F(q784, sample_input03) {
  solution = new Solution();
  string s = "12345";
  vector<string> exp = {"12345"};
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solution->letterCasePermutation(s), exp);
  delete solution;
}

TEST_F(q784, sample_input04) {
  solution = new Solution();
  string s = "0";
  vector<string> exp = {"0"};
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solution->letterCasePermutation(s), exp);
  delete solution;
}