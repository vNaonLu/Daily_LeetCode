#include <algorithm>
#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 2164.
 *       Sort Even and Odd Indices Independently
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given a “0-indexed” integer array ‘nums’ . Rearrange the
 *   values of ‘nums’ according to the following
 *       1. Sort the values at “odd indices” of ‘nums’ in “non-increasing”
 *           - For example, if ‘nums = [4, “<u>1</u>” ,2,<u> “3” </u>]’
 *   before this step, it becomes ‘[4,<u> “3” </u>,2, “<u>1</u>” ]’ after.
 *   The values at odd indices ‘1’ and ‘3’ are sorted in non-increasing
 *
 *       2. Sort the values at “even indices” of ‘nums’ in “non-decreasing”
 *           - For example, if ‘nums = [<u> “4” </u>,1,<u> “2” </u>,3]’
 *   before this step, it becomes ‘[<u> “2” </u>,1,<u> “4” </u>,3]’ after.
 *   The values at even indices ‘0’ and ‘2’ are sorted in non-decreasing
 *
 *   Return “the array formed after rearranging the values of” ‘nums’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 100’
 *   • ‘1 ≤ nums[i] ≤ 100’
 *
 */

struct q2164 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    vector<int> sortEvenOdd(vector<int> &nums) {
      vector<vector<int>> tmp(2);
      vector<int>         res;
      for (int i = 0; i < nums.size(); ++i) {
        tmp[i & 1].emplace_back(nums[i]);
      }
      sort(tmp[0].begin(), tmp[0].end());
      sort(tmp[1].begin(), tmp[1].end(), greater<int>());
      for (int i = 0; i < max(tmp[0].size(), tmp[1].size()); ++i) {
        if (i < tmp[0].size()) {
          res.emplace_back(tmp[0][i]);
        }
        if (i < tmp[1].size()) {
          res.emplace_back(tmp[1][i]);
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q2164, sample_input01) {
  solution         = new Solution();
  vector<int> nums = {4, 1, 2, 3};
  vector<int> exp  = {2, 3, 4, 1};
  vector<int> act  = solution->sortEvenOdd(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2164, sample_input02) {
  solution         = new Solution();
  vector<int> nums = {2, 1};
  vector<int> exp  = {2, 1};
  vector<int> act  = solution->sortEvenOdd(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}
