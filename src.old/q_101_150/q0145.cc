#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/treenode.hpp>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 145.
 *      Binary Tree Postorder Traversal
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given the ‘root’ of abinary tree, return “the postorder traversal of
 *   its nodes' values” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The number of the nodes in the tree is in the range ‘[0, 100]’ .
 *   • ‘-100 ≤ Node.val ≤ 100’
 *
 */

struct q145 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    void helper(TreeNode *p, vector<int> &re) {
      if (p == nullptr) return;
      helper(p->left, re);
      helper(p->right, re);
      re.push_back(p->val);
    }
   public:
    vector<int> postorderTraversal(TreeNode *root) {
      vector<int> res;
      helper(root, res);
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q145, sample_input01) {
  solution = new Solution();
  TreeNode* root = TreeNode::generate({1, NULL_TREENODE, 2, 3});
  vector<int> exp = {3, 2, 1};
  EXPECT_EQ(solution->postorderTraversal(root), exp);
  delete solution;
}

TEST_F(q145, sample_input02) {
  solution = new Solution();
  TreeNode* root = TreeNode::generate({});
  vector<int> exp = {};
  EXPECT_EQ(solution->postorderTraversal(root), exp);
  delete solution;
}

TEST_F(q145, sample_input03) {
  solution = new Solution();
  TreeNode* root = TreeNode::generate({1});
  vector<int> exp = {1};
  EXPECT_EQ(solution->postorderTraversal(root), exp);
  delete solution;
}

TEST_F(q145, sample_input04) {
  solution = new Solution();
  TreeNode* root = TreeNode::generate({1, 2});
  vector<int> exp = {2, 1};
  EXPECT_EQ(solution->postorderTraversal(root), exp);
  delete solution;
}

TEST_F(q145, sample_input05) {
  solution = new Solution();
  TreeNode* root = TreeNode::generate({1, NULL_TREENODE, 2});
  vector<int> exp = {2, 1};
  EXPECT_EQ(solution->postorderTraversal(root), exp);
  delete solution;
}