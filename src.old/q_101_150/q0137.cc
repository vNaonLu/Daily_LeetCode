#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 137.
 *      Single Number II
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an integer array ‘nums’ whereevery element appears “three times”
 *   except for one, which appears “exactly once” . “Find the single
 *   element and return it”
 *   You mustimplement a solution with a linear runtime complexity and
 *   useonly constantextra space.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 3 × 10⁴’
 *   • ‘-2³¹ ≤ nums[i] ≤ 2³¹ - 1’
 *   • Each element in ‘nums’ appears exactly “three times” except for one
 * element which appears “once” .
 *
 */

struct q137 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int singleNumber(vector<int> &nums) {
      auto res = 0;

      for (int i = 0; i < sizeof(int) * 8; ++i) {
        auto n    = 0;
        auto mask = 1 << i;
        for (auto x : nums) {
          if (x & mask) {
            ++n;
          }
        }

        if (n % 3 != 0) {
          res |= mask;
        }
      }

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q137, sample_input01) {
  solution         = new Solution();
  vector<int> nums = {2, 2, 3, 2};
  int         exp  = 3;
  int         act  = solution->singleNumber(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q137, sample_input02) {
  solution         = new Solution();
  vector<int> nums = {0, 1, 0, 1, 0, 1, 99};
  int         exp  = 99;
  int         act  = solution->singleNumber(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}