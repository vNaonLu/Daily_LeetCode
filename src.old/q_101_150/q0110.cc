#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/treenode.hpp>
#include <unordered_map>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 110.
 *      Balanced Binary Tree
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a binary tree, determine if it is
 *   For this problem, a height-balanced binary tree is defined
 *   a binary tree in which the left and right subtrees of “every” node
 *   differ in height by no more than
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The number of nodes in the tree is in the range ‘[0, 5000]’ .
 *   • ‘-10⁴ ≤ Node.val ≤ 10⁴’
 *
 */

struct q110 : public ::testing::Test {
  // Leetcode answer here
  /**
   * Definition for a binary tree node.
   * struct TreeNode {
   *     int val;
   *     TreeNode *left;
   *     TreeNode *right;
   *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
   *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
   *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
   * right(right) {}
   * };
   */
  class Solution {
  private:
    unordered_map<TreeNode *, int> memo;

    int height(TreeNode *p) {
      if (nullptr == p) {
        return 0;
      }
      auto find = memo.find(p);
      if (find == memo.end()) {
        return memo[p] = max(height(p->left), height(p->right)) + 1;
      }
      return find->second;
    }

    bool solve(TreeNode *p) {
      if (nullptr == p) {
        return true;
      }
      if (!solve(p->left) || !solve(p->right)) {
        return false;
      }
      auto l_h = height(p->left);
      auto r_h = height(p->right);
      return abs(l_h - r_h) <= 1;
    }

  public:
    bool isBalanced(TreeNode *root) {
      memo.clear();
      return solve(root);
    }
  };

  class Solution *solution;
};

TEST_F(q110, sample_input01) {
  solution = new Solution();
  TreeNode *root =
      TreeNode::generate({3, 9, 20, NULL_TREENODE, NULL_TREENODE, 15, 7});
  bool exp = true;
  EXPECT_EQ(solution->isBalanced(root), exp);
  delete solution;
}

TEST_F(q110, sample_input02) {
  solution = new Solution();
  TreeNode *root =
      TreeNode::generate({1, 2, 2, 3, 3, NULL_TREENODE, NULL_TREENODE, 4, 4});
  bool exp = false;
  EXPECT_EQ(solution->isBalanced(root), exp);
  delete solution;
}

TEST_F(q110, sample_input03) {
  solution       = new Solution();
  TreeNode *root = TreeNode::generate({});
  bool      exp  = true;
  EXPECT_EQ(solution->isBalanced(root), exp);
  delete solution;
}