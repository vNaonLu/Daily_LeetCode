#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 123.
 *      Best Time to Buy and Sell Stock III
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an array ‘prices’ where ‘prices[i]’ is the price of a
 *   given stock on the ‘iᵗʰ’
 *   Find the maximum profit you can achieve. You may complete “at most two
 *   transactions”
 *    “Note:” You may not engage in multiple transactions simultaneously
 *   (i.e., you must sell the stock before you buy again).
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ prices.length ≤ 10⁵’
 *   • ‘0 ≤ prices[i] ≤ 10⁵’
 *
 */

struct q123 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int maxProfit(vector<int>& prices) {
      if (prices.size() == 0) return 0;
      int n = prices.size();
      vector<int> left(n, 0),
          right(n, 0);
      int lmin = prices[0],
          rmax = prices[n - 1];
      for (int i = 1; i < n; ++i) {
        left[i] = max(left[i - 1], prices[i] - lmin);
        lmin = min(prices[i], lmin);
      }
      for (int i = n - 2; i >= 0; --i) {
        right[i] = max(right[i + 1], rmax - prices[i]);
        rmax = max(prices[i], rmax);
      }
      int res = right[0];
      for (int i = 1; i < n; ++i) {
        res = max(res, right[i] + left[i - 1]);
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q123, sample_input01) {
  solution = new Solution();
  vector<int> prices = {3, 3, 5, 0, 0, 3, 1, 4};
  int exp = 6;
  EXPECT_EQ(solution->maxProfit(prices), exp);
  delete solution;
}

TEST_F(q123, sample_input02) {
  solution = new Solution();
  vector<int> prices = {1, 2, 3, 4, 5};
  int exp = 4;
  EXPECT_EQ(solution->maxProfit(prices), exp);
  delete solution;
}

TEST_F(q123, sample_input03) {
  solution = new Solution();
  vector<int> prices = {7, 6, 4, 3, 1};
  int exp = 0;
  EXPECT_EQ(solution->maxProfit(prices), exp);
  delete solution;
}

TEST_F(q123, sample_input04) {
  solution = new Solution();
  vector<int> prices = {1};
  int exp = 0;
  EXPECT_EQ(solution->maxProfit(prices), exp);
  delete solution;
}