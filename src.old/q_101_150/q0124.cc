#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/treenode.hpp>
#include <unordered_map>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 124.
 *      Binary Tree Maximum Path Sum
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   A “path” in a binary tree is a sequence of nodes where each pair of
 *   adjacent nodes in the sequence has an edge connecting them. A node can
 *   only appear in the sequence “at most once” . Note that the path does
 *   not need to pass through the
 *   The “path sum” of a path is the sum of the node's values in the
 *   Given the ‘root’ of a binary tree, return “the maximum “path sum” of
 *   any “non-empty” path” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The number of nodes in the tree is in the range ‘[1, 3 × 10⁴]’ .
 *   • ‘-1000 ≤ Node.val ≤ 1000’
 *
 */

struct q124 : public ::testing::Test {
  // Leetcode answer here
  /**
   * Definition for a binary tree node.
   * struct TreeNode {
   *     int val;
   *     TreeNode *left;
   *     TreeNode *right;
   *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
   *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
   *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
   * };
   */
  class Solution {
   private:
    unordered_map<TreeNode*, int> memo{{nullptr, 0}};
    int findMaxSum(TreeNode* p) {
      if (!memo.count(p)) {
        memo[p] = p->val + max({findMaxSum(p->left), findMaxSum(p->right), 0});
      }
      return memo[p];
    }

   public:
    int maxPathSum(TreeNode* root) {
      if (nullptr == root) return 0;
      int res = root->val + max(findMaxSum(root->left), 0) + max(findMaxSum(root->right), 0);
      if (nullptr != root->left) res = max(res, maxPathSum(root->left));
      if (nullptr != root->right) res = max(res, maxPathSum(root->right));
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q124, sample_input01) {
  solution = new Solution();
  TreeNode* root = TreeNode::generate({1, 2, 3});
  int exp = 6;
  int act = solution->maxPathSum(root);
  EXPECT_EQ(act, exp);
  TreeNode::release(root);
  delete solution;
}

TEST_F(q124, sample_input02) {
  solution = new Solution();
  TreeNode* root = TreeNode::generate({-10, 9, 20, NULL_TREENODE, NULL_TREENODE, 15, 7});
  int exp = 42;
  int act = solution->maxPathSum(root);
  EXPECT_EQ(act, exp);
  TreeNode::release(root);
  delete solution;
}

TEST_F(q124, input01) {
  solution = new Solution();
  TreeNode* root = TreeNode::generate({9, 6, -3, NULL_TREENODE, NULL_TREENODE, -6, 2, NULL_TREENODE, NULL_TREENODE, 2, NULL_TREENODE, -6, -6, -6});
  int exp = 16;
  int act = solution->maxPathSum(root);
  EXPECT_EQ(act, exp);
  TreeNode::release(root);
  delete solution;
}