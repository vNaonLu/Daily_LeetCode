#include <gtest/gtest.h>
#include <iostream>
#include <stack>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 224.
 *      Basic Calculator
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a string ‘s’ representing a valid expression, implement a basic
 *   calculator to evaluate it, and return “the result of the evaluation”
 *    “Note:” You are “not” allowed to use any built-in function which
 *   evaluates strings as mathematical expressions, such as ‘eval()’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s.length ≤ 3 × 10⁵’
 *   • ‘s’ consists of digits, ‘'+'’ , ‘'-'’ , ‘'('’ , ‘')'’ , and ‘' '’ .
 *   • ‘s’ represents a valid expression.
 *   • ‘'+'’ is “not” used as a unary operation (i.e., ‘'+1'’ and ‘'+(2 + 3)'’ is invalid).
 *   • ‘'-'’ could be used as a unary operation (i.e., ‘'-1'’ and ‘'-(2 + 3)'’ is valid).
 *   • There will be no two consecutive operators in the input.
 *   • Every number and running calculation will fit in a signed 32-bit integer.
 *
 */

struct q224 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int calculate(string s) {
      int res = 0, val = 0;
      int sign = 1;
      stack<int> cal;
      for (int i = 0; i < s.size(); ++i) {
        while (i < s.size() && isdigit(s[i])) {
          val = val * 10 + (s[i] - '0');
          ++i;
        }
        res += val * sign;
        val = 0;
        if (s[i] == '+') {
          sign = 1;
        } else if (s[i] == '-') {
          sign = -1;
        } else if (s[i] == '(') {
          cal.push(res);
          cal.push(sign);
          res = 0;
          sign = 1;
        } else if (s[i] == ')') {
          res *= cal.top();
          cal.pop();
          res += cal.top();
          cal.pop();
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q224, sample_input01) {
  solution = new Solution();
  string s = "1 + 1";
  int exp = 2;
  EXPECT_EQ(solution->calculate(s), exp);
  delete solution;
}

TEST_F(q224, sample_input02) {
  solution = new Solution();
  string s = " 2-1 + 2 ";
  int exp = 3;
  EXPECT_EQ(solution->calculate(s), exp);
  delete solution;
}

TEST_F(q224, sample_input03) {
  solution = new Solution();
  string s = "(1+(4+5+2)-3)+(6+8)";
  int exp = 23;
  EXPECT_EQ(solution->calculate(s), exp);
  delete solution;
}