#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 220.
 *      Contains Duplicate III
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an integer array ‘nums’ and two integers ‘k’ and ‘t’ , return
 *   ‘true’ if there are “two distinct indices” ‘i’ and ‘j’ in the array
 *   such that ‘abs(nums[i] - nums[j]) ≤ t’ and ‘abs(i - j) ≤ k’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 2 × 10⁴’
 *   • ‘-2³¹ ≤ nums[i] ≤ 2³¹ - 1’
 *   • ‘0 ≤ k ≤ 10⁴’
 *   • ‘0 ≤ t ≤ 2³¹ - 1’
 *
 */

struct q220 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    bool containsNearbyAlmostDuplicate(vector<int> &nums, int k, int t) {
      auto vt = vector<pair<int64_t, int>>();
      for (auto i = 0; i < nums.size(); ++i) {
        vt.emplace_back(nums[i], i);
      }

      sort(vt.begin(), vt.end());

      for (auto i = 0; i < vt.size(); ++i) {
        for (auto j = i + 1; j < vt.size(); ++j) {
          if (abs(vt[i].first - vt[j].first) <= t) {
            if (abs(vt[i].second - vt[j].second) <= k) {
              return true;
            }
          } else {
            break;
          }
        }
      }

      return false;
    }
  };

  class Solution *solution;
};

TEST_F(q220, sample_input01) {
  solution         = new Solution();
  vector<int> nums = {1, 2, 3, 1};
  int         k    = 3;
  int         t    = 0;
  bool        exp  = true;
  bool        act  = solution->containsNearbyAlmostDuplicate(nums, k, t);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q220, sample_input02) {
  solution         = new Solution();
  vector<int> nums = {1, 0, 1, 1};
  int         k    = 1;
  int         t    = 2;
  bool        exp  = true;
  bool        act  = solution->containsNearbyAlmostDuplicate(nums, k, t);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q220, sample_input03) {
  solution         = new Solution();
  vector<int> nums = {1, 5, 9, 1, 5, 9};
  int         k    = 2;
  int         t    = 3;
  bool        exp  = false;
  bool        act  = solution->containsNearbyAlmostDuplicate(nums, k, t);
  EXPECT_EQ(act, exp);
  delete solution;
}