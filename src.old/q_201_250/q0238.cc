#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 238.
 *      Product of Array Except Self
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an integer array ‘nums’ , return “an array” ‘answer’ “such that”
 *   ‘answer[i]’ “is equal to the product of all the elements of” ‘nums’
 *   “except” ‘nums[i]’
 *   The product of any prefix or suffix of ‘nums’ is “guaranteed” to fit
 *   in a “32-bit”
 *   You must write an algorithm that runs in ‘O(n)’ time and without using
 *   the division operation.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘2 ≤ nums.length ≤ 10⁵’
 *   • ‘-30 ≤ nums[i] ≤ 30’
 *   • The product of any prefix or suffix of ‘nums’ is “guaranteed” to fit in a “32-bit” integer.
 *
 */

struct q238 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    vector<int> productExceptSelf(vector<int>& nums) {
      vector<int> res(nums.size(), 0);
      long total_prod = 1;
      int zero_cnt = 0;
      for (const auto& n : nums) {
        if (n == 0) {
          ++zero_cnt;
        } else {
          total_prod *= n;
        }
      }
      if (zero_cnt <= 1) {
        for (int i = 0; i < nums.size(); ++i) {
          res[i] = zero_cnt == 0 ? total_prod / nums[i] : (nums[i] == 0 ? total_prod : 0);
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q238, sample_input01) {
  solution = new Solution();
  vector<int> nums = {1, 2, 3, 4};
  vector<int> exp = {24, 12, 8, 6};
  EXPECT_EQ(solution->productExceptSelf(nums), exp);
  delete solution;
}

TEST_F(q238, sample_input02) {
  solution = new Solution();
  vector<int> nums = {-1, 1, 0, -3, 3};
  vector<int> exp = {0, 0, 9, 0, 0};
  EXPECT_EQ(solution->productExceptSelf(nums), exp);
  delete solution;
}