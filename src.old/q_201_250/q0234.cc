#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/listnode.hpp>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 234.
 *      Palindrome Linked List
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given the ‘head’ of a singly linked list, return ‘true’ if it is a
 *   palindrome.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The number of nodes in the list is in the range ‘[1, 10⁵]’ .
 *   • ‘0 ≤ Node.val ≤ 9’
 *
 */

struct q234 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    bool isPalindrome(ListNode *head) {
      auto v = vector<decltype(ListNode::val)>();
      while (nullptr != head) {
        v.emplace_back(head->val);
        head = head->next;
      }

      int lo = 0;
      int hi = v.size() - 1;

      while (lo < hi) {
        if (v[lo++] != v[hi--]) {
          return false;
        }
      }

      return true;
    }
  };

  class Solution *solution;
};

TEST_F(q234, sample_input01) {
  solution       = new Solution();
  ListNode *head = ListNode::generate({1, 2, 2, 1});
  bool      exp  = true;
  bool      act  = solution->isPalindrome(head);
  EXPECT_EQ(act, exp);
  ListNode::release(head);
  delete solution;
}

TEST_F(q234, sample_input02) {
  solution       = new Solution();
  ListNode *head = ListNode::generate({1, 2});
  bool      exp  = false;
  bool      act  = solution->isPalindrome(head);
  EXPECT_EQ(act, exp);
  ListNode::release(head);
  delete solution;
}