#include <gtest/gtest.h>
#include <iostream>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 223.
 *      Rectangle Area
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given the coordinates of two “rectilinear” rectangles in a 2D plane,
 *   return “the total area covered by the two rectangles”
 *   The first rectangle is defined by its “bottom-left” corner ‘(ax1,
 *   ay1)’ and its “top-right” corner ‘(ax2, ay2)’
 *   The second rectangle is defined by its “bottom-left” corner ‘(bx1,
 *   by1)’ and its “top-right” corner ‘(bx2, by2)’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘-10⁴ ≤ ax1 ≤ ax2 ≤ 10⁴’
 *   • ‘-10⁴ ≤ ay1 ≤ ay2 ≤ 10⁴’
 *   • ‘-10⁴ ≤ bx1 ≤ bx2 ≤ 10⁴’
 *   • ‘-10⁴ ≤ by1 ≤ by2 ≤ 10⁴’
 *
 */

struct q223 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int computeArea(int ax1, int ay1, int ax2, int ay2, int bx1, int by1,
                    int bx2, int by2) {
      return (ax2 - ax1) * (ay2 - ay1) + (bx2 - bx1) * (by2 - by1) -
             max(0, min(ax2, bx2) - max(ax1, bx1)) *
                 max(0, min(ay2, by2) - max(ay1, by1));
    }
  };

  class Solution *solution;
};

TEST_F(q223, sample_input01) {
  solution = new Solution();
  int ax1  = -3;
  int ay1  = 0;
  int ax2  = 3;
  int ay2  = 4;
  int bx1  = 0;
  int by1  = -1;
  int bx2  = 9;
  int by2  = 2;
  int exp  = 45;
  int act  = solution->computeArea(ax1, ay1, ax2, ay2, bx1, by1, bx2, by2);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q223, sample_input02) {
  solution = new Solution();
  int ax1  = -2;
  int ay1  = -2;
  int ax2  = 2;
  int ay2  = 2;
  int bx1  = -2;
  int by1  = -2;
  int bx2  = 2;
  int by2  = 2;
  int exp  = 16;
  int act  = solution->computeArea(ax1, ay1, ax2, ay2, bx1, by1, bx2, by2);
  EXPECT_EQ(act, exp);
  delete solution;
}