#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 209.
 *      Minimum Size Subarray Sum
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an array of positive integers ‘nums’ and a positive integer
 *   ‘target’ , return the minimal length of a “contiguous subarray”
 *   ‘[numsₗ, numsₗ₊₁, ..., numsᵣ₋₁, numsᵣ]’ of which the sum is greater
 *   than or equal to ‘target’ . If there is no such subarray, return ‘0’
 *   instead.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ target ≤ 10⁹’
 *   • ‘1 ≤ nums.length ≤ 10⁵’
 *   • ‘1 ≤ nums[i] ≤ 10⁵’
 *
 */

struct q209 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int minSubArrayLen(int target, vector<int>& nums) {
      int res = nums.size() + 1;
      int r = 0, sum = 0;
      while (sum < target && r < nums.size()) {
        sum += nums[r++];
      }
      if (sum >= target) res = r;
      for (int i = 0; i < nums.size(); ++i) {
        sum -= nums[i];
        while (sum < target && r < nums.size())
          sum += nums[r++];
        if (sum >= target) {
          res = min(res, r - i - 1);
        }
      }
      return res > nums.size() ? 0 : res;
    }
  };

  class Solution *solution;
};

TEST_F(q209, sample_input01) {
  solution = new Solution();
  int target = 7;
  vector<int> nums = {2, 3, 1, 2, 4, 3};
  int exp = 2;
  EXPECT_EQ(solution->minSubArrayLen(target, nums), exp);
  delete solution;
}

TEST_F(q209, sample_input02) {
  solution = new Solution();
  int target = 4;
  vector<int> nums = {1, 4, 4};
  int exp = 1;
  EXPECT_EQ(solution->minSubArrayLen(target, nums), exp);
  delete solution;
}

TEST_F(q209, sample_input03) {
  solution = new Solution();
  int target = 11;
  vector<int> nums = {1, 1, 1, 1, 1, 1, 1, 1};
  int exp = 0;
  EXPECT_EQ(solution->minSubArrayLen(target, nums), exp);
  delete solution;
}