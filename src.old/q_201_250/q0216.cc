#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/anyorder.hpp>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 216.
 *      Combination Sum III
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Find all valid combinations of ‘k’ numbers that sum up to ‘n’ such
 *   that the following conditions are
 *       - Only numbers ‘1’ through ‘9’ are
 *       - Each number is used “at most once”
 *   Return “a list of all possible valid combinations” . The list must not
 *   contain the same combination twice, and the combinations may be
 *   returned in any order.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘2 ≤ k ≤ 9’
 *   • ‘1 ≤ n ≤ 60’
 *
 */

struct q216 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    bool helper(int k, int n, vector<vector<int>> &res,
                vector<int> &curr, int sum, int from) {
      if (curr.size() >= k) {
        if (sum == n) {
          res.emplace_back(curr);
        } else if (sum > n) {
          return false;
        }
      } else {
        for (int i = from; i <= 9; ++i) {
          curr.emplace_back(i);
          if (!helper(k, n, res, curr, sum + i, i + 1)) {
            curr.pop_back();
            break;
          }
          curr.pop_back();
        }
      }

      return true;
    }

   public:
    vector<vector<int>> combinationSum3(int k, int n) {
      vector<vector<int>> res;
      vector<int> tmp;
      res.reserve(k);
      helper(k, n, res, tmp, 0, 1);

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q216, sample_input01) {
  solution = new Solution();
  int k = 3;
  int n = 7;
  vector<vector<int>> exp = {{1, 2, 4}};
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solution->combinationSum3(k, n), exp);
  delete solution;
}

TEST_F(q216, sample_input02) {
  solution = new Solution();
  int k = 3;
  int n = 9;
  vector<vector<int>> exp = {{1, 2, 6}, {1, 3, 5}, {2, 3, 4}};
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solution->combinationSum3(k, n), exp);
  delete solution;
}

TEST_F(q216, sample_input03) {
  solution = new Solution();
  int k = 4;
  int n = 1;
  vector<vector<int>> exp = {};
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solution->combinationSum3(k, n), exp);
  delete solution;
}