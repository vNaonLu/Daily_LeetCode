#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 213.
 *      House Robber II
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are a professional robber planning to rob houses along a street.
 *   Each house has a certain amount of money stashed. All houses at this
 *   place are “arranged in a circle.” That means the first house is the
 *   neighbor of the last one. Meanwhile, adjacent houses have a security
 *   system connected, and “it will automatically contact the police if two
 *   adjacent houses were broken into on the same night”
 *   Given an integer array ‘nums’ representing the amount of money of each
 *   house, return “the maximum amount of money you can rob tonight
 *   “without alerting the police” ” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 100’
 *   • ‘0 ≤ nums[i] ≤ 1000’
 *
 */

struct q213 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    int helper(vector<int>& prices) {
      if (prices.empty()) return 0;
      if (prices.size() == 1) return prices[0];
      vector<int> res(prices.size(), 0);
      res[0] = prices[0];
      res[1] = max(prices[1], prices[0]);
      for (int i = 2; i < prices.size(); ++i)
        res[i] = max(res[i - 1], res[i - 2] + prices[i]);
      return res.back();
    }
   public:
    int rob(vector<int>& nums) {
      if (nums.empty())
        return 0;
      else if (nums.size() == 1)
        return nums[0];
      vector<int> rob_first(nums.begin(), nums.end() - 1);
      vector<int> not_rob_first(nums.begin() + 1, nums.end());
      return max(helper(rob_first),
                 helper(not_rob_first));
    }
  };

  class Solution *solution;
};

TEST_F(q213, sample_input01) {
  solution = new Solution();
  vector<int> nums = {2, 3, 2};
  int exp = 3;
  EXPECT_EQ(solution->rob(nums), exp);
  delete solution;
}

TEST_F(q213, sample_input02) {
  solution = new Solution();
  vector<int> nums = {1, 2, 3, 1};
  int exp = 4;
  EXPECT_EQ(solution->rob(nums), exp);
  delete solution;
}

TEST_F(q213, sample_input03) {
  solution = new Solution();
  vector<int> nums = {1, 2, 3};
  int exp = 3;
  EXPECT_EQ(solution->rob(nums), exp);
  delete solution;
}