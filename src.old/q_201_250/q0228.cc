#include <gtest/gtest.h>
#include <iostream>
#include <string>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 228.
 *      Summary Ranges
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given a “sorted unique” integer array ‘nums’
 *   Return “the “smallest sorted” list of ranges that “cover all the
 *   numbers in the array exactly” ” . That is, each element of ‘nums’ is
 *   covered by exactly one of the ranges, and there is no integer ‘x’ such
 *   that ‘x’ is in one of the ranges but not in ‘nums’
 *   Each range ‘[a,b]’ in the list should be output
 *       -  ‘'a->b'’ if ‘a ≠ b’
 *       -  ‘'a'’ if ‘a = b’ 
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘0 ≤ nums.length ≤ 20’
 *   • ‘-2³¹ ≤ nums[i] ≤ 2³¹ - 1’
 *   • All the values of ‘nums’ are “unique” .
 *   • ‘nums’ is sorted in ascending order.
 *
 */

struct q228 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    vector<string> summaryRanges(vector<int>& nums) {
      if (nums.empty()) return {};
      vector<string> res;
      int from = nums.front(), to = nums.front();
      for (auto it = nums.begin() + 1; it != nums.end(); ++it) {
        if (to != *it - 1) {
          if (from == to) {
            res.push_back(to_string(from));
          } else {
            res.push_back(to_string(from) + "->" + to_string(to));
          }
          from = to = *it;
        } else {
          to = *it;
        }
      }
      if (from == to) {
        res.push_back(to_string(from));
      } else {
        res.push_back(to_string(from) + "->" + to_string(to));
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q228, sample_input01) {
  solution = new Solution();
  vector<int> nums = {0, 1, 2, 4, 5, 7};
  vector<string> exp = {"0->2", "4->5", "7"};
  vector<string> act = solution->summaryRanges(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q228, sample_input02) {
  solution = new Solution();
  vector<int> nums = {0, 2, 3, 4, 6, 8, 9};
  vector<string> exp = {"0", "2->4", "6", "8->9"};
  vector<string> act = solution->summaryRanges(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}