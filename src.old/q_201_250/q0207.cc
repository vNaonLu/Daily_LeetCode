#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 207.
 *      Course Schedule
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   There are a total of ‘numCourses’ courses you have to take, labeled
 *   from ‘0’ to ‘numCourses - 1’ . You are given an array ‘prerequisites’
 *   where ‘prerequisites[i] = [aᵢ, bᵢ]’ indicates that you “must” take
 *   course ‘bᵢ’ first if you want to take course ‘aᵢ’
 *       - For example, the pair ‘[0, 1]’ , indicates that to take course
 *   ‘0’ you have to first take course ‘1’
 *   Return ‘true’ if you can finish all courses. Otherwise, return ‘false’
 *   .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ numCourses ≤ 2000’
 *   • ‘0 ≤ prerequisites.length ≤ 5000’
 *   • ‘prerequisites[i].length = 2’
 *   • ‘0 ≤ aᵢ, bᵢ < numCourses’
 *   • All the pairs prerequisites[i] are “unique” .
 *
 */

struct q207 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  private:
    enum Status { kIncomplete, kProgress, kComplete };

    bool solve(vector<vector<int>> &v, int cur, vector<Status> &stat) {
      if (stat[cur] == kComplete) {
        return true;
      } else if (stat[cur] == kProgress) {
        return false;
      }

      stat[cur] = kProgress;
      for (auto &x : v[cur]) {
        if (!solve(v, x, stat)) {
          return false;
        }
      }
      stat[cur] = kComplete;

      return true;
    }

  public:
    bool canFinish(int numCourses, vector<vector<int>> &prerequisites) {
      auto req  = vector<vector<int>>(numCourses);
      auto stat = vector<Status>(numCourses, Status::kIncomplete);

      for (auto &v : prerequisites) {
        if (v[0] == v[1]) {
          return false;
        }

        req[v[0]].emplace_back(v[1]);
      }

      for (int i = 0; i < req.size(); ++i) {
        if (!solve(req, i, stat)) {
          return false;
        }
      }

      return true;
    }
  };

  class Solution *solution;
};

TEST_F(q207, sample_input01) {
  solution                          = new Solution();
  int                 numCourses    = 2;
  vector<vector<int>> prerequisites = {
      {1, 0}
  };
  bool exp = true;
  bool act = solution->canFinish(numCourses, prerequisites);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q207, sample_input02) {
  solution                          = new Solution();
  int                 numCourses    = 2;
  vector<vector<int>> prerequisites = {
      {1, 0},
      {0, 1}
  };
  bool exp = false;
  bool act = solution->canFinish(numCourses, prerequisites);
  EXPECT_EQ(act, exp);
  delete solution;
}