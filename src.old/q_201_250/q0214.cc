#include <gtest/gtest.h>
#include <iostream>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 214.
 *      Shortest Palindrome
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given a string ‘s’ . You can convert ‘s’ to a palindrome by
 *   adding characters in front of
 *   Return “the shortest palindrome you can find by performing this
 *   transformation” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘0 ≤ s.length ≤ 5 × 10⁴’
 *   • ‘s’ consists of lowercase English letters only.
 *
 */

struct q214 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    string shortestPalindrome(string s) {
      auto n   = s.size();
      auto rev = string(s);
      reverse(rev.begin(), rev.end());
      auto str = s + "#" + rev;
      auto ns  = str.size();
      auto nxt = vector<int>(ns, 0);
      for (auto i = 1; i < ns; ++i) {
        auto t = nxt[i - 1];
        while (t > 0 && str[i] != s[t]) {
          t = nxt[t - 1];
        }
        if (str[i] == str[t]) {
          ++t;
        }
        nxt[i] = t;
      }
      return rev.substr(0, n - nxt.back()) + s;
    }
  };
  class Solution *solution;
};

TEST_F(q214, sample_input01) {
  solution   = new Solution();
  string s   = "aacecaaa";
  string exp = "aaacecaaa";
  string act = solution->shortestPalindrome(s);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q214, sample_input02) {
  solution   = new Solution();
  string s   = "abcd";
  string exp = "dcbabcd";
  string act = solution->shortestPalindrome(s);
  EXPECT_EQ(act, exp);
  delete solution;
}