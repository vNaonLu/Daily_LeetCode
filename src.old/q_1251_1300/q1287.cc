#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1287.
 *       Element Appearing More Than 25% In Sorted Array
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an integer array “sorted” in non-decreasing order, there is
 *   exactly one integer in the array that occurs more than 25% of the
 *   time, return that integer.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ arr.length ≤ 10⁴’
 *   • ‘0 ≤ arr[i] ≤ 10⁵’
 *
 */

struct q1287 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int findSpecialInteger(vector<int> &arr) {
      auto n    = arr.size();
      auto cand = vector<int>{arr[n / 4], arr[n / 2], arr[(n * 3) / 4]};
      for (auto x : cand) {
        auto beg = lower_bound(arr.begin(), arr.end(), x);
        auto end = upper_bound(arr.begin(), arr.end(), x);
        if (4 * distance(beg, end) > n) {
          return x;
        }
      }
      return -1;
    }
  };

  class Solution *solution;
};

TEST_F(q1287, sample_input01) {
  solution        = new Solution();
  vector<int> arr = {1, 2, 2, 6, 6, 6, 6, 7, 10};
  int         exp = 6;
  int         act = solution->findSpecialInteger(arr);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1287, sample_input02) {
  solution        = new Solution();
  vector<int> arr = {1, 1};
  int         exp = 1;
  int         act = solution->findSpecialInteger(arr);
  EXPECT_EQ(act, exp);
  delete solution;
}