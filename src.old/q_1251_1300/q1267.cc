#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1267.
 *       Count Servers that Communicate
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given a map of a server center, represented as a ‘m × n’
 *   integer matrix ‘grid’ , where 1 means that on that cell there is a
 *   server and 0 means that it is no server. Two servers are said to
 *   communicate if they are on the same row or on the same column.<br
 *   <br
 *   Return the number of serversthat communicate with any other server.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘m = grid.length’
 *   • ‘n = grid[i].length’
 *   • ‘1 ≤ m ≤ 250’
 *   • ‘1 ≤ n ≤ 250’
 *   • ‘grid[i][j] = 0 or 1’
 *
 */

struct q1267 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int countServers(vector<vector<int>>& grid) {
      int         m = grid.size(),
                  n = grid[0].size();
      vector<int> conn_cols(n, 0),
                  conn_rows(m, 0);
      for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
          if (grid[i][j] == 1) {
            ++conn_rows[i];
            ++conn_cols[j];
          }
        }
      }
      int res = 0;
      for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
          if (grid[i][j] == 1 && (conn_rows[i] > 1 || conn_cols[j] > 1)) {
            ++res;
          }
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1267, sample_input01) {
  solution = new Solution();
  vector<vector<int>> grid = {{1, 0}, {0, 1}};
  int exp = 0;
  int act = solution->countServers(grid);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1267, sample_input02) {
  solution = new Solution();
  vector<vector<int>> grid = {{1, 0}, {1, 1}};
  int exp = 3;
  int act = solution->countServers(grid);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1267, sample_input03) {
  solution = new Solution();
  vector<vector<int>> grid = {{1, 1, 0, 0}, {0, 0, 1, 0}, {0, 0, 1, 0}, {0, 0, 0, 1}};
  int exp = 4;
  int act = solution->countServers(grid);
  EXPECT_EQ(act, exp);
  delete solution;
}