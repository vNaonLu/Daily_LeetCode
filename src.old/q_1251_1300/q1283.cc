#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1283.
 *       Find the Smallest Divisor Given a Threshold
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an array of integers ‘nums’ and an integer ‘threshold’ , we will
 *   choose a positive integer ‘divisor’ , divide all the array by it, and
 *   sum the division's result. Find the “smallest” ‘divisor’ such that the
 *   result mentioned above is less than or equal to ‘threshold’
 *   Each result of the division is rounded to the nearest integer greater
 *   than or equal to that element. (For example: ‘7/3 = 3’ and ‘10/2 = 5’
 *   The test cases are generated sothat there will be an answer.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 5 × 10⁴’
 *   • ‘1 ≤ nums[i] ≤ 10⁶’
 *   • ‘nums.length ≤ threshold ≤ 10⁶’
 *
 */

struct q1283 : public ::testing::Test {
  // Leetcode answer here
class Solution {
private:
    bool helper(vector<int> &vs, int threshold, int curr) {
        int res = 0;
        for (auto &x : vs) {
            if (x % curr == 0) {
                res += x / curr;
            } else {
                res += x / curr + 1;
            }
        }
        
        return res <= threshold;
    }
public:
    int smallestDivisor(vector<int>& nums, int threshold) {
        int L = 1,
            R = *max_element(nums.begin(), nums.end());
        while (L <= R) {
            int M = L + (R - L) / 2;
            
            if (helper(nums,threshold, M)) {
                R = M - 1;
            } else {
                L = M + 1;
            }
        }
        
        return R + 1;
    }
};

  class Solution *solution;
};

TEST_F(q1283, sample_input01) {
  solution = new Solution();
  vector<int> nums = {1, 2, 5, 9};
  int threshold = 6;
  int exp = 5;
  int act = solution->smallestDivisor(nums, threshold);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1283, sample_input02) {
  solution = new Solution();
  vector<int> nums = {44, 22, 33, 11, 1};
  int threshold = 5;
  int exp = 44;
  int act = solution->smallestDivisor(nums, threshold);
  EXPECT_EQ(act, exp);
  delete solution;
}