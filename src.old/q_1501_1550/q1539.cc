#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1539.
 *       Kth Missing Positive Number
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an array ‘arr’ of positive integerssorted in a “strictly
 *   increasing order” , and an integer ‘<font face="monospace">k</font>’
 *    “Find the ” <font face="monospace"> ‘kᵗʰ’ </font> “positive integer
 *   that is missing from this array.” 
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ arr.length ≤ 1000’
 *   • ‘1 ≤ arr[i] ≤ 1000’
 *   • ‘1 ≤ k ≤ 1000’
 *   • ‘arr[i] < arr[j]’ for ‘1 ≤ i < j ≤ arr.length’
 *
 */

struct q1539 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int findKthPositive(vector<int>& arr, int k) {
      int l = 0, r = arr.size();
      while (l < r) {
        int m = l + (r - l) / 2;
        int miss = arr[m] - m - 1;
        if (miss < k) {
          l = m + 1;
        } else {
          r = m;
        }
      }

      return l + k;
    }
  };

  class Solution *solution;
};

TEST_F(q1539, sample_input01) {
  solution = new Solution();
  vector<int> arr = {2, 3, 4, 7, 11};
  int k = 5;
  int exp = 9;
  int act = solution->findKthPositive(arr, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1539, sample_input02) {
  solution = new Solution();
  vector<int> arr = {1, 2, 3, 4};
  int k = 2;
  int exp = 6;
  int act = solution->findKthPositive(arr, k);
  EXPECT_EQ(act, exp);
  delete solution;
}