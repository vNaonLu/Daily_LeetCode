#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1508.
 *       Range Sum of Sorted Subarray Sums
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given the array ‘nums’ consisting of ‘n’ positive integers.
 *   You computed the sum of all non-empty continuous subarrays from the
 *   array and then sorted them in non-decreasing order, creating a new
 *   array of ‘n × (n + 1) / 2’
 *    “Return the sum of the numbers from index ” ‘left’ “ to index ”
 *   ‘right’ ( “indexed from 1” ) “, inclusive, in the new array. ” Since
 *   the answer can be a huge number return it modulo ‘10⁹ + 7’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘n = nums.length’
 *   • ‘1 ≤ nums.length ≤ 1000’
 *   • ‘1 ≤ nums[i] ≤ 100’
 *   • ‘1 ≤ left ≤ right ≤ n × (n + 1) / 2’
 *
 */

struct q1508 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  private:
    inline constexpr static int kMod = 1e9 + 7;

  public:
    int rangeSum(vector<int> &nums, int n, int left, int right) {
      vector<int> presum = nums;
      for (auto it = presum.begin() + 1; it != presum.end(); ++it) {
        *it += *(it - 1);
      }

      vector<int> subsum(presum.begin(), presum.begin() + n);
      for (int i = 0; i < n - 1; ++i) {
        for (int j = i + 1; j < n; ++j) {
          subsum.emplace_back(presum[j] - presum[i]);
        }
      }

      sort(subsum.begin(), subsum.end());

      int res = 0;
      for (int i = left - 1; i <= right - 1; ++i) {
        res += subsum[i] % kMod;
        res %= kMod;
      }

      return res % kMod;
    }
  };

  class Solution *solution;
};

TEST_F(q1508, sample_input01) {
  solution = new Solution();
  vector<int> nums = {1, 2, 3, 4};
  int n = 4;
  int left = 1;
  int right = 5;
  int exp = 13;
  int act = solution->rangeSum(nums, n, left, right);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1508, sample_input02) {
  solution = new Solution();
  vector<int> nums = {1, 2, 3, 4};
  int n = 4;
  int left = 3;
  int right = 4;
  int exp = 6;
  int act = solution->rangeSum(nums, n, left, right);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1508, sample_input03) {
  solution = new Solution();
  vector<int> nums = {1, 2, 3, 4};
  int n = 4;
  int left = 1;
  int right = 10;
  int exp = 50;
  int act = solution->rangeSum(nums, n, left, right);
  EXPECT_EQ(act, exp);
  delete solution;
}