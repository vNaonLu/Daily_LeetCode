#include <gtest/gtest.h>
#include <iostream>
#include <string>
#include <unordered_map>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1507.
 *       Reformat Date
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a ‘date’ string in the form ‘Day Month Year’ ,
 *       -  ‘Day’ is in the set ‘{'1st', '2nd', '3rd', '4th', ..., '30th',
 *   '31st'}’
 *       -  ‘Month’ is in the set ‘{'Jan', 'Feb', 'Mar', 'Apr', 'May',
 *   'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'}’
 *       -  ‘Year’ is in the range ‘[1900, 2100]’
 *   Convert the date string to the format ‘YYYY-MM-DD’ ,
 *       -  ‘YYYY’ denotes the 4 digit
 *       -  ‘MM’ denotes the 2 digit
 *       -  ‘DD’ denotes the 2 digit day.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The given dates are guaranteed to be valid, so no error handling is necessary.
 *
 */

struct q1507 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    unordered_map<string, int>    months = {{"Jan", 1}, {"Feb", 2}, {"Mar", 3}, {"Apr", 4},
                                            {"May", 5}, {"Jun", 6}, {"Jul", 7}, {"Aug", 8},
                                            {"Sep", 9}, {"Oct", 10}, {"Nov", 11}, {"Dec", 12}};
    std::vector<std::string_view> suffixes = {"st", "nd", "rd", "th"};

   public:
    string reformatDate(string date) {
      size_t suffix_pos = std::string::npos;

      for (const auto& suffix : suffixes) {
        suffix_pos = date.find(suffix);
        if (suffix_pos != std::string::npos) break;
      }

      auto day = std::stoi(date.substr(0, suffix_pos));
      auto month = months[date.substr(suffix_pos + 3, 3)];
      auto year = date.substr(suffix_pos + 7, 4);

      char res[20];
      sprintf(res, "%s-%02d-%02d", year.c_str(), month, day);
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1507, sample_input01) {
  solution = new Solution();
  string date = "20th Oct 2052";
  string exp = "2052-10-20";
  string act = solution->reformatDate(date);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1507, sample_input02) {
  solution = new Solution();
  string date = "6th Jun 1933";
  string exp = "1933-06-06";
  string act = solution->reformatDate(date);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1507, sample_input03) {
  solution = new Solution();
  string date = "26th May 1960";
  string exp = "1960-05-26";
  string act = solution->reformatDate(date);
  EXPECT_EQ(act, exp);
  delete solution;
}