#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 561.
 *      Array Partition I
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an integer array ‘nums’ of ‘2n’ integers, group these integers
 *   into ‘n’ pairs ‘(a₁, b₁), (a₂, b₂), ..., (aₙ, bₙ)’ such that the sum
 *   of ‘min(aᵢ, bᵢ)’ for all ‘i’ is “maximized” . Return “ the maximized
 *   sum” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ n ≤ 10⁴’
 *   • ‘nums.length = 2 × n’
 *   • ‘-10⁴ ≤ nums[i] ≤ 10⁴’
 *
 */

struct q561 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int arrayPairSum(vector<int>& nums) {
      int res = 0;
      int i = 0;
      sort(nums.begin(), nums.end());
      while (i < nums.size() - 1) {
        res += nums[i++];
        ++i;
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q561, sample_input01) {
  solution = new Solution();
  vector<int> nums = {1, 4, 3, 2};
  int exp = 4;
  EXPECT_EQ(solution->arrayPairSum(nums), exp);
  delete solution;
}

TEST_F(q561, sample_input02) {
  solution = new Solution();
  vector<int> nums = {6, 2, 6, 5, 1, 2};
  int exp = 9;
  EXPECT_EQ(solution->arrayPairSum(nums), exp);
  delete solution;
}