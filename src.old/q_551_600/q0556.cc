#include <gtest/gtest.h>
#include <iostream>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 556.
 *      Next Greater Element III
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a positive integer ‘n’ , find “the smallest integer which has
 *   exactly the same digits existing in the integer” ‘n’ “and is greater
 *   in value than” ‘n’ . If no such positive integer exists, return ‘-1’
 *    “Note” that the returned integer should fit in “32-bit integer” , if
 *   there is a valid answer but it does not fit in “32-bit integer” ,
 *   return ‘-1’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ n ≤ 2³¹ - 1’
 *
 */

struct q556 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int nextGreaterElement(int n) {
      vector<int> dig;
      while (n != 0) {
        dig.emplace_back(n % 10);
        n /= 10;
      }
      int i = 1;
      while (i < dig.size() && dig[i - 1] <= dig[i]) {
        ++i;
      }

      if (i != dig.size()) {
        for (int j = 0; j < i; ++j) {
          if (dig[j] > dig[i]) {
            swap(dig[i], dig[j]);
            break;
          }
        }

        reverse(dig.begin(), dig.begin() + i);

        int64_t res = 0;
        for (auto it = dig.rbegin(); it != dig.rend(); ++it) {
          res = 10 * res + *it;
        }

        if (res <= 0x7fffffff) {
          return res;
        }
      }

      return -1;
    }
  };

  class Solution *solution;
};

TEST_F(q556, sample_input01) {
  solution = new Solution();
  int n = 12;
  int exp = 21;
  int act = solution->nextGreaterElement(n);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q556, sample_input02) {
  solution = new Solution();
  int n = 21;
  int exp = -1;
  int act = solution->nextGreaterElement(n);
  EXPECT_EQ(act, exp);
  delete solution;
}