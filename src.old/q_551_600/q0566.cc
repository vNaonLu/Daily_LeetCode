#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 566.
 *      Reshape the Matrix
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   In MATLAB, there is a handy function called ‘reshape’ which can
 *   reshape an ‘m x n’ matrix into a new one with a different size ‘r x c’
 *   keeping its original
 *   You are given an ‘m x n’ matrix ‘mat’ and two integers ‘r’ and ‘c’
 *   representing the number of rows and the number of columns of the
 *   wanted reshaped
 *   The reshaped matrix should be filled with all the elements of the
 *   original matrix in the same row-traversing order as they
 *   If the ‘reshape’ operation with given parameters is possible and
 *   legal, output the new reshaped matrix; Otherwise, output the original
 *   matrix.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘m = mat.length’
 *   • ‘n = mat[i].length’
 *   • ‘1 ≤ m, n ≤ 100’
 *   • ‘-1000 ≤ mat[i][j] ≤ 1000’
 *   • ‘1 ≤ r, c ≤ 300’
 *
 */

struct q566 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    vector<vector<int>> matrixReshape(vector<vector<int>>& mat, int r, int c) {
      int m = mat.size(), n = mat[0].size();
      if (m * n != r * c) {
        return mat;
      } else {
        vector<vector<int>> res(r, vector<int>(c));
        for (int i = 0; i < m * n; ++i) {
          res[i / c][i % c] = mat[i / n][i % n];
        }
        return res;
      }
    }
  };

  class Solution *solution;
};

TEST_F(q566, sample_input01) {
  solution = new Solution();
  vector<vector<int>> mat = {{1, 2}, {3, 4}};
  int r = 1;
  int c = 4;
  vector<vector<int>> exp = {{1, 2, 3, 4}};
  EXPECT_EQ(solution->matrixReshape(mat, r, c), exp);
  delete solution;
}

TEST_F(q566, sample_input02) {
  solution = new Solution();
  vector<vector<int>> mat = {{1, 2}, {3, 4}};
  int r = 2;
  int c = 4;
  vector<vector<int>> exp = {{1, 2}, {3, 4}};
  EXPECT_EQ(solution->matrixReshape(mat, r, c), exp);
  delete solution;
}