#include <gtest/gtest.h>
#include <iostream>
#include <list>
#include <string>
#include <unordered_map>
#include <unordered_set>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 2053.
 *       Kth Distinct String in an Array
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   A “distinct string” is a string that is present only “once” in an
 *   Given an array of strings ‘arr’ , and an integer ‘k’ , return “the ”
 *   ‘kᵗʰ’ “ “distinct string” present in ” ‘arr’ . If there are “fewer”
 *   than ‘k’ distinct strings, return “an “empty string ” ” ‘''’
 *   Note that the strings are considered in the “order in which they
 *   appear” in the array.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ k ≤ arr.length ≤ 1000’
 *   • ‘1 ≤ arr[i].length ≤ 5’
 *   • ‘arr[i]’ consists of lowercase English letters.
 *
 */

struct q2053 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    string kthDistinct(vector<string> &arr, int k) {
      list<string>                                  candidates;
      unordered_set<string>                         appeared;
      unordered_map<string, list<string>::iterator> memo;

      for (auto &s : arr) {
        auto iter = memo.find(s);
        if (iter == memo.end() && !appeared.count(s)) {
          candidates.emplace_back(s);
          memo[s] = --candidates.end();
          appeared.emplace(s);
        } else {
          if (iter != memo.end()) {
            candidates.erase(iter->second);
            memo.erase(iter);
          }
        }
      }
      auto res = candidates.begin();
      while (--k && res != candidates.end()) {
        ++res;
      }
      return res == candidates.end() ? "" : std::move(*res);
    }
  };

  class Solution *solution;
};

TEST_F(q2053, sample_input01) {
  solution           = new Solution();
  vector<string> arr = {"d", "b", "c", "b", "c", "a"};
  int            k   = 2;
  string         exp = "a";
  string         act = solution->kthDistinct(arr, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2053, sample_input02) {
  solution           = new Solution();
  vector<string> arr = {"aaa", "aa", "a"};
  int            k   = 1;
  string         exp = "aaa";
  string         act = solution->kthDistinct(arr, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2053, sample_input03) {
  solution           = new Solution();
  vector<string> arr = {"a", "b", "a"};
  int            k   = 3;
  string         exp = "";
  string         act = solution->kthDistinct(arr, k);
  EXPECT_EQ(act, exp);
  delete solution;
}
