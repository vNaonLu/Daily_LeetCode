#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 2090.
 *       K Radius Subarray Averages
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given a “0-indexed” array ‘nums’ of ‘n’ integers, and an
 *   integer ‘k’
 *   The “k-radius average” for a subarray of ‘nums’ “centered” at some
 *   index ‘i’ with the “radius” ‘k’ is the average of “all” elements in
 *   ‘nums’ between the indices ‘i - k’ and ‘i + k’ ( “inclusive” ). If
 *   there are less than ‘k’ elements before “or” after the index ‘i’ ,
 *   then the “k-radius average” is ‘-1’
 *   Build and return “an array ” ‘avgs’ “ of length ” ‘n’ “ where ”
 *   ‘avgs[i]’ “ is the “k-radius average” for the subarray centered at
 *   index ” ‘i’
 *   The “average” of ‘x’ elements is the sum of the ‘x’ elements divided
 *   by ‘x’ , using “integer division” . The integer division truncates
 *   toward zero, which means losing its fractional
 *       - For example, the average of four elements ‘2’ , ‘3’ , ‘1’ , and
 *   ‘5’ is ‘(2 + 3 + 1 + 5) / 4 = 11 / 4 = 2.75’ , which truncates to ‘2’ 
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘n = nums.length’
 *   • ‘1 ≤ n ≤ 10⁵’
 *   • ‘0 ≤ nums[i], k ≤ 10⁵’
 *
 */

struct q2090 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    vector<int> getAverages(vector<int>& nums, int k) {
      vector<int> res(nums.size(), -1);
      int         left = 0,
                  unit = 2 * k + 1;
      size_t      sum = 0,
                  length = 0;
      for (int i = 0; i < nums.size(); ++i) {
        ++length;
        sum += nums[i];
        while (length > unit) {
          --length;
          sum -= nums[left++];
        }
        if (length == unit) res[i - k] = sum / unit;
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q2090, sample_input01) {
  solution = new Solution();
  vector<int> nums = {7, 4, 3, 9, 1, 8, 5, 2, 6};
  int k = 3;
  vector<int> exp = {-1, -1, -1, 5, 4, 4, -1, -1, -1};
  vector<int> act = solution->getAverages(nums, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2090, sample_input02) {
  solution = new Solution();
  vector<int> nums = {100000};
  int k = 0;
  vector<int> exp = {100000};
  vector<int> act = solution->getAverages(nums, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2090, sample_input03) {
  solution = new Solution();
  vector<int> nums = {8};
  int k = 100000;
  vector<int> exp = {-1};
  vector<int> act = solution->getAverages(nums, k);
  EXPECT_EQ(act, exp);
  delete solution;
}