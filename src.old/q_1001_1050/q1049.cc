#include <gtest/gtest.h>
#include <iostream>
#include <numeric>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1049.
 *       Last Stone Weight II
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an array of integers ‘stones’ where ‘stones[i]’ is the
 *   weight of the ‘iᵗʰ’
 *   We are playing a game with the stones. On each turn, we choose any two
 *   stones and smash them together. Suppose the stones have weights ‘x’
 *   and ‘y’ with ‘x ≤ y’ . The result of this smash
 *       - If ‘x = y’ , both stones are destroyed,
 *       - If ‘x ≠ y’ , the stone of weight ‘x’ is destroyed, and the stone
 *   of weight ‘y’ has new weight ‘y - x’
 *   At the end of the game, there is “at most one” stone
 *   Return “the smallest possible weight of the left stone” . If there are
 *   no stones left, return ‘0’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ stones.length ≤ 30’
 *   • ‘1 ≤ stones[i] ≤ 100’
 *
 */

struct q1049 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int lastStoneWeightII(vector<int>& stones) {
      auto sum = accumulate(stones.begin(), stones.end(), 0);
      vector<vector<int>> dp(stones.size() + 1, vector<int>(sum / 2 + 1, 0));

      for (int i = 0; i <= stones.size(); ++i) {
        dp[i][0] = 1;
      }

      for (int i = 1; i < dp.size(); ++i) {
        for (int j = 1; j < dp.front().size(); ++j) {
          if (j >= stones[i - 1]) {
            dp[i][j] = dp[i - 1][j] || dp[i - 1][j - stones[i - 1]];
          } else {
            dp[i][j] = dp[i - 1][j];
          }
        }
      }

      int res = numeric_limits<int>::max();
      for (int i = 0; i < dp.back().size(); ++i) {
        if (dp.back()[i]) {
          res = min<int>(res, sum - 2 * i);
        }
      }

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1049, sample_input01) {
  solution = new Solution();
  vector<int> stones = {2, 7, 4, 1, 8, 1};
  int exp = 1;
  int act = solution->lastStoneWeightII(stones);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1049, sample_input02) {
  solution = new Solution();
  vector<int> stones = {31, 26, 33, 21, 40};
  int exp = 5;
  int act = solution->lastStoneWeightII(stones);
  EXPECT_EQ(act, exp);
  delete solution;
}