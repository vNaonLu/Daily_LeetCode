#include <gtest/gtest.h>
#include <iostream>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1047.
 *       Remove All Adjacent Duplicates In String
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given a string ‘s’ consisting of lowercase English letters. A
 *   “duplicate removal” consists of choosing two “adjacent” and “equal”
 *   letters and removing
 *   We repeatedly make “duplicate removals” on ‘s’ until we no longer
 *   Return “the final string after all such duplicate removals have been
 *   made” . It can be proven that the answer is “unique” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s.length ≤ 10⁵’
 *   • ‘s’ consists of lowercase English letters.
 *
 */

struct q1047 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    string removeDuplicates(string s) {
      auto res = string("");
      res.reserve(s.size());
      for (auto c : s) {
        if (res.empty() || res.back() != c) {
          res.push_back(c);
        } else {
          res.pop_back();
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1047, sample_input01) {
  solution   = new Solution();
  string s   = "abbaca";
  string exp = "ca";
  string act = solution->removeDuplicates(s);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1047, sample_input02) {
  solution   = new Solution();
  string s   = "azxxzy";
  string exp = "ay";
  string act = solution->removeDuplicates(s);
  EXPECT_EQ(act, exp);
  delete solution;
}