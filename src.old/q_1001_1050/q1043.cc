#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 1043.
 *       Partition Array for Maximum Sum
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an integer array ‘arr’ , partition the array into (contiguous)
 *   subarrays of length “at most” ‘k’ . After partitioning, each subarray
 *   has their values changed to become the maximum value of that
 *   Return “the largest sum of the given array after partitioning. Test
 *   cases are generated so that the answer fits in a “32-bit” integer.” 
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ arr.length ≤ 500’
 *   • ‘0 ≤ arr[i] ≤ 10⁹’
 *   • ‘1 ≤ k ≤ arr.length’
 *
 */

struct q1043 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int maxSumAfterPartitioning(vector<int>& arr, int k) {
      vector<int> dp(arr.size(), 0);
      dp.front() = arr.front();
      for (int i = 1; i < arr.size(); ++i) {
        int M = arr[i];
        for (int j = i; j > (i - k) && j >= 0; --j) {
          M = max(M, arr[j]);
          dp[i] = max(dp[i], M * (i - j + 1) + (j - 1 >= 0 ? dp[j - 1] : 0));
        }
      }
      return dp.back();
    }
  };

  class Solution *solution;
};

TEST_F(q1043, sample_input01) {
  solution = new Solution();
  vector<int> arr = {1, 15, 7, 9, 2, 5, 10};
  int k = 3;
  int exp = 84;
  EXPECT_EQ(solution->maxSumAfterPartitioning(arr, k), exp);
  delete solution;
}

TEST_F(q1043, sample_input02) {
  solution = new Solution();
  vector<int> arr = {1, 4, 1, 5, 7, 3, 6, 1, 9, 9, 3};
  int k = 4;
  int exp = 83;
  EXPECT_EQ(solution->maxSumAfterPartitioning(arr, k), exp);
  delete solution;
}

TEST_F(q1043, sample_input03) {
  solution = new Solution();
  vector<int> arr = {1};
  int k = 1;
  int exp = 1;
  EXPECT_EQ(solution->maxSumAfterPartitioning(arr, k), exp);
  delete solution;
}