#include <gtest/gtest.h>
#include <deque>
#include <iostream>
#include <string>
#include <unordered_map>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 1044.
 *       Longest Duplicate Substring
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a string ‘s’ , consider all “duplicated substrings” :
 *   (contiguous) substrings of s that occur 2 or more times.The
 *   occurrencesmay
 *   Return “any” duplicatedsubstring that has the longest possible
 *   length.If ‘s’ does not have a duplicated substring, the answer is ‘''’
 *   .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘2 ≤ s.length ≤ 3 × 10⁴’
 *   • ‘s’ consists of lowercase English letters.
 *
 */

struct q1044 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    string longestDupSubstring(string s) {
      int begin = 0, length = 0;
      int n = s.size();
      unordered_map<char, deque<int>> hash;
      for (int i = 0; i < n; ++i)
        hash[s[i]].emplace_back(i);
      for (int i = 0; i < n; ++i) {
        hash[s[i]].pop_front();
        for (auto it : hash[s[i]]) {
          int j = 0;
          while (i + j < n && it + j < n && s[i + j] == s[it + j]) ++j;
          if (j > length) {
            begin = i;
            length = j;
          }
          if (j == n - i - 1) return s.substr(begin, length);
        }
      }
      return length == 0 ? "" : s.substr(begin, length);
    }
  };

  class Solution *solution;
};

TEST_F(q1044, sample_input01) {
  solution = new Solution();
  string s = "banana";
  string exp = "ana";
  EXPECT_EQ(solution->longestDupSubstring(s), exp);
  delete solution;
}

TEST_F(q1044, sample_input02) {
  solution = new Solution();
  string s = "abcd";
  string exp = "";
  EXPECT_EQ(solution->longestDupSubstring(s), exp);
  delete solution;
}