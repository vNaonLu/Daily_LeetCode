#include <gtest/gtest.h>
#include <iostream>
#include <numeric>
#include <vector>

using namespace std;

/**
 * The file is generated by LeetCodeDailyTools
 *
 * 1011.
 *       Capacity To Ship Packages Within D Days
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   A conveyor belt has packages that must be shipped from one port to
 *   another within ‘days’
 *   The ‘iᵗʰ’ package on the conveyor belt has a weight of ‘weights[i]’ .
 *   Each day, we load the ship with packages on the conveyor belt (in the
 *   order given by ‘weights’ ). We may not load more weight than the
 *   maximum weight capacity of the
 *   Return the least weight capacity of the ship that will result in all
 *   the packages on the conveyor belt being shipped within ‘days’
 *
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ days ≤ weights.length ≤ 5 × 10⁴’
 *   • ‘1 ≤ weights[i] ≤ 500’
 *
 * see more details:
 * https://leetcode.com/problems/capacity-to-ship-packages-within-d-days/
 */

struct q1011 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int shipWithinDays(vector<int> &weights, int days) {
      int lo = *max_element(weights.begin(), weights.end());
      int hi = accumulate(weights.begin(), weights.end(), 0);
      while (lo < hi) {
        int mid = lo + (hi - lo) / 2;
        int cur = 0, need = 1;
        for (int w : weights) {
          if (cur + w > mid) {
            cur = 0;
            need++;
          }
          cur += w;
        }
        if (need <= days) {
          hi = mid;
        } else {
          lo = mid + 1;
        }
      }
      return lo;
    }
  };

  class Solution *solution;
};

TEST_F(q1011, sample_input01) {
  solution            = new Solution();
  vector<int> weights = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
  int         days    = 5;
  int         exp     = 15;
  int         act     = solution->shipWithinDays(weights, days);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1011, sample_input02) {
  solution            = new Solution();
  vector<int> weights = {3, 2, 2, 4, 1, 4};
  int         days    = 3;
  int         exp     = 6;
  int         act     = solution->shipWithinDays(weights, days);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1011, sample_input03) {
  solution            = new Solution();
  vector<int> weights = {1, 2, 3, 1, 1};
  int         days    = 4;
  int         exp     = 3;
  int         act     = solution->shipWithinDays(weights, days);
  EXPECT_EQ(act, exp);
  delete solution;
}
