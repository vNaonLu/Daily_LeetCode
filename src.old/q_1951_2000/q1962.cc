#include <gtest/gtest.h>
#include <iostream>
#include <queue>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1962.
 *       Remove Stones to Minimize the Total
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given a “0-indexed” integer array ‘piles’ , where ‘piles[i]’
 *   represents the number of stones in the ‘iᵗʰ’ pile, and an integer ‘k’
 *   . You should apply the following operation “exactly” ‘k’
 *       - Choose any ‘piles[i]’ and “remove” ‘floor(piles[i] / 2)’ stones
 *   from
 *    “Notice” that you can apply the operation on the “same” pile more
 *   than
 *   Return “the “minimum” possible total number of stones remaining after
 *   applying the ” ‘k’ “ operations”
 *    ‘floor(x)’ is the “greatest” integer that is “smaller” than or
 *   “equal” to ‘x’ (i.e., rounds ‘x’ down).
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ piles.length ≤ 10⁵’
 *   • ‘1 ≤ piles[i] ≤ 10⁴’
 *   • ‘1 ≤ k ≤ 10⁵’
 *
 */

struct q1962 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int minStoneSum(vector<int> &piles, int k) {
      auto pq = priority_queue<int>();
      for (auto x : piles) {
        pq.emplace(x);
      }
      while (k--) {
        auto n = pq.top();
        pq.pop();
        pq.emplace(n - n / 2);
      }
      auto res = (int)0;
      while (!pq.empty()) {
        res += pq.top();
        pq.pop();
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1962, sample_input01) {
  solution          = new Solution();
  vector<int> piles = {5, 4, 9};
  int         k     = 2;
  int         exp   = 12;
  int         act   = solution->minStoneSum(piles, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1962, sample_input02) {
  solution          = new Solution();
  vector<int> piles = {4, 3, 6, 7};
  int         k     = 3;
  int         exp   = 12;
  int         act   = solution->minStoneSum(piles, k);
  EXPECT_EQ(act, exp);
  delete solution;
}
