#include <gtest/gtest.h>
#include <iostream>
#include <string>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1967.
 *       Number of Strings That Appear as Substrings in Word
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an array of strings ‘patterns’ and a string ‘word’ , return “the
 *   “number” of strings in ” ‘patterns’ “ that exist as a “substring” in ”
 *   ‘word’
 *   A “substring” is a contiguous sequence of characters within a string.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ patterns.length ≤ 100’
 *   • ‘1 ≤ patterns[i].length ≤ 100’
 *   • ‘1 ≤ word.length ≤ 100’
 *   • ‘patterns[i]’ and ‘word’ consist of lowercase English letters.
 *
 */

struct q1967 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int numOfStrings(vector<string> &patterns, string word) {
      int res = 0;
      for (auto &v : patterns) {
        if (word.find(v) != string::npos) {
          ++res;
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1967, sample_input01) {
  solution = new Solution();
  vector<string> patterns = {"a", "abc", "bc", "d"};
  string word = "abc";
  int exp = 3;
  int act = solution->numOfStrings(patterns, word);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1967, sample_input02) {
  solution = new Solution();
  vector<string> patterns = {"a", "b", "c"};
  string word = "aaaaabbbbb";
  int exp = 2;
  int act = solution->numOfStrings(patterns, word);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1967, sample_input03) {
  solution = new Solution();
  vector<string> patterns = {"a", "a", "a"};
  string word = "ab";
  int exp = 3;
  int act = solution->numOfStrings(patterns, word);
  EXPECT_EQ(act, exp);
  delete solution;
}