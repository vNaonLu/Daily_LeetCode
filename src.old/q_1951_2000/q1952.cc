#include <cmath>
#include <gtest/gtest.h>
#include <iostream>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1952.
 *       Three Divisors
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an integer ‘n’ , return ‘true’ “ if ” ‘n’ “ has “exactly three
 *   positive divisors” . Otherwise, return ” ‘false’
 *   An integer ‘m’ is a “divisor” of ‘n’ if there exists an integer ‘k’
 *   such that ‘n = k × m’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ n ≤ 10⁴’
 *
 */

struct q1952 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    bool isThree(int n) {
      auto res = (int)2;
      for (int i = 2; i <= sqrt(n); ++i) {
        if (n % i == 0) {
          ++res;
          if (i != n / i) {
            ++res;
          }
        }
        if (res > 3) {
          break;
        }
      }
      return res == 3;
    }
  };

  class Solution *solution;
};

TEST_F(q1952, sample_input01) {
  solution = new Solution();
  int  n   = 2;
  bool exp = false;
  bool act = solution->isThree(n);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1952, sample_input02) {
  solution = new Solution();
  int  n   = 4;
  bool exp = true;
  bool act = solution->isThree(n);
  EXPECT_EQ(act, exp);
  delete solution;
}
