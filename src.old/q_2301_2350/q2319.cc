#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 2319.
 *       Check if Matrix Is X-Matrix
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   A square matrix is said to be an “X-Matrix” if “both” of the following
 *   conditions
 *       1. All the elements in the diagonals of the matrix are “non-zero”
 *       2. All other elements are
 *   Given a 2D integer array ‘grid’ of size ‘n x n’ representing a square
 *   matrix, return ‘true’ “ if ” ‘grid’ “ is an X-Matrix” . Otherwise,
 *   return ‘false’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘n = grid.length = grid[i].length’
 *   • ‘3 ≤ n ≤ 100’
 *   • ‘0 ≤ grid[i][j] ≤ 10⁵’
 *
 */

struct q2319 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    bool checkXMatrix(vector<vector<int>> &grid) {
      int n = grid.size();
      for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
          auto curr = grid[i][j];
          if (i == j || i + j == n - 1) {
            if (grid[i][j] == 0) {
              return false;
            }
          } else if (grid[i][j] != 0) {
            return false;
          }
        }
      }
      return true;
    }
  };

  class Solution *solution;
};

TEST_F(q2319, sample_input01) {
  solution                 = new Solution();
  vector<vector<int>> grid = {
      {2, 0, 0, 1},
      {0, 3, 1, 0},
      {0, 5, 2, 0},
      {4, 0, 0, 2}
  };
  bool exp = true;
  bool act = solution->checkXMatrix(grid);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2319, sample_input02) {
  solution                 = new Solution();
  vector<vector<int>> grid = {
      {5, 7, 0},
      {0, 3, 1},
      {0, 5, 0}
  };
  bool exp = false;
  bool act = solution->checkXMatrix(grid);
  EXPECT_EQ(act, exp);
  delete solution;
}
