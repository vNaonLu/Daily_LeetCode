#include <gtest/gtest.h>
#include <iostream>
#include <queue>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 378.
 *      Kth Smallest Element in a Sorted Matrix
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an ‘n x n’  ‘matrix’ where each of the rows and columns is
 *   sorted in ascending order, return “the” ‘kᵗʰ’ “smallest element in the
 *   matrix”
 *   Note that it is the ‘kᵗʰ’ smallest element “in the sorted order” , not
 *   the ‘kᵗʰ’ “distinct”
 *   You must find a solution with a memory complexity better than ‘O(n²)’ 
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘n = matrix.length = matrix[i].length’
 *   • ‘1 ≤ n ≤ 300’
 *   • ‘-10⁹ ≤ matrix[i][j] ≤ 10⁹’
 *   • All the rows and columns of ‘matrix’ are “guaranteed” to be sorted in “non-decreasing order” .
 *   • ‘1 ≤ k ≤ n²’
 *   • Could you solve the problem with a constant memory (i.e., ‘O(1)’ memory complexity)?
 *   • Could you solve the problem in ‘O(n)’ time complexity? The solution may be too advanced for an interview but you may find reading <a href="http://www.cse.yorku.ca/~andy/pubs/X+Y.pdf" target="_blank">this paper</a> fun.
 *
 */

struct q378 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int kthSmallest(vector<vector<int>> &matrix, int k) {
      priority_queue<int> pq;
      for (auto &v : matrix) {
        for (auto &x : v) {
          pq.emplace(x);
          if (pq.size() > k) {
            pq.pop();
          }
        }
      }

      return pq.top();
    }
  };

  class Solution *solution;
};

TEST_F(q378, sample_input01) {
  solution = new Solution();
  vector<vector<int>> matrix = {{1, 5, 9}, {10, 11, 13}, {12, 13, 15}};
  int k = 8;
  int exp = 13;
  int act = solution->kthSmallest(matrix, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q378, sample_input02) {
  solution = new Solution();
  vector<vector<int>> matrix = {{-5}};
  int k = 1;
  int exp = -5;
  int act = solution->kthSmallest(matrix, k);
  EXPECT_EQ(act, exp);
  delete solution;
}