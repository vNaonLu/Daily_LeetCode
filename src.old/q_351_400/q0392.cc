#include <gtest/gtest.h>
#include <iostream>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 392.
 *      Is Subsequence
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given two strings ‘s’ and ‘t’ , return ‘true’ “ if ” ‘s’ “ is a
 *   “subsequence” of ” ‘t’ “, or ” ‘false’ “ otherwise”
 *   A “subsequence” of a string is a new string that is formed from the
 *   original string by deleting some (can be none) of the characters
 *   without disturbing the relative positions of the remaining characters.
 *   (i.e., ‘'ace'’ is a subsequence of ‘'<u>a</u>b<u>c</u>d<u>e</u>'’
 *   while ‘'aec'’ is not).
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘0 ≤ s.length ≤ 100’
 *   • ‘0 ≤ t.length ≤ 10⁴’
 *   • ‘s’ and ‘t’ consist only of lowercase English letters.
 *
 */

struct q392 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    bool isSubsequence(string s, string t) {
      auto sbeg = s.begin();
      auto tbeg = t.begin();
      while (tbeg != t.end() && sbeg != s.end()) {
        if (*sbeg == *tbeg++) {
          ++sbeg;
        }
      }
      return sbeg == s.end();
    }
  };

  class Solution *solution;
};

TEST_F(q392, sample_input01) {
  solution   = new Solution();
  string s   = "abc";
  string t   = "ahbgdc";
  bool   exp = true;
  EXPECT_EQ(solution->isSubsequence(s, t), exp);
  delete solution;
}

TEST_F(q392, sample_input02) {
  solution   = new Solution();
  string s   = "axc";
  string t   = "ahbgdc";
  bool   exp = false;
  EXPECT_EQ(solution->isSubsequence(s, t), exp);
  delete solution;
}