#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 375.
 *      Guess Number Higher or Lower II
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   We are playing the Guessing Game. The game will work as
 *       1. I pick a number between ‘1’ and ‘n’
 *       2. You guess a
 *       3. If you guess the right number, “you win the game”
 *       4. If you guess the wrong number, then I will tell you whether the
 *   number I picked is “higher or lower” , and you will continue
 *       5. Every time you guess a wrong number ‘x’ , you will pay ‘x’
 *   dollars. If you run out of money, “you lose the game”
 *   Given a particular ‘n’ , return “the minimum amount of money you need
 *   to “guarantee a win regardless of what number I pick” ” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ n ≤ 200’
 *
 */

struct q375 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    vector<vector<int>> memos;
    int helper(int beg, int end) {
      if (beg >= end) return 0;
      if (memos[beg][end] == -1) {
        int res = numeric_limits<int>::max();
        for (int i = beg; i <= end; ++i) {
          int temp = i;
          temp += max(helper(beg, i - 1), helper(i + 1, end));
          res = min(res, temp);
        }
        memos[beg][end] = res;
      }
      return memos[beg][end];
    }

   public:
    int getMoneyAmount(int n) {
      memos.resize(n + 1, vector<int>(n + 1, -1));
      return helper(1, n);
    }
  };

  class Solution *solution;
};

TEST_F(q375, sample_input01) {
  solution = new Solution();
  int n = 10;
  int exp = 16;
  int act = solution->getMoneyAmount(n);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q375, sample_input02) {
  solution = new Solution();
  int n = 1;
  int exp = 0;
  int act = solution->getMoneyAmount(n);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q375, sample_input03) {
  solution = new Solution();
  int n = 2;
  int exp = 1;
  int act = solution->getMoneyAmount(n);
  EXPECT_EQ(act, exp);
  delete solution;
}