#include <gtest/gtest.h>
#include <iostream>
#include <string>
#include <unordered_map>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 383.
 *      Ransom Note
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given two stings ‘ransomNote’ and ‘magazine’ , return ‘true’ if
 *   ‘ransomNote’ can be constructed from ‘magazine’ and ‘false’
 *   Each letter in ‘magazine’ can only be used once in ‘ransomNote’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ ransomNote.length, magazine.length ≤ 10⁵’
 *   • ‘ransomNote’ and ‘magazine’ consist of lowercase English letters.
 *
 */

struct q383 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  private:
    template <typename Iterator>
    auto getDictionary(Iterator beg, Iterator end) {
      auto res = unordered_map<typename Iterator::value_type, uint32_t>();
      while (beg != end) {
        ++res[*beg++];
      }
      return res;
    }

  public:
    bool canConstruct(string ransomNote, string magazine) {
      auto dict = getDictionary(magazine.begin(), magazine.end());
      auto beg  = ransomNote.begin();
      while (beg != ransomNote.end()) {
        auto find = dict.find(*beg++);
        if (find == dict.end() || find->second == 0) {
          return false;
        }
        --find->second;
      }
      return true;
    }
  };

  class Solution *solution;
};

TEST_F(q383, sample_input01) {
  solution          = new Solution();
  string ransomNote = "a";
  string magazine   = "b";
  bool   exp        = false;
  EXPECT_EQ(solution->canConstruct(ransomNote, magazine), exp);
  delete solution;
}

TEST_F(q383, sample_input02) {
  solution          = new Solution();
  string ransomNote = "aa";
  string magazine   = "ab";
  bool   exp        = false;
  EXPECT_EQ(solution->canConstruct(ransomNote, magazine), exp);
  delete solution;
}

TEST_F(q383, sample_input03) {
  solution          = new Solution();
  string ransomNote = "aa";
  string magazine   = "aab";
  bool   exp        = true;
  EXPECT_EQ(solution->canConstruct(ransomNote, magazine), exp);
  delete solution;
}