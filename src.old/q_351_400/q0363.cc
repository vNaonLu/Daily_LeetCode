#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 363.
 *      Max Sum of Rectangle No Larger Than K
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an ‘m x n’ matrix ‘matrix’ and an integer ‘k’ , return “the max
 *   sum of a rectangle in the matrix such that its sum is no larger than”
 *   ‘k’
 *   It is “guaranteed” that there will be a rectangle with a sum no larger
 *   than ‘k’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘m = matrix.length’
 *   • ‘n = matrix[i].length’
 *   • ‘1 ≤ m, n ≤ 100’
 *   • ‘-100 ≤ matrix[i][j] ≤ 100’
 *   • ‘-10⁵ ≤ k ≤ 10⁵’
 *
 */

struct q363 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  private:
    inline auto calcPrefixSum(vector<vector<int>> const &matrix) {
      auto m   = matrix.size();
      auto n   = matrix.front().size();
      auto res = vector<vector<int>>(m + 1, vector<int>(n));
      for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
          res[i + 1][j] = res[i][j] + matrix[i][j];
        }
      }
      return res;
    }

  public:
    int maxSumSubmatrix(vector<vector<int>> &matrix, int k) {
      auto m      = matrix.size();
      auto n      = matrix.front().size();
      auto prefix = calcPrefixSum(matrix);
      auto res    = numeric_limits<int>::min();

      for (int i = 0; i < m; ++i) {
        for (int l = i + 1; l <= m; ++l) {
          for (int j = 0; j < n; ++j) {
            auto val = (int)(0);
            for (int t = j; t < n; ++t) {
              val += prefix[l][t] - prefix[i][t];

              if (val < k) {
                res = max(val, res);
              } else if (val == k) {
                return k;
              }
            }
          }
        }
      }

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q363, sample_input01) {
  solution                   = new Solution();
  vector<vector<int>> matrix = {
      {1,  0, 1},
      {0, -2, 3}
  };
  int k   = 2;
  int exp = 2;
  int act = solution->maxSumSubmatrix(matrix, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q363, sample_input02) {
  solution                   = new Solution();
  vector<vector<int>> matrix = {
      {2, 2, -1}
  };
  int k   = 3;
  int exp = 3;
  int act = solution->maxSumSubmatrix(matrix, k);
  EXPECT_EQ(act, exp);
  delete solution;
}