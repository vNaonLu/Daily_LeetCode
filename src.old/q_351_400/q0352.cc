#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 352.
 *      Data Stream as Disjoint Intervals
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a data stream input of non-negative integers ‘a₁, a₂, ..., aₙ’ ,
 *   summarize the numbers seen so far as a list of disjoint
 *   Implement the ‘SummaryRanges’
 *       -  ‘SummaryRanges()’ Initializes the object with an empty
 *       -  ‘void addNum(int val)’ Adds the integer ‘val’ to the
 *       -  ‘int[][] getIntervals()’ Returns a summary of the integers in
 *   the stream currently as a list of disjoint intervals ‘[startᵢ, endᵢ]’ 
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘0 ≤ val ≤ 10⁴’
 *   • At most ‘3 × 10⁴’ calls will be made to ‘addNum’ and ‘getIntervals’ .
 *
 */

struct q352 : public ::testing::Test {
  // Leetcode answer here
  class SummaryRanges {
   private:
    vector<bool> memos;
    int max_value;

   public:
    SummaryRanges()
        : memos(10001, false), max_value{numeric_limits<int>::min()} {}

    void addNum(int val) {
      memos[val] = true;
      max_value = max(max_value, val);
    }

    vector<vector<int>> getIntervals() {
      vector<vector<int>> res;
      for (int i = 0; i <= max_value + 1; ++i) {
        if (memos[i] == false) continue;
        int beg = i;

        while (memos[i] && i <= max_value + 1) {
          ++i;
        }

        if (beg != -1 && memos[i] == false) {
          res.emplace_back(vector<int>{beg, i - 1});
        }
      }
      return res;
    }
  };

  class SummaryRanges *summary_ranges;
};

TEST_F(q352, sample_input01) {
  summary_ranges = new SummaryRanges();
  summary_ranges->addNum(1);
  vector<vector<int>> exp = {{1, 1}};
  EXPECT_EQ(summary_ranges->getIntervals(), exp);
  summary_ranges->addNum(3);
  exp = {{1, 1}, {3, 3}};
  EXPECT_EQ(summary_ranges->getIntervals(), exp);
  summary_ranges->addNum(7);
  exp = {{1, 1}, {3, 3}, {7, 7}};
  EXPECT_EQ(summary_ranges->getIntervals(), exp);
  summary_ranges->addNum(2);
  exp = {{1, 3}, {7, 7}};
  EXPECT_EQ(summary_ranges->getIntervals(), exp);
  summary_ranges->addNum(6);
  exp = {{1, 3}, {6, 7}};
  EXPECT_EQ(summary_ranges->getIntervals(), exp);
  delete summary_ranges;
}