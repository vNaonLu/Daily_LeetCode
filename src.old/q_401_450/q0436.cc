#include <gtest/gtest.h>
#include <iostream>
#include <map>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 436.
 *      Find Right Interval
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an array of ‘intervals’ , where ‘intervals[i] = [startᵢ,
 *   endᵢ]’ and each ‘startᵢ’ is “unique”
 *   The “right interval” for an interval ‘i’ is an interval ‘j’ such that
 *   ‘startⱼ ≥ endᵢ’ and ‘startⱼ’ is “minimized” . Note that ‘i’ may equal
 *   ‘j’
 *   Return “an array of “right interval” indices for each interval ‘i’ ” .
 *   If no “right interval” exists for interval ‘i’ , then put ‘-1’ at
 *   index ‘i’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ intervals.length ≤ 2 × 10⁴’
 *   • ‘intervals[i].length = 2’
 *   • ‘-10⁶ ≤ startᵢ ≤ endᵢ ≤ 10⁶’
 *   • The start point of each interval is “unique” .
 *
 */

struct q436 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    vector<int> findRightInterval(vector<vector<int>> &intervals) {
      vector<int> res;
      res.reserve(intervals.size());
      map<int, int> memo; // end -> index

      for (int i = 0; i < intervals.size(); ++i) {
        memo[intervals[i][0]] = i;
      }

      for (auto &v : intervals) {
        auto find = memo.lower_bound(v[1]);
        if (find == memo.end()) {
          res.emplace_back(-1);
        } else {
          res.emplace_back(find->second);
        }
      }

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q436, sample_input01) {
  solution = new Solution();
  vector<vector<int>> intervals = {{1, 2}};
  vector<int> exp = {-1};
  vector<int> act = solution->findRightInterval(intervals);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q436, sample_input02) {
  solution = new Solution();
  vector<vector<int>> intervals = {{3, 4}, {2, 3}, {1, 2}};
  vector<int> exp = {-1, 0, 1};
  vector<int> act = solution->findRightInterval(intervals);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q436, sample_input03) {
  solution = new Solution();
  vector<vector<int>> intervals = {{1, 4}, {2, 3}, {3, 4}};
  vector<int> exp = {-1, 2, -1};
  vector<int> act = solution->findRightInterval(intervals);
  EXPECT_EQ(act, exp);
  delete solution;
}