#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 410.
 *      Split Array Largest Sum
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an array ‘nums’ which consists of non-negative integers and an
 *   integer ‘m’ , you can split the array into ‘m’ non-empty continuous
 *   Write an algorithm to minimize the largest sum among these ‘m’
 *   subarrays.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 1000’
 *   • ‘0 ≤ nums[i] ≤ 10⁶’
 *   • ‘1 ≤ m ≤ min(50, nums.length)’
 *
 */

struct q410 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    int helper(vector<int> &nums, int target) {
      int curr = 0, required = 1;

      for (auto &x : nums) {
        if (curr <= target - x) {
          curr += x;
        } else {
          curr = x;
          ++required;
        }
      }

      return required;
    }

   public:
    int splitArray(vector<int> &nums, int m) {
      int sum = 0;
      int mx = -1;
      for (auto &x : nums) {
        sum += x;
        mx = max(mx, x);
      }

      int l = mx,
          r = sum;
      int res = 0;
      while (l <= r) {
        int allowed = l + (r - l) / 2;
        if (helper(nums, allowed) <= m) {
          r = allowed - 1;
          res = allowed;
        } else {
          l = allowed + 1;
        }
      }

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q410, sample_input01) {
  solution = new Solution();
  vector<int> nums = {7, 2, 5, 10, 8};
  int m = 2;
  int exp = 18;
  int act = solution->splitArray(nums, m);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q410, sample_input02) {
  solution = new Solution();
  vector<int> nums = {1, 2, 3, 4, 5};
  int m = 2;
  int exp = 9;
  int act = solution->splitArray(nums, m);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q410, sample_input03) {
  solution = new Solution();
  vector<int> nums = {1, 4, 4};
  int m = 3;
  int exp = 4;
  int act = solution->splitArray(nums, m);
  EXPECT_EQ(act, exp);
  delete solution;
}