#include <gtest/gtest.h>
#include <iostream>
#include <string>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 412.
 *      Fizz Buzz
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an integer ‘n’ , return “a string array ” ‘answer’ “ (
 *   “1-indexed” ) where”
 *       -  ‘answer[i] = 'FizzBuzz'’ if ‘i’ is divisible by ‘3’ and ‘5’
 *       -  ‘answer[i] = 'Fizz'’ if ‘i’ is divisible by ‘3’
 *       -  ‘answer[i] = 'Buzz'’ if ‘i’ is divisible by ‘5’
 *       -  ‘answer[i] = i’ (as a string) if none of the above conditions
 *   are true.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ n ≤ 10⁴’
 *
 */

struct q412 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    vector<string> fizzBuzz(int n) {
      auto res = vector<string>();
      res.reserve(n);
      while (n) {
        if (n % 15 == 0) {
          res.emplace_back("FizzBuzz");
        } else if (n % 5 == 0) {
          res.emplace_back("Buzz");
        } else if (n % 3 == 0) {
          res.emplace_back("Fizz");
        } else {
          res.emplace_back(to_string(n));
        }
        --n;
      }
      reverse(res.begin(), res.end());
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q412, sample_input01) {
  solution           = new Solution();
  int            n   = 3;
  vector<string> exp = {"1", "2", "Fizz"};
  vector<string> act = solution->fizzBuzz(n);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q412, sample_input02) {
  solution           = new Solution();
  int            n   = 5;
  vector<string> exp = {"1", "2", "Fizz", "4", "Buzz"};
  vector<string> act = solution->fizzBuzz(n);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q412, sample_input03) {
  solution           = new Solution();
  int            n   = 15;
  vector<string> exp = {"1",    "2",    "Fizz", "4",    "Buzz",
                        "Fizz", "7",    "8",    "Fizz", "Buzz",
                        "11",   "Fizz", "13",   "14",   "FizzBuzz"};
  vector<string> act = solution->fizzBuzz(n);
  EXPECT_EQ(act, exp);
  delete solution;
}