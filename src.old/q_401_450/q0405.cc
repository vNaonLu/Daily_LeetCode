#include <gtest/gtest.h>
#include <iostream>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 405.
 *      Convert a Number to Hexadecimal
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an integer ‘num’ , return “a string representing its hexadecimal
 *   representation” . For negative integers, <a
 *   href="https://en.wikipedia.org/wiki/Two%27s_complement"
 *   target="_blank">two&rsquo;s complement</a> method is
 *   All the letters in the answer string should be lowercase characters,
 *   and there should not be any leading zeros in the answer except for the
 *   zero
 *    “Note:” You are not allowed to use any built-in library method to
 *   directly solve this problem.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘-2³¹ ≤ num ≤ 2³¹ - 1’
 *
 */

struct q405 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    char helper(int x) {
      if (x < 10) {
        return '0' + x;
      } else {
        return 'a' + x - 10;
      }
    }

   public:
    string toHex(int num) {
      if (num == 0) {
        return "0";
      }

      uint32_t x = static_cast<uint32_t>(num);
      string res;

      while (x != 0) {
        res += helper(x & 15);
        x >>= 4;
      }

      reverse(res.begin(), res.end());
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q405, sample_input01) {
  solution = new Solution();
  int num = 26;
  string exp = "1a";
  string act = solution->toHex(num);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q405, sample_input02) {
  solution = new Solution();
  int num = -1;
  string exp = "ffffffff";
  string act = solution->toHex(num);
  EXPECT_EQ(act, exp);
  delete solution;
}