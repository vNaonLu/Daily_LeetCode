#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/treenode.hpp>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 404.
 *      Sum of Left Leaves
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given the ‘root’ of a binary tree, return the sum of all left leaves.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The number of nodes in the tree is in the range ‘[1, 1000]’ .
 *   • ‘-1000 ≤ Node.val ≤ 1000’
 *
 */

struct q404 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int sumOfLeftLeaves(TreeNode* root, TreeNode* pre = nullptr) {
      if (root == nullptr) return 0;
      if (root->left == nullptr && root->right == nullptr &&
          pre != nullptr && pre->left == root) return root->val;
      return sumOfLeftLeaves(root->left, root) + sumOfLeftLeaves(root->right, root);
    }
  };

  class Solution *solution;
};

TEST_F(q404, sample_input01) {
  solution = new Solution();
  TreeNode* root = TreeNode::generate({3, 9, 20, NULL_TREENODE, NULL_TREENODE, 15, 7});
  int exp = 24;
  EXPECT_EQ(solution->sumOfLeftLeaves(root), exp);
  delete solution;
}

TEST_F(q404, sample_input02) {
  solution = new Solution();
  TreeNode* root = TreeNode::generate({1});
  int exp = 0;
  EXPECT_EQ(solution->sumOfLeftLeaves(root), exp);
  delete solution;
}