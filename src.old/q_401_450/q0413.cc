#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 413.
 *      Arithmetic Slices
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   An integer array is called arithmetic if it consists of “at least
 *   three elements” and if the difference between any two consecutive
 *   elements is the
 *       - For example, ‘[1,3,5,7,9]’ , ‘[7,7,7,7]’ , and ‘[3,-1,-5,-9]’
 *   are arithmetic
 *   Given an integer array ‘nums’ , return “the number of arithmetic
 *   “subarrays” of” ‘nums’
 *   A “subarray” is a contiguous subsequence of the array.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 5000’
 *   • ‘-1000 ≤ nums[i] ≤ 1000’
 *
 */

struct q413 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int numberOfArithmeticSlices(vector<int>& nums) {
      if (nums.size() < 3) return 0;
      int res = 0,
          cnt = 1;
      for (int i = 0; i < nums.size() - 2; ++i) {
        if (nums[i + 2] - nums[i + 1] == nums[i + 1] - nums[i]) {
          ++cnt;
        } else {
          res += cnt * (cnt - 1) / 2;
          cnt = 1;
        }
      }
      res += cnt * (cnt - 1) / 2;
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q413, sample_input01) {
  solution = new Solution();
  vector<int> nums = {1, 2, 3, 4};
  int exp = 3;
  EXPECT_EQ(solution->numberOfArithmeticSlices(nums), exp);
  delete solution;
}

TEST_F(q413, sample_input02) {
  solution = new Solution();
  vector<int> nums = {1};
  int exp = 0;
  EXPECT_EQ(solution->numberOfArithmeticSlices(nums), exp);
  delete solution;
}