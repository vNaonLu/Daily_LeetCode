#include <gtest/gtest.h>
#include <iostream>
#include <unordered_set>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 421.
 *      Maximum XOR of Two Numbers in an Array
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an integer array ‘nums’ , return “the maximum result of ”
 *   ‘nums[i] XOR nums[j]’ , where ‘0 ≤ i ≤ j < n’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 2 × 10⁵’
 *   • ‘0 ≤ nums[i] ≤ 2³¹ - 1’
 *
 */

struct q421 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int findMaximumXOR(vector<int> &nums) {
      uint32_t it = 1 << 31;
      int res = 0, mask = 0;
      unordered_set<int> mp;
      while (it != 0) {
        int tmp = res | it;
        mask |= it;
        for (const auto &n : nums) {
          int num = n & tmp;
          if (mp.count(tmp ^ num)) {
            res = tmp;
            break;
          }
          mp.insert(num);
        }
        mp.clear();
        it >>= 1;
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q421, sample_input01) {
  solution = new Solution();
  vector<int> nums = {3, 10, 5, 25, 2, 8};
  int exp = 28;
  int act = solution->findMaximumXOR(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q421, sample_input02) {
  solution = new Solution();
  vector<int> nums = {14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70};
  int exp = 127;
  int act = solution->findMaximumXOR(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}