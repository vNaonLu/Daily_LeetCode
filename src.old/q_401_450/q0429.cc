#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 429.
 *      N-ary Tree Level Order Traversal
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an n-ary tree, return the “level order” traversal of its nodes'
 *    “Nary-Tree input serialization is represented in their level order
 *   traversal, each group of children is separated by the null value (See
 *   examples).” 
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The height of the n-ary tree is less than or equal to ‘1000’
 *   • The total number of nodes is between ‘[0, 10⁴]’
 *
 */

struct q429 : public ::testing::Test {
  // Leetcode answer here
  // Definition for a Node.
  class Node {
  public:
      int val;
      vector<Node*> children;

      Node() {}

      Node(int _val) {
          val = _val;
      }

      Node(int _val, vector<Node*> _children) {
          val = _val;
          children = _children;
      }
  };

  class Solution {
   private:
    void helper(vector<vector<int>> &res, Node *p, int depth) {
      if (nullptr == p) {
        return;
      }

      if (depth >= res.size()) {
        res.resize(depth + 1);
      }

      res[depth].push_back(p->val);
      for (auto node : p->children) {
        helper(res, node, depth + 1);
      }
    }

   public:
    vector<vector<int>> levelOrder(Node *root) {
      vector<vector<int>> res;
      helper(res, root, 0);
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q429, NOT_IMPLEMENT) {
   EXPECT_TRUE("NOT IMPLEMENT");
}