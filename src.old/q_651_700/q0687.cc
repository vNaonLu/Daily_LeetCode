#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/treenode.hpp>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 687.
 *      Longest Univalue Path
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given the ‘root’ of a binary tree, return “the length of the longest
 *   path, where each node in the path has the same value” . This path may
 *   or may not pass through the
 *    “The length of the path” between two nodes is represented by the
 *   number of edges between them.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The number of nodes in the tree is in the range ‘[0, 10⁴]’ .
 *   • ‘-1000 ≤ Node.val ≤ 1000’
 *   • The depth of the tree will not exceed ‘1000’ .
 *
 */

struct q687 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  private:
    int findLength(TreeNode *prev, TreeNode *p, int &res) {
      if (p == nullptr || (prev != nullptr && prev->val != p->val)) {
        return 0;
      }
      auto left_v = findLength(p, p->left, res);
      if (left_v == 0) {
        findLength(nullptr, p->left, res);
      }

      auto right_v = findLength(p, p->right, res);
      if (right_v == 0) {
        findLength(nullptr, p->right, res);
      }

      res = max(res, left_v + right_v + 1);
      return max(right_v, left_v) + 1;
    }

  public:
    int longestUnivaluePath(TreeNode *root) {
      int res = 0;
      findLength(nullptr, root, res);
      return max(res - 1, 0);
    }
  };

  class Solution *solution;
};

TEST_F(q687, sample_input01) {
  solution       = new Solution();
  TreeNode *root = TreeNode::generate({5, 4, 5, 1, 1, NULL_TREENODE, 5});
  int       exp  = 2;
  int       act  = solution->longestUnivaluePath(root);
  EXPECT_EQ(act, exp);
  TreeNode::release(root);
  delete solution;
}

TEST_F(q687, sample_input02) {
  solution       = new Solution();
  TreeNode *root = TreeNode::generate({1, 4, 5, 4, 4, NULL_TREENODE, 5});
  int       exp  = 2;
  int       act  = solution->longestUnivaluePath(root);
  EXPECT_EQ(act, exp);
  TreeNode::release(root);
  delete solution;
}