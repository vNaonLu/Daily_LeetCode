#include <gtest/gtest.h>
#include <iostream>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 680.
 *      Valid Palindrome II
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a string ‘s’ , return ‘true’ “if the ” ‘s’ “ can be palindrome
 *   after deleting “at most one” character from it” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s.length ≤ 10⁵’
 *   • ‘s’ consists of lowercase English letters.
 *
 */

struct q680 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    bool is_palindrome(string &s, int l, int r) {
      while (l < r) {
        if (s[l++] != s[r--]) {
          return false;
        }
      }

      return true;
    }

   public:
    bool validPalindrome(string s) {
      int l = 0, r = s.size() - 1;

      while (l < r) {
        if (s[l] != s[r]) {
          return is_palindrome(s, l, r - 1) || is_palindrome(s, l + 1, r);
        }
        ++l;
        --r;
      }

      return true;
    }
  };

  class Solution *solution;
};

TEST_F(q680, sample_input01) {
  solution = new Solution();
  string s = "aba";
  bool exp = true;
  bool act = solution->validPalindrome(s);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q680, sample_input02) {
  solution = new Solution();
  string s = "abca";
  bool exp = true;
  bool act = solution->validPalindrome(s);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q680, sample_input03) {
  solution = new Solution();
  string s = "abc";
  bool exp = false;
  bool act = solution->validPalindrome(s);
  EXPECT_EQ(act, exp);
  delete solution;
}