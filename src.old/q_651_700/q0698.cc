#include <gtest/gtest.h>
#include <iostream>
#include <numeric>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 698.
 *      Partition to K Equal Sum Subsets
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an integer array ‘nums’ and an integer ‘k’ , return ‘true’ if it
 *   is possible to divide this array into ‘k’ non-empty subsets whose sums
 *   are all equal.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ k ≤ nums.length ≤ 16’
 *   • ‘1 ≤ nums[i] ≤ 10⁴’
 *   • The frequency of each element is in the range ‘[1, 4]’ .
 *
 */

struct q698 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    vector<bool> mask;
    int target = 0;
    bool DFS(const vector<int>& nums, int k, int sum = 0, int beg = 0) {
      if (k == 0) return true;
      if (sum > target) {
        return false;
      } else if (sum == target) {
        return DFS(nums, --k);
      }
      for (int i = beg; i < nums.size(); ++i) {
        if (!mask[i]) {
          mask[i] = true;
          if (DFS(nums, k, sum + nums[i], i + 1)) {
            return true;
          }
          mask[i] = false;
        }
      }
      return false;
    }
   public:
    bool canPartitionKSubsets(vector<int>& nums, int k) {
      int total = accumulate(nums.begin(), nums.end(), 0);
      if (total % k != 0) return false;
      target = total / k;
      sort(nums.begin(), nums.end());
      mask.resize(nums.size(), false);
      return DFS(nums, k);
    }
  };

  class Solution *solution;
};

TEST_F(q698, sample_input01) {
  solution = new Solution();
  vector<int> nums = {4, 3, 2, 3, 5, 2, 1};
  int k = 4;
  bool exp = true;
  EXPECT_EQ(solution->canPartitionKSubsets(nums, k), exp);
  delete solution;
}

TEST_F(q698, sample_input02) {
  solution = new Solution();
  vector<int> nums = {1, 2, 3, 4};
  int k = 3;
  bool exp = false;
  EXPECT_EQ(solution->canPartitionKSubsets(nums, k), exp);
  delete solution;
}