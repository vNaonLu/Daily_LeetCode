#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/treenode.hpp>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 653.
 *      Two Sum IV - Input is a BST
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given the ‘root’ of a Binary Search Tree and a target number ‘k’ ,
 *   return “ ‘true’ if there exist two elements in the BST such that their
 *   sum is equal to the given target” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The number of nodes in the tree is in the range ‘[1, 10⁴]’ .
 *   • ‘-10⁴≤ Node.val ≤ 10⁴’
 *   • ‘root’ is guaranteed to be a “valid” binary search tree.
 *   • ‘-10⁵≤ k ≤ 10⁵’
 *
 */

struct q653 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    set<int> nums;
   public:
    bool findTarget(TreeNode* root, int k) {
      if (root == nullptr) {
        return false;
      } else {
        if (nums.count(k - root->val)) {
          return true;
        } else {
          nums.insert(root->val);
          return findTarget(root->left, k) || findTarget(root->right, k);
        }
      }
    }
  };

  class Solution *solution;
};

TEST_F(q653, sample_input01) {
  solution = new Solution();
  TreeNode* root = TreeNode::generate({5, 3, 6, 2, 4, NULL_TREENODE, 7});
  int k = 9;
  bool exp = true;
  EXPECT_EQ(solution->findTarget(root, k), exp);
  delete solution;
}

TEST_F(q653, sample_input02) {
  solution = new Solution();
  TreeNode* root = TreeNode::generate({5, 3, 6, 2, 4, NULL_TREENODE, 7});
  int k = 28;
  bool exp = false;
  EXPECT_EQ(solution->findTarget(root, k), exp);
  delete solution;
}

TEST_F(q653, sample_input03) {
  solution = new Solution();
  TreeNode* root = TreeNode::generate({2, 1, 3});
  int k = 4;
  bool exp = true;
  EXPECT_EQ(solution->findTarget(root, k), exp);
  delete solution;
}

TEST_F(q653, sample_input04) {
  solution = new Solution();
  TreeNode* root = TreeNode::generate({2, 1, 3});
  int k = 1;
  bool exp = false;
  EXPECT_EQ(solution->findTarget(root, k), exp);
  delete solution;
}

TEST_F(q653, sample_input05) {
  solution = new Solution();
  TreeNode* root = TreeNode::generate({2, 1, 3});
  int k = 3;
  bool exp = true;
  EXPECT_EQ(solution->findTarget(root, k), exp);
  delete solution;
}