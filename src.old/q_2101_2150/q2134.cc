#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 2134.
 *       Minimum Swaps to Group All 1's Together II
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   A “swap” is defined as taking two “distinct” positions in an array and
 *   swapping the values in
 *   A “circular” array is defined as an array where we consider the
 *   “first” element and the “last” element to be “adjacent”
 *   Given a “binary”  “circular” array ‘nums’ , return “the minimum number
 *   of swaps required to group all ” ‘1’ “'s present in the array together
 *   at “any location” ” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 10⁵’
 *   • ‘nums[i]’ is either ‘0’ or ‘1’ .
 *
 */

struct q2134 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int minSwaps(vector<int>& nums) {
      int res = numeric_limits<int>::max(),
          one_cnt = count(nums.begin(), nums.end(), 1),
          curr = 0;
      if (one_cnt == 0) return 0;
      for (int l = 0, r = 0; l < nums.size(); r = (r + 1) % nums.size()) {
        curr += !nums[r];
        if (r - l + 1 == one_cnt || r < l) {
          res = min(res, curr);
          curr -= !nums[l++];
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q2134, sample_input01) {
  solution = new Solution();
  vector<int> nums = {0, 1, 0, 1, 1, 0, 0};
  int exp = 1;
  int act = solution->minSwaps(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2134, sample_input02) {
  solution = new Solution();
  vector<int> nums = {0, 1, 1, 1, 0, 0, 1, 1, 0};
  int exp = 2;
  int act = solution->minSwaps(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2134, sample_input03) {
  solution = new Solution();
  vector<int> nums = {1, 1, 0, 0, 1};
  int exp = 0;
  int act = solution->minSwaps(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}