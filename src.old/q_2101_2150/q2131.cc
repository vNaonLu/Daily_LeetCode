#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/anyorder.hpp>
#include <string>
#include <unordered_map>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 2131.
 *       Longest Palindrome by Concatenating Two Letter Words
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an array of strings ‘words’ . Each element of ‘words’
 *   consists of “two” lowercase English
 *   Create the “longest possible palindrome” by selecting some elements
 *   from ‘words’ and concatenating them in “any order” . Each element can
 *   be selected “at most once”
 *   Return “the “length” of the longest palindrome that you can create” .
 *   If it is impossible to create any palindrome, return ‘0’
 *   A “palindrome” is a string that reads the same forward and backward.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ words.length ≤ 10⁵’
 *   • ‘words[i].length = 2’
 *   • ‘words[i]’ consists of lowercase English letters.
 *
 */

struct q2131 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  private:
    int hash(char x, char y) { return (x - 'a') * 100 + (y - 'a'); }

  public:
    int longestPalindrome(vector<string> &words) {
      auto dict = unordered_map<int, int>();
      auto dupl = (int)0;
      auto rept = (int)0;
      for (auto &s : words) {
        auto find = dict.find(hash(s[1], s[0]));
        if (find != dict.end() && find->second > 0) {
          --find->second;
          dupl += 2;
        } else {
          ++dict[hash(s[0], s[1])];
        }
      }
      for (auto &v : dict) {
        auto sh = v.first;
        if (v.second > 0 && sh / 100 == sh % 100) {
          rept = 1;
          break;
        }
      }
      return 2 * rept + 2 * dupl;
    }
  };

  class Solution *solution;
};

TEST_F(q2131, sample_input01) {
  solution             = new Solution();
  vector<string> words = {"lc", "cl", "gg"};
  int            exp   = 6;
  int            act   = solution->longestPalindrome(words);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2131, sample_input02) {
  solution             = new Solution();
  vector<string> words = {"ab", "ty", "yt", "lc", "cl", "ab"};
  int            exp   = 8;
  int            act   = solution->longestPalindrome(words);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2131, sample_input03) {
  solution             = new Solution();
  vector<string> words = {"cc", "ll", "xx"};
  int            exp   = 2;
  int            act   = solution->longestPalindrome(words);
  EXPECT_EQ(act, exp);
  delete solution;
}