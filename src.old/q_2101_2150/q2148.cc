#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * The file is generated by LeetCodeDailyTools
 *
 * 2148.
 *       Count Elements With Strictly Smaller and Greater Elements
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an integer array ‘nums’ , return “the number of elements that
 *   have “both” a strictly smaller and a strictly greater element appear
 *   in ” ‘nums’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 100’
 *   • ‘-10⁵ ≤ nums[i] ≤ 10⁵’
 *
 * see more details:
 * https://leetcode.com/problems/count-elements-with-strictly-smaller-and-greater-elements/
 */

struct q2148 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int countElements(vector<int> &nums) {
      int  res = 0;
      auto mx  = *max_element(nums.begin(), nums.end());
      auto mn  = *min_element(nums.begin(), nums.end());
      for (auto x : nums) {
        if (x > mn && x < mx) {
          ++res;
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q2148, sample_input01) {
  solution         = new Solution();
  vector<int> nums = {11, 7, 2, 15};
  int         exp  = 2;
  int         act  = solution->countElements(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2148, sample_input02) {
  solution         = new Solution();
  vector<int> nums = {-3, 3, 3, 90};
  int         exp  = 2;
  int         act  = solution->countElements(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}
