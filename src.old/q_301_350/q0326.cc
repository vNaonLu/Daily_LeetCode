#include <cmath>
#include <gtest/gtest.h>
#include <iostream>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 326.
 *      Power of Three
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an integer ‘n’ , return “ ‘true’ if it is a power of three.
 *   Otherwise, return ‘false’ ”
 *   An integer ‘n’ is a power of three, if there exists an integer ‘x’
 *   such that ‘n = 3ˣ’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘-2³¹ ≤ n ≤ 2³¹ - 1’
 *
 */

struct q326 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    bool isPowerOfThree(int n) {
      auto max_log =
          decltype(n)(log10(numeric_limits<decltype(n)>::max()) / log10(3));
      auto maximum = (decltype(n))pow(3, max_log);

      return n > 0 && maximum % n == 0;
    }
  };

  class Solution *solution;
};

TEST_F(q326, sample_input01) {
  solution = new Solution();
  int n = 27;
  bool exp = true;
  bool act = solution->isPowerOfThree(n);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q326, sample_input02) {
  solution = new Solution();
  int n = 0;
  bool exp = false;
  bool act = solution->isPowerOfThree(n);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q326, sample_input03) {
  solution = new Solution();
  int n = 9;
  bool exp = true;
  bool act = solution->isPowerOfThree(n);
  EXPECT_EQ(act, exp);
  delete solution;
}