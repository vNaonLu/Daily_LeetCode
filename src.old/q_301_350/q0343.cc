#include <gtest/gtest.h>
#include <iostream>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 343.
 *      Integer Break
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an integer ‘n’ , break it into the sum of ‘k’ “positive
 *   integers” , where ‘k ≥ 2’ , and maximize the product of those
 *   Return “the maximum product you can get” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘2 ≤ n ≤ 58’
 *
 */

struct q343 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int integerBreak(int n) {
      vector<int> dp = {0, 1, 1, 2, 4, 6, 9, 12};
      if (dp.size() > n) return dp[n];
      int sz = dp.size();
      dp.resize(n + 1, 0);
      for (int i = sz; i <= n; ++i)
        for (int j = i - 2; j >= 2; --j)
          dp[i] = max(dp[i], j * dp[i - j]);
      return dp[n];
    }
  };

  class Solution *solution;
};

TEST_F(q343, sample_input01) {
  solution = new Solution();
  int n = 2;
  int exp = 1;
  EXPECT_EQ(solution->integerBreak(n), exp);
  delete solution;
}

TEST_F(q343, sample_input02) {
  solution = new Solution();
  int n = 10;
  int exp = 36;
  EXPECT_EQ(solution->integerBreak(n), exp);
  delete solution;
}