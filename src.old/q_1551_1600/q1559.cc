#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 1559.
 *       Detect Cycles in 2D Grid
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a 2D array of characters ‘grid’ of size ‘m x n’ , you need to
 *   find if there exists any cycle consisting of the “same value” in
 *   ‘grid’
 *   A cycle is a path of “length 4 or more” in the grid that starts and
 *   ends at the same cell. From a given cell, you can move to one of the
 *   cells adjacent to it - in one of the four directions (up, down, left,
 *   or right), if it has the “same value” of the current
 *   Also, you cannot move to the cell that you visited in your last move.
 *   For example, the cycle ‘(1, 1) -> (1, 2) -> (1, 1)’ is invalid because
 *   from ‘(1, 2)’ we visited ‘(1, 1)’ which was the last visited
 *   Return ‘true’ if any cycle of the same value exists in ‘grid’ ,
 *   otherwise, return ‘false’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘m = grid.length’
 *   • ‘n = grid[i].length’
 *   • ‘1 ≤ m, n ≤ 500’
 *   • ‘grid’ consists only of lowercase English letters.
 *
 */

struct q1559 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    char processing = '.';
    char found = ' ';
    vector<int> direct = {1, 0, 0, 1, -1, 0, 0, -1};
    vector<vector<char>> g;
    int m, n;
    bool dfs(char target, int i, int j, int prev_i = -1, int prev_j = -1) {
      if (i < 0 || i >= m || j < 0 || j >= n || g[i][j] == found) return false;
      if (g[i][j] == processing) return true;
      if (g[i][j] != target) return false;
      bool res = false;
      g[i][j] = processing;
      if (i + 1 != prev_i) res |= dfs(target, i + 1, j, i, j);
      if (i - 1 != prev_i) res |= dfs(target, i - 1, j, i, j);
      if (j + 1 != prev_j) res |= dfs(target, i, j + 1, i, j);
      if (j - 1 != prev_j) res |= dfs(target, i, j - 1, i, j);
      g[i][j] = found;
      return res;
    }
   public:
    bool containsCycle(vector<vector<char>>& grid) {
      m = grid.size();
      n = grid[0].size();
      g = grid;
      for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
          if (dfs(g[i][j], i, j))
            return true;
        }
      }
      return false;
    }
  };

  class Solution *solution;
};

TEST_F(q1559, sample_input01) {
  solution = new Solution();
  vector<vector<char>> grid = {{'a', 'a', 'a', 'a'}, {'a', 'b', 'b', 'a'}, {'a', 'b', 'b', 'a'}, {'a', 'a', 'a', 'a'}};
  bool exp = true;
  EXPECT_EQ(solution->containsCycle(grid), exp);
  delete solution;
}

TEST_F(q1559, sample_input02) {
  solution = new Solution();
  vector<vector<char>> grid = {{'c', 'c', 'c', 'a'}, {'c', 'd', 'c', 'c'}, {'c', 'c', 'e', 'c'}, {'f', 'c', 'c', 'c'}};
  bool exp = true;
  EXPECT_EQ(solution->containsCycle(grid), exp);
  delete solution;
}

TEST_F(q1559, sample_input03) {
  solution = new Solution();
  vector<vector<char>> grid = {{'a', 'b', 'b'}, {'b', 'z', 'b'}, {'b', 'b', 'a'}};
  bool exp = false;
  EXPECT_EQ(solution->containsCycle(grid), exp);
  delete solution;
}