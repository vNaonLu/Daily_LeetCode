#include <gtest/gtest.h>
#include <iostream>
#include <string>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 459.
 *      Repeated Substring Pattern
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a string ‘s’ , check if it can be constructed by taking a
 *   substring of it and appending multiple copies of the substring
 *   together.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s.length ≤ 10⁴’
 *   • ‘s’ consists of lowercase English letters.
 *
 */

struct q459 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    bool repeatedSubstringPattern(string s) {
      vector<int> kmp(s.size(), 0);
      for (int i = 0, j = 1; j < s.size(); ++j) {
        while (i > 0 && s[i] != s[j]) {
          i = kmp[i - 1];
        }

        if (s[i] == s[j]) {
          kmp[j] = ++i;
        }
      }

      return kmp.back() && kmp.back() % (s.size() - kmp.back()) == 0;
    }
  };

  class Solution *solution;
};

TEST_F(q459, sample_input01) {
  solution = new Solution();
  string s = "abab";
  bool exp = true;
  bool act = solution->repeatedSubstringPattern(s);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q459, sample_input02) {
  solution = new Solution();
  string s = "aba";
  bool exp = false;
  bool act = solution->repeatedSubstringPattern(s);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q459, sample_input03) {
  solution = new Solution();
  string s = "abcabcabcabc";
  bool exp = true;
  bool act = solution->repeatedSubstringPattern(s);
  EXPECT_EQ(act, exp);
  delete solution;
}