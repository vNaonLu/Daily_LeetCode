#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/anyorder.hpp>
#include <set>
#include <unordered_map>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 491.
 *      Non-decreasing Subsequences
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an integer array ‘nums’ , return “all the different possible
 *   non-decreasing subsequences of the given array with at least two
 *   elements” . You may return the answer in “any order” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 15’
 *   • ‘-100 ≤ nums[i] ≤ 100’
 *
 */

struct q491 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  private:
    template <typename It>
    void dfs(set<vector<int>> &res, vector<int> &curr, It beg, It end) {
      if (curr.size() >= 2) {
        res.emplace(curr);
      }
      while (beg != end) {
        if (curr.empty() || *beg >= curr.back()) {
          curr.emplace_back(*beg);
          dfs(res, curr, beg + 1, end);
          curr.pop_back();
        }
        ++beg;
      }
    }

  public:
    vector<vector<int>> findSubsequences(vector<int> &nums) {
      vector<vector<int>> res;
      set<vector<int>>    res_set;
      vector<int>         tmp;
      dfs(res_set, tmp, nums.begin(), nums.end());
      for (auto &v : res_set) {
        res.emplace_back(std::move(v));
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q491, sample_input01) {
  solution                 = new Solution();
  vector<int>         nums = {4, 6, 7, 7};
  vector<vector<int>> exp  = {
      {4, 6},
      {4, 6, 7},
      {4, 6, 7, 7},
      {4, 7},
      {4, 7, 7},
      {6, 7},
      {6, 7, 7},
      {7, 7}
  };
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solution->findSubsequences(nums), exp);
  delete solution;
}

TEST_F(q491, sample_input02) {
  solution                 = new Solution();
  vector<int>         nums = {4, 4, 3, 2, 1};
  vector<vector<int>> exp  = {
      {4, 4}
  };
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solution->findSubsequences(nums), exp);
  delete solution;
}
