#include <cmath>
#include <gtest/gtest.h>
#include <iostream>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 458.
 *      Poor Pigs
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   There are ‘buckets’ buckets of liquid, where “exactly one” of the
 *   buckets is poisonous. To figure out which one is poisonous, you feed
 *   some number of (poor) pigs the liquid to see whether they will die or
 *   not. Unfortunately, you only have ‘minutesToTest’ minutes to determine
 *   which bucket is
 *   You can feed the pigs according to these
 *       1. Choose some live pigs to
 *       2. For each pig, choose which buckets to feed it. The pig will
 *   consume all the chosen buckets simultaneously and will take no
 *       3. Wait for ‘minutesToDie’ minutes. You may “not” feed any other
 *   pigs during this
 *       4. After ‘minutesToDie’ minutes have passed, any pigs that have
 *   been fed the poisonous bucket will die, and all others will
 *       5. Repeat this process until you run out of
 *   Given ‘buckets’ , ‘minutesToDie’ , and ‘minutesToTest’ , return “the
 *   “minimum” number of pigs needed to figure out which bucket is
 *   poisonous within the allotted time” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ buckets ≤ 1000’
 *   • ‘1 ≤minutesToDie ≤minutesToTest ≤ 100’
 *
 */

struct q458 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int poorPigs(int buckets, int minutesToDie, int minutesToTest) {

      return ceil(log(buckets) / log(minutesToTest / minutesToDie + 1));
    }
  };

  class Solution *solution;
};

TEST_F(q458, sample_input01) {
  solution = new Solution();
  int buckets = 1000;
  int minutesToDie = 15;
  int minutesToTest = 60;
  int exp = 5;
  int act = solution->poorPigs(buckets, minutesToDie, minutesToTest);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q458, sample_input02) {
  solution = new Solution();
  int buckets = 4;
  int minutesToDie = 15;
  int minutesToTest = 15;
  int exp = 2;
  int act = solution->poorPigs(buckets, minutesToDie, minutesToTest);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q458, sample_input03) {
  solution = new Solution();
  int buckets = 4;
  int minutesToDie = 15;
  int minutesToTest = 30;
  int exp = 2;
  int act = solution->poorPigs(buckets, minutesToDie, minutesToTest);
  EXPECT_EQ(act, exp);
  delete solution;
}