#include <gtest/gtest.h>
#include <iostream>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 482.
 *      License Key Formatting
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given a license key represented as a string ‘s’ that consists
 *   of only alphanumeric characters and dashes. The string is separated
 *   into ‘n + 1’ groups by ‘n’ dashes. You are also given an integer ‘k’
 *   We want to reformat the string ‘s’ such that each group contains
 *   exactly ‘k’ characters, except for the first group, which could be
 *   shorter than ‘k’ but still must contain at least one character.
 *   Furthermore, there must be a dash inserted between two groups, and you
 *   should convert all lowercase letters to
 *   Return “the reformatted license key” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s.length ≤ 10⁵’
 *   • ‘s’ consists of English letters, digits, and dashes ‘'-'’ .
 *   • ‘1 ≤ k ≤ 10⁴’
 *
 */

struct q482 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    string licenseKeyFormatting(string s, int k) {
      string res;

      ++k;
      for (auto it = s.rbegin(); it != s.rend(); ++it) {
        if (*it != '-') {
          if ((res.size() + 1) % k == 0) {
            res.push_back('-');
          }

          res.push_back(toupper(*it));
        }
      }
      reverse(res.begin(), res.end());

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q482, sample_input01) {
  solution = new Solution();
  string s = "5F3Z-2e-9-w";
  int k = 4;
  string exp = "5F3Z-2E9W";
  string act = solution->licenseKeyFormatting(s, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q482, sample_input02) {
  solution = new Solution();
  string s = "2-5g-3-J";
  int k = 2;
  string exp = "2-5G-3J";
  string act = solution->licenseKeyFormatting(s, k);
  EXPECT_EQ(act, exp);
  delete solution;
}