#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 2293.
 *       Min Max Game
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given a “0-indexed” integer array ‘nums’ whose length is a
 *   power of ‘2’
 *   Apply the following algorithm on ‘nums’
 *       1. Let ‘n’ be the length of ‘nums’ . If ‘n = 1’ , “end” the
 *   process. Otherwise, “create” a new “0-indexed” integer array ‘newNums’
 *   of length ‘n / 2’
 *       2. For every “even” index ‘i’ where ‘0 ≤ i < n / 2’ , “assign” the
 *   value of ‘newNums[i]’ as ‘min(nums[2 × i], nums[2 × i + 1])’
 *       3. For every “odd” index ‘i’ where ‘0 ≤ i < n / 2’ , “assign” the
 *   value of ‘newNums[i]’ as ‘max(nums[2 × i], nums[2 × i + 1])’
 *       4.  “Replace” the array ‘nums’ with ‘newNums’
 *       5.  “Repeat” the entire process starting from step
 *   Return “the last number that remains in ” ‘nums’ “ after applying the
 *   algorithm.”
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 1024’
 *   • ‘1 ≤ nums[i] ≤ 10⁹’
 *   • ‘nums.length’ is a power of ‘2’ .
 *
 */

struct q2293 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int minMaxGame(vector<int> &nums) {
      vector<int> tmp;
      while (nums.size() != 1) {
        for (int i = 0; i < nums.size(); ++ ++i) {
          tmp.emplace_back(((i / 2) & 1) == 0 ? min(nums[i], nums[i + 1])
                                              : max(nums[i], nums[i + 1]));
        }
        nums = std::move(tmp);
      }
      return nums.front();
    }
  };

  class Solution *solution;
};

TEST_F(q2293, sample_input01) {
  solution         = new Solution();
  vector<int> nums = {1, 3, 5, 2, 4, 8, 2, 2};
  int         exp  = 1;
  int         act  = solution->minMaxGame(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2293, sample_input02) {
  solution         = new Solution();
  vector<int> nums = {3};
  int         exp  = 3;
  int         act  = solution->minMaxGame(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}
