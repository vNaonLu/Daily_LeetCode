#include <gtest/gtest.h>
#include <iostream>
#include <limits>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 2256.
 *       Minimum Average Difference
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given a “0-indexed” integer array ‘nums’ of length ‘n’
 *   The “average difference” of the index ‘i’ is the “absolute”
 *   “difference” between the average of the “first” ‘i + 1’ elements of
 *   ‘nums’ and the average of the “last” ‘n - i - 1’ elements. Both
 *   averages should be “rounded down” to the nearest
 *   Return “ the index with the “minimum average difference” ” . If there
 *   are multiple such indices, return the “smallest”
 *    “Note:”
 *       - The “absolute difference” of two numbers is the absolute value
 *   of their
 *       - The “average” of ‘n’ elements is the “sum” of the ‘n’ elements
 *   divided ( “integer division” ) by ‘n’
 *       - The average of ‘0’ elements is considered to be ‘0’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 10⁵’
 *   • ‘0 ≤ nums[i] ≤ 10⁵’
 *
 */

struct q2256 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int minimumAverageDifference(vector<int> &nums) {
      auto n      = nums.size();
      auto res    = (int64_t)-1;
      auto md     = numeric_limits<int64_t>::max();
      auto prefix = vector<int64_t>(n, 0);
      for (int i = 0; i < n; ++i) {
        prefix[i] = nums[i] + (i == 0 ? 0 : prefix[i - 1]);
      }
      for (int i = 0; i < n; ++i) {
        auto p1   = prefix[i];
        auto p2   = prefix[n - 1] - prefix[i];
        auto diff = abs(p1 / (int64_t)(i + 1) -
                        ((i == n - 1) ? 0 : p2 / (int64_t)(n - i - 1)));
        if (diff < md) {
          res = i;
          md  = diff;
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q2256, sample_input01) {
  solution         = new Solution();
  vector<int> nums = {2, 5, 3, 9, 5, 3};
  int         exp  = 3;
  int         act  = solution->minimumAverageDifference(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2256, sample_input02) {
  solution         = new Solution();
  vector<int> nums = {0};
  int         exp  = 0;
  int         act  = solution->minimumAverageDifference(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}