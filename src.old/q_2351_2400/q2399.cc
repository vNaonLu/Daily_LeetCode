#include <gtest/gtest.h>
#include <iostream>
#include <string>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 2399.
 *       Check Distances Between Same Letters
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given a “0-indexed” string ‘s’ consisting of only lowercase
 *   English letters, where each letter in ‘s’ appears “exactly”  “twice” .
 *   You are also given a “0-indexed” integer array ‘distance’ of length
 *   ‘26’
 *   Each letter in the alphabet is numbered from ‘0’ to ‘25’ (i.e. ‘'a' ->
 *   0’ , ‘'b' -> 1’ , ‘'c' -> 2’ , ... , ‘'z' -> 25’
 *   In a “well-spaced” string, the number of letters between the two
 *   occurrences of the ‘iᵗʰ’ letter is ‘distance[i]’ . If the ‘iᵗʰ’ letter
 *   does not appear in ‘s’ , then ‘distance[i]’ can be “ignored”
 *   Return ‘true’ “ if ” ‘s’ “ is a “well-spaced” string, otherwise return
 *   ” ‘false’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘2 ≤ s.length ≤ 52’
 *   • ‘s’ consists only of lowercase English letters.
 *   • Each letter appears in ‘s’ exactly twice.
 *   • ‘distance.length = 26’
 *   • ‘0 ≤ distance[i] ≤ 50’
 *
 */

struct q2399 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    bool checkDistances(string s, vector<int> &distance) {
      vector<int> tmp(26, -1);
      for (int i = 0; i < s.size(); ++i) {
        auto c = s[i];
        if (tmp[c - 'a'] < 0) {
          tmp[c - 'a'] = i;
        } else {
          tmp[c - 'a'] = i - 1 - tmp[c - 'a'];
        }
      }
      for (int i = 0; i < tmp.size(); ++i) {
        if (tmp[i] != -1 && tmp[i] != distance[i]) {
          return false;
        }
      }
      return true;
    }
  };

  class Solution *solution;
};

TEST_F(q2399, sample_input01) {
  solution             = new Solution();
  string      s        = "abaccb";
  vector<int> distance = {1, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  bool        exp      = true;
  bool        act      = solution->checkDistances(s, distance);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2399, sample_input02) {
  solution             = new Solution();
  string      s        = "aa";
  vector<int> distance = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  bool        exp      = false;
  bool        act      = solution->checkDistances(s, distance);
  EXPECT_EQ(act, exp);
  delete solution;
}
