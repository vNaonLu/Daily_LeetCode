#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 2373.
 *       Largest Local Values in a Matrix
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an ‘n x n’ integer matrix ‘grid’
 *   Generate an integer matrix ‘maxLocal’ of size ‘(n - 2) x (n - 2)’ such
 *       -  ‘maxLocal[i][j]’ is equal to the “largest” value of the ‘3 x 3’
 *   matrix in ‘grid’ centered around row ‘i + 1’ and column ‘j + 1’
 *   In other words, we want to find the largest value in every contiguous
 *   ‘3 x 3’ matrix in ‘grid’
 *   Return “the generated matrix” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘n = grid.length = grid[i].length’
 *   • ‘3 ≤ n ≤ 100’
 *   • ‘1 ≤ grid[i][j] ≤ 100’
 *
 * see more details:
 * https://leetcode.com/problems/largest-local-values-in-a-matrix/
 */

struct q2373 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  private:
    int getMax(vector<vector<int>> &grid, int r, int c) {
      int res = grid[r][c];
      for (int i = r; i < r + 3; ++i) {
        for (int j = c; j < c + 3; ++j) {
          res = max(res, grid[i][j]);
        }
      }
      return res;
    }

  public:
    vector<vector<int>> largestLocal(vector<vector<int>> &grid) {
      int                 n = grid.size();
      vector<vector<int>> res;
      for (int i = 0; i < n - 2; ++i) {
        res.emplace_back();
        for (int j = 0; j < n - 2; ++j) {
          res.back().emplace_back(getMax(grid, i, j));
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q2373, sample_input01) {
  solution                 = new Solution();
  vector<vector<int>> grid = {
      {9, 9, 8, 1},
      {5, 6, 2, 6},
      {8, 2, 6, 4},
      {6, 2, 2, 2}
  };
  vector<vector<int>> exp = {
      {9, 9},
      {8, 6}
  };
  vector<vector<int>> act = solution->largestLocal(grid);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2373, sample_input02) {
  solution                 = new Solution();
  vector<vector<int>> grid = {
      {1, 1, 1, 1, 1},
      {1, 1, 1, 1, 1},
      {1, 1, 2, 1, 1},
      {1, 1, 1, 1, 1},
      {1, 1, 1, 1, 1}
  };
  vector<vector<int>> exp = {
      {2, 2, 2},
      {2, 2, 2},
      {2, 2, 2}
  };
  vector<vector<int>> act = solution->largestLocal(grid);
  EXPECT_EQ(act, exp);
  delete solution;
}
