#include <gtest/gtest.h>
#include <iostream>
#include <map>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 2363.
 *       Merge Similar Items
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given two 2D integer arrays, ‘items1’ and ‘items2’ ,
 *   representing two sets of items. Each array ‘items’ has the following
 *       -  ‘items[i] = [valueᵢ, weightᵢ]’ where ‘valueᵢ’ represents the
 *   “value” and ‘weightᵢ’ represents the “weight ” of the ‘iᵗʰ’
 *       - The value of each item in ‘items’ is “unique”
 *   Return “a 2D integer array” ‘ret’ “where” ‘ret[i] = [valueᵢ, weightᵢ]’
 *   “,”  “with” ‘weightᵢ’ “being the “sum of weights” of all items with
 *   value” ‘valueᵢ’
 *    “Note:” ‘ret’ should be returned in “ascending” order by value.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ items1.length, items2.length ≤ 1000’
 *   • ‘items1[i].length = items2[i].length = 2’
 *   • ‘1 ≤ valueᵢ, weightᵢ ≤ 1000’
 *   • Each ‘valueᵢ’ in ‘items1’ is “unique” .
 *   • Each ‘valueᵢ’ in ‘items2’ is “unique” .
 *
 * see more details: https://leetcode.com/problems/merge-similar-items/
 */

struct q2363 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    vector<vector<int>> mergeSimilarItems(vector<vector<int>> &items1,
                                          vector<vector<int>> &items2) {
      vector<vector<int>> res;
      map<int, int>       weight;
      for (auto &v : items1) {
        weight[v[0]] += v[1];
      }
      for (auto &v : items2) {
        weight[v[0]] += v[1];
      }
      for (auto [k, w] : weight) {
        res.emplace_back(vector<int>{k, w});
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q2363, sample_input01) {
  solution                   = new Solution();
  vector<vector<int>> items1 = {
      {1, 1},
      {4, 5},
      {3, 8}
  };
  vector<vector<int>> items2 = {
      {3, 1},
      {1, 5}
  };
  vector<vector<int>> exp = {
      {1, 6},
      {3, 9},
      {4, 5}
  };
  vector<vector<int>> act = solution->mergeSimilarItems(items1, items2);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2363, sample_input02) {
  solution                   = new Solution();
  vector<vector<int>> items1 = {
      {1, 1},
      {3, 2},
      {2, 3}
  };
  vector<vector<int>> items2 = {
      {2, 1},
      {3, 2},
      {1, 3}
  };
  vector<vector<int>> exp = {
      {1, 4},
      {2, 4},
      {3, 4}
  };
  vector<vector<int>> act = solution->mergeSimilarItems(items1, items2);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2363, sample_input03) {
  solution                   = new Solution();
  vector<vector<int>> items1 = {
      {1, 3},
      {2, 2}
  };
  vector<vector<int>> items2 = {
      {7, 1},
      {2, 2},
      {1, 4}
  };
  vector<vector<int>> exp = {
      {1, 7},
      {2, 4},
      {7, 1}
  };
  vector<vector<int>> act = solution->mergeSimilarItems(items1, items2);
  EXPECT_EQ(act, exp);
  delete solution;
}
