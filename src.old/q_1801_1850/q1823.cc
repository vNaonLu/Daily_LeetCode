#include <gtest/gtest.h>
#include <iostream>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 1823.
 *       Find the Winner of the Circular Game
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   There are ‘n’ friends that are playing a game. The friends are sitting
 *   in a circle and are numbered from ‘1’ to ‘n’ in “clockwise order” .
 *   More formally, moving clockwise from the ‘iᵗʰ’ friend brings you to
 *   the ‘(i+1)ᵗʰ’ friend for ‘1 ≤ i < n’ , and moving clockwise from the
 *   ‘nᵗʰ’ friend brings you to the ‘1ˢᵗ’
 *   The rules of the game are as
 *       1.  “Start” at the ‘1ˢᵗ’
 *       2. Count the next ‘k’ friends in the clockwise direction
 *   “including” the friend you started at. The counting wraps around the
 *   circle and may count some friends more than
 *       3. The last friend you counted leaves the circle and loses the
 *       4. If there is still more than one friend in the circle, go back
 *   to step ‘2’ “starting” from the friend “immediately clockwise” of the
 *   friend who just lost and
 *       5. Else, the last friend in the circle wins the
 *   Given the number of friends, ‘n’ , and an integer ‘k’ , return “the
 *   winner of the game”
 *   
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ k ≤ n ≤ 500’
 *
 */

struct q1823 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int findTheWinner(int n, int k) {
      if (n == 1) return 1;
      return (findTheWinner(n - 1, k) + k - 1) % n + 1;
    }
  };

  class Solution *solution;
};

TEST_F(q1823, sample_input01) {
  solution = new Solution();
  int n = 5;
  int k = 2;
  int exp = 3;
  EXPECT_EQ(solution->findTheWinner(n, k), exp);
  delete solution;
}

TEST_F(q1823, sample_input02) {
  solution = new Solution();
  int n = 6;
  int k = 5;
  int exp = 1;
  EXPECT_EQ(solution->findTheWinner(n, k), exp);
  delete solution;
}