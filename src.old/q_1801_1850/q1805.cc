#include <gtest/gtest.h>
#include <iostream>
#include <string>
#include <unordered_set>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1805.
 *       Number of Different Integers in a String
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given a string ‘word’ that consists of digits and lowercase
 *   English
 *   You will replace every non-digit character with a space. For example,
 *   ‘'a123bc34d8ef34'’ will become ‘' 123 34 8 34'’ . Notice that you are
 *   left with some integers that are separated by at least one space:
 *   ‘'123'’ , ‘'34'’ , ‘'8'’ , and ‘'34'’
 *   Return “the number of “different” integers after performing the
 *   replacement operations on ” ‘word’
 *   Two integers are considered different if their decimal representations
 *   “without any leading zeros” are different.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ word.length ≤ 1000’
 *   • ‘word’ consists of digits and lowercase English letters.
 *
 */

struct q1805 : public ::testing::Test {
  // Leetcode answer here
class Solution {
private:
    template <typename iterator>
    bool is_integral(iterator it) {
        return *it >= '0' && *it <= '9';
    }
    
    template <typename iterator>
    void trim_left_zero(iterator &beg, iterator end) {
        while (beg != end) {
            if (*beg != '0') {
                break;
            }
            ++beg;
        }
    }
    
public:
    int numDifferentIntegers(string word) {
        unordered_set<string_view> memo;
        auto right = word.begin();
        auto left = word.begin();
        
        for (; right != word.end(); ++right) {
            if (is_integral(right) && !is_integral(left)) {
                left = right;
            }else if (!is_integral(right) && is_integral(left)) {
                trim_left_zero(left, right);
                memo.emplace(&(*left), right - left);
                left = right;
            }
        }
        
        if (is_integral(left)) {
            trim_left_zero(left, right);
            memo.emplace(&(*left), right - left);
        }
        
        return memo.size();
    }
};

  class Solution *solution;
};

TEST_F(q1805, sample_input01) {
  solution = new Solution();
  string word = "a123bc34d8ef34";
  int exp = 3;
  int act = solution->numDifferentIntegers(word);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1805, sample_input02) {
  solution = new Solution();
  string word = "leet1234code234";
  int exp = 2;
  int act = solution->numDifferentIntegers(word);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1805, sample_input03) {
  solution = new Solution();
  string word = "a1b01c001";
  int exp = 1;
  int act = solution->numDifferentIntegers(word);
  EXPECT_EQ(act, exp);
  delete solution;
}