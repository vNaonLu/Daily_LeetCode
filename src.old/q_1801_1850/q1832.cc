#include <gtest/gtest.h>
#include <iostream>
#include <string>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1832.
 *       Check if the Sentence Is Pangram
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   A “pangram” is a sentence where every letter of the English alphabet
 *   appears at least
 *   Given a string ‘sentence’ containing only lowercase English letters,
 *   return “ ” ‘true’ “ if ” ‘sentence’ “ is a “pangram” , or ” ‘false’ “
 *   otherwise.”
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ sentence.length ≤ 1000’
 *   • ‘sentence’ consists of lowercase English letters.
 *
 */

struct q1832 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    bool checkIfPangram(string sentence) {
      auto freq = vector<int>(26, 0);
      for (auto c : sentence) {
        ++freq[c - 'a'];
      }
      for (auto f : freq) {
        if (f == 0) {
          return false;
        }
      }
      return true;
    }
  };

  class Solution *solution;
};

TEST_F(q1832, sample_input01) {
  solution        = new Solution();
  string sentence = "thequickbrownfoxjumpsoverthelazydog";
  bool   exp      = true;
  bool   act      = solution->checkIfPangram(sentence);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1832, sample_input02) {
  solution        = new Solution();
  string sentence = "leetcode";
  bool   exp      = false;
  bool   act      = solution->checkIfPangram(sentence);
  EXPECT_EQ(act, exp);
  delete solution;
}