#include <gtest/gtest.h>
#include <iostream>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1802.
 *       Maximum Value at a Given Index in a Bounded Array
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given three positive integers: ‘n’ , ‘index’ , and ‘maxSum’ .
 *   You want to construct an array ‘nums’ ( “0-indexed” ) “ ” that
 *   satisfies the following
 *       -  ‘nums.length = n’
 *       -  ‘nums[i]’ is a “positive” integer where ‘0 ≤ i < n’
 *       -  ‘abs(nums[i] - nums[i+1]) ≤ 1’ where ‘0 ≤ i < n-1’
 *       - The sum of all the elements of ‘nums’ does not exceed ‘maxSum’
 *       -  ‘nums[index]’ is “maximized”
 *   Return ‘nums[index]’ “ of the constructed array”
 *   Note that ‘abs(x)’ equals ‘x’ if ‘x ≥ 0’ , and ‘-x’ otherwise.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ n ≤ maxSum ≤ 10⁹’
 *   • ‘0 ≤ index < n’
 *
 */

struct q1802 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  private:
    bool helper(int n, int i, double maxSum, double x) {
      double leftSum = x < i + 1 ? (1 + x) * x / 2 + (i - x + 1) : (x + x - i) * (i + 1) / 2;
      double rightSum = x < n - i - 1 + 1 ? (1 + x) * x / 2 + (n - i - x) - x : (x + x - (n - i - 1)) * (n - i) / 2 - x;

      return leftSum + rightSum <= maxSum;
    }

  public:
    int maxValue(int n, int index, int maxSum) {
      int lo = 1, hi = maxSum, res = 1;

      while (lo <= hi) {
        int mid = lo + (hi - lo) / 2;

        if (helper(n, index, maxSum, mid)) {
          res = mid;
          lo = mid + 1;
        } else {
          hi = mid - 1;
        }
      }

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1802, sample_input01) {
  solution = new Solution();
  int n = 4;
  int index = 2;
  int maxSum = 6;
  int exp = 2;
  int act = solution->maxValue(n, index, maxSum);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1802, sample_input02) {
  solution = new Solution();
  int n = 6;
  int index = 1;
  int maxSum = 10;
  int exp = 3;
  int act = solution->maxValue(n, index, maxSum);
  EXPECT_EQ(act, exp);
  delete solution;
}