#include <gtest/gtest.h>
#include <algorithm>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1838.
 *       Frequency of the Most Frequent Element
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   The “frequency” of an element is the number of times it occurs in an
 *   You are given an integer array ‘nums’ and an integer ‘k’ . In one
 *   operation, you can choose an index of ‘nums’ and increment the element
 *   at that index by ‘1’
 *   Return “the “maximum possible frequency” of an element after
 *   performing “at most” ” ‘k’ “ operations” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 10⁵’
 *   • ‘1 ≤ nums[i] ≤ 10⁵’
 *   • ‘1 ≤ k ≤ 10⁵’
 *
 */

struct q1838 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int maxFrequency(vector<int>& nums, int k) {
      sort(nums.begin(), nums.end());
      int res = 1;
      long long sum = 0;
      for (int i = 0, left = 0; i < nums.size(); ++i) {
        sum += nums[i];
        while (sum < (long long)nums[i] * (i - left + 1) - k) {
          sum -= nums[left++];
        }
        res = max(res, i - left + 1);
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1838, sample_input01) {
  solution = new Solution();
  vector<int> nums = {1, 2, 4};
  int k = 5;
  int exp = 3;
  int act = solution->maxFrequency(nums, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1838, sample_input02) {
  solution = new Solution();
  vector<int> nums = {1, 4, 8, 13};
  int k = 5;
  int exp = 2;
  int act = solution->maxFrequency(nums, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1838, sample_input03) {
  solution = new Solution();
  vector<int> nums = {3, 9, 6};
  int k = 2;
  int exp = 1;
  int act = solution->maxFrequency(nums, k);
  EXPECT_EQ(act, exp);
  delete solution;
}