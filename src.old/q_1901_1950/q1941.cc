#include <gtest/gtest.h>
#include <iostream>
#include <string>
#include <unordered_map>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1941.
 *       Check if All Characters Have Equal Number of Occurrences
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a string ‘s’ , return ‘true’ “ if ” ‘s’ “ is a “good” string, or
 *   ” ‘false’ “ otherwise”
 *   A string ‘s’ is “good” if “all” the characters that appear in ‘s’ have
 *   the “same” number of occurrences (i.e., the same frequency).
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s.length ≤ 1000’
 *   • ‘s’ consists of lowercase English letters.
 *
 */

struct q1941 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    bool areOccurrencesEqual(string s) {
      unordered_map<char, int> freq;
      for (auto c : s) {
        ++freq[c];
      }
      auto cnt = freq.begin()->second;
      for (auto &[x, c] : freq) {
        if (cnt != c) {
          return false;
        }
      }
      return true;
    }
  };

  class Solution *solution;
};

TEST_F(q1941, sample_input01) {
  solution   = new Solution();
  string s   = "abacbc";
  bool   exp = true;
  bool   act = solution->areOccurrencesEqual(s);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1941, sample_input02) {
  solution   = new Solution();
  string s   = "aaabb";
  bool   exp = false;
  bool   act = solution->areOccurrencesEqual(s);
  EXPECT_EQ(act, exp);
  delete solution;
}
