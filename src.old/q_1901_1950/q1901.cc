#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1901.
 *       Find a Peak Element II
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   A “peak” element in a 2D grid is an element that is “strictly greater”
 *   than all of its “adjacent ” neighbors to the left, right, top, and
 *   Given a “0-indexed” ‘m x n’ matrix ‘mat’ where “no two adjacent cells
 *   are equal” , find “any” peak element ‘mat[i][j]’ and return “the
 *   length 2 array ” ‘[i,j]’
 *   You may assume that the entire matrix is surrounded by an “outer
 *   perimeter” with the value ‘-1’ in each
 *   You must write an algorithm that runs in ‘O(m log(n))’ or ‘O(n
 *   log(m))’ time.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘m = mat.length’
 *   • ‘n = mat[i].length’
 *   • ‘1 ≤ m, n ≤ 500’
 *   • ‘1 ≤ mat[i][j] ≤ 10⁵’
 *   • No two adjacent cells are equal.
 *
 */

struct q1901 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    vector<int> findPeakGrid(vector<vector<int>> &mat) {
      auto m = mat.size();
      auto n = mat.front().size();
      int lo = 0, hi = m - 1;

      while (lo <= hi) {
        int mid = lo + (hi - lo) / 2;
        int idx = max_element(mat[mid].begin(), mat[mid].end()) - mat[mid].begin();
        if (mid < m - 1 && mat[mid][idx] < mat[mid + 1][idx]) {
          lo = mid + 1;
        } else if (mid > 0 && mat[mid][idx] < mat[mid - 1][idx]) {
          hi = mid - 1;
        } else {
          return {mid, idx};
        }
      }

      return {-1, -1};
    }
  };

  class Solution *solution;
};

TEST_F(q1901, sample_input01) {
  solution = new Solution();
  vector<vector<int>> mat = {{1, 4}, {3, 2}};
  vector<int> exp = {0, 1};
  vector<int> act = solution->findPeakGrid(mat);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1901, sample_input02) {
  solution = new Solution();
  vector<vector<int>> mat = {{10, 20, 15}, {21, 30, 14}, {7, 16, 32}};
  vector<int> exp = {1, 1};
  vector<int> act = solution->findPeakGrid(mat);
  EXPECT_EQ(act, exp);
  delete solution;
}