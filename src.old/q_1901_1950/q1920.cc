#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1920.
 *       Build Array from Permutation
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a “zero-based permutation” ‘nums’ ( “0-indexed” ), build an
 *   array ‘ans’ of the “same length” where ‘ans[i] = nums[nums[i]]’ for
 *   each ‘0 ≤ i < nums.length’ and return
 *   A “zero-based permutation” ‘nums’ is an array of “distinct” integers
 *   from ‘0’ to ‘nums.length - 1’ ( “inclusive” ).
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 1000’
 *   • ‘0 ≤ nums[i] < nums.length’
 *   • The elements in ‘nums’ are “distinct” .
 *
 */

struct q1920 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    vector<int> buildArray(vector<int> &nums) {
      auto res    = vector<int>(nums.size(), 0);
      auto num_it = nums.begin();
      auto res_it = res.begin();
      while (num_it != nums.end()) {
        *res_it++ = *(nums.begin() + *num_it++);
      }

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1920, sample_input01) {
  solution = new Solution();
  vector<int> nums = {0, 2, 1, 5, 3, 4};
  vector<int> exp = {0, 1, 2, 4, 5, 3};
  vector<int> act = solution->buildArray(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1920, sample_input02) {
  solution = new Solution();
  vector<int> nums = {5, 0, 1, 2, 3, 4};
  vector<int> exp = {4, 5, 0, 1, 2, 3};
  vector<int> act = solution->buildArray(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}