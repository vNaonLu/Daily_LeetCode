#include <gtest/gtest.h>
#include <iostream>
#include <map>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 732.
 *      My Calendar III
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   A ‘k’ -booking happens when ‘k’ events have some non-empty
 *   intersection (i.e., there is some time that is common to all ‘k’
 *   You are given some events ‘[start, end)’ , after each given event,
 *   return an integer ‘k’ representing the maximum ‘k’ -booking between
 *   all the previous
 *   Implement the ‘MyCalendarThree’
 *       -  ‘MyCalendarThree()’ Initializes the
 *       -  ‘int book(int start, int end)’ Returns an integer ‘k’
 *   representing the largest integer such that there exists a ‘k’ -booking
 *   in the calendar.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘0 ≤ start < end ≤ 10⁹’
 *   • At most ‘400’ calls will be made to ‘book’ .
 *
 */

struct q732 : public ::testing::Test {
  // Leetcode answer here
  class MyCalendarThree {
  private:
    map<int, int> booked;
    int           res;

  public:
    MyCalendarThree() {
      booked[0]       = 0;
      booked[1e9 + 1] = 0;
      res             = 0;
    }

    auto split(int x) {
      auto pair = booked.emplace(x, (--booked.upper_bound(x))->second);
      return pair.first;
    }

    int book(int start, int end) {
      auto beg = split(start);
      split(end);
      while (beg->first < end) {
        res = max(res, ++(beg->second));
        ++beg;
      }
      return res;
    }
  };

  /**
   * Your MyCalendarThree object will be instantiated and called as such:
   * MyCalendarThree* obj = new MyCalendarThree();
   * int param_1 = obj->book(start,end);
   */

  class MyCalendarThree *my_calendar_three;
};

TEST_F(q732, sample_input01) {
  my_calendar_three = new MyCalendarThree();
  EXPECT_EQ(my_calendar_three->book(10, 20), 1);
  EXPECT_EQ(my_calendar_three->book(50, 60), 1);
  EXPECT_EQ(my_calendar_three->book(10, 40), 2);
  EXPECT_EQ(my_calendar_three->book(5, 15), 3);
  EXPECT_EQ(my_calendar_three->book(5, 10), 3);
  EXPECT_EQ(my_calendar_three->book(25, 55), 3);
  delete my_calendar_three;
}