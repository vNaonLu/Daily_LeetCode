#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 718.
 *      Maximum Length of Repeated Subarray
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given two integer arrays ‘nums1’ and ‘nums2’ , return “the maximum
 *   length of a subarray that appears in “both” arrays” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums1.length, nums2.length ≤ 1000’
 *   • ‘0 ≤ nums1[i], nums2[i] ≤ 100’
 *
 */

struct q718 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int findLength(vector<int> &nums1, vector<int> &nums2) {
      auto res = (int)0;
      auto dp =
          vector<vector<int>>(nums1.size() + 1, vector<int>(nums2.size() + 1));
      for (int i = nums1.size() - 1; i >= 0; --i) {
        for (int j = nums2.size() - 1; j >= 0; --j) {
          if (nums1[i] == nums2[j]) {
            dp[i][j] = dp[i + 1][j + 1] + 1;
            res      = max(res, dp[i][j]);
          }
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q718, sample_input01) {
  solution          = new Solution();
  vector<int> nums1 = {1, 2, 3, 2, 1};
  vector<int> nums2 = {3, 2, 1, 4, 7};
  int         exp   = 3;
  int         act   = solution->findLength(nums1, nums2);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q718, sample_input02) {
  solution          = new Solution();
  vector<int> nums1 = {0, 0, 0, 0, 0};
  vector<int> nums2 = {0, 0, 0, 0, 0};
  int         exp   = 5;
  int         act   = solution->findLength(nums1, nums2);
  EXPECT_EQ(act, exp);
  delete solution;
}