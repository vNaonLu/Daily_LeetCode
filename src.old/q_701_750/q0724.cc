#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 724.
 *      Find Pivot Index
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an array of integers ‘nums’ , calculate the “pivot index” of
 *   this
 *   The “pivot index” is the index where the sum of all the numbers
 *   “strictly” to the left of the index is equal to the sum of all the
 *   numbers “strictly” to the index's
 *   If the index is on the left edge of the array, then the left sum is
 *   ‘0’ because there are no elements to the left. This also applies to
 *   the right edge of the
 *   Return “the “leftmost pivot index” ” . If no such index exists, return
 *   -1.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 10⁴’
 *   • ‘-1000 ≤ nums[i] ≤ 1000’
 *
 */

struct q724 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int pivotIndex(vector<int> &nums) {
      auto presum = vector<int>(nums.begin(), nums.end());
      auto beg    = presum.begin();
      for (auto it = presum.begin() + 1; it != presum.end(); ++it) {
        *it += *(it - 1);
      }

      while (beg != presum.end()) {
        if (*beg == presum.back() - (beg == presum.begin() ? 0 : *(beg - 1))) {
          /// distance: O(1)
          return distance(presum.begin(), beg);
        }
        ++beg;
      }

      return -1;
    }
  };

  class Solution *solution;
};

TEST_F(q724, sample_input01) {
  solution         = new Solution();
  vector<int> nums = {1, 7, 3, 6, 5, 6};
  int         exp  = 3;
  int         act  = solution->pivotIndex(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q724, sample_input02) {
  solution         = new Solution();
  vector<int> nums = {1, 2, 3};
  int         exp  = -1;
  int         act  = solution->pivotIndex(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q724, sample_input03) {
  solution         = new Solution();
  vector<int> nums = {2, 1, -1};
  int         exp  = 0;
  int         act  = solution->pivotIndex(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}