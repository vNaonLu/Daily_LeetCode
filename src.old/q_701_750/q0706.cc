#include <gtest/gtest.h>
#include <iostream>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 706.
 *      Design HashMap
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Design a HashMap without using any built-in hash table
 *   Implement the ‘MyHashMap’
 *       -  ‘MyHashMap()’ initializes the object with an empty
 *       -  ‘void put(int key, int value)’ inserts a ‘(key, value)’ pair
 *   into the HashMap. If the ‘key’ already exists in the map, update the
 *   corresponding ‘value’
 *       -  ‘int get(int key)’ returns the ‘value’ to which the specified
 *   ‘key’ is mapped, or ‘-1’ if this map contains no mapping for the ‘key’
 *       -  ‘void remove(key)’ removes the ‘key’ and its corresponding
 *   ‘value’ if the map contains the mapping for the ‘key’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘0 ≤ key, value ≤ 10⁶’
 *   • At most ‘10⁴’ calls will be made to ‘put’ , ‘get’ , and ‘remove’ .
 *
 */

struct q706 : public ::testing::Test {
  // Leetcode answer here
  class MyHashMap {
   private:
    int data_[1000001];
   public:
    
    MyHashMap() {
      memset(data_, -1, sizeof(data_));
    }
    
    void put(int key, int value) {
      data_[key] = value;
    }
    
    int get(int key) {
      return data_[key];
    }
    
    void remove(int key) {
      data_[key] = -1;
    }
  };

  class MyHashMap *my_hash_map;
};

TEST_F(q706, sample_input01) {
  my_hash_map = new MyHashMap();
  my_hash_map->put(1, 1);
  my_hash_map->put(2, 2);
  EXPECT_EQ(my_hash_map->get(1), 1);
  EXPECT_EQ(my_hash_map->get(3), -1);
  my_hash_map->put(2, 1);
  EXPECT_EQ(my_hash_map->get(2), 1);
  my_hash_map->remove(2);
  EXPECT_EQ(my_hash_map->get(2), -1);
  delete my_hash_map;
}