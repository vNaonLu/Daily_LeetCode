#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 735.
 *      Asteroid Collision
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   We are given an array ‘asteroids’ of integers representing asteroids
 *   in a
 *   For each asteroid, the absolute value represents its size, and the
 *   sign represents its direction (positive meaning right, negative
 *   meaning left). Each asteroid moves at the same
 *   Find out the state of the asteroids after all collisions. If two
 *   asteroids meet, the smaller one will explode. If both are the same
 *   size, both will explode. Two asteroids moving in the same direction
 *   will never meet.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘2 ≤ asteroids.length ≤ 10⁴’
 *   • ‘-1000 ≤ asteroids[i] ≤ 1000’
 *   • ‘asteroids[i] ≠ 0’
 *
 */

struct q735 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    vector<int> asteroidCollision(vector<int> &asteroids) {
      auto res = vector<int>();
      for (auto x : asteroids) {
        auto explode = false;
        while (!res.empty() && x < 0 && res.back() > 0 && !explode) {
          if (res.back() < -x) {
            res.pop_back();
          } else if (res.back() == -x) {
            res.pop_back();
            explode = true;
          } else {
            explode = true;
          }
        }

        if (!explode) {
          res.emplace_back(x);
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q735, sample_input01) {
  solution              = new Solution();
  vector<int> asteroids = {5, 10, -5};
  vector<int> exp       = {5, 10};
  vector<int> act       = solution->asteroidCollision(asteroids);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q735, sample_input02) {
  solution              = new Solution();
  vector<int> asteroids = {8, -8};
  vector<int> exp       = {};
  vector<int> act       = solution->asteroidCollision(asteroids);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q735, sample_input03) {
  solution              = new Solution();
  vector<int> asteroids = {10, 2, -5};
  vector<int> exp       = {10};
  vector<int> act       = solution->asteroidCollision(asteroids);
  EXPECT_EQ(act, exp);
  delete solution;
}