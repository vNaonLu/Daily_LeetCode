#include <gtest/gtest.h>
#include <iostream>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1614.
 *       Maximum Nesting Depth of the Parentheses
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   A string is a “valid parentheses string” (denoted “VPS” ) if it meets
 *   one of the
 *       - It is an empty string ‘''’ , or a single character not equal to
 *   ‘'('’ or ‘')'’
 *       - It can be written as ‘AB’ ( ‘A’ concatenated with ‘B’ ), where
 *   ‘A’ and ‘B’ are “VPS” 's,
 *       - It can be written as ‘(A)’ , where ‘A’ is a “VPS”
 *   We can similarly define the “nesting depth” ‘depth(S)’ of any VPS ‘S’
 *   as
 *       -  ‘depth('') = 0’
 *       -  ‘depth(C) = 0’ , where ‘C’ is a string with a single character
 *   not equal to ‘'('’ or ‘')'’
 *       -  ‘depth(A + B) = max(depth(A), depth(B))’ , where ‘A’ and ‘B’
 *   are “VPS”
 *       -  ‘depth('(' + A + ')') = 1 + depth(A)’ , where ‘A’ is a “VPS”
 *   For example, ‘''’ , ‘'()()'’ , and ‘'()(()())'’ are “VPS” 's (with
 *   nesting depths 0, 1, and 2), and ‘')('’ and ‘'(()'’ are not “VPS”
 *   Given a “VPS” represented as string ‘s’ , return “the “nesting depth”
 *   of ” ‘s’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s.length ≤ 100’
 *   • ‘s’ consists of digits ‘0-9’ and characters ‘'+'’ , ‘'-'’ , ‘'×'’ , ‘'/'’ , ‘'('’ , and ‘')'’ .
 *   • It is guaranteed that parentheses expression ‘s’ is a “VPS” .
 *
 */

struct q1614 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int maxDepth(string s) {
      auto res = (int)0;
      auto depth = (int)0;
      for (auto c : s) {
        if (c == '(') {
          res = max(res, ++depth);
        } else if (c == ')') {
          --depth;
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1614, sample_input01) {
  solution = new Solution();
  string s = "(1+(2*3)+((<u>8</u>)/4))+1";
  int exp = 3;
  int act = solution->maxDepth(s);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1614, sample_input02) {
  solution = new Solution();
  string s = "(1)+((2))+(((<u>3</u>)))";
  int exp = 3;
  int act = solution->maxDepth(s);
  EXPECT_EQ(act, exp);
  delete solution;
}
