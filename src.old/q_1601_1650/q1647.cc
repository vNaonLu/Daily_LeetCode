#include <gtest/gtest.h>
#include <iostream>
#include <queue>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1647.
 *       Minimum Deletions to Make Character Frequencies Unique
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   A string ‘s’ is called “good” if there are no two different characters
 *   in ‘s’ that have the same “frequency”
 *   Given a string ‘s’ , return “ the “minimum” number of characters you
 *   need to delete to make ” ‘s’ “ “good” .”
 *   The “frequency” of a character in a string is the number of times it
 *   appears in the string. For example, in the string ‘'aab'’ , the
 *   “frequency” of ‘'a'’ is ‘2’ , while the “frequency” of ‘'b'’ is ‘1’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s.length ≤ 10⁵’
 *   • ‘s’ contains only lowercase English letters.
 *
 */

struct q1647 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int minDeletions(string s) {
      vector<int> freq(26, 0);
      for (auto &c : s) {
        ++freq[c - 'a'];
      }

      priority_queue<int> pq;
      for (auto &c : freq) {
        if (c > 0) {
          pq.emplace(c);
        }
      }

      int res = 0;
      while (pq.size() > 1) {
        int top = pq.top();
        pq.pop();

        if (top == pq.top()) {
          if (top - 1 > 0) {
            pq.emplace(top - 1);
          }

          ++res;
        }
      }

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1647, sample_input01) {
  solution = new Solution();
  string s = "aab";
  int exp = 0;
  int act = solution->minDeletions(s);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1647, sample_input02) {
  solution = new Solution();
  string s = "aaabbbcc";
  int exp = 2;
  int act = solution->minDeletions(s);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1647, sample_input03) {
  solution = new Solution();
  string s = "ceabaacb";
  int exp = 2;
  int act = solution->minDeletions(s);
  EXPECT_EQ(act, exp);
  delete solution;
}