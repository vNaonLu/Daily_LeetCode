#include <gtest/gtest.h>
#include <iostream>
#include <unordered_set>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1615.
 *       Maximal Network Rank
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   There is an infrastructure of ‘n’ cities with some number of ‘roads’
 *   connecting these cities. Each ‘roads[i] = [aᵢ, bᵢ]’ indicates that
 *   there is a bidirectional road between cities ‘aᵢ’ and ‘bᵢ’
 *   The “network rank” “ ” of “two different cities” is defined as the
 *   total number of “directly” connected roads to “either” city. If a road
 *   is directly connected to both cities, it is only counted “once”
 *   The “maximal network rank ” of the infrastructure is the “maximum
 *   network rank” of all pairs of different
 *   Given the integer ‘n’ and the array ‘roads’ , return “the “maximal
 *   network rank” of the entire infrastructure” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘2 ≤ n ≤ 100’
 *   • ‘0 ≤ roads.length ≤ n × (n - 1) / 2’
 *   • ‘roads[i].length = 2’
 *   • ‘0 ≤ aᵢ, bᵢ≤ n-1’
 *   • ‘aᵢ≠bᵢ’
 *   • Eachpair of cities has “at most one” road connecting them.
 *
 */

struct q1615 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int maximalNetworkRank(int n, vector<vector<int>> &roads) {
      vector<unordered_set<int>> graph(n);

      for (auto &v : roads) {
        graph[v[0]].emplace(v[1]);
        graph[v[1]].emplace(v[0]);
      }

      int res = 0;
      for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
          if (i == j) continue;

          res = max<int>(res, graph[i].size() + graph[j].size() - (graph[i].count(j) ? 1 : 0));
        }
      }

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1615, sample_input01) {
  solution = new Solution();
  int n = 4;
  vector<vector<int>> roads = {{0, 1}, {0, 3}, {1, 2}, {1, 3}};
  int exp = 4;
  int act = solution->maximalNetworkRank(n, roads);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1615, sample_input02) {
  solution = new Solution();
  int n = 5;
  vector<vector<int>> roads = {{0, 1}, {0, 3}, {1, 2}, {1, 3}, {2, 3}, {2, 4}};
  int exp = 5;
  int act = solution->maximalNetworkRank(n, roads);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1615, sample_input03) {
  solution = new Solution();
  int n = 8;
  vector<vector<int>> roads = {{0, 1}, {1, 2}, {2, 3}, {2, 4}, {5, 6}, {5, 7}};
  int exp = 5;
  int act = solution->maximalNetworkRank(n, roads);
  EXPECT_EQ(act, exp);
  delete solution;
}