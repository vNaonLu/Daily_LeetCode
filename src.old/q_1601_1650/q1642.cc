#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1642.
 *       Furthest Building You Can Reach
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an integer array ‘heights’ representing the heights of
 *   buildings, some ‘bricks’ , and some ‘ladders’
 *   You start your journey from building ‘0’ and move to the next building
 *   by possibly using bricks or
 *   While moving from building ‘i’ to building ‘i+1’ ( “0-indexed”
 *       - If the current building's height is “greater than or equal” to
 *   the next building's height, you do “not” need a ladder or
 *       - If the current building's height is “less than” the next
 *   building's height, you can either use “one ladder” or ‘(h[i+1] -
 *   h[i])’ “bricks”
 *    “Return the furthest building index (0-indexed) you can reach if you
 *   use the given ladders and bricks optimally.” 
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ heights.length ≤ 10⁵’
 *   • ‘1 ≤ heights[i] ≤ 10⁶’
 *   • ‘0 ≤ bricks ≤ 10⁹’
 *   • ‘0 ≤ ladders ≤ heights.length’
 *
 */

struct q1642 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  private:
    bool helper(vector<int> &h, int b, int l, int m) {
      vector<int> diff;
      for (int i = 1; i <= m; ++i) {
        if (h[i] > h[i - 1]) {
          diff.emplace_back(h[i] - h[i - 1]);
        }
      }
      sort(diff.begin(), diff.end(), greater<int>());
      int r = diff.size();
      for (int i = l; i < r; ++i) {
        if (diff[i] > b) {
          return false;
        }
        b -= diff[i];
      }

      return true;
    }

  public:
    int furthestBuilding(vector<int> &heights, int bricks, int ladders) {
      int l = 0, r = heights.size() - 1;
      while (l < r) {
        int m = (l + r + 1) / 2;
        if (helper(heights, bricks, ladders, m)) {
          l = m;
        } else {
          r = m - 1;
        }
      }

      return l;
    }
  };

  class Solution *solution;
};

TEST_F(q1642, sample_input01) {
  solution = new Solution();
  vector<int> heights = {4, 2, 7, 6, 9, 14, 12};
  int bricks = 5;
  int ladders = 1;
  int exp = 4;
  int act = solution->furthestBuilding(heights, bricks, ladders);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1642, sample_input02) {
  solution = new Solution();
  vector<int> heights = {4, 12, 2, 7, 3, 18, 20, 3, 19};
  int bricks = 10;
  int ladders = 2;
  int exp = 7;
  int act = solution->furthestBuilding(heights, bricks, ladders);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1642, sample_input03) {
  solution = new Solution();
  vector<int> heights = {14, 3, 19, 3};
  int bricks = 17;
  int ladders = 0;
  int exp = 3;
  int act = solution->furthestBuilding(heights, bricks, ladders);
  EXPECT_EQ(act, exp);
  delete solution;
}