#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1603.
 *       Design Parking System
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Design a parking system for a parking lot. The parking lot has three
 *   kinds of parking spaces: big, medium, and small, with a fixed number
 *   of slots for each
 *   Implement the ‘ParkingSystem’
 *       -  ‘ParkingSystem(int big, int medium, int small)’ Initializes
 *   object of the ‘ParkingSystem’ class. The number of slots for each
 *   parking space are given as part of the
 *       -  ‘bool addCar(int carType)’ Checks whether there is a parking
 *   space of ‘carType’ for the car that wants to get into the parking lot.
 *   ‘carType’ can be of three kinds: big, medium, or small, which are
 *   represented by ‘1’ , ‘2’ , and ‘3’ respectively. “A car can only park
 *   in a parking space of its ” ‘carType’ . If there is no space
 *   available, return ‘false’ , else park the car in that size space and
 *   return ‘true’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘0 ≤ big, medium, small ≤ 1000’
 *   • ‘carType’ is ‘1’ , ‘2’ , or ‘3’
 *   • At most ‘1000’ calls will be made to ‘addCar’
 *
 */

struct q1603 : public ::testing::Test {
  // Leetcode answer here
  class ParkingSystem {
   private:
    vector<int> space;

   public:
    ParkingSystem(int big, int medium, int small) : space{big, medium, small} {
    }

    bool addCar(int carType) {
      if (space[carType - 1] > 0) {
        --space[carType - 1];

        return true;
      }

      return false;
    }
  };
  class ParkingSystem *parking_system;
};

TEST_F(q1603, sample_input01) {
  int big = 1;
  int medium = 1;
  int small = 0;
  parking_system = new ParkingSystem(big, medium, small);
  EXPECT_EQ(parking_system->addCar(1), true);
  EXPECT_EQ(parking_system->addCar(2), true);
  EXPECT_EQ(parking_system->addCar(3), false);
  EXPECT_EQ(parking_system->addCar(1), false);
  delete parking_system;
}