#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/treenode.hpp>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1302.
 *       Deepest Leaves Sum
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given the ‘root’ of a binary tree, return “the sum of values of its
 *   deepest leaves” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The number of nodes in the tree is in the range ‘[1, 10⁴]’ .
 *   • ‘1 ≤ Node.val ≤ 100’
 *
 */

struct q1302 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    void helper(vector<int>& sum, TreeNode* p, int level) {
      if (nullptr != p) {
        if (level >= sum.size()) {
          sum.resize(level + 1);
        }

        sum[level] += p->val;

        helper(sum, p->left, level + 1);
        helper(sum, p->right, level + 1);
      }
    }

   public:
    int deepestLeavesSum(TreeNode* root) {
      vector<int> sums;
      helper(sums, root, 0);

      return sums.back();
    }
  };

  class Solution *solution;
};

TEST_F(q1302, sample_input01) {
  solution = new Solution();
  TreeNode* root = TreeNode::generate({1, 2, 3, 4, 5, NULL_TREENODE, 6, 7, NULL_TREENODE, NULL_TREENODE, NULL_TREENODE, NULL_TREENODE, 8});
  int exp = 15;
  int act = solution->deepestLeavesSum(root);
  EXPECT_EQ(act, exp);
  TreeNode::release(root);
  delete solution;
}

TEST_F(q1302, sample_input02) {
  solution = new Solution();
  TreeNode* root = TreeNode::generate({6, 7, 8, 2, 7, 1, 3, 9, NULL_TREENODE, 1, 4, NULL_TREENODE, NULL_TREENODE, NULL_TREENODE, 5});
  int exp = 19;
  int act = solution->deepestLeavesSum(root);
  EXPECT_EQ(act, exp);
  TreeNode::release(root);
  delete solution;
}