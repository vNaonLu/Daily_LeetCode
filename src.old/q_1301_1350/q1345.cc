#include <gtest/gtest.h>
#include <iostream>
#include <queue>
#include <unordered_map>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1345.
 *       Jump Game IV
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an array ofintegers ‘arr’ , you are initially positioned at the
 *   first index of the
 *   In one step you can jump from index ‘i’ to
 *       -  ‘i + 1’ where: ‘i + 1 < arr.length’
 *       -  ‘i - 1’ where: ‘i - 1 ≥ 0’
 *       -  ‘j’ where: ‘arr[i] = arr[j]’ and ‘i ≠ j’
 *   Return “the minimum number of steps” to reach the “last index” of the
 *   Notice that you can not jump outside of the array at any time.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ arr.length ≤ 5 × 10⁴’
 *   • ‘-10⁸ ≤ arr[i] ≤ 10⁸’
 *
 */

struct q1345 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int minJumps(vector<int> &arr) {
      unordered_map<int, vector<int>> mp;

      for (int i = 0; i < arr.size(); i++) {
        mp[arr[i]].push_back(i);
      }

      queue<int> q;
      q.push(0);

      vector<int> dis(arr.size(), 1e9);

      dis[0] = 0;

      while (!q.empty()) {
        int index = q.front(); q.pop();

        if (index == arr.size() - 1) return dis[index];

        vector<int> &list = mp[arr[index]];
        list.push_back(index - 1);
        list.push_back(index + 1);

        for (auto &x : list) {
          if (x >= 0 and x < arr.size() and dis[x] > dis[index] + 1) {
            dis[x] = dis[index] + 1;
            q.push(x);
          }
        }
        list.clear();
      }

      return -1;
    }
  };

  class Solution *solution;
};

TEST_F(q1345, sample_input01) {
  solution = new Solution();
  vector<int> arr = {100, -23, -23, 404, 100, 23, 23, 23, 3, 404};
  int exp = 3;
  int act = solution->minJumps(arr);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1345, sample_input02) {
  solution = new Solution();
  vector<int> arr = {7};
  int exp = 0;
  int act = solution->minJumps(arr);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1345, sample_input03) {
  solution = new Solution();
  vector<int> arr = {7, 6, 9, 6, 9, 6, 9, 7};
  int exp = 1;
  int act = solution->minJumps(arr);
  EXPECT_EQ(act, exp);
  delete solution;
}