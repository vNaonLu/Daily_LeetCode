#include <gtest/gtest.h>
#include <iostream>
#include <queue>
#include <unordered_map>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1338.
 *       Reduce Array Size to The Half
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an integer array ‘arr’ . You can choose a set of
 *   integers and remove all the occurrences of these integers in the
 *   Return “the minimum size of the set so that “at least” half of the
 *   integers of the array are removed” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘2 ≤ arr.length ≤ 10⁵’
 *   • ‘arr.length’ is even.
 *   • ‘1 ≤ arr[i] ≤ 10⁵’
 *
 */

struct q1338 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int minSetSize(vector<int> &arr) {
      auto cnt = unordered_map<int, int>();
      auto target = arr.size() / 2;
      for (auto &x : arr) {
        ++cnt[x];
      }

      auto pq = priority_queue<int>();
      for (auto &[n, num] : cnt) {
        pq.emplace(num);
      }

      auto res = 0;
      auto curr = 0;
      while (!pq.empty()) {
        ++res;
        curr += pq.top();
        pq.pop();

        if (curr >= target) {
          break;
        }
      }

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1338, sample_input01) {
  solution = new Solution();
  vector<int> arr = {3, 3, 3, 3, 5, 5, 5, 2, 2, 7};
  int exp = 2;
  int act = solution->minSetSize(arr);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1338, sample_input02) {
  solution = new Solution();
  vector<int> arr = {7, 7, 7, 7, 7, 7};
  int exp = 1;
  int act = solution->minSetSize(arr);
  EXPECT_EQ(act, exp);
  delete solution;
}