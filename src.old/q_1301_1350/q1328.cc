#include <gtest/gtest.h>
#include <iostream>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 1328.
 *       Break a Palindrome
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a palindromic string of lowercase English letters ‘palindrome’ ,
 *   replace “exactly one” character with any lowercase English letter so
 *   that the resulting string is “not” a palindrome and that it is the
 *   “lexicographically smallest” one
 *   Return “the resulting string. If there is no way to replace a
 *   character to make it not a palindrome, return an “empty string” .”
 *   A string ‘a’ is lexicographically smaller than a string ‘b’ (of the
 *   same length) if in the first position where ‘a’ and ‘b’ differ, ‘a’
 *   has a character strictly smaller than the corresponding character in
 *   ‘b’ . For example, ‘'abcc'’ is lexicographically smaller than ‘'abcd'’
 *   because the first position they differ is at the fourth character, and
 *   ‘'c'’ is smaller than ‘'d'’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ palindrome.length ≤ 1000’
 *   • ‘palindrome’ consists of only lowercase English letters.
 *
 */

struct q1328 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    string breakPalindrome(string palindrome) {
      if (palindrome.empty()) return "";
      if (palindrome.size() == 1) return "";
      for (int i = 0; i < palindrome.size() / 2; ++i) {
        if (palindrome[i] != 'a') {
          palindrome[i] = 'a';
          break;
        }
        if (i == palindrome.size() / 2 - 1)
          palindrome[palindrome.size() - 1] = 'b';
      }
      return palindrome;
    }
  };

  class Solution *solution;
};

TEST_F(q1328, sample_input01) {
  solution = new Solution();
  string palindrome = "abccba";
  string exp = "aaccba";
  EXPECT_EQ(solution->breakPalindrome(palindrome), exp);
  delete solution;
}

TEST_F(q1328, sample_input02) {
  solution = new Solution();
  string palindrome = "a";
  string exp = "";
  EXPECT_EQ(solution->breakPalindrome(palindrome), exp);
  delete solution;
}

TEST_F(q1328, sample_input03) {
  solution = new Solution();
  string palindrome = "aa";
  string exp = "ab";
  EXPECT_EQ(solution->breakPalindrome(palindrome), exp);
  delete solution;
}

TEST_F(q1328, sample_input04) {
  solution = new Solution();
  string palindrome = "aba";
  string exp = "abb";
  EXPECT_EQ(solution->breakPalindrome(palindrome), exp);
  delete solution;
}