#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/treenode.hpp>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1305.
 *       All Elements in Two Binary Search Trees
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given two binary search trees ‘root1’ and ‘root2’ , return “a list
 *   containing all the integers from both trees sorted in “ascending”
 *   order” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The number of nodes in each tree is in the range ‘[0, 5000]’ .
 *   • ‘-10⁵ ≤ Node.val ≤ 10⁵’
 *
 */

struct q1305 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    void travals(vector<int>& r, TreeNode* p) {
      if (nullptr == p) return;
      travals(r, p->left);
      r.emplace_back(p->val);
      travals(r, p->right);
    }

   public:
    vector<int> getAllElements(TreeNode* root1, TreeNode* root2) {
      vector<int> res, p1, p2;
      travals(p1, root1);
      travals(p2, root2);
      auto it1 = p1.begin(), it2 = p2.begin();
      while (it1 != p1.end() && it2 != p2.end()) {
        if (*it1 > *it2) {
          res.emplace_back(*it2++);
        } else {
          res.emplace_back(*it1++);
        }
      }
      while (it1 != p1.end()) res.emplace_back(*it1++);
      while (it2 != p2.end()) res.emplace_back(*it2++);
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1305, sample_input01) {
  solution = new Solution();
  TreeNode* root1 = TreeNode::generate({2, 1, 4});
  TreeNode* root2 = TreeNode::generate({1, 0, 3});
  vector<int> exp = {0, 1, 1, 2, 3, 4};
  vector<int> act = solution->getAllElements(root1, root2);
  EXPECT_EQ(act, exp);
  TreeNode::release(root1, root2);
  delete solution;
}

TEST_F(q1305, sample_input02) {
  solution = new Solution();
  TreeNode* root1 = TreeNode::generate({1, NULL_TREENODE, 8});
  TreeNode* root2 = TreeNode::generate({8, 1});
  vector<int> exp = {1, 1, 8, 8};
  vector<int> act = solution->getAllElements(root1, root2);
  EXPECT_EQ(act, exp);
  TreeNode::release(root1, root2);
  delete solution;
}