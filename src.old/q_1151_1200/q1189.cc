#include <gtest/gtest.h>
#include <iostream>
#include <string>
#include <unordered_map>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 1189.
 *       Maximum Number of Balloons
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a string ‘text’ , you want to use the characters of ‘text’ to
 *   form as many instances of the word “'balloon'” as
 *   You can use each character in ‘text’ “at most once” . Return the
 *   maximum number of instances that can be formed.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ text.length ≤ 10⁴’
 *   • ‘text’ consists of lower case English letters only.
 *
 */

struct q1189 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int maxNumberOfBalloons(string text) {
      unordered_map<char, int> tar{{'b', 1}, {'a', 1}, {'l', 2}, {'o', 2}, {'n', 1}};
      unordered_map<char, int> cnt{{'b', 0}, {'a', 0}, {'l', 0}, {'o', 0}, {'n', 0}};
      for (const auto &c : text) {
        if (tar.count(c)) {
          ++cnt[c];
        }
      }
      int res = text.size();
      for (const auto [a, b] : cnt) {
        res = min(b / tar[a], res);
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1189, sample_input01) {
  solution = new Solution();
  string text = "nlaebolko";
  int exp = 1;
  EXPECT_EQ(solution->maxNumberOfBalloons(text), exp);
  delete solution;
}

TEST_F(q1189, sample_input02) {
  solution = new Solution();
  string text = "loonbalxballpoon";
  int exp = 2;
  EXPECT_EQ(solution->maxNumberOfBalloons(text), exp);
  delete solution;
}

TEST_F(q1189, sample_input03) {
  solution = new Solution();
  string text = "leetcode";
  int exp = 0;
  EXPECT_EQ(solution->maxNumberOfBalloons(text), exp);
  delete solution;
}