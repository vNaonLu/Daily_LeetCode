#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1155.
 *       Number of Dice Rolls With Target Sum
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You have ‘n’ dice and each die has ‘k’ faces numbered from ‘1’ to ‘k’
 *   Given three integers ‘n’ , ‘k’ , and ‘target’ , return “the number of
 *   possible ways (out of the ” ‘kⁿ’ “ total ways) ”  “to roll the dice so
 *   the sum of the face-up numbers equals ” ‘target’ . Since the answer
 *   may be too large, return it “modulo” ‘10⁹ + 7’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ n, k ≤ 30’
 *   • ‘1 ≤ target ≤ 1000’
 *
 */

struct q1155 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    static constexpr int kMod = 1e+9 + 7;

   public:
    int numRollsToTarget(int n, int k, int target) {
      if (n > target || n * k < target) return 0;
      vector<int> dp(target + 1, 0),
                  next(target + 1, 0);
      for (int i = 1; i < dp.size(); ++i) dp[i] += dp[i - 1] + (i <= k);
      for (int i = 1; i < n; ++i) {
        for (int j = 0; j <= target; ++j) {
          if (j <= i) {
            next[j] = 0;
          } else {
            next[j] = ((next[j - 1] + dp[j - 1] - dp[max(0, j - k - 1)]) % kMod + kMod) % kMod;
          }
        }
        swap(dp, next);
      }
      return (dp[target] - dp[target - 1] + kMod) % kMod;
    }
  };

  class Solution *solution;
};

TEST_F(q1155, sample_input01) {
  solution = new Solution();
  int n = 1;
  int k = 6;
  int target = 3;
  int exp = 1;
  int act = solution->numRollsToTarget(n, k, target);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1155, sample_input02) {
  solution = new Solution();
  int n = 2;
  int k = 6;
  int target = 7;
  int exp = 6;
  int act = solution->numRollsToTarget(n, k, target);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1155, sample_input03) {
  solution = new Solution();
  int n = 30;
  int k = 30;
  int target = 500;
  int exp = 222616187;
  int act = solution->numRollsToTarget(n, k, target);
  EXPECT_EQ(act, exp);
  delete solution;
}