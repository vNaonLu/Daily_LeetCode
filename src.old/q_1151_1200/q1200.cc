#include <gtest/gtest.h>
#include <algorithm>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1200.
 *       Minimum Absolute Difference
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given anarrayof “distinct” integers ‘arr’ , find all pairs of elements
 *   with the minimum absolute difference of any two
 *   Return a list of pairs in ascending order(with respect to pairs), each
 *   pair ‘[a, b]’
 *       -  ‘a, b’ are from ‘arr’
 *       -  ‘a < b’
 *       -  ‘b - a’ equals to the minimum absolute difference of any two
 *   elements in ‘arr’ 
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘2 ≤ arr.length ≤ 10^5’
 *   • ‘-10^6 ≤ arr[i] ≤ 10^6’
 *
 */

struct q1200 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    vector<vector<int>> minimumAbsDifference(vector<int> &arr) {
      int max_elem = numeric_limits<int>::min(),
          min_elem = numeric_limits<int>::max();
      for (const auto &x : arr) {
        max_elem = max(max_elem, x);
        min_elem = min(min_elem, x);
      }
      int                 shift = -min_elem;
      int                 min_diff = max_elem - min_elem;
      int                 prev = 0;
      vector<uint8_t>     line(max_elem - min_elem + 1);
      vector<vector<int>> res;
      for (const auto &x : arr) line[x + shift] = 1;
      for (int cur = 1; cur <= max_elem + shift; ++cur) {
        if (line[cur] == 0) continue;
        int diff = cur - prev;
        if (diff == min_diff) res.push_back({prev - shift, cur - shift});
        else if (diff < min_diff) {
          min_diff = diff;
          res = {{prev - shift, cur - shift}};
        }
        prev = cur;
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1200, sample_input01) {
  solution = new Solution();
  vector<int> arr = {4, 2, 1, 3};
  vector<vector<int>> exp = {{1, 2}, {2, 3}, {3, 4}};
  vector<vector<int>> act = solution->minimumAbsDifference(arr);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1200, sample_input02) {
  solution = new Solution();
  vector<int> arr = {1, 3, 6, 10, 15};
  vector<vector<int>> exp = {{1, 3}};
  vector<vector<int>> act = solution->minimumAbsDifference(arr);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1200, sample_input03) {
  solution = new Solution();
  vector<int> arr = {3, 8, -10, 23, 19, -4, -14, 27};
  vector<vector<int>> exp = {{-14, -10}, {19, 23}, {23, 27}};
  vector<vector<int>> act = solution->minimumAbsDifference(arr);
  EXPECT_EQ(act, exp);
  delete solution;
}