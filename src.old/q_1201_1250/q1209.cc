#include <gtest/gtest.h>
#include <iostream>
#include <stack>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1209.
 *       Remove All Adjacent Duplicates in String II
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given a string ‘s’ and an integer ‘k’ , a ‘k’ “duplicate
 *   removal” consists of choosing ‘k’ adjacent and equal letters from ‘s’
 *   and removing them, causing the left and the right side of the deleted
 *   substring to concatenate
 *   We repeatedly make ‘k’ “duplicate removals” on ‘s’ until we no longer
 *   Return the final string after all such duplicate removals have been
 *   made. It is guaranteed that the answer is unique.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s.length ≤ 10⁵’
 *   • ‘2 ≤ k ≤ 10⁴’
 *   • ‘s’ only contains lower case English letters.
 *
 */

struct q1209 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    string removeDuplicates(string s, int k) {
      int n = s.size();
      if (n < k) return s;

      stack<pair<char, int>> stk;
      for (int i = 0; i < n; ++i) {
        if (stk.empty() || stk.top().first != s[i])
          stk.push({s[i], 1});
        else {
          auto prev = stk.top();
          stk.pop();
          stk.push({s[i], prev.second + 1});
        }
        if (stk.top().second == k) stk.pop();
      }

      string res = "";
      while (!stk.empty()) {
        auto cur = stk.top();
        stk.pop();
        while (cur.second--) {
          res.push_back(cur.first);
        }
      }
      reverse(res.begin(), res.end());
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1209, sample_input01) {
  solution = new Solution();
  string s = "abcd";
  int k = 2;
  string exp = "abcd";
  string act = solution->removeDuplicates(s, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1209, sample_input02) {
  solution = new Solution();
  string s = "deeedbbcccbdaa";
  int k = 3;
  string exp = "aa";
  string act = solution->removeDuplicates(s, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1209, sample_input03) {
  solution = new Solution();
  string s = "pbbcggttciiippooaais";
  int k = 2;
  string exp = "ps";
  string act = solution->removeDuplicates(s, k);
  EXPECT_EQ(act, exp);
  delete solution;
}