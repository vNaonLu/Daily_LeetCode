#include <gtest/gtest.h>
#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1207.
 *       Unique Number of Occurrences
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an array of integers ‘arr’ , return ‘true’ if the number of
 *   occurrences of each value in the array is “unique” , or ‘false’
 *   otherwise.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ arr.length≤ 1000’
 *   • ‘-1000 ≤ arr[i] ≤ 1000’
 *
 */

struct q1207 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    bool uniqueOccurrences(vector<int> &arr) {
      auto freq = unordered_map<int, int>();
      for (auto x : arr) {
        ++freq[x];
      }
      auto is_unique = unordered_set<int>();
      for (auto &x : freq) {
        if (!is_unique.emplace(x.second).second) {
          return false;
        }
      }
      return true;
    }
  };

  class Solution *solution;
};

TEST_F(q1207, sample_input01) {
  solution        = new Solution();
  vector<int> arr = {1, 2, 2, 1, 1, 3};
  bool        exp = true;
  bool        act = solution->uniqueOccurrences(arr);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1207, sample_input02) {
  solution        = new Solution();
  vector<int> arr = {1, 2};
  bool        exp = false;
  bool        act = solution->uniqueOccurrences(arr);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1207, sample_input03) {
  solution        = new Solution();
  vector<int> arr = {-3, 0, 1, -3, 1, 1, 1, -3, 10, 0};
  bool        exp = true;
  bool        act = solution->uniqueOccurrences(arr);
  EXPECT_EQ(act, exp);
  delete solution;
}