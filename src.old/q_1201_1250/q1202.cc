#include <gtest/gtest.h>
#include <array>
#include <iostream>
#include <string>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1202.
 *       Smallest String With Swaps
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given a string ‘s’ , and an array of pairs of indices in the
 *   string ‘pairs’ where ‘pairs[i] =[a, b]’ indicates 2 indices(0-indexed)
 *   of the
 *   You canswap the characters at any pair of indices in the given ‘pairs’
 *    “any number of times”
 *   Return thelexicographically smallest string that ‘s’ can be changed to
 *   after using the swaps.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s.length ≤ 10^5’
 *   • ‘0 ≤ pairs.length ≤ 10^5’
 *   • ‘0 ≤ pairs[i][0], pairs[i][1] <s.length’
 *   • ‘s’ only contains lower case English letters.
 *
 */

struct q1202 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    static const int N = 100001;
    array<vector<int>, N> adj;
    array<bool, N> visited;

    void dfs(string &s, int v, vector<char> &ch, vector<int> &indices) {
      ch.emplace_back(s[v]);
      indices.emplace_back(v);

      visited[v] = true;
      for (int &a : adj[v]) {
        if (!visited[a]) {
          dfs(s, a, ch, indices);
        }
      }
    }

   public:
    string smallestStringWithSwaps(string s, vector<vector<int>> &pairs) {
      for (auto &v : pairs) {
        int i = v[0],
            j = v[1];
        adj[i].emplace_back(j);
        adj[j].emplace_back(i);
      }

      for (int i = 0; i < s.size(); ++i) {
        if (!visited[i]) {
          vector<char> chs;
          vector<int> ind;
          dfs(s, i, chs, ind);

          sort(chs.begin(), chs.end());
          sort(ind.begin(), ind.end());

          for (int j = 0; j < chs.size(); ++j) {
            s[ind[j]] = chs[j];
          }
        }
      }

      return s;
    }
  };

  class Solution *solution;
};

TEST_F(q1202, sample_input01) {
  solution = new Solution();
  string s = "dcab";
  vector<vector<int>> pairs = {{0, 3}, {1, 2}};
  string exp = "bacd";
  string act = solution->smallestStringWithSwaps(s, pairs);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1202, sample_input02) {
  solution = new Solution();
  string s = "dcab";
  vector<vector<int>> pairs = {{0, 3}, {1, 2}, {0, 2}};
  string exp = "abcd";
  string act = solution->smallestStringWithSwaps(s, pairs);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1202, sample_input03) {
  solution = new Solution();
  string s = "cba";
  vector<vector<int>> pairs = {{0, 1}, {1, 2}};
  string exp = "abc";
  string act = solution->smallestStringWithSwaps(s, pairs);
  EXPECT_EQ(act, exp);
  delete solution;
}