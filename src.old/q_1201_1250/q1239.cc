#include <gtest/gtest.h>
#include <iostream>
#include <string>
#include <unordered_set>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 1239.
 *       Maximum Length of a Concatenated String with Unique Characters
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an array of strings ‘arr’ . A string ‘s’ is formed by
 *   the “concatenation” of a “subsequence” of ‘arr’ that has “unique
 *   characters”
 *   Return “the “maximum” possible length” of ‘s’
 *   A “subsequence” is an array that can be derived from another array by
 *   deleting some or no elements without changing the order of the
 *   remaining elements.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ arr.length ≤ 16’
 *   • ‘1 ≤ arr[i].length ≤ 26’
 *   • ‘arr[i]’ contains only lowercase English letters.
 *
 */

struct q1239 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int maxLength(vector<string>& arr) {
      int res = 0;
      vector<string> combine = {""};
      for (string& w : arr) {
        int length = combine.size();
        for (int i = 0; i < length; ++i) {
          string str = combine[i] + w;
          unordered_set<char> str_set(str.begin(), str.end());
          if (str_set.size() != str.size()) continue;
          combine.push_back(str);
          res = max(res, (int)str.size());
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1239, sample_input01) {
  solution = new Solution();
  vector<string> arr = {"un", "iq", "ue"};
  int exp = 4;
  EXPECT_EQ(solution->maxLength(arr), exp);
  delete solution;
}

TEST_F(q1239, sample_input02) {
  solution = new Solution();
  vector<string> arr = {"cha", "r", "act", "ers"};
  int exp = 6;
  EXPECT_EQ(solution->maxLength(arr), exp);
  delete solution;
}

TEST_F(q1239, sample_input03) {
  solution = new Solution();
  vector<string> arr = {"abcdefghijklmnopqrstuvwxyz"};
  int exp = 26;
  EXPECT_EQ(solution->maxLength(arr), exp);
  delete solution;
}

TEST_F(q1239, sample_input04) {
  solution = new Solution();
  vector<string> arr = {"aa", "bb"};
  int exp = 0;
  EXPECT_EQ(solution->maxLength(arr), exp);
  delete solution;
}