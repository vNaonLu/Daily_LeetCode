#include <array>
#include <gtest/gtest.h>
#include <iostream>
#include <string>
#include <unordered_set>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 804.
 *      Unique Morse Code Words
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   International Morse Code defines a standard encoding where each letter
 *   is mapped to a series of dots and dashes, as
 *       -  ‘'a'’ maps to ‘'.-'’
 *       -  ‘'b'’ maps to ‘'-...'’
 *       -  ‘'c'’ maps to ‘'-.-.'’ , and so
 *   For convenience, the full table for the ‘26’ letters of the English
 *   alphabet is given
 *   Given an array of strings ‘words’ where each word can be written as a
 *   concatenation of the Morse code of each
 *       - For example, ‘'cab'’ can be written as ‘'-.-..--...'’ , which is
 *   the concatenation of ‘'-.-.'’ , ‘'.-'’ , and ‘'-...'’ . We will call
 *   such a concatenation the “transformation” of a
 *   Return “the number of different “transformations” among all words we
 *   have” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ words.length ≤ 100’
 *   • ‘1 ≤ words[i].length ≤ 12’
 *   • ‘words[i]’ consists of lowercase English letters.
 *
 */

struct q804 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  private:
    constexpr static auto dict = array<string_view, 26>{
        ".-",   "-...", "-.-.", "-..",  ".",   "..-.", "--.",  "....", "..",
        ".---", "-.-",  ".-..", "--",   "-.",  "---",  ".--.", "--.-", ".-.",
        "...",  "-",    "..-",  "...-", ".--", "-..-", "-.--", "--.."};

    template <typename Iterator> string decode(Iterator beg, Iterator end) {
      auto res = string();

      while (beg != end) {
        res += dict[*beg++ - 'a'];
      }

      return res;
    }

  public:
    int uniqueMorseRepresentations(vector<string> &words) {
      auto res = unordered_set<string>();
      for (auto &s : words) {
        res.emplace(decode(s.begin(), s.end()));
      }

      return res.size();
    }
  };
  class Solution *solution;
};

TEST_F(q804, sample_input01) {
  solution = new Solution();
  vector<string> words = {"gin", "zen", "gig", "msg"};
  int exp = 2;
  int act = solution->uniqueMorseRepresentations(words);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q804, sample_input02) {
  solution = new Solution();
  vector<string> words = {"a"};
  int exp = 1;
  int act = solution->uniqueMorseRepresentations(words);
  EXPECT_EQ(act, exp);
  delete solution;
}