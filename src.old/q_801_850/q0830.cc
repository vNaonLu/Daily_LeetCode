#include <gtest/gtest.h>
#include <iostream>
#include <string>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 830.
 *      Positions of Large Groups
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   In a string ‘<font face="monospace">s</font>’ of lowercase letters,
 *   these letters form consecutive groups of the same
 *   For example, a string like ‘s = 'abbxxxxzyy'’ has the groups ‘'a'’ ,
 *   ‘'bb'’ , ‘'xxxx'’ , ‘'z'’ , and ‘'yy'’
 *   A group is identified by an interval ‘[start, end]’ , where ‘start’
 *   and ‘end’ denote the start and endindices (inclusive) of the group. In
 *   the above example, ‘'xxxx'’ has the interval ‘[3,6]’
 *   A group is considered “large” if it has 3 or more
 *   Return “the intervals of every “large” group sorted in “increasing
 *   order by start index” ” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s.length ≤ 1000’
 *   • ‘s’ contains lowercase English letters only.
 *
 */

struct q830 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    vector<vector<int>> largeGroupPositions(string s) {
      vector<vector<int>> res;
      int l = 0;

      for (int i = 1; i < s.size(); ++i) {
        if (s[l] != s[i]) {
          if (i - l >= 3) {
            res.emplace_back(vector<int>{l, i - 1});
          }
          l = i;
        }
      }

      if (s.size() - l >= 3) {
        res.emplace_back(vector<int>{l, (int)s.size() - 1});
      }

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q830, sample_input01) {
  solution = new Solution();
  string s = "abbxxxxzzy";
  vector<vector<int>> exp = {{3, 6}};
  vector<vector<int>> act = solution->largeGroupPositions(s);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q830, sample_input02) {
  solution = new Solution();
  string s = "abc";
  vector<vector<int>> exp = {};
  vector<vector<int>> act = solution->largeGroupPositions(s);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q830, sample_input03) {
  solution = new Solution();
  string s = "abcdddeeeeaabbbcd";
  vector<vector<int>> exp = {{3, 5}, {6, 9}, {12, 14}};
  vector<vector<int>> act = solution->largeGroupPositions(s);
  EXPECT_EQ(act, exp);
  delete solution;
}