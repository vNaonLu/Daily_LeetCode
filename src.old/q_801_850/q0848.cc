#include <gtest/gtest.h>
#include <iostream>
#include <string>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 848.
 *      Shifting Letters
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given a string ‘s’ of lowercase English letters and an integer
 *   array ‘shifts’ of the same
 *   Call the ‘shift()’ of a letter, the next letter in the alphabet,
 *   (wrapping around so that ‘'z'’ becomes ‘'a'’
 *       - For example, ‘shift('a') = 'b'’ , ‘shift('t') = 'u'’ , and
 *   ‘shift('z') = 'a'’
 *   Now for each ‘shifts[i] = x’ , we want to shift the first ‘i + 1’
 *   letters of ‘s’ , ‘x’
 *   Return “the final string after all such shifts to s are applied” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s.length ≤ 10⁵’
 *   • ‘s’ consists of lowercase English letters.
 *   • ‘shifts.length = s.length’
 *   • ‘0 ≤ shifts[i] ≤ 10⁹’
 *
 */

struct q848 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    string shiftingLetters(string s, vector<int>& shifts) {
      for (auto it = shifts.rbegin(); it != shifts.rend(); ++it) {
        if (it == shifts.rbegin())
          *it %= 26;
        else
          *it = (*it + *(it - 1)) % 26;
      }
      for (int i = 0; i < shifts.size(); ++i) {
        s[i] = (s[i] - 'a' + shifts[i]) % 26 + 'a';
      }
      return s;
    }
  };

  class Solution *solution;
};

TEST_F(q848, sample_input01) {
  solution = new Solution();
  string s = "abc";
  vector<int> shifts = {3, 5, 9};
  string exp = "rpl";
  EXPECT_EQ(solution->shiftingLetters(s, shifts), exp);
  delete solution;
}

TEST_F(q848, sample_input02) {
  solution = new Solution();
  string s = "aaa";
  vector<int> shifts = {1, 2, 3};
  string exp = "gfd";
  EXPECT_EQ(solution->shiftingLetters(s, shifts), exp);
  delete solution;
}