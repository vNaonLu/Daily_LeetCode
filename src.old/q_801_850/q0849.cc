#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 849.
 *      Maximize Distance to Closest Person
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an array representing a row of ‘seats’ where ‘seats[i] =
 *   1’ represents a person sitting in the ‘iᵗʰ’ seat, and ‘seats[i] = 0’
 *   represents that the ‘iᵗʰ’ seat is empty “(0-indexed)”
 *   There is at least one empty seat, and at least one person
 *   Alex wants to sit in the seat such that the distance between him and
 *   the closest person to him is
 *   Return “that maximum distance to the closest person” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘2 ≤ seats.length ≤ 2 × 10⁴’
 *   • ‘seats[i]’ is ‘0’ or ‘1’ .
 *   • At least one seat is “empty” .
 *   • At least one seat is “occupied” .
 *
 */

struct q849 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int maxDistToClosest(vector<int>& seats) {
      int res = 0;
      int left = -1, right = 0;
      for (int i = 0; i < seats.size(); ++i) {
        if (seats[i] == 1) {
          left = i;
        } else {
          while (right < seats.size() && seats[right] == 0 || right < i) ++right;
          res = max(res, min((left == -1 ? std::numeric_limits<int>::max() : i - left),
                             (right == seats.size() ? std::numeric_limits<int>::max() : right - i)));
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q849, sample_input01) {
  solution = new Solution();
  vector<int> seats = {1, 0, 0, 0, 1, 0, 1};
  int exp = 2;
  int act = solution->maxDistToClosest(seats);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q849, sample_input02) {
  solution = new Solution();
  vector<int> seats = {1, 0, 0, 0};
  int exp = 3;
  int act = solution->maxDistToClosest(seats);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q849, sample_input03) {
  solution = new Solution();
  vector<int> seats = {0, 1};
  int exp = 1;
  int act = solution->maxDistToClosest(seats);
  EXPECT_EQ(act, exp);
  delete solution;
}