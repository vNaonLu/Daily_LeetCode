#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/treenode.hpp>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 814.
 *      Binary Tree Pruning
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given the ‘root’ of a binary tree, return “the same tree where every
 *   subtree (of the given tree) not containing a ” ‘1’ “ has been removed”
 *   A subtree of a node ‘node’ is ‘node’ plus every node that is a
 *   descendant of ‘node’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The number of nodes in the tree is in the range ‘[1, 200]’ .
 *   • ‘Node.val’ is either ‘0’ or ‘1’ .
 *
 */

struct q814 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  private:
    bool isPivotalNode(TreeNode *p) {
      if (nullptr == p) {
        return false;
      } else if (p->val == 0) {
        return isPivotalNode(p->left) || isPivotalNode(p->right);
      } else {
        return true;
      }
    }

  public:
    TreeNode *pruneTree(TreeNode *root) {
      if (!isPivotalNode(root)) {
        root = nullptr;
      } else {
        root->left  = pruneTree(root->left);
        root->right = pruneTree(root->right);
      }
      return root;
    }
  };

  class Solution *solution;
};

TEST_F(q814, sample_input01) {
  solution       = new Solution();
  TreeNode *root = TreeNode::generate({1, NULL_TREENODE, 0, 0, 1});
  TreeNode *exp  = TreeNode::generate({1, NULL_TREENODE, 0, NULL_TREENODE, 1});
  TreeNode *act  = solution->pruneTree(root);
  EXPECT_TREENODE_EQ(act, exp);
  TreeNode::release(root, exp, act);
  delete solution;
}

TEST_F(q814, sample_input02) {
  solution       = new Solution();
  TreeNode *root = TreeNode::generate({1, 0, 1, 0, 0, 0, 1});
  TreeNode *exp  = TreeNode::generate({1, NULL_TREENODE, 1, NULL_TREENODE, 1});
  TreeNode *act  = solution->pruneTree(root);
  EXPECT_TREENODE_EQ(act, exp);
  TreeNode::release(root, exp, act);
  delete solution;
}

TEST_F(q814, sample_input03) {
  solution       = new Solution();
  TreeNode *root = TreeNode::generate({1, 1, 0, 1, 1, 0, 1, 0});
  TreeNode *exp  = TreeNode::generate({1, 1, 0, 1, 1, NULL_TREENODE, 1});
  TreeNode *act  = solution->pruneTree(root);
  EXPECT_TREENODE_EQ(act, exp);
  TreeNode::release(root, exp, act);
  delete solution;
}