#include <algorithm>
#include <gtest/gtest.h>
#include <iostream>
#include <string>
#include <unordered_set>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 824.
 *      Goat Latin
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given a string ‘sentence’ that consist of words separated by
 *   spaces. Each word consists of lowercase and uppercase letters
 *   We would like to convert the sentence to 'Goat Latin' (a made-up
 *   language similar to Pig Latin.) The rules of Goat Latin are as
 *       - If a word begins with a vowel ( ‘'a'’ , ‘'e'’ , ‘'i'’ , ‘'o'’ ,
 *   or ‘'u'’ ), append ‘'ma'’ to the end of the
 *           - For example, the word ‘'apple'’ becomes ‘'applema'’
 *      
 *       - If a word begins with a consonant (i.e., not a vowel), remove
 *   the first letter and append it to the end, then add ‘'ma'’
 *           - For example, the word ‘'goat'’ becomes ‘'oatgma'’
 *      
 *       - Add one letter ‘'a'’ to the end of each word per its word index
 *   in the sentence, starting with ‘1’
 *           - For example, the first word gets ‘'a'’ added to the end, the
 *   second word gets ‘'aa'’ added to the end, and so
 *      
 *   Return “ the final sentence representing the conversion from sentence
 *   to Goat Latin” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ sentence.length ≤ 150’
 *   • ‘sentence’ consists of English letters and spaces.
 *   • ‘sentence’ has no leading or trailing spaces.
 *   • All the words in ‘sentence’ are separated by a single space.
 *
 */

struct q824 : public ::testing::Test {
  // Leetcode answer here
class Solution {
private:
  template <typename It>
  string getWord(It *beg, It end) {
    auto init = *beg;
    while (*beg != end) {
      if (**beg == ' ') {
        auto res = string(init, *beg);
        ++(*beg);
        return res;
      }
      ++(*beg);
    }
    return string(init, *beg);
  }
  
public:
  string toGoatLatin(string sentence) {
    static auto const mp = unordered_set<char>({'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'});
    auto beg = sentence.begin();
    auto res = string("");
    auto idx = (int)1;
    while (beg != sentence.end()) {
      string s = getWord(&beg, sentence.end());
      if (!s.empty()) {
        if (!mp.count(s[0])) {
          rotate(s.begin(), s.begin() + 1, s.end());
        }
        res += s + "ma";
        for (int i=0; i<idx; ++i) {
          res += 'a';
        }
        res += ' ';
        ++idx;
      }
    }
    res.pop_back();
    return res;
  }
};

  class Solution *solution;
};

TEST_F(q824, sample_input01) {
  solution = new Solution();
  string sentence = "I speak Goat Latin";
  string exp = "Imaa peaksmaaa oatGmaaaa atinLmaaaaa";
  string act = solution->toGoatLatin(sentence);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q824, sample_input02) {
  solution = new Solution();
  string sentence = "The quick brown fox jumped over the lazy dog";
  string exp = "heTmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa";
  string act = solution->toGoatLatin(sentence);
  EXPECT_EQ(act, exp);
  delete solution;
}