#include <gtest/gtest.h>
#include <iostream>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1790.
 *       Check if One String Swap Can Make Strings Equal
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given two strings ‘s1’ and ‘s2’ of equal length. A “string
 *   swap” is an operation where you choose two indices in a string (not
 *   necessarily different) and swap the characters at these
 *   Return ‘true’ “if it is possible to make both strings equal by
 *   performing “at most one string swap ” on “exactly one” of the strings.
 *   ” Otherwise, return ‘false’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s1.length, s2.length ≤ 100’
 *   • ‘s1.length = s2.length’
 *   • ‘s1’ and ‘s2’ consist of only lowercase English letters.
 *
 */

struct q1790 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    bool areAlmostEqual(string s1, string s2) {
      vector<int> diff_pos;
      int pos = 0;
      auto s1b = s1.begin(), s2b = s2.begin();
      while (s1b != s1.end() && s2b != s2.end() && diff_pos.size() <= 2) {
        if (*(s1b++) != *(s2b++)) {
          diff_pos.emplace_back(pos);
        }
        ++pos;
      }

      if (diff_pos.empty()) {

        return true;
      } else if (diff_pos.size() == 2 &&
                 s1[diff_pos[0]] == s2[diff_pos[1]] &&
                 s1[diff_pos[1]] == s2[diff_pos[0]]) {
                   
        return true;
      }

      return false;
    }
  };

  class Solution *solution;
};

TEST_F(q1790, sample_input01) {
  solution = new Solution();
  string s1 = "bank";
  string s2 = "kanb";
  bool exp = true;
  bool act = solution->areAlmostEqual(s1, s2);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1790, sample_input02) {
  solution = new Solution();
  string s1 = "attack";
  string s2 = "defend";
  bool exp = false;
  bool act = solution->areAlmostEqual(s1, s2);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1790, sample_input03) {
  solution = new Solution();
  string s1 = "kelb";
  string s2 = "kelb";
  bool exp = true;
  bool act = solution->areAlmostEqual(s1, s2);
  EXPECT_EQ(act, exp);
  delete solution;
}