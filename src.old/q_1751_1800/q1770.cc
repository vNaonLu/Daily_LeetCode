#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1770.
 *       Maximum Score from Performing Multiplication Operations
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given two integer arrays ‘nums’ and ‘multipliers’ “ ” of size
 *   ‘n’ and ‘m’ respectively, where ‘n ≥ m’ . The arrays are “1-indexed”
 *   You begin with a score of ‘0’ . You want to perform “exactly” ‘m’
 *   operations. On the ‘iᵗʰ’ operation “(1-indexed)” , you
 *       - Choose one integer ‘x’ from “either the start or the end ” of
 *   the array ‘nums’
 *       - Add ‘multipliers[i] × x’ to your
 *       - Remove ‘x’ from the array ‘nums’
 *   Return “the “maximum” score after performing ” ‘m’ “operations.”
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘n = nums.length’
 *   • ‘m = multipliers.length’
 *   • ‘1 ≤ m ≤ 10³’
 *   • ‘m ≤ n ≤ 10⁵’  ‘ ’
 *   • ‘-1000 ≤ nums[i], multipliers[i] ≤ 1000’
 *
 */

struct q1770 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int maximumScore(vector<int> &nums, vector<int> &multipliers) {
      auto n  = nums.size();
      auto m  = multipliers.size();
      auto dp = vector<int>(m + 1);

      for (int i = m - 1; i >= 0; --i) {
        auto next = dp;
        for (int j = i; j >= 0; --j) {
          dp[j] = max(multipliers[i] * nums[j] + next[j + 1],
                      multipliers[i] * nums[n - 1 - (i - j)] + next[j]);
        }
      }

      return dp.front();
    }
  };

  class Solution *solution;
};

TEST_F(q1770, sample_input01) {
  solution                = new Solution();
  vector<int> nums        = {1, 2, 3};
  vector<int> multipliers = {3, 2, 1};
  int         exp         = 14;
  int         act         = solution->maximumScore(nums, multipliers);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1770, sample_input02) {
  solution                = new Solution();
  vector<int> nums        = {-5, -3, -3, -2, 7, 1};
  vector<int> multipliers = {-10, -5, 3, 4, 6};
  int         exp         = 102;
  int         act         = solution->maximumScore(nums, multipliers);
  EXPECT_EQ(act, exp);
  delete solution;
}