#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1791.
 *       Find Center of Star Graph
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   There is an undirected “star” graph consisting of ‘n’ nodes labeled
 *   from ‘1’ to ‘n’ . A star graph is a graph where there is one “center”
 *   node and “exactly” ‘n - 1’ edges that connect the center node with
 *   every other
 *   You are given a 2D integer array ‘edges’ where each ‘edges[i] = [uᵢ,
 *   vᵢ]’ indicates that there is an edge between the nodes ‘uᵢ’ and ‘vᵢ’ .
 *   Return the center of the given star graph.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘3 ≤ n ≤ 10⁵’
 *   • ‘edges.length = n - 1’
 *   • ‘edges[i].length = 2’
 *   • ‘1 ≤ u⎽(i,) vᵢ ≤ n’
 *   • ‘uᵢ ≠ vᵢ’
 *   • The given ‘edges’ represent a valid star graph.
 *
 */

struct q1791 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int findCenter(vector<vector<int>>& edges) {
      return edges[0][0] == edges[1][0]
                 ? edges[0][0]
                 : (edges[0][0] == edges[1][1]
                        ? edges[0][0]
                        : edges[0][1]);
    }
  };

  class Solution *solution;
};

TEST_F(q1791, sample_input01) {
  solution = new Solution();
  vector<vector<int>> edges = {{1, 2}, {2, 3}, {4, 2}};
  int exp = 2;
  int act = solution->findCenter(edges);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1791, sample_input02) {
  solution = new Solution();
  vector<vector<int>> edges = {{1, 2}, {5, 1}, {1, 3}, {1, 4}};
  int exp = 1;
  int act = solution->findCenter(edges);
  EXPECT_EQ(act, exp);
  delete solution;
}