#include <gtest/gtest.h>
#include <iostream>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1784.
 *       Check if Binary String Has at Most One Segment of Ones
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a binary string ‘s’ “​​​​​without leading zeros” , return
 * ‘true’
 *   ​​​ “if ” ‘s’ “ contains “at most one contiguous segment of ones” ”
 * . Otherwise, return ‘false’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s.length ≤ 100’
 *   • ‘s[i]’ ​​​​ is either ‘'0'’ or ‘'1'’ .
 *   • ‘s[0]’ is ‘'1'’ .
 *
 */

struct q1784 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    bool checkOnesSegment(string s) {
      auto cnt = (int)0;
      auto beg = s.begin();
      while (beg != s.end()) {
        if (*beg == '1') {
          if (beg == s.begin() || *(beg - 1) == '0') {
            ++cnt;
          }
        }
        if (cnt > 1) {
          return false;
        }
        ++beg;
      }
      return true;
    }
  };

  class Solution *solution;
};

TEST_F(q1784, sample_input01) {
  solution   = new Solution();
  string s   = "1001";
  bool   exp = false;
  bool   act = solution->checkOnesSegment(s);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1784, sample_input02) {
  solution   = new Solution();
  string s   = "110";
  bool   exp = true;
  bool   act = solution->checkOnesSegment(s);
  EXPECT_EQ(act, exp);
  delete solution;
}
