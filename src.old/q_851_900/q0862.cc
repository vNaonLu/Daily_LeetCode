#include <gtest/gtest.h>
#include <deque>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 862.
 *      Shortest Subarray with Sum at Least K
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an integer array ‘nums’ and an integer ‘k’ , return “the length
 *   of the shortest non-empty “subarray” of ” ‘nums’ “ with a sum of at
 *   least ” ‘k’ . If there is no such “subarray” , return ‘-1’
 *   A “subarray” is a “contiguous” part of an array.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 10⁵’
 *   • ‘-10⁵ ≤ nums[i] ≤ 10⁵’
 *   • ‘1 ≤ k ≤ 10⁹’
 *
 */

struct q862 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int shortestSubarray(vector<int>& nums, int k) {
      int               res = nums.size() + 1;
      deque<int>        q;
      vector<long long> summaries(nums.size() + 1);
      for (int i = 0; i < nums.size(); ++i) {
        summaries[i + 1] = summaries[i] + nums[i];
      }
      for (int i = 0; i < summaries.size(); ++i) {
        while (q.empty() == false && summaries[i] <= summaries[q.back()]) {
          q.pop_back();
        }
        while (q.empty() == false && summaries[i] >= summaries[q.front()] + k) {
          res = min(res, i - q.front());
          q.pop_front();
        }
        q.push_back(i);
      }
      return res == nums.size() + 1 ? -1 : res;
    }
  };

  class Solution *solution;
};

TEST_F(q862, sample_input01) {
  solution = new Solution();
  vector<int> nums = {1};
  int k = 1;
  int exp = 1;
  int act = solution->shortestSubarray(nums, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q862, sample_input02) {
  solution = new Solution();
  vector<int> nums = {1, 2};
  int k = 4;
  int exp = -1;
  int act = solution->shortestSubarray(nums, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q862, sample_input03) {
  solution = new Solution();
  vector<int> nums = {2, -1, 2};
  int k = 3;
  int exp = 3;
  int act = solution->shortestSubarray(nums, k);
  EXPECT_EQ(act, exp);
  delete solution;
}