#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 881.
 *      Boats to Save People
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an array ‘people’ where ‘people[i]’ is the weight of the
 *   ‘iᵗʰ’ person, and an “infinite number of boats” where each boat can
 *   carry a maximum weight of ‘limit’ . Each boat carries at most two
 *   people at the same time, provided the sum of the weight of those
 *   people is at most ‘limit’
 *   Return “the minimum number of boats to carry every given person” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ people.length ≤ 5 × 10⁴’
 *   • ‘1 ≤ people[i] ≤ limit ≤ 3 × 10⁴’
 *
 */

struct q881 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int numRescueBoats(vector<int>& people, int limit) {
      sort(people.begin(), people.end());
      int left = 0, right = people.size() - 1;
      int res = 0;
      while (left <= right) {
        int curr = people[right--];

        if (right >= 0 && curr <= limit - people[right]) {
          curr += people[right--];
        } else if (left <= right && curr <= limit - people[left]) {
          curr += people[left++];
        }

        ++res;
      }

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q881, sample_input01) {
  solution = new Solution();
  vector<int> people = {1, 2};
  int limit = 3;
  int exp = 1;
  int act = solution->numRescueBoats(people, limit);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q881, sample_input02) {
  solution = new Solution();
  vector<int> people = {3, 2, 2, 1};
  int limit = 3;
  int exp = 3;
  int act = solution->numRescueBoats(people, limit);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q881, sample_input03) {
  solution = new Solution();
  vector<int> people = {3, 5, 3, 4};
  int limit = 5;
  int exp = 4;
  int act = solution->numRescueBoats(people, limit);
  EXPECT_EQ(act, exp);
  delete solution;
}