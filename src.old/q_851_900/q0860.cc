#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 860.
 *      Lemonade Change
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   At a lemonade stand, each lemonade costs ‘$5’ . Customers are standing
 *   in a queue to buy from you and order one at a time (in the order
 *   specified by bills). Each customer will only buy one lemonade and pay
 *   with either a ‘$5’ , ‘$10’ , or ‘$20’ bill. You must provide the
 *   correct change to each customer so that the net transaction is that
 *   the customer pays ‘$5’
 *   Note that you do not have any change in hand at
 *   Given an integer array ‘bills’ where ‘bills[i]’ is the bill the ‘iᵗʰ’
 *   customer pays, return ‘true’ “if you can provide every customer with
 *   the correct change, or” ‘false’ “otherwise” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ bills.length ≤ 10⁵’
 *   • ‘bills[i]’ is either ‘5’ , ‘10’ , or ‘20’ .
 *
 */

struct q860 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    bool lemonadeChange(vector<int> &bills) {
      vector<int> coins(20);
      for (auto &x : bills) {
        if (x == 5) {
          ++coins[5];
        } else if (x == 10) {
          if (coins[5] == 0) {
            return false;
          }
          --coins[5];
          ++coins[10];
        } else if (x == 20) {
          if (coins[10] > 0 && coins[5] > 0) {
            --coins[10];
            --coins[5];
          } else if (coins[5] >= 3) {
            coins[5] -= 3;
          } else {
            return false;
          }
        }
      }

      return true;
    }
  };

  class Solution *solution;
};

TEST_F(q860, sample_input01) {
  solution = new Solution();
  vector<int> bills = {5, 5, 5, 10, 20};
  bool exp = true;
  bool act = solution->lemonadeChange(bills);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q860, sample_input02) {
  solution = new Solution();
  vector<int> bills = {5, 5, 10, 10, 20};
  bool exp = false;
  bool act = solution->lemonadeChange(bills);
  EXPECT_EQ(act, exp);
  delete solution;
}