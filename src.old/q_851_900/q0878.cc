#include <gtest/gtest.h>
#include <iostream>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 878.
 *      Nth Magical Number
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   A positive integer is “magical” if it is divisible by either ‘a’ or
 *   ‘b’
 *   Given the three integers ‘n’ , ‘a’ , and ‘b’ , return the ‘nᵗʰ’
 *   magical number. Since the answer may be very large, “return it modulo
 *   ” ‘10⁹ + 7’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ n ≤ 10⁹’
 *   • ‘2 ≤ a, b ≤ 4 × 10⁴’
 *
 */

struct q878 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    constexpr static uint32_t _module = 1e9 + 7;
    int gcd(int a, int b) {
      if (a == 0) return b;
      return gcd(b % a, a);
    }

   public:
    int nthMagicalNumber(int n, int a, int b) {
      int L = a / gcd(a, b) * b;
      long lo = 0, hi = (long)n * min(a, b);
      while (lo < hi) {
        long m = lo + (hi - lo) / 2;
        if (m / a + m / b - m / L < n) lo = m + 1;
        else hi = m;
      }
      return static_cast<int>(lo % _module);
    }
  };

  class Solution *solution;
};

TEST_F(q878, sample_input01) {
  solution = new Solution();
  int n = 1;
  int a = 2;
  int b = 3;
  int exp = 2;
  EXPECT_EQ(solution->nthMagicalNumber(n, a, b), exp);
  delete solution;
}

TEST_F(q878, sample_input02) {
  solution = new Solution();
  int n = 4;
  int a = 2;
  int b = 3;
  int exp = 6;
  EXPECT_EQ(solution->nthMagicalNumber(n, a, b), exp);
  delete solution;
}

TEST_F(q878, sample_input03) {
  solution = new Solution();
  int n = 5;
  int a = 2;
  int b = 4;
  int exp = 10;
  EXPECT_EQ(solution->nthMagicalNumber(n, a, b), exp);
  delete solution;
}

TEST_F(q878, sample_input04) {
  solution = new Solution();
  int n = 3;
  int a = 6;
  int b = 4;
  int exp = 8;
  EXPECT_EQ(solution->nthMagicalNumber(n, a, b), exp);
  delete solution;
}