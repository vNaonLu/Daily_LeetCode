#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1437.
 *       Check If All 1's Are at Least Length K Places Away
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an binary array ‘nums’ and an integer ‘k’ , return ‘true’ “ if
 *   all ” ‘1’ “'s are at least ” ‘k’ “ places away from each other,
 *   otherwise return ” ‘false’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 10⁵’
 *   • ‘0 ≤ k ≤ nums.length’
 *   • ‘nums[i]’ is ‘0’ or ‘1’
 *
 */

struct q1437 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    bool kLengthApart(vector<int>& nums, int k) {
      int l = 0;
      while (l < nums.size() && nums[l] == 0) {
        ++l;
      }

      for (int r = l + 1; r < nums.size(); ++r) {
        if (nums[r] == 1) {
          if (r - l - 1 < k) {
            return false;
          }

          l = r;
        }
      }

      return true;
    }
  };

  class Solution *solution;
};

TEST_F(q1437, sample_input01) {
  solution = new Solution();
  vector<int> nums = {1, 0, 0, 0, 1, 0, 0, 1};
  int k = 2;
  bool exp = true;
  bool act = solution->kLengthApart(nums, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1437, sample_input02) {
  solution = new Solution();
  vector<int> nums = {1, 0, 0, 1, 0, 1};
  int k = 2;
  bool exp = false;
  bool act = solution->kLengthApart(nums, k);
  EXPECT_EQ(act, exp);
  delete solution;
}