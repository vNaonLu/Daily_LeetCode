#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 978.
 *      Longest Turbulent Subarray
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an integer array ‘arr’ , return “the length of a maximum size
 *   turbulent subarray of” ‘arr’
 *   A subarray is “turbulent” if the comparison sign flips between each
 *   adjacent pair of elements in the
 *   More formally, a subarray ‘[arr[i], arr[i + 1], ..., arr[j]]’ of ‘arr’
 *   is said to be turbulent if and only
 *       - For ‘i ≤ k < j’
 *           -  ‘arr[k] > arr[k + 1]’ when ‘k’ is odd,
 *           -  ‘arr[k] < arr[k + 1]’ when ‘k’ is
 *      
 *       - Or, for ‘i ≤ k < j’
 *           -  ‘arr[k] > arr[k + 1]’ when ‘k’ is even,
 *           -  ‘arr[k] < arr[k + 1]’ when ‘k’ is
 *       	
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ arr.length ≤ 4 × 10⁴’
 *   • ‘0 ≤ arr[i] ≤ 10⁹’
 *
 */

struct q978 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int maxTurbulenceSize(vector<int>& arr) {
      if (arr.size() == 0)
        return 0;
      else if (arr.size() == 1)
        return 1;
      int res = 0, cur = 0;
      long long diff = 0;
      for (int i = 1; i < arr.size(); ++i) {
        long long curd = arr[i] - arr[i - 1];
        if (diff * curd >= 0) {
          cur = curd == 0 ? 0 : 1;
        }
        diff = curd;
        res = max(res, ++cur);
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q978, sample_input01) {
  solution = new Solution();
  vector<int> arr = {9, 4, 2, 10, 7, 8, 8, 1, 9};
  int exp = 5;
  EXPECT_EQ(solution->maxTurbulenceSize(arr), exp);
  delete solution;
}

TEST_F(q978, sample_input02) {
  solution = new Solution();
  vector<int> arr = {4, 8, 12, 16};
  int exp = 2;
  EXPECT_EQ(solution->maxTurbulenceSize(arr), exp);
  delete solution;
}

TEST_F(q978, sample_input03) {
  solution = new Solution();
  vector<int> arr = {100};
  int exp = 1;
  EXPECT_EQ(solution->maxTurbulenceSize(arr), exp);
  delete solution;
}