#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 977.
 *      Squares of a Sorted Array
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an integer array ‘nums’ sorted in “non-decreasing” order, return
 *   “an array of “the squares of each number” sorted in non-decreasing
 *   order” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 10⁴’
 *   • ‘-10⁴ ≤ nums[i] ≤ 10⁴’
 *   • ‘nums’ is sorted in “non-decreasing” order.
 *
 */

struct q977 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    vector<int> sortedSquares(vector<int>& nums) {
      int k = nums.size();
      vector<int> res(k);
      int l = 0, r = k - 1;
      while (l <= r) {
        int ls = nums[l] * nums[l];
        int rs = nums[r] * nums[r];
        if (ls > rs) {
          res[--k] = ls;
          ++l;
        } else {
          res[--k] = rs;
          --r;
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q977, sample_input01) {
  solution = new Solution();
  vector<int> nums = {-4, -1, 0, 3, 10};
  vector<int> exp = {0, 1, 9, 16, 100};
  EXPECT_EQ(solution->sortedSquares(nums), exp);
  delete solution;
}

TEST_F(q977, sample_input02) {
  solution = new Solution();
  vector<int> nums = {-7, -3, 2, 3, 11};
  vector<int> exp = {4, 9, 9, 49, 121};
  EXPECT_EQ(solution->sortedSquares(nums), exp);
  delete solution;
}