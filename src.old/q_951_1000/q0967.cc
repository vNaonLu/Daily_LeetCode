#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/anyorder.hpp>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 967.
 *      Numbers With Same Consecutive Differences
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Return all “non-negative” integers of length ‘n’ such that the
 *   absolute difference between every two consecutive digits is ‘k’
 *   Note that “every” number in the answer “must not” have leading zeros.
 *   For example, ‘01’ has one leading zero and is
 *   You may return the answer in “any order” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘2 ≤ n ≤ 9’
 *   • ‘0 ≤ k ≤ 9’
 *
 */

struct q967 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    vector<int> numsSameConsecDiff(int n, int k) {
      if (n == 1) {
        return {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
      }
      auto queue = vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9};
      for (int lvl = 1; lvl < n; ++lvl) {
        auto next_q = vector<int>();
        for (auto x : queue) {
          auto digit      = x % 10;
          auto next_digit = vector<int>();
          next_digit.emplace_back(digit + k);
          if (k != 0) {
            next_digit.emplace_back(digit - k);
          }
          for (auto y : next_digit) {
            if (y >= 0 && y < 10) {
              next_q.emplace_back(x * 10 + y);
            }
          }
        }
        queue = move(next_q);
      }
      return queue;
    }
  };

  class Solution *solution;
};

TEST_F(q967, sample_input01) {
  solution        = new Solution();
  int         n   = 3;
  int         k   = 7;
  vector<int> exp = {181, 292, 707, 818, 929};
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solution->numsSameConsecDiff(n, k), exp);
  delete solution;
}

TEST_F(q967, sample_input02) {
  solution        = new Solution();
  int         n   = 2;
  int         k   = 1;
  vector<int> exp = {10, 12, 21, 23, 32, 34, 43, 45, 54,
                     56, 65, 67, 76, 78, 87, 89, 98};
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solution->numsSameConsecDiff(n, k), exp);
  delete solution;
}