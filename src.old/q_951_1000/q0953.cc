#include <gtest/gtest.h>
#include <iostream>
#include <string>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 953.
 *      Verifying an Alien Dictionary
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   In an alien language, surprisingly, they also use English lowercase
 *   letters, but possibly in a different ‘order’ . The ‘order’ of the
 *   alphabet is some permutation of lowercase
 *   Given a sequence of ‘words’ written in the alien language, and the
 *   ‘order’ of the alphabet, return ‘true’ if and only if the given
 *   ‘words’ are sorted lexicographically in this alien language.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ words.length ≤ 100’
 *   • ‘1 ≤ words[i].length ≤ 20’
 *   • ‘order.length = 26’
 *   • All characters in ‘words[i]’ and ‘order’ are English lowercase letters.
 *
 */

struct q953 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    bool isAlienSorted(vector<string>& words, string order) {
      vector<int> dict(26, -1);
      for (int i = 0; i < order.size(); ++i) {
        dict[order[i] - 'a'] = i;
      }

      for (int i = 0; i < words.size() - 1; ++i) {
        for (int j = 0; j < words[i].size(); ++j) {
          if (j >= words[i + 1].size()) return false;

          if (words[i][j] != words[i + 1][j]) {
            char curr = words[i][j],
                 next = words[i + 1][j];

            if (dict[curr - 'a'] > dict[next - 'a']) {
              return false;
            }

            break;
          }
        }
      }

      return true;
    }
  };

  class Solution *solution;
};

TEST_F(q953, sample_input01) {
  solution = new Solution();
  vector<string> words = {"hello", "leetcode"};
  string order = "hlabcdefgijkmnopqrstuvwxyz";
  bool exp = true;
  bool act = solution->isAlienSorted(words, order);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q953, sample_input02) {
  solution = new Solution();
  vector<string> words = {"word", "world", "row"};
  string order = "worldabcefghijkmnpqstuvxyz";
  bool exp = false;
  bool act = solution->isAlienSorted(words, order);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q953, sample_input03) {
  solution = new Solution();
  vector<string> words = {"apple", "app"};
  string order = "abcdefghijklmnopqrstuvwxyz";
  bool exp = false;
  bool act = solution->isAlienSorted(words, order);
  EXPECT_EQ(act, exp);
  delete solution;
}