#include <gtest/gtest.h>
#include <iostream>
#include <queue>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 994.
 *      Rotting Oranges
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an ‘m x n’  ‘grid’ where each cell can have one of three
 *       -  ‘0’ representing an empty
 *       -  ‘1’ representing a fresh orange,
 *       -  ‘2’ representing a rotten
 *   Every minute, any fresh orange that is “4-directionally adjacent” to a
 *   rotten orange becomes
 *   Return “the minimum number of minutes that must elapse until no cell
 *   has a fresh orange” . If “this is impossible, return” ‘-1’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘m = grid.length’
 *   • ‘n = grid[i].length’
 *   • ‘1 ≤ m, n ≤ 10’
 *   • ‘grid[i][j]’ is ‘0’ , ‘1’ , or ‘2’ .
 *
 */

struct q994 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    vector<int> direct = {1, 0, 0, 1, -1, 0, 0, -1};
   public:
    int orangesRotting(vector<vector<int>>& grid) {
      queue<pair<int, int>> rot;
      int m = grid.size(), n = grid[0].size();
      int fresh_count = 0;
      for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
          if (grid[i][j] == 2)
            rot.emplace(i, j);
          else if (grid[i][j] == 1)
            ++fresh_count;
        }
      }
      int res = 0;
      int rot_count = 0;
      while (!rot.empty()) {
        int rot_size = rot.size();
        while (rot_size-- > 0) {
          auto current = rot.front();
          rot.pop();
          for (int i = 0; i < direct.size(); ++i) {
            int x = current.first + direct[i];
            int y = current.second + direct[++i];
            if (x >= 0 && x < m && y >= 0 && y < n && grid[x][y] == 1) {
              ++rot_count;
              grid[x][y] = 2;
              rot.emplace(x, y);
            }
          }
        }
        ++res;
      }
      return fresh_count == 0 ? 0 : rot_count == fresh_count ? res - 1
                                                             : -1;
    }
  };

  class Solution *solution;
};

TEST_F(q994, sample_input01) {
  solution = new Solution();
  vector<vector<int>> grid = {{2, 1, 1}, {1, 1, 0}, {0, 1, 1}};
  int exp = 4;
  EXPECT_EQ(solution->orangesRotting(grid), exp);
  delete solution;
}

TEST_F(q994, sample_input02) {
  solution = new Solution();
  vector<vector<int>> grid = {{2, 1, 1}, {0, 1, 1}, {1, 0, 1}};
  int exp = -1;
  EXPECT_EQ(solution->orangesRotting(grid), exp);
  delete solution;
}

TEST_F(q994, sample_input03) {
  solution = new Solution();
  vector<vector<int>> grid = {{0, 2}};
  int exp = 0;
  EXPECT_EQ(solution->orangesRotting(grid), exp);
  delete solution;
}