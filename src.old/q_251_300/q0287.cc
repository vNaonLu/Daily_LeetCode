#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 287.
 *      Find the Duplicate Number
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an array of integers ‘nums’ containing ‘n + 1’ integers where
 *   each integer is in the range ‘[1, n]’
 *   There is only “one repeated number” in ‘nums’ , return
 *   “thisrepeatednumber”
 *   You must solve the problem “without” modifying the array ‘nums’ and
 *   uses only constant extra space.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ n ≤ 10⁵’
 *   • ‘nums.length = n + 1’
 *   • ‘1 ≤ nums[i] ≤ n’
 *   • All the integers in ‘nums’ appear only “once” except for “precisely one integer” which appears “two or more” times.
 *   • How can we prove that at least one duplicate number must exist in ‘nums’ ?
 *   • Can you solve the problem in linear runtime complexity?
 *
 */

struct q287 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int findDuplicate(vector<int> &nums) {
      int res = -1;
      for (auto &x : nums) {
        int idx = abs(x);
        if (nums[idx] < 0) {
          res = idx;
          break;
        }
        nums[idx] *= -1;
      }

      for (auto &x : nums) {
        x = abs(x);
      }

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q287, sample_input01) {
  solution = new Solution();
  vector<int> nums = {1, 3, 4, 2, 2};
  int exp = 2;
  int act = solution->findDuplicate(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q287, sample_input02) {
  solution = new Solution();
  vector<int> nums = {3, 1, 3, 4, 2};
  int exp = 3;
  int act = solution->findDuplicate(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}