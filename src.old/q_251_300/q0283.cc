#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 283.
 *      Move Zeroes
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an integer array ‘nums’ , move all ‘0’ 's to the end of it while
 *   maintaining the relative order of the non-zero
 *    “Note” that you must do this in-place without making a copy of the
 *   array.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 10⁴’
 *   • ‘-2³¹ ≤ nums[i] ≤ 2³¹ - 1’
 *
 */

struct q283 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    void moveZeroes(vector<int>& nums) {
      int fillindex = -1;
      for (int i = 0; i < nums.size(); ++i) {
        if (nums[i] != 0) {
          nums[++fillindex] = nums[i];
        }
      }
      while (fillindex < nums.size() - 1) {
        nums[++fillindex] = 0;
      }
    }
  };

  class Solution *solution;
};

TEST_F(q283, sample_input01) {
  solution = new Solution();
  vector<int> nums = {0, 1, 0, 3, 12};
  vector<int> exp = {1, 3, 12, 0, 0};
  solution->moveZeroes(nums);
  // Assume the first argument is answer.
  EXPECT_EQ(nums, exp);
  delete solution;
}

TEST_F(q283, sample_input02) {
  solution = new Solution();
  vector<int> nums = {0};
  vector<int> exp = {0};
  solution->moveZeroes(nums);
  // Assume the first argument is answer.
  EXPECT_EQ(nums, exp);
  delete solution;
}