#include <gtest/gtest.h>
#include <iostream>
#include <set>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1704.
 *       Determine if String Halves Are Alike
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given a string ‘s’ of even length. Split this string into two
 *   halves of equal lengths, and let ‘a’ be the first half and ‘b’ be the
 *   second
 *   Two strings are “alike” if they have the same number of vowels ( ‘'a'’
 *   , ‘'e'’ , ‘'i'’ , ‘'o'’ , ‘'u'’ , ‘'A'’ , ‘'E'’ , ‘'I'’ , ‘'O'’ ,
 *   ‘'U'’ ). Notice that ‘s’ contains uppercase and lowercase
 *   Return ‘true’ “ if ” ‘a’ “ and ” ‘b’ “ are “alike” ” . Otherwise,
 *   return ‘false’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘2 ≤ s.length ≤ 1000’
 *   • ‘s.length’ is even.
 *   • ‘s’ consists of “uppercase and lowercase” letters.
 *
 */

struct q1704 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  private:
    inline const static set<char> kVowels = {'a', 'e', 'i', 'o', 'u',
                                             'A', 'E', 'I', 'O', 'U'};

    static bool isVowels(char x) { return kVowels.count(x); }

  public:
    bool halvesAreAlike(string s) {
      auto fst_beg = s.begin();
      auto fst_end = s.begin() + s.size() / 2;
      auto sec_beg = fst_end;
      auto sec_end = s.end();
      return count_if(fst_beg, fst_end, isVowels) ==
             count_if(sec_beg, sec_end, isVowels);
    }
  };

  class Solution *solution;
};

TEST_F(q1704, sample_input01) {
  solution   = new Solution();
  string s   = "book";
  bool   exp = true;
  bool   act = solution->halvesAreAlike(s);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1704, sample_input02) {
  solution   = new Solution();
  string s   = "textbook";
  bool   exp = false;
  bool   act = solution->halvesAreAlike(s);
  EXPECT_EQ(act, exp);
  delete solution;
}