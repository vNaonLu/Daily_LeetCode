#include <gtest/gtest.h>
#include <iostream>
#include <unordered_map>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1748.
 *       Sum of Unique Elements
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an integer array ‘nums’ . The unique elements of an
 *   array are the elements that appear “exactly once” in the
 *   Return “the “sum” of all the unique elements of ” ‘nums’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 100’
 *   • ‘1 ≤ nums[i] ≤ 100’
 *
 */

struct q1748 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int sumOfUnique(vector<int> &nums) {
      auto memo = unordered_map<int, int>();
      auto res  = (int)0;
      for (auto x : nums) {
        ++memo[x];
      }
      for (auto [x, cnt] : memo) {
        if (1 == cnt) {
          res += x;
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1748, sample_input01) {
  solution         = new Solution();
  vector<int> nums = {1, 2, 3, 2};
  int         exp  = 4;
  int         act  = solution->sumOfUnique(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1748, sample_input02) {
  solution         = new Solution();
  vector<int> nums = {1, 1, 1, 1, 1};
  int         exp  = 0;
  int         act  = solution->sumOfUnique(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1748, sample_input03) {
  solution         = new Solution();
  vector<int> nums = {1, 2, 3, 4, 5};
  int         exp  = 15;
  int         act  = solution->sumOfUnique(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}
