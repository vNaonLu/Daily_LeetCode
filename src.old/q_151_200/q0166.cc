#include <gtest/gtest.h>
#include <iostream>
#include <string>
#include <unordered_map>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 166.
 *      Fraction to Recurring Decimal
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given two integers representing the ‘numerator’ and ‘denominator’ of a
 *   fraction, return “the fraction in string format”
 *   If the fractional part is repeating, enclose the repeating part in
 *   If multiple answers are possible, return “any of them”
 *   It is “guaranteed” that the length of the answer string is less than
 *   ‘10⁴’ for all the given inputs.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘-2³¹ ≤numerator, denominator ≤ 2³¹ - 1’
 *   • ‘denominator ≠ 0’
 *
 */

struct q166 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    string fractionToDecimal(int numerator, int denominator) {
      auto mp  = unordered_map<int64_t, int>();
      auto res = string("");
      auto num = int64_t(abs(numerator));
      auto den = int64_t(abs(denominator));

      if ((numerator < 0) ^ (denominator < 0 && numerator != 0)) {
        res.push_back('-');
      }

      res += to_string(num / den);

      if (num % den != 0) {
        res.push_back('.');
      }

      while (num % den != 0) {
        num       = (num % den);
        auto find = mp.find(num);
        if (find != mp.end()) {
          res.push_back(')');
          res.insert(find->second, "(");
          break;
        } else {
          mp[num] = res.size();
          num *= 10;
          res += to_string(num / den);
        }
      }

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q166, sample_input01) {
  solution           = new Solution();
  int    numerator   = 1;
  int    denominator = 2;
  string exp         = "0.5";
  string act         = solution->fractionToDecimal(numerator, denominator);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q166, sample_input02) {
  solution           = new Solution();
  int    numerator   = 2;
  int    denominator = 1;
  string exp         = "2";
  string act         = solution->fractionToDecimal(numerator, denominator);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q166, sample_input03) {
  solution           = new Solution();
  int    numerator   = 4;
  int    denominator = 333;
  string exp         = "0.(012)";
  string act         = solution->fractionToDecimal(numerator, denominator);
  EXPECT_EQ(act, exp);
  delete solution;
}