#include <gtest/gtest.h>
#include <iostream>
#include <string>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 179.
 *      Largest Number
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a list of non-negative integers ‘nums’ , arrange them such that
 *   they form the largest number and return
 *   Since the result may be very large, so you need to return a string
 *   instead of an integer.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 100’
 *   • ‘0 ≤ nums[i] ≤ 10⁹’
 *
 */

struct q179 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    string largestNumber(vector<int> &nums) {
      auto strs = vector<string>();
      auto res  = string();
      for (auto x : nums) {
        strs.emplace_back(to_string(x));
      }

      sort(strs.begin(), strs.end(), [](auto &x, auto &y) {
        auto xy = x + y;
        auto yx = y + x;
        return xy > yx;
      });

      if (strs.front() != "0") {
        for (auto &x : strs) {
          res += x;
        }
      } else {
        res = "0";
      }

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q179, sample_input01) {
  solution         = new Solution();
  vector<int> nums = {10, 2};
  string      exp  = "210";
  string      act  = solution->largestNumber(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q179, sample_input02) {
  solution         = new Solution();
  vector<int> nums = {3, 30, 34, 5, 9};
  string      exp  = "9534330";
  string      act  = solution->largestNumber(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}