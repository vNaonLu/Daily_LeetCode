#include <gtest/gtest.h>
#include <iostream>
#include <unordered_map>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 169.
 *      Majority Element
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an array ‘nums’ of size ‘n’ , return “the majority element”
 *   The majority element is the element that appears more than ‘&lfloor;n
 *   / 2&rfloor;’ times. You may assume that the majority element always
 *   exists in the array.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘n = nums.length’
 *   • ‘1 ≤ n ≤ 5 × 10⁴’
 *   • ‘-2³¹ ≤ nums[i] ≤ 2³¹ - 1’
 *
 */

struct q169 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int majorityElement(vector<int>& nums) {
      unordered_map<int, int> cnt;
      for (const auto& n : nums) ++cnt[n];
      int res = 0;
      int cur_cnt = 0;
      for (auto it = cnt.begin(); it != cnt.end(); ++it) {
        if (cur_cnt < it->second) {
          res = it->first;
          cur_cnt = it->second;
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q169, sample_input01) {
  solution = new Solution();
  vector<int> nums = {3, 2, 3};
  int exp = 3;
  EXPECT_EQ(solution->majorityElement(nums), exp);
  delete solution;
}

TEST_F(q169, sample_input02) {
  solution = new Solution();
  vector<int> nums = {2, 2, 1, 1, 1, 2, 2};
  int exp = 2;
  EXPECT_EQ(solution->majorityElement(nums), exp);
  delete solution;
}