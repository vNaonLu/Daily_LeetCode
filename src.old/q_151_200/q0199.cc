#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/treenode.hpp>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 199.
 *      Binary Tree Right Side View
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given the ‘root’ of a binary tree, imagine yourself standing on the
 *   “right side” of it, return “the values of the nodes you can see
 *   ordered from top to bottom” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The number of nodes in the tree is in the range ‘[0, 100]’ .
 *   • ‘-100 ≤ Node.val ≤ 100’
 *
 */

struct q199 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    void helper(TreeNode *p, vector<int> &r, int level = 0) {
      if (p == nullptr) return;
      if (level >= r.size()) r.resize(level + 1, 0);
      r[level] = p->val;
      helper(p->left, r, level + 1);
      helper(p->right, r, level + 1);
    }
   public:
    vector<int> rightSideView(TreeNode *root) {
      vector<int> res;
      helper(root, res);
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q199, sample_input01) {
  solution = new Solution();
  TreeNode* root = TreeNode::generate({1, 2, 3, NULL_TREENODE, 5, NULL_TREENODE, 4});
  vector<int> exp = {1, 3, 4};
  EXPECT_EQ(solution->rightSideView(root), exp);
  delete solution;
}

TEST_F(q199, sample_input02) {
  solution = new Solution();
  TreeNode* root = TreeNode::generate({1, NULL_TREENODE, 3});
  vector<int> exp = {1, 3};
  EXPECT_EQ(solution->rightSideView(root), exp);
  delete solution;
}

TEST_F(q199, sample_input03) {
  solution = new Solution();
  TreeNode* root = TreeNode::generate({});
  vector<int> exp = {};
  EXPECT_EQ(solution->rightSideView(root), exp);
  delete solution;
}