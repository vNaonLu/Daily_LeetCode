#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 188.
 *      Best Time to Buy and Sell Stock IV
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an integer array ‘prices’ where ‘prices[i]’ is the price
 *   of a given stock on the ‘iᵗʰ’ day, and an integer ‘k’
 *   Find the maximum profit you can achieve. You may complete at most ‘k’
 *    “Note:” You may not engage in multiple transactions simultaneously
 *   (i.e., you must sell the stock before you buy again).
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘0 ≤ k ≤ 100’
 *   • ‘0 ≤ prices.length ≤ 1000’
 *   • ‘0 ≤ prices[i] ≤ 1000’
 *
 */

struct q188 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  private:
    int maxProfit(vector<int> &prices) {
      auto res = (int)0;
      auto beg = prices.begin();
      while (beg != prices.end() && beg + 1 != prices.end()) {
        res += max(0, *(beg + 1) - *beg);
        ++beg;
      }
      return res;
    }

  public:
    int maxProfit(int k, vector<int> &prices) {
      if (k >= prices.size() / 2) {
        return maxProfit(prices);
      } else {
        auto buys  = vector<int>(k + 1, numeric_limits<int>::min());
        auto sells = vector<int>(k + 1, 0);
        for (auto p : prices) {
          for (int i = 1; i <= k; ++i) {
            buys[i]  = max(sells[i - 1] - p, buys[i]);
            sells[i] = max(sells[i], buys[i] + p);
          }
        }
        return sells.back();
      }
    }
  };

  class Solution *solution;
};

TEST_F(q188, sample_input01) {
  solution           = new Solution();
  int         k      = 2;
  vector<int> prices = {2, 4, 1};
  int         exp    = 2;
  int         act    = solution->maxProfit(k, prices);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q188, sample_input02) {
  solution           = new Solution();
  int         k      = 2;
  vector<int> prices = {3, 2, 6, 5, 0, 3};
  int         exp    = 7;
  int         act    = solution->maxProfit(k, prices);
  EXPECT_EQ(act, exp);
  delete solution;
}