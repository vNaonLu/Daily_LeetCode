#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 198.
 *      House Robber
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are a professional robber planning to rob houses along a street.
 *   Each house has a certain amount of money stashed, the only constraint
 *   stopping you from robbing each of them is that adjacent houses have
 *   security systems connected and “it will automatically contact the
 *   police if two adjacent houses were broken into on the same night”
 *   Given an integer array ‘nums’ representing the amount of money of each
 *   house, return “the maximum amount of money you can rob tonight
 *   “without alerting the police” ” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 100’
 *   • ‘0 ≤ nums[i] ≤ 400’
 *
 */

struct q198 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int rob(vector<int>& nums) {
      vector<int> dp(nums.size() + 1, 0);
      dp[1] = nums[0];
      for (int i = 2; i < nums.size() + 1; ++i) {
        dp[i] = max(nums[i - 1] + dp[i - 2], dp[i - 1]);
      }
      return dp.back();
    }
  };

  class Solution *solution;
};

TEST_F(q198, sample_input01) {
  solution = new Solution();
  vector<int> nums = {1, 2, 3, 1};
  int exp = 4;
  EXPECT_EQ(solution->rob(nums), exp);
  delete solution;
}

TEST_F(q198, sample_input02) {
  solution = new Solution();
  vector<int> nums = {2, 7, 9, 3, 1};
  int exp = 12;
  EXPECT_EQ(solution->rob(nums), exp);
  delete solution;
}