#include <gtest/gtest.h>
#include <iostream>
#include <map>
#include <string>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 2418.
 *       Sort the People
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an array of strings ‘names’ , and an array ‘heights’
 *   that consists of “distinct” positive integers. Both arrays are of
 *   length ‘n’
 *   For each index ‘i’ , ‘names[i]’ and ‘heights[i]’ denote the name and
 *   height of the ‘iᵗʰ’
 *   Return ‘names’ “ sorted in “descending” order by the people's heights”
 *   .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘n = names.length = heights.length’
 *   • ‘1 ≤ n ≤ 10³’
 *   • ‘1 ≤ names[i].length ≤ 20’
 *   • ‘1 ≤ heights[i] ≤ 10⁵’
 *   • ‘names[i]’ consists of lower and upper case English letters.
 *   • All the values of ‘heights’ are distinct.
 *
 */

struct q2418 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    vector<string> sortPeople(vector<string> &names, vector<int> &heights) {
      vector<string>                 res;
      map<int, string, greater<int>> tmp;
      for (int i = 0; i < heights.size(); ++i) {
        tmp.emplace(heights[i], names[i]);
      }
      for (auto &[h, name] : tmp) {
        res.emplace_back(std::move(name));
      }

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q2418, sample_input01) {
  solution               = new Solution();
  vector<string> names   = {"Mary", "John", "Emma"};
  vector<int>    heights = {180, 165, 170};
  vector<string> exp     = {"Mary", "Emma", "John"};
  vector<string> act     = solution->sortPeople(names, heights);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2418, sample_input02) {
  solution               = new Solution();
  vector<string> names   = {"Alice", "Bob", "Bob"};
  vector<int>    heights = {155, 185, 150};
  vector<string> exp     = {"Bob", "Alice", "Bob"};
  vector<string> act     = solution->sortPeople(names, heights);
  EXPECT_EQ(act, exp);
  delete solution;
}
