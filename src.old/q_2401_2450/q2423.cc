#include <algorithm>
#include <gtest/gtest.h>
#include <iostream>
#include <string>
#include <unordered_map>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 2423.
 *       Remove Letter To Equalize Frequency
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given a “0-indexed” string ‘word’ , consisting of lowercase
 *   English letters. You need to select “one” index and “remove” the
 *   letter at that index from ‘word’ so that the “frequency” of every
 *   letter present in ‘word’ is
 *   Return “ ” ‘true’ “ if it is possible to remove one letter so that the
 *   frequency of all letters in ” ‘word’ “ are equal, and ” ‘false’ “
 *   otherwise”
 *    “Note:”
 *       - The “frequency” of a letter ‘x’ is the number of times it occurs
 *   in the
 *       - You “must” remove exactly one letter and cannot chose to do
 *   nothing.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘2 ≤ word.length ≤ 100’
 *   • ‘word’ consists of lowercase English letters only.
 *
 */

struct q2423 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    bool equalFrequency(string word) {
      unordered_map<char, int> freq;
      vector<int>              cnt;
      for (auto c : word) {
        ++freq[c];
      }

      for (auto &x : freq) {
        cnt.emplace_back(x.second);
      }
      sort(cnt.begin(), cnt.end());

      return cnt.size() == 1 ||
             (cnt.back() - cnt.front() == 1 &&
              cnt.front() == *(cnt.end() - 2)) ||
             (cnt.front() == 1 && cnt.front() == cnt.back()) ||
             (cnt.front() == 1 && *(cnt.begin() + 1) == cnt.back());
    }
  };

  class Solution *solution;
};

TEST_F(q2423, sample_input01) {
  solution    = new Solution();
  string word = "abcc";
  bool   exp  = true;
  bool   act  = solution->equalFrequency(word);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2423, sample_input02) {
  solution    = new Solution();
  string word = "aazz";
  bool   exp  = false;
  bool   act  = solution->equalFrequency(word);
  EXPECT_EQ(act, exp);
  delete solution;
}
