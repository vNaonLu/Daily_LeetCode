#include <gtest/gtest.h>
#include <iostream>
#include <string>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1078.
 *       Occurrences After Bigram
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given two strings ‘first’ and ‘second’ , consider occurrences in some
 *   text of the form ‘'first second third'’ , where ‘second’ comes
 *   immediately after ‘first’ , and ‘third’ comes immediately after
 *   ‘second’
 *   Return “an array of all the words” ‘third’ “for each occurrence of”
 *   ‘'first second third'’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ text.length ≤ 1000’
 *   • ‘text’ consists of lowercase English letters and spaces.
 *   • All the words in ‘text’ a separated by “a single space” .
 *   • ‘1 ≤ first.length, second.length ≤ 10’
 *   • ‘first’ and ‘second’ consist of lowercase English letters.
 *
 */

struct q1078 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  private:
    template <typename It>
    It trim(It beg, It end) {
      while (beg != end) {
        if (*beg != ' ') {
          break;
        }
        ++beg;
      }
      return beg;
    }

    template <typename It>
    vector<string> split(It beg, It end) {
      auto res = vector<string>();
      auto it  = trim(beg, end);
      beg      = it;
      while (it != end) {
        if (*it == ' ') {
          if (beg != it) {
            res.emplace_back(beg, it);
          }
          beg = it = trim(it, end);
        }
        ++it;
      }
      if (beg != it) {
        res.emplace_back(beg, it);
      }
      return res;
    }

  public:
    vector<string> findOcurrences(string text, string first, string second) {
      auto strs = split(text.begin(), text.end());
      auto beg  = strs.begin();
      auto res  = vector<string>();
      while (beg != strs.end()) {
        if (*(beg++) == first) {
          if (*beg == second) {
            if (beg + 1 != strs.end()) {
              res.emplace_back(*(beg + 1));
            }
          }
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1078, sample_input01) {
  solution              = new Solution();
  string         text   = "alice is a good girl she is a good student";
  string         first  = "a";
  string         second = "good";
  vector<string> exp    = {"girl", "student"};
  vector<string> act    = solution->findOcurrences(text, first, second);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1078, sample_input02) {
  solution              = new Solution();
  string         text   = "we will we will rock you";
  string         first  = "we";
  string         second = "will";
  vector<string> exp    = {"we", "rock"};
  vector<string> act    = solution->findOcurrences(text, first, second);
  EXPECT_EQ(act, exp);
  delete solution;
}