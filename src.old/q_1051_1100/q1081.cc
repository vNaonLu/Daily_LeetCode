#include <gtest/gtest.h>
#include <iostream>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1081.
 *       Smallest Subsequence of Distinct Characters
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a string ‘s’ , return “the lexicographically smallest
 *   subsequence of” ‘s’ “that contains all the distinct characters of” ‘s’
 *   “exactly once” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s.length ≤ 1000’
 *   • ‘s’ consists of lowercase English letters.
 *
 */

struct q1081 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    string smallestSubsequence(string s) {
      vector<int> cnt(26, 0),
                  visited(26, 0),
                  stk;
      for (const auto &c : s) ++cnt[c - 'a'];
      for (int i = 0; i < s.size(); ++i) {
        int idx = s[i] - 'a';
        --cnt[idx];
        if (visited[idx]) continue;
        while (!stk.empty() && stk.back() > s[i] && cnt[stk.back() - 'a'] > 0) {
          visited[stk.back() - 'a'] = false;
          stk.pop_back();
        }
        stk.push_back(s[i]);
        visited[idx] = true;
      }
      return string(stk.begin(), stk.end());
    }
  };

  class Solution *solution;
};

TEST_F(q1081, sample_input01) {
  solution = new Solution();
  string s = "bcabc";
  string exp = "abc";
  string act = solution->smallestSubsequence(s);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1081, sample_input02) {
  solution = new Solution();
  string s = "cbacdcbc";
  string exp = "acdb";
  string act = solution->smallestSubsequence(s);
  EXPECT_EQ(act, exp);
  delete solution;
}