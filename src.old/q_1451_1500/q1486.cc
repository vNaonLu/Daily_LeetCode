#include <gtest/gtest.h>
#include <iostream>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1486.
 *       XOR Operation in an Array
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an integer ‘n’ and an integer ‘start’
 *   Define an array ‘nums’ where ‘nums[i] = start + 2 × i’ ( “0-indexed” )
 *   and ‘n = nums.length’
 *   Return “the bitwise XOR of all elements of” ‘nums’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ n ≤ 1000’
 *   • ‘0 ≤ start ≤ 1000’
 *   • ‘n = nums.length’
 *
 */

struct q1486 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int xorOperation(int n, int start) {
      auto res = 0;
      while (n--) {
        res ^= start;
        start += 2;
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1486, sample_input01) {
  solution  = new Solution();
  int n     = 5;
  int start = 0;
  int exp   = 8;
  int act   = solution->xorOperation(n, start);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1486, sample_input02) {
  solution  = new Solution();
  int n     = 4;
  int start = 3;
  int exp   = 8;
  int act   = solution->xorOperation(n, start);
  EXPECT_EQ(act, exp);
  delete solution;
}