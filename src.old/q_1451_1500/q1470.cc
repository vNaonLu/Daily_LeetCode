#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1470.
 *       Shuffle the Array
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given the array ‘nums’ consisting of ‘2n’ elements in the form
 *   ‘[x₁,x₂,...,xₙ,y₁,y₂,...,yₙ]’
 *    “Return the array in the form” ‘[x₁,y₁,x₂,y₂,...,xₙ,yₙ]’
 *
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ n ≤ 500’
 *   • ‘nums.length = 2n’
 *   • ‘1 ≤ nums[i] ≤ 10^3’
 *
 */

struct q1470 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    vector<int> shuffle(vector<int> &nums, int n) {
      auto res  = vector<int>(2 * n);
      auto xbeg = nums.begin();
      auto ybeg = nums.begin() + n;
      auto iter = res.begin();
      while (iter != res.end()) {
        *iter++ = *xbeg++;
        *iter++ = *ybeg++;
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1470, sample_input01) {
  solution         = new Solution();
  vector<int> nums = {2, 5, 1, 3, 4, 7};
  int         n    = 3;
  vector<int> exp  = {2, 3, 5, 4, 1, 7};
  vector<int> act  = solution->shuffle(nums, n);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1470, sample_input02) {
  solution         = new Solution();
  vector<int> nums = {1, 2, 3, 4, 4, 3, 2, 1};
  int         n    = 4;
  vector<int> exp  = {1, 4, 2, 3, 3, 2, 4, 1};
  vector<int> act  = solution->shuffle(nums, n);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1470, sample_input03) {
  solution         = new Solution();
  vector<int> nums = {1, 1, 2, 2};
  int         n    = 2;
  vector<int> exp  = {1, 2, 1, 2};
  vector<int> act  = solution->shuffle(nums, n);
  EXPECT_EQ(act, exp);
  delete solution;
}