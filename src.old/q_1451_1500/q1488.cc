#include <gtest/gtest.h>
#include <iostream>
#include <set>
#include <unordered_map>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1488.
 *       Avoid Flood in The City
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Your country has an infinite number of lakes. Initially, all the lakes
 *   are empty, but when it rains over the ‘nth’ lake, the ‘nth’ lake
 *   becomes full of water. If it rains over a lake that is “full of water”
 *   , there will be a “flood” . Your goal is to avoid floods in any
 *   Given an integer array ‘rains’
 *       -  ‘rains[i] > 0’ means there will be rains over the ‘rains[i]’
 *       -  ‘rains[i] = 0’ means there are no rains this day and you can
 *   choose “one lake” this day and “dry it”
 *   Return “an array ‘ans’ ”
 *       -  ‘ans.length = rains.length’
 *       -  ‘ans[i] = -1’ if ‘rains[i] > 0’
 *       -  ‘ans[i]’ is the lake you choose to dry in the ‘ith’ day if
 *   ‘rains[i] = 0’
 *   If there are multiple valid answers return “any” of them. If it is
 *   impossible to avoid flood return “an empty array”
 *   Notice that if you chose to dry a full lake, it becomes empty, but if
 *   you chose to dry an empty lake, nothing changes.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ rains.length ≤ 10⁵’
 *   • ‘0 ≤ rains[i] ≤ 10⁹’
 *
 */

struct q1488 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    vector<int> avoidFlood(vector<int> &rains) {
      auto res = vector<int>(rains.size(), -1);
      auto indices = unordered_map<int, int>();
      auto memo = set<int>();

      for (int i = 0; i < rains.size(); ++i) {
        if (rains[i] == 0) {
          memo.insert(i);
        } else {
          auto prev = indices.find(rains[i]);
          if (prev == indices.end()) {
            indices[rains[i]] = i;
          } else {
            auto &prev = indices[rains[i]];
            auto find = memo.upper_bound(prev);

            if (find == memo.end()) {
              return vector<int>{};
            } else {
              res[*find] = rains[i];
              prev = i;
              memo.erase(find);
            }
          }
        }
      }

      for (int i = 0; i < res.size(); ++i) {
        if (rains[i] == 0 && res[i] == -1) {
          res[i] = 1;
        }
      }

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1488, sample_input01) {
  solution = new Solution();
  vector<int> rains = {1, 2, 3, 4};
  vector<int> exp = {-1, -1, -1, -1};
  vector<int> act = solution->avoidFlood(rains);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1488, sample_input02) {
  solution = new Solution();
  vector<int> rains = {1, 2, 0, 0, 2, 1};
  vector<int> exp = {-1, -1, 2, 1, -1, -1};
  vector<int> act = solution->avoidFlood(rains);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1488, sample_input03) {
  solution = new Solution();
  vector<int> rains = {1, 2, 0, 1, 2};
  vector<int> exp = {};
  vector<int> act = solution->avoidFlood(rains);
  EXPECT_EQ(act, exp);
  delete solution;
}