#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1491.
 *       Average Salary Excluding the Minimum and Maximum Salary
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an array of “unique” integers ‘salary’ where ‘salary[i]’
 *   is the salary of the ‘iᵗʰ’
 *   Return “the average salary of employees excluding the minimum and
 *   maximum salary” . Answers within ‘10⁻⁵’ of the actual answer will be
 *   accepted.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘3 ≤ salary.length ≤ 100’
 *   • ‘1000 ≤ salary[i] ≤ 10⁶’
 *   • All the integers of ‘salary’ are “unique” .
 *
 */

struct q1491 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    double average(vector<int>& salary) {
      int mx = salary.front(),
          mn = salary.front(),
          sum = salary.front();
      auto beg = salary.begin() + 1;
      while (beg != salary.end()) {
        mx = max(mx, *beg);
        mn = min(mn, *beg);
        sum += *(beg++);
      }

      return double(sum - mx - mn) / (salary.size() - 2);
    }
  };

  class Solution *solution;
};

TEST_F(q1491, sample_input01) {
  solution = new Solution();
  vector<int> salary = {4000, 3000, 1000, 2000};
  double exp = 2500.00000;
  double act = solution->average(salary);
  EXPECT_DOUBLE_EQ(act, exp);
  delete solution;
}

TEST_F(q1491, sample_input02) {
  solution = new Solution();
  vector<int> salary = {1000, 2000, 3000};
  double exp = 2000.00000;
  double act = solution->average(salary);
  EXPECT_DOUBLE_EQ(act, exp);
  delete solution;
}