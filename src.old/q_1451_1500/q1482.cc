#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1482.
 *       Minimum Number of Days to Make m Bouquets
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an integer array ‘bloomDay’ , an integer ‘m’ and an
 *   integer ‘k’
 *   You want to make ‘m’ bouquets. To make a bouquet, you need to use ‘k’
 *   “adjacent flowers” from the
 *   The garden consists of ‘n’ flowers, the ‘iᵗʰ’ flower will bloom in the
 *   ‘bloomDay[i]’ and then can be used in “exactly one”
 *   Return “the minimum number of days you need to wait to be able to make
 *   ” ‘m’ “ bouquets from the garden” . If it is impossible to make m
 *   bouquets return ‘-1’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘bloomDay.length = n’
 *   • ‘1 ≤ n ≤ 10⁵’
 *   • ‘1 ≤ bloomDay[i] ≤ 10⁹’
 *   • ‘1 ≤ m ≤ 10⁶’
 *   • ‘1 ≤ k ≤ n’
 *
 */

struct q1482 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  private:
    bool helper(vector<int> &days, int mid, int m, int k) {
      int b = 0,
          f = 0;
      for (auto &x : days) {
        if (x <= mid) {
          ++f;
        } else {
          f = 0;
        }

        if (f == k) {
          ++b;
          f = 0;
          if (b == m) {
            return true;
          }
        }
      }
      return false;
    }

  public:
    int minDays(vector<int> &bloomDay, int m, int k) {
      if (m * k > bloomDay.size()) {

        return -1;
      }

      int lo = 1e9 + 1,
          hi = 0;

      for (auto &x : bloomDay) {
        lo = min(lo, x);
        hi = max(hi, x);
      }

      while (lo <= hi) {
        int mid = lo + (hi - lo) / 2;
        if (helper(bloomDay, mid, m, k)) {
          hi = mid - 1;
        } else {
          lo = mid + 1;
        }
      }

      return hi + 1;
    }
  };

  class Solution *solution;
};

TEST_F(q1482, sample_input01) {
  solution = new Solution();
  vector<int> bloomDay = {1, 10, 3, 10, 2};
  int m = 3;
  int k = 1;
  int exp = 3;
  int act = solution->minDays(bloomDay, m, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1482, sample_input02) {
  solution = new Solution();
  vector<int> bloomDay = {1, 10, 3, 10, 2};
  int m = 3;
  int k = 2;
  int exp = -1;
  int act = solution->minDays(bloomDay, m, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1482, sample_input03) {
  solution = new Solution();
  vector<int> bloomDay = {7, 7, 7, 7, 12, 7, 7};
  int m = 2;
  int k = 3;
  int exp = 12;
  int act = solution->minDays(bloomDay, m, k);
  EXPECT_EQ(act, exp);
  delete solution;
}