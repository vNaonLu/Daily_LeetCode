#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 605.
 *      Can Place Flowers
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You have a long flowerbed in which some of the plots are planted, and
 *   some are not. However, flowers cannot be planted in “adjacent”
 *   Given an integer array ‘flowerbed’ containing ‘0’ 's and ‘1’ 's, where
 *   ‘0’ means empty and ‘1’ means not empty, and an integer ‘n’ , return
 *   “if” ‘n’ new flowers can be planted in the ‘flowerbed’ without
 *   violating the no-adjacent-flowers rule.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ flowerbed.length ≤ 2 × 10⁴’
 *   • ‘flowerbed[i]’ is ‘0’ or ‘1’ .
 *   • There are no two adjacent flowers in ‘flowerbed’ .
 *   • ‘0 ≤ n ≤ flowerbed.length’
 *
 */

struct q605 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    bool canPlaceFlowers(vector<int>& flowerbed, int n) {
      int count = 0;
      for (int i = 0; i < flowerbed.size(); ++i) {
        if (flowerbed[i] == 0 && (i == 0 || flowerbed[i - 1] == 0) &&
                                 (i == flowerbed.size() - 1 || flowerbed[i + 1] == 0)) {
          flowerbed[i] = 1;
          ++count;
        }
      }
      return count >= n;
    }
  };

  class Solution *solution;
};

TEST_F(q605, sample_input01) {
  solution = new Solution();
  vector<int> flowerbed = {1, 0, 0, 0, 1};
  int n = 1;
  bool exp = true;
  bool act = solution->canPlaceFlowers(flowerbed, n);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q605, sample_input02) {
  solution = new Solution();
  vector<int> flowerbed = {1, 0, 0, 0, 1};
  int n = 2;
  bool exp = false;
  bool act = solution->canPlaceFlowers(flowerbed, n);
  EXPECT_EQ(act, exp);
  delete solution;
}