#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 629.
 *      K Inverse Pairs Array
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   For an integer array ‘nums’ , an “inverse pair” is a pair of integers
 *   ‘[i, j]’ where ‘0 ≤ i < j < nums.length’ and ‘nums[i] > nums[j]’
 *   Given two integers n and k, return the number of different arrays
 *   consist of numbers from ‘1’ to ‘n’ such that there are exactly ‘k’
 *   “inverse pairs” . Since the answer can be huge, return it “modulo”
 *   ‘10⁹ + 7’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ n ≤ 1000’
 *   • ‘0 ≤ k ≤ 1000’
 *
 */

struct q629 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  private:
    constexpr static int kMod = 1e9 + 7;

  public:
    int kInversePairs(int n, int k) {
      vector<vector<int>> dp(n + 1, vector<int>(k + 1, 0));
      for (int i = 1; i <= n; ++i) {
        for (int j = 0; j <= k; ++j) {
          if (j == 0) {
            dp[i][j] = 1;
          } else {
            int val = (dp[i - 1][j] + kMod - ((j - i) >= 0 ? dp[i - 1][j - i] : 0)) % kMod;
            dp[i][j] = (dp[i][j - 1] + val) % kMod;
          }
        }
      }

      return (dp.back().back() + kMod - (k > 0 ? dp.back()[k - 1] : 0)) % kMod;
    }
  };

  class Solution *solution;
};

TEST_F(q629, sample_input01) {
  solution = new Solution();
  int n = 3;
  int k = 0;
  int exp = 1;
  int act = solution->kInversePairs(n, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q629, sample_input02) {
  solution = new Solution();
  int n = 3;
  int k = 1;
  int exp = 2;
  int act = solution->kInversePairs(n, k);
  EXPECT_EQ(act, exp);
  delete solution;
}