#include <gtest/gtest.h>
#include <iostream>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 2544.
 *       Alternating Digit Sum
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given a positive integer ‘n’ . Each digit of ‘n’ has a sign
 *   according to the following
 *       - The “most significant digit” is assigned a “positive”
 *       - Each other digit has an opposite sign to its adjacent
 *   Return “the sum of all digits with their corresponding sign” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ n ≤ 10⁹’
 *
 */

struct q2544 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int alternateDigitSum(int n) {
      int res    = 0;
      int sign   = 1;
      int length = 0;
      while (n > 0) {
        res += (n % 10) * sign;
        sign *= -1;
        ++length;
        n /= 10;
      }
      return length & 1 ? res : -res;
    }
  };

  class Solution *solution;
};

TEST_F(q2544, sample_input01) {
  solution = new Solution();
  int n    = 521;
  int exp  = 4;
  int act  = solution->alternateDigitSum(n);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2544, sample_input02) {
  solution = new Solution();
  int n    = 111;
  int exp  = 1;
  int act  = solution->alternateDigitSum(n);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2544, sample_input03) {
  solution = new Solution();
  int n    = 886996;
  int exp  = 0;
  int act  = solution->alternateDigitSum(n);
  EXPECT_EQ(act, exp);
  delete solution;
}
