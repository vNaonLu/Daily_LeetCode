#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1863.
 *       Sum of All Subset XOR Totals
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   The “XOR total” of an array is defined as the bitwise ‘XOR’ of “ all
 *   its elements” , or ‘0’ if the array is “ empty”
 *       - For example, the “XOR total” of the array ‘[2,5,6]’ is ‘2 XOR 5
 *   XOR 6 = 1’
 *   Given an array ‘nums’ , return “the “sum” of all “XOR totals” for
 *   every “subset” of ” ‘nums’
 *    “Note:” Subsets with the “same” elements should be counted “multiple”
 *   An array ‘a’ is a “subset” of an array ‘b’ if ‘a’ can be obtained from
 *   ‘b’ by deleting some (possibly zero) elements of ‘b’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 12’
 *   • ‘1 ≤ nums[i] ≤ 20’
 *
 */

struct q1863 : public ::testing::Test {
  // Leetcode answer here
class Solution {
private:
    template<typename Iterator>
    int helper(Iterator beg, Iterator end, int curr = 0) {
        if (beg == end) {
            return curr;
        }
        
        return helper(beg+1, end, curr) + 
               helper(beg+1, end, curr ^ *beg);
    }
    
public:
    int subsetXORSum(vector<int>& nums) {
        
        return helper(nums.begin(), nums.end());
    }
};

  class Solution *solution;
};

TEST_F(q1863, sample_input01) {
  solution = new Solution();
  vector<int> nums = {1, 3};
  int exp = 6;
  int act = solution->subsetXORSum(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1863, sample_input02) {
  solution = new Solution();
  vector<int> nums = {5, 1, 6};
  int exp = 28;
  int act = solution->subsetXORSum(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1863, sample_input03) {
  solution = new Solution();
  vector<int> nums = {3, 4, 5, 6, 7, 8};
  int exp = 480;
  int act = solution->subsetXORSum(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}