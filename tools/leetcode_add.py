#!/usr/bin/python3
import sys
import os
import optparse
import pathlib
import subprocess
from utils import local, template, modify
from leetcode import request as LeetCodeRequest
from leetcode.question import LeetCodeQuestion

prompt = "This file is generated by {}".format(os.path.basename(__file__))
readme_path = ""
sour_path = ""
list_csv = ""
log_csv = ""


class QuestionFile:
    def __init__(self, id: int):
        self.__id: str = str(id).zfill(4)
        self.__intv: str = local.id_folder(id)
        self.__name: str = "q{}.hpp".format(self.__id)
        self.__ut_name: str = "q{}_unittest.hpp".format(self.__id)
        self.__path: str = os.path.join(sour_path, self.__intv)

    def interval(self):
        return self.__intv

    def id(self):
        return int(self.__id)

    def src(self):
        return os.path.join(self.__path, self.__name)

    def unittest(self):
        return os.path.join(self.__path, self.__ut_name)

    def path(self):
        return self.__path


def __add_question(qfile: QuestionFile, ques: LeetCodeQuestion):
    desc = template.generate_question_description(prompt,
                                                  ques.id(),
                                                  ques.title(),
                                                  ques.description(50),
                                                  ques.constraints())

    utindex = os.path.join(qfile.path(), "unittest.hpp")
    if not os.path.isdir(qfile.path()):
        os.makedirs(qfile.path())
        print("[+] create directory: {}".format(qfile.path()))
        template.generate_intv_unittest(utindex, qfile.interval())
        modify.unittest(os.path.join(
            sour_path, "unittest.cc"), qfile.id(), qfile.interval())

    if os.path.exists(qfile.src()):
        print("[!] file exist: {}".format(qfile.src()))
        return False
    else:
        template.generate_source(qfile.src(), qfile.id(),
                                 desc, ques.code_snippet())
        subprocess.run(["open", qfile.src()])

    if os.path.exists(qfile.unittest()):
        print("[!] file exist: {}".format(qfile.unittest()))
        return False
    else:
        template.generate_unittest(qfile.unittest(), qfile.id(), desc)
        subprocess.run(["open", qfile.unittest()])

    modify.log(log_csv, qfile.id())
    modify.question_list(list_csv, [qfile.id()])
    modify.subunittest(utindex, os.path.basename(qfile.unittest()))
    return True


def __parser():
    parser = optparse.OptionParser(usage="%prog [options] id1 id2 ...")
    parser.add_option("-o", "--out",
                      dest="output",
                      action="store",
                      default=".",
                      metavar=" Source_Path",
                      help="The directory where files are generated")
    parser.add_option("-r", "--readme",
                      dest="readme",
                      action="store",
                      default="./README.md",
                      metavar=" Readme_File")
    parser.add_option("-q", "--question-list",
                      dest="list",
                      action="store",
                      default="./questions_list.csv",
                      metavar=" Question_Lists_File")
    parser.add_option("-l", "--question-log",
                      dest="log",
                      action="store",
                      default="./logs.csv",
                      metavar=" Question_Logs_File")
    return parser


def __main():
    global readme_path, sour_path, list_csv, log_csv
    parser = __parser()
    options, args = parser.parse_args()

    readme_path = pathlib.Path(options.readme).resolve()
    sour_path = pathlib.Path(options.output).resolve()
    list_csv = pathlib.Path(options.list).resolve()
    log_csv = pathlib.Path(options.log).resolve()

    if not os.path.exists(list_csv):
        question_list = LeetCodeRequest.questions()
        template.generate_question_list(list_csv, question_list)
        solved = local.solved_question_ids(sour_path)
        modify.question_list(list_csv, solved)

    modified_md = False

    for id in args:
        qfile = QuestionFile(int(id))
        slug = LeetCodeRequest.question_slug(qfile.id())
        if not slug:
            print("[-] question #{} does not exist.".format(qfile.id()))
            continue
        ques = LeetCodeQuestion(slug)

        if not ques.description():
            print("[-] question #{} needs a premium account.".format(qfile.id()))
            continue

        if __add_question(qfile, ques):
            modified_md |= True
        else:
            print("[x] Failed to generate Question #{}".format(qfile.id()))

    if modified_md:
        modify.readme(readme_path, list_csv, log_csv)


if __name__ == "__main__":
    __main()
