#!/usr/bin/python3
import os
import optparse
import pathlib
import subprocess
from utils import local, template, modify, generate
from leetcode import request as LeetCodeRequest
from leetcode.question import LeetCodeQuestion

prompt = "This file is generated by {}".format(os.path.basename(__file__))
readme_path = ""
sour_path = ""
list_csv = ""
log_csv = ""

def __add_question(qfile: local.QuestionSource, ques: LeetCodeQuestion):
    desc = template.question_description(prompt,
                                         ques.id(),
                                         ques.title(),
                                         ques.description(50),
                                         ques.constraints())

    if os.path.exists(qfile.src(sour_path)):
        print("[!] file exist: {}".format(qfile.src(sour_path)))
        return False
    else:
        generate.file(qfile.src(sour_path),
                      template.source(qfile.id(),
                                      desc,
                                      ques.code_snippet()))
        subprocess.run(["open", qfile.src(sour_path)])

    if os.path.exists(qfile.unittest(sour_path)):
        print("[!] file exist: {}".format(qfile.unittest(sour_path)))
        return False
    else:
        generate.file(qfile.unittest(sour_path),
                      template.unittest(qfile.id(),
                                        desc))
        subprocess.run(["open", qfile.unittest(sour_path)])

    modify.log(log_csv, qfile.id())
    return True


def __parser():
    parser = optparse.OptionParser(usage="%prog [options] id1 id2 ...")
    parser.add_option("-o", "--out",
                      dest="output",
                      action="store",
                      default=".",
                      metavar=" Source_Path",
                      help="The directory where files are generated")
    parser.add_option("-r", "--readme",
                      dest="readme",
                      action="store",
                      default="./README.md",
                      metavar=" Readme_File")
    parser.add_option("-q", "--question-list",
                      dest="list",
                      action="store",
                      default="./questions_list.csv",
                      metavar=" Question_Lists_File")
    parser.add_option("-l", "--question-log",
                      dest="log",
                      action="store",
                      default="./logs.csv",
                      metavar=" Question_Logs_File")
    return parser


def __main():
    global readme_path, sour_path, list_csv, log_csv
    parser = __parser()
    options, args = parser.parse_args()

    if len(args) == 0:
        print("[options] id1 id2 ...")
        return

    readme_path = pathlib.Path(options.readme).resolve()
    sour_path = pathlib.Path(options.output).resolve()
    list_csv = pathlib.Path(options.list).resolve()
    log_csv = pathlib.Path(options.log).resolve()

    if not os.path.exists(list_csv):
        question_list = LeetCodeRequest.questions()
        generate.question_list(list_csv, question_list)

    modify_subunittest: set = set()
    modify_mainunittest = False
    modify_md = False

    for id in args:
        qfile = local.QuestionSource(int(id))
        slug = LeetCodeRequest.question_slug(qfile.id())
        if not slug:
            print("[-] question #{} does not exist.".format(qfile.id()))
            continue
        ques = LeetCodeQuestion(slug)

        if not ques.description():
            print("[-] question #{} needs a premium account.".format(qfile.id()))
            continue

        if not os.path.isdir(qfile.path(sour_path)):
            os.makedirs(qfile.path(sour_path))
            print("[+] create a directory: {}".format(qfile.path(sour_path)))
            modify_mainunittest = True

        if __add_question(qfile, ques):
            modify_md |= True
            modify_subunittest.add(qfile.interval())
        else:
            print("[x] Failed to generate Question #{}".format(qfile.id()))

    for subunittest in modify_subunittest:
        subsrc = os.path.join(sour_path, subunittest)
        ids = local.solved_question_ids(subsrc)
        generate.file(os.path.join(sour_path, subunittest, "unittest.hpp"),
                      template.subunittest(subunittest,
                                           ["q{}_unittest.hpp".format(str(id).zfill(4)) for id in ids]))

    if modify_mainunittest:
        folders = local.question_folders(sour_path)
        generate.file(os.path.join(sour_path, "unittest.cc"),
                      template.mainunittest([
                          "{}/unittest.hpp".format(path) for path in folders
                      ]))

    if modify_md:
        solved = local.solved_question_ids(sour_path)
        modify.done_question(list_csv, solved)
        modify.readme(readme_path, list_csv, log_csv)


if __name__ == "__main__":
    __main()
