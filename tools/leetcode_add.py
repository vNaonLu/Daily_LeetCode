#!/usr/bin/python3
import os
import optparse
import pathlib
import subprocess
import time
from utils import local, template, modify, generate
from leetcode import request as LeetCodeRequest
from leetcode.question import LeetCodeQuestion


def __add_question(qfile: local.QuestionSource, ques: LeetCodeQuestion):
    src, uts = ques.template("This file is generated by {}".format(os.path.basename(__file__)),
                             70)

    if os.path.exists(qfile.src()):
        print("[!] file exist: {}".format(qfile.src()))
        return False
    else:
        generate.file(qfile.src(), src)
        subprocess.run(["open", qfile.src()])

    if os.path.exists(qfile.unittest()):
        print("[!] file exist: {}".format(qfile.unittest()))
        return False
    else:
        generate.file(qfile.unittest(), uts)
        subprocess.run(["open", qfile.unittest()])

    return True


def __parser():
    parser = optparse.OptionParser(usage="%prog [options] id1 id2 ...")
    parser.add_option("-o", "--out",
                      dest="output",
                      action="store",
                      default=".",
                      metavar=" Source_Path",
                      help="The directory where files are generated")
    parser.add_option("-q", "--question-list",
                      dest="list",
                      action="store",
                      default="./questions_list.csv",
                      metavar=" Question_Lists_File")
    parser.add_option("-l", "--question-log",
                      dest="log",
                      action="store",
                      default="./logs.csv",
                      metavar=" Question_Logs_File")
    parser.add_option("--timestamp",
                      dest="timestamp",
                      action="store",
                      default=int(time.time()),
                      metavar=" Question_Logs_File")
    return parser


def __main():
    parser = __parser()
    options, args = parser.parse_args()

    if len(args) == 0:
        print("Usage: {} [options] id1 id2 ...".format(
            os.path.basename(__file__)))
        return

    sour_path = pathlib.Path(options.output).resolve()
    list_csv = pathlib.Path(options.list).resolve()
    log_csv = pathlib.Path(options.log).resolve()
    timestamp = int(options.timestamp)

    modify_subunittest: set = set()
    modify_mainunittest = False
    question_added = False

    for id in args:
        qfile = local.QuestionSource(int(id), sour_path)
        slug = LeetCodeRequest.question_slug(qfile.id())
        if not slug:
            print("[-] question #{} does not exist.".format(qfile.id()))
            continue
        ques = LeetCodeQuestion(slug)

        if not ques.description():
            print("[-] question #{} needs a premium account.".format(qfile.id()))
            continue

        if not os.path.isdir(qfile.path()):
            os.makedirs(qfile.path())
            print("[+] create a directory: {}".format(qfile.path()))
            modify_mainunittest = True

        if __add_question(qfile, ques):
            modify.log(log_csv, qfile.id(), timestamp)
            modify_subunittest.add(qfile.interval())
            question_added = True
        else:
            print("[x] failed to generate question #{}".format(qfile.id()))

    for subunittest in modify_subunittest:
        subsrc = os.path.join(sour_path, subunittest)
        ids = local.solved_question_ids(subsrc)
        generate.file(os.path.join(sour_path, subunittest, "unittest.hpp"),
                      template.subunittest(subunittest,
                                           ["q{}_unittest.hpp".format(str(id).zfill(4)) for id in ids]))

    if modify_mainunittest:
        folders = local.question_folders(sour_path)
        generate.file(os.path.join(sour_path, "unittest.cc"),
                      template.mainunittest([
                          "{}/unittest.hpp".format(path) for path in folders
                      ]))

    if question_added:
        if not os.path.exists(list_csv):
            question_list = LeetCodeRequest.questions()
            generate.question_list(list_csv, question_list)
        solved = local.solved_question_ids(sour_path)
        modify.done_question(list_csv, solved)


if __name__ == "__main__":
    __main()
