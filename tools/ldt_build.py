#!/usr/bin/env python3
import sys
from argparse import RawTextHelpFormatter
# prevent generating __pycache__
sys.dont_write_bytecode = True

from utils import *
import cli


@cli.command(
    cli.arg("-C", dest="build_path", default=str(BUILD_ABSOLUTE), action="store",
            metavar="[Build_Path]", help="specify the directory to build. Default: './build'."),
    cli.arg("--args", dest="build_args", default="-j8", action="store",
            metavar="[Build_Args]", type=str, help="specify arguments to build project. Default: '-j8'"),
    cli.arg("-v", "--verbose", dest="verbose", default=False, action="store_true",
            help="enable verbose logging."),
    formatter_class=RawTextHelpFormatter,
    name="build", prog=BUILD_SCRIPT_NAME,
    help=fixedWidth(
        "build the project.",
        width=60
    ),
    description=fixedWidth(
        f'A script to build the project build files which are generated by |{GEN_SCRIPT_NAME}|.'
    )
)
def ldtBuild(args):
    LOG = prompt.Log.getInstance(verbose=getattr(args, "verbose"))
    ARG_BUILD_PATH = Path(getattr(args, "build_path")).resolve()
    ARG_BUILD_ARGS = str(getattr(args, "build_args"))

    LOG.verbose("check whether the directory exists: {}", ARG_BUILD_PATH)

    if not ARG_BUILD_PATH.exists():
        LOG.failure("the directory not found: {}", ARG_BUILD_PATH)
        return 1

    exec = FindExecutable("cmake")
    if not exec:
        LOG.failure("cmake not found.")
        exec = FindExecutable("make")

    if not exec:
        LOG.failure("make not found.")
        LOG.failure("no sutable build tool found.")
        return 1

    CMD = [exec, "--build", ARG_BUILD_PATH]
    build_args = ARG_BUILD_ARGS.split()

    if len(build_args) > 0:
        CMD += build_args

    TASK = LOG.createTaskLog("Build Project")

    def stdoutCallback(out: str):
        percent, msg = parseBuildLog(out)
        TASK.log(msg, percent=percent)
        LOG.verbose(out)

    with launchSubprocess(CMD) as proc:
        TASK.begin()
        asyncStdout(proc, stdoutCallback)

        if proc.poll() != 0:
            TASK.done("failed to build in {}.", ARG_BUILD_PATH, is_success=False)
            LOG.print(proc.stderr.read(), flag=LOG.VERBOSE)
            return 1

        TASK.done("successfully built in {}.", ARG_BUILD_PATH, is_success=True)

    return 0



if __name__ == "__main__":
    sys.exit(safeRun(ldtBuild))