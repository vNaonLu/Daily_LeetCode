#!/usr/bin/env python3
import sys
from argparse import RawTextHelpFormatter
# prevent generating __pycache__
sys.dont_write_bytecode = True

from utils import *
import cli


@cli.command(
    cli.arg("-v", "--verbose", dest="verbose", default=False, action="store_true",
            help="enable verbose logging."),
    cli.arg("-C", dest="build_path", default=str(BUILD_ABSOLUTE), action="store",
            metavar="[Build_Path]", help="specify the directory to build. Default: './build'."),
    cli.arg("--args", dest="build_args", default="-j", action="store",
            metavar="[Build_Args]", type=str, help="specify arguments to build project. Default: '-j'"),
    formatter_class=RawTextHelpFormatter,
    name="build", prog=BUILD_SCRIPT_NAME,
    help=fixedWidth(
        "build the project.",
        width=60
    ),
    description=fixedWidth(
        f'A script to build the project build files which are generated by |{GEN_SCRIPT_NAME}|.'
    )
)
def ldtBuild(args):
    LOG = prompt.Log.getInstance(verbose=getattr(args, "verbose"))
    BUILD_PATH = Path(getattr(args, "build_path"))
    BUILD_ARGS = str(getattr(args, "build_args"))

    LOG.verbose("check whether the directory exists: {}", BUILD_PATH)

    if not BUILD_PATH.exists():
        LOG.failure("the directory not found: {}", BUILD_PATH)
        return 1

    exec = FindExecutable("cmake")
    if not exec:
        LOG.failure("cmake not found.")
        exec = FindExecutable("make")

    if not exec:
        LOG.failure("make not found.")
        LOG.failure("no sutable build tool found.")
        return 1

    with chDir(BUILD_PATH):
        CMD = [exec, "--build", "."]
        build_args = BUILD_ARGS.split()

        if len(build_args) > 0:
            CMD += build_args

        LOG.verbose("run a command: {}", CMD)

        task = LOG.createTaskLog("Build")
        task.begin()
        res = subprocess.run(CMD, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

        if res.returncode != 0:
            task.end("failed to build in {}.", BUILD_PATH, is_success=False)
            LOG.print(res.stderr.decode('utf-8'), flag=LOG.VERBOSE)
            return 1

        task.end("successfully built in {}.",
                BUILD_PATH, is_success=True)



if __name__ == "__main__":
    sys.exit(ldtBuild())