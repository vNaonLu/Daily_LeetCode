#include <gtest/gtest.h>
#include <unordered_map>
#include <iostream>
#include <string>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 2347.
 *       Best Poker Hand
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an integer array ‘ranks’ and a character array ‘suits’ .
 *   You have ‘5’ cards where the ‘iᵗʰ’ card has a rank of ‘ranks[i]’ and a
 *   suit of ‘suits[i]’
 *   The following are the types of “poker hands” you can make from best to
 *       1.  ‘'Flush'’ : Five cards of the same
 *       2.  ‘'Three of a Kind'’ : Three cards of the same
 *       3.  ‘'Pair'’ : Two cards of the same
 *       4.  ‘'High Card'’ : Any single
 *   Return “a string representing the “best” type of “poker hand” you can
 *   make with the given cards.”
 *    “Note” that the return values are “case-sensitive” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘ranks.length = suits.length = 5’
 *   • ‘1 ≤ ranks[i] ≤ 13’
 *   • ‘'a' ≤ suits[i] ≤ 'd'’
 *   • No two cards have the same rank and suit.
 *
 */

struct q2347 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    string bestHand(vector<int>& ranks, vector<char>& suits) {
      // Check flush
      auto suit_beg = suits.begin();
      while (suit_beg != suits.end()) {
        if (suit_beg + 1 == suits.end()) {
          return "Flush";
        }
        if (*(suit_beg + 1) != *suit_beg) {
          break;
        }
        ++suit_beg;
      }
      // Check Three of a Kind and Pair
      string res = "High Card";
      unordered_map<int ,int> freq;
      for (auto x : ranks) {
        ++freq[x];
        if (freq[x] >= 3) {
          return "Three of a Kind";
        } else if (freq[x] == 2) {
          res = "Pair";
        }
      }
      
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q2347, sample_input01) {
  solution = new Solution();
  vector<int> ranks = {13, 2, 3, 1, 9};
  vector<char> suits = {'a', 'a', 'a', 'a', 'a'};
  string exp = "Flush";
  string act = solution->bestHand(ranks, suits);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2347, sample_input02) {
  solution = new Solution();
  vector<int> ranks = {4, 4, 2, 4, 4};
  vector<char> suits = {'d', 'a', 'a', 'b', 'c'};
  string exp = "Three of a Kind";
  string act = solution->bestHand(ranks, suits);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2347, sample_input03) {
  solution = new Solution();
  vector<int> ranks = {10, 10, 2, 12, 9};
  vector<char> suits = {'a', 'b', 'c', 'a', 'd'};
  string exp = "Pair";
  string act = solution->bestHand(ranks, suits);
  EXPECT_EQ(act, exp);
  delete solution;
}
