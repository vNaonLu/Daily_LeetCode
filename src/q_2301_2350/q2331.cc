#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/treenode.hpp>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 2331.
 *       Evaluate Boolean Binary Tree
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given the ‘root’ of a “full binary tree” with the following
 *       -  “Leaf nodes” have either the value ‘0’ or ‘1’ , where ‘0’
 *   represents ‘False’ and ‘1’ represents ‘True’
 *       -  “Non-leaf nodes” have either the value ‘2’ or ‘3’ , where ‘2’
 *   represents the boolean ‘OR’ and ‘3’ represents the boolean ‘AND’
 *   The “evaluation” of a node is as
 *       - If the node is a leaf node, the evaluation is the “value” of the
 *   node, i.e. ‘True’ or ‘False’
 *       - Otherwise, “evaluate” the node's two children and “apply” the
 *   boolean operation of its value with the children's
 *   Return “ the boolean result of “evaluating” the ” ‘root’ “ node.”
 *   A “full binary tree” is a binary tree where each node has either ‘0’
 *   or ‘2’
 *   A “leaf node” is a node that has zero children.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The number of nodes in the tree is in the range ‘[1, 1000]’ .
 *   • ‘0 ≤ Node.val ≤ 3’
 *   • Every node has either ‘0’ or ‘2’ children.
 *   • Leaf nodes have a value of ‘0’ or ‘1’ .
 *   • Non-leaf nodes have a value of ‘2’ or ‘3’ .
 *
 */

struct q2331 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    bool evaluateTree(TreeNode *root) {
      if (nullptr == root) {
        return false;
      }

      switch (root->val) {
      case 0:
        return false;
      case 1:
        return true;
      case 2:
        return evaluateTree(root->left) || evaluateTree(root->right);
      case 3:
        return evaluateTree(root->left) && evaluateTree(root->right);
      default:
        return false;
      }
    }
  };

  class Solution *solution;
};

TEST_F(q2331, sample_input01) {
  solution = new Solution();
  TreeNode *root =
      TreeNode::generate({2, 1, 3, NULL_TREENODE, NULL_TREENODE, 0, 1});
  bool exp = true;
  bool act = solution->evaluateTree(root);
  EXPECT_EQ(act, exp);
  TreeNode::release(root);
  delete solution;
}

TEST_F(q2331, sample_input02) {
  solution       = new Solution();
  TreeNode *root = TreeNode::generate({0});
  bool      exp  = false;
  bool      act  = solution->evaluateTree(root);
  EXPECT_EQ(act, exp);
  TreeNode::release(root);
  delete solution;
}