#include <cmath>
#include <gtest/gtest.h>
#include <iostream>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 2311.
 *       Longest Binary Subsequence Less Than or Equal to K
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given a binary string ‘s’ and a positive integer ‘k’
 *   Return “the length of the “longest” subsequence of ” ‘s’ “ that makes
 *   up a “binary” number less than or equal to” ‘k’
 *       - The subsequence can contain “leading zeroes”
 *       - The empty string is considered to be equal to ‘0’
 *       - A “subsequence” is a string that can be derived from another
 *   string by deleting some or no characters without changing the order of
 *   the remaining characters.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s.length ≤ 1000’
 *   • ‘s[i]’ is either ‘'0'’ or ‘'1'’ .
 *   • ‘1 ≤ k ≤ 10⁹’
 *
 */

struct q2311 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int longestSubsequence(string s, int k) {
      auto res = 0;
      auto curr = 0;
      auto digit = 0;
      auto it = s.rbegin();

      while (it != s.rend()) {
        if (*it++ == '0') {
          ++res;
        } else {
          if (curr + pow(2, digit) <= k) {
            curr += pow(2, digit);
            ++res;
          }
        }
        ++digit;
      }

      return res;
    }
  };
  class Solution *solution;
};

TEST_F(q2311, sample_input01) {
  solution = new Solution();
  string s = "1001010";
  int k = 5;
  int exp = 5;
  int act = solution->longestSubsequence(s, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2311, sample_input02) {
  solution = new Solution();
  string s = "00101001";
  int k = 1;
  int exp = 6;
  int act = solution->longestSubsequence(s, k);
  EXPECT_EQ(act, exp);
  delete solution;
}