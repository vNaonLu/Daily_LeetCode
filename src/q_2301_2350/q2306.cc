#include <gtest/gtest.h>
#include <iostream>
#include <string>
#include <unordered_set>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 2306.
 *       Naming a Company
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an array of strings ‘ideas’ that represents a list of
 *   names to be used in the process of naming a company. The process of
 *   naming a company is as
 *       1. Choose 2 “distinct” names from ‘ideas’ , call them ‘idea⎽(A)’
 *   and ‘idea⎽(B)’
 *       2. Swap the first letters of ‘idea⎽(A)’ and ‘idea⎽(B)’ with each
 *       3. If “both” of the new names are not found in the original
 *   ‘ideas’ , then the name ‘idea⎽(A) idea⎽(B)’ (the “concatenation” of
 *   ‘idea⎽(A)’ and ‘idea⎽(B)’ , separated by a space) is a valid company
 *       4. Otherwise, it is not a valid
 *   Return “the number of “distinct” valid names for the company” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘2 ≤ ideas.length ≤ 5 × 10⁴’
 *   • ‘1 ≤ ideas[i].length ≤ 10’
 *   • ‘ideas[i]’ consists of lowercase English letters.
 *   • All the strings in ‘ideas’ are “unique” .
 *
 */

struct q2306 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    long long distinctNames(vector<string> &ideas) {
      int64_t                       res = 0;
      vector<unordered_set<string>> arr(26);
      for (auto &s : ideas) {
        arr[s[0] - 'a'].emplace(s.substr(1));
      }
      for (int i = 0; i < 25; ++i) {
        for (int j = i + 1; j < 26; ++j) {
          unordered_set<string> tmp;
          tmp.insert(arr[i].begin(), arr[i].end());
          tmp.insert(arr[j].begin(), arr[j].end());
          res += (arr[i].size() - tmp.size()) * (arr[j].size() - tmp.size());
        }
      }
      return res * 2;
    }
  };

  class Solution *solution;
};

TEST_F(q2306, sample_input01) {
  solution             = new Solution();
  vector<string> ideas = {"coffee", "donuts", "time", "toffee"};
  long           exp   = 6;
  long           act   = solution->distinctNames(ideas);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2306, sample_input02) {
  solution             = new Solution();
  vector<string> ideas = {"lack", "back"};
  long           exp   = 0;
  long           act   = solution->distinctNames(ideas);
  EXPECT_EQ(act, exp);
  delete solution;
}
