#include <gtest/gtest.h>
#include <iostream>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 2325.
 *       Decode the Message
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given the strings ‘key’ and ‘message’ , which represent a
 *   cipher key and a secret message, respectively. The steps to decode
 *   ‘message’ are as
 *       1. Use the “first” appearance of all 26 lowercase English letters
 *   in ‘key’ as the “order” of the substitution
 *       2. Align the substitution table with the regular English
 *       3. Each letter in ‘message’ is then “substituted” using the
 *       4. Spaces ‘' '’ are transformed to
 *       - For example, given ‘key = '<u> “hap” </u>p<u> “y” </u> <u> “bo”
 *   </u>y'’ (actual key would have “at least one” instance of each letter
 *   in the alphabet), we have the partial substitution table of ( ‘'h' ->
 *   'a'’ , ‘'a' -> 'b'’ , ‘'p' -> 'c'’ , ‘'y' -> 'd'’ , ‘'b' -> 'e'’ ,
 *   ‘'o' -> 'f'’
 *   Return “the decoded message” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘26 ≤ key.length ≤ 2000’
 *   • ‘key’ consists of lowercase English letters and ‘' '’ .
 *   • ‘key’ contains every letter in the English alphabet ( ‘'a'’ to ‘'z'’ )
 * “at least once” . • ‘1 ≤ message.length ≤ 2000’ • ‘message’ consists of
 * lowercase English letters and ‘' '’ .
 *
 */

struct q2325 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    string decodeMessage(string key, string message) {
      char         curr_char = 'a';
      vector<char> mp(26, 0);
      for (auto c : key) {
        if (c == ' ') {
          continue;
        }
        if (mp[c - 'a'] == 0) {
          mp[c - 'a'] = curr_char++;
        }
      }
      for (auto &c : message) {
        if (c == ' ') {
          continue;
        }
        c = mp[c - 'a'];
      }
      return message;
    }
  };

  class Solution *solution;
};

TEST_F(q2325, sample_input01) {
  solution       = new Solution();
  string key     = "the quick brown fox jumps over the lazy dog";
  string message = "vkbs bs t suepuv";
  string exp     = "this is a secret";
  string act     = solution->decodeMessage(key, message);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2325, sample_input02) {
  solution       = new Solution();
  string key     = "eljuxhpwnyrdgtqkviszcfmabo";
  string message = "zwx hnfx lqantp mnoeius ycgk vcnjrdb";
  string exp     = "the five boxing wizards jump quickly";
  string act     = solution->decodeMessage(key, message);
  EXPECT_EQ(act, exp);
  delete solution;
}
