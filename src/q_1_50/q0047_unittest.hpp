
#ifndef Q47_UNITTEST_H__
#define Q47_UNITTEST_H__
#include <gtest/gtest.h>

#include <leetcode/anyorder.hpp>

#include "q0047.hpp"
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 47.
  *     Permutations II
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given a collection of numbers, ‘nums’ ,that might contain duplicates,
  *   return “all possible unique permutations “in any order” .”.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘1 ≤ nums.length ≤ 8’
  *   • ‘-10 ≤ nums[i] ≤ 10’
  *
*/

TEST(q47, sample_input01) {
  l47::Solution solver;
  vector<int> nums = {1, 1, 2};
  vector<vector<int>> exp = {{2, 1, 1}, {1, 2, 1}, {1, 1, 2}};
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solver.permuteUnique(nums), exp);
}

TEST(q47, sample_input02) {
  l47::Solution solver;
  vector<int> nums = {1, 2, 3};
  vector<vector<int>> exp = {{3, 2, 1}, {3, 1, 2}, {2, 3, 1}, {2, 1, 3}, {1, 3, 2}, {1, 2, 3}};
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solver.permuteUnique(nums), exp);
}

#endif