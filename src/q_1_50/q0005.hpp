
#ifndef LEETCODE_Q5_H__
#define LEETCODE_Q5_H__
#include <iostream>
#include <string>

namespace l5 {
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * #5
  *    Longest Palindromic Substring
  *
  *============================= Description =============================
  *
  *   Given a string ‘s‘ , return the longest palindromic substring in ‘s‘.
  *
  * ============================= Constraints =============================
  *
  *   • ‘1 <= s.length <= 1000‘
  *   • ‘s‘ consist of only digits and English letters.
  *
*/

class Solution {
 private:
  int helper(const string &s, int l, int r) {
    while (l >= 0 && r < s.size() && s[l] == s[r]) {
      ++r;
      --l;
    }
    return r - l - 1;
  }

 public:
  string longestPalindrome(string s) {
    if (s.empty()) return "";
    int l = 0, maxl = 1;
    for (int i = 0; i < s.size(); ++i) {
      int len = max(helper(s, i, i), helper(s, i, i + 1));
      if (len > maxl) {
        maxl = len;
        l = i - (len - 1) / 2;
      }
    }
    return s.substr(l, maxl);
  }
};
}  // namespace l5

#endif