
#ifndef Q20_UNITTEST_H__
#define Q20_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0020.hpp"
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 20. Valid Parentheses
  *
  * Given a string s containing just the characters
  * ';('; , ';)'; , ';{'; , ';}'; , ';['; and ';]'; ,
  * determine if the input string is valid.
  * An input string is valid if:
  * - Open brackets must be closed by the same type
  * of brackets.
  * - Open brackets must be closed in the correct
  * order.
  *
  * Constraints:
  * -  1 <= s.length <= 10^(4) 
  * -  s consists of parentheses only ';()[]{}'; .
  *
*/

TEST(q20, sample_input01) {
  string s = "()";
  bool exp = true;
  l20::Solution solver;
  EXPECT_EQ(solver.isValid(s), exp);
}

TEST(q20, sample_input02) {
  string s = "()[]{}";
  bool exp = true;
  l20::Solution solver;
  EXPECT_EQ(solver.isValid(s), exp);
}

TEST(q20, sample_input03) {
  string s = "(]";
  bool exp = false;
  l20::Solution solver;
  EXPECT_EQ(solver.isValid(s), exp);
}

TEST(q20, sample_input04) {
  string s = "([)]";
  bool exp = false;
  l20::Solution solver;
  EXPECT_EQ(solver.isValid(s), exp);
}

TEST(q20, sample_input05) {
  string s = "{[]}";
  bool exp = true;
  l20::Solution solver;
  EXPECT_EQ(solver.isValid(s), exp);
}

#endif