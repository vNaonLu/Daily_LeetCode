
#ifndef Q36_UNITTEST_H__
#define Q36_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0036.hpp"
using namespace std;

/**
  * this file is generated by gquestion.py

  *
  * 36. Valid Sudoku
  *
  * Determine if a 9 x 9 Sudoku boardis valid.Only
  * the filled cells need to be validated “according to
  * the following rules“ :
  * - Each rowmust contain thedigits 1-9 without
  * repetition.
  * - Each column must contain the digits 1-9 without
  * repetition.
  * - Each of the nine 3 x 3 sub-boxes of the grid
  * must contain the digits 1-9 without repetition.
  * “Note:“ 
  * - A Sudoku board (partially filled) could be
  * valid but is not necessarily solvable.
  * - Only the filled cells need to be validated
  * according to the mentionedrules.
  *
  * Constraints:
  * -  board.length == 9 
  * -  board[i].length == 9 
  * -  board[i][j] is a digit 1-9 or ';.'; .
  *
*/

TEST(q36, sample_input01) {
  vector<vector<char>> board = {{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
                                {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                                {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                                {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                                {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                                {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                                {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
                                {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                                {'.', '.', '.', '.', '8', '.', '.', '7', '9'}};
  bool exp = true;
  l36::Solution solver;
  EXPECT_EQ(solver.isValidSudoku(board), exp);
}

TEST(q36, sample_input02) {
  vector<vector<char>> board = {{'8', '3', '.', '.', '7', '.', '.', '.', '.'},
                                {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                                {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                                {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                                {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                                {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                                {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
                                {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                                {'.', '.', '.', '.', '8', '.', '.', '7', '9'}};
  bool exp = false;
  l36::Solution solver;
  EXPECT_EQ(solver.isValidSudoku(board), exp);
}

#endif