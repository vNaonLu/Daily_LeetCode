
#ifndef LEETCODE_Q46_H__
#define LEETCODE_Q46_H__
#include <iostream>
#include <vector>

namespace l46 {
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 46. Permutations
  *
  * Given an array nums of distinct integers, return
  * all the possible permutations . You can return the
  * answer in “any order“ .
  *
  * Constraints:
  * -  1 <= nums.length <= 6 
  * -  -10 <= nums[i] <= 10 
  * - All the integers of nums are “unique“ .
  *
*/
class Solution {
 private:
  void helper(vector<vector<int>> &r, vector<int> &cur, int size) {
    if (size == 1) {
      r.push_back(cur);
    } else {
      for (int i = 0; i < size; ++i) {
        helper(r, cur, size - 1);
        if (size % 2) {
          swap(cur[0], cur[size - 1]);
        } else {
          swap(cur[i], cur[size - 1]);
        }
      }
    }
  }

 public:
  vector<vector<int>> permute(vector<int> &nums) {
    vector<vector<int>> res;
    helper(res, nums, nums.size());
    return res;
  }
};
}  // namespace l46
#endif