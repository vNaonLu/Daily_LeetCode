#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/listnode.hpp>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 24.
 *     Swap Nodes in Pairs
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given alinked list, swap every two adjacent nodes and return its head.
 *   You must solve the problem withoutmodifying the values in the list's
 *   nodes (i.e., only nodes themselves may be changed.)
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The number of nodes in thelistis in the range ‘[0, 100]’ .
 *   • ‘0 ≤ Node.val ≤ 100’
 *
 */

struct q24 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    ListNode* swapPairs(ListNode* head) {
      ListNode dummy(0, head);
      ListNode* p = &dummy;
      while (p != nullptr && p->next != nullptr && p->next->next != nullptr) {
        ListNode *q = p->next->next, *next = p->next;
        next->next = q->next;
        p->next = q;
        q->next = next;
        p = next;
      }
      return dummy.next;
    }
  };

  class Solution *solution;
};

TEST_F(q24, sample_input01) {
  solution = new Solution();
  ListNode* head = ListNode::generate({1, 2, 3, 4});
  ListNode* exp = ListNode::generate({2, 1, 4, 3});
  EXPECT_LISTNODE_EQ(solution->swapPairs(head), exp);
  delete solution;
}

TEST_F(q24, sample_input02) {
  solution = new Solution();
  ListNode* head = ListNode::generate({});
  ListNode* exp = ListNode::generate({});
  EXPECT_LISTNODE_EQ(solution->swapPairs(head), exp);
  delete solution;
}

TEST_F(q24, sample_input03) {
  solution = new Solution();
  ListNode* head = ListNode::generate({1});
  ListNode* exp = ListNode::generate({1});
  EXPECT_LISTNODE_EQ(solution->swapPairs(head), exp);
  delete solution;
}