#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 34.
 *     Find First and Last Position of Element in Sorted Array
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an array of integers ‘nums’ sorted in non-decreasing order, find
 *   the starting and ending position of a given ‘target’
 *   If ‘target’ is not found in the array, return ‘[-1, -1]’
 *   You mustwrite an algorithm with ‘O(log n)’ runtime complexity.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘0 ≤ nums.length ≤ 10⁵’
 *   • ‘-10⁹≤ nums[i]≤ 10⁹’
 *   • ‘nums’ is a non-decreasing array.
 *   • ‘-10⁹≤ target≤ 10⁹’
 *
 */

struct q34 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    vector<int> searchRange(vector<int>& nums, int target) {
      vector<int> res = {-1, -1};
      if (nums.empty()) return res;
      int l = 0, r = nums.size() - 1;
      int m;
      while (l <= r) {
        m = l + (r - l) / 2;
        if (nums[m] == target) {
          break;
        } else if (nums[m] > target) {
          r = m - 1;
        } else {
          l = m + 1;
        }
      }
      if (nums[m] == target) {
        res[0] = res[1] = m;
        while (res[0] > 0 && nums[res[0] - 1] == target) --res[0];
        while (res[1] < nums.size() - 1 && nums[res[1] + 1] == target) ++res[1];
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q34, sample_input01) {
  solution = new Solution();
  vector<int> nums = {5, 7, 7, 8, 8, 10};
  int target = 8;
  vector<int> exp = {3, 4};
  EXPECT_EQ(solution->searchRange(nums, target), exp);
  delete solution;
}

TEST_F(q34, sample_input02) {
  solution = new Solution();
  vector<int> nums = {5, 7, 7, 8, 8, 10};
  int target = 6;
  vector<int> exp = {-1, -1};
  EXPECT_EQ(solution->searchRange(nums, target), exp);
  delete solution;
}

TEST_F(q34, sample_input03) {
  solution = new Solution();
  vector<int> nums = {};
  int target = 0;
  vector<int> exp = {-1, -1};
  EXPECT_EQ(solution->searchRange(nums, target), exp);
  delete solution;
}