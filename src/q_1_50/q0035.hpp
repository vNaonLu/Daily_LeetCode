
#ifndef LEETCODE_Q35_H__
#define LEETCODE_Q35_H__
#include <iostream>
#include <vector>

namespace l35 {
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 35.
 *     Search Insert Position
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a sorted array of distinct integers and a target value, return
 *   the index if the target is found. If not, return the index where it
 *   would be if it were inserted in
 *   You mustwrite an algorithm with ‘O(log n)’ runtime complexity.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 10⁴’
 *   • ‘-10⁴ ≤ nums[i] ≤ 10⁴’
 *   • ‘nums’ contains “distinct” values sorted in “ascending” order.
 *   • ‘-10⁴ ≤ target ≤ 10⁴’
 *
 */

class Solution {
 public:
  int searchInsert(vector<int>& nums, int target) {
    int l = 0, r = nums.size() - 1;
    while (l <= r) {
      int mid = l + (r - l) / 2;
      if (nums[mid] == target)
        return mid;
      else if (nums[mid] > target)
        r = mid - 1;
      else
        l = mid + 1;
    }
    return l;
  }
};
}  // namespace l35

#endif