
#ifndef LEETCODE_Q4_H__
#define LEETCODE_Q4_H__
#include <iostream>
#include <vector>

namespace l4 {
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 4.
  *    Median of Two Sorted Arrays
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given two sorted arrays ‘nums1’ and ‘nums2’ of size ‘m’ and ‘n’
  *   respectively, return “the median” of the two sorted arrays.
  *   
  *   The overall run time complexity should be ‘O(log (m+n))’.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘nums1.length = m’
  *   • ‘nums2.length = n’
  *   • ‘0 ≤ m ≤ 1000’
  *   • ‘0 ≤ n ≤ 1000’
  *   • ‘1 ≤ m + n ≤ 2000’
  *   • ‘-10⁶ ≤ nums1[i], nums2[i] ≤ 10⁶’
  *
*/

class Solution {
 public:
  double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
    int m = nums1.size(), n = nums2.size();
    int mid = (m + n) / 2;
    auto i1 = nums1.begin(), i2 = nums2.begin();
    double last, second;
    while(mid >= 0){
      second = last;
      --mid;
      if(i1 == nums1.end()){
        last = *(i2++);
      }else if(i2 == nums2.end()){
        last = *(i1++);
      } else {
        if (*i1 > *i2) {
          last = *(i2++);
        } else {
          last = *(i1++);
        }
      }
    }
    return (m + n) % 2 ? last : ((last + second) * 0.5);
  }
};
}  // namespace l4

#endif