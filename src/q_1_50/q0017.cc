#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/anyorder.hpp>
#include <string>
#include <unordered_map>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 17.
 *     Letter Combinations of a Phone Number
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a string containing digits from ‘2-9’ inclusive, return all
 *   possible letter combinations that the number could represent. Return
 *   the answer in “any order”
 *   A mapping of digit to letters (just like on the telephone buttons) is
 *   given below. Note that 1 does not map to any
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘0 ≤ digits.length ≤ 4’
 *   • ‘digits[i]’ is a digit in the range ‘['2', '9']’ .
 *
 */

struct q17 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    unordered_map<char, string> phone = {
        {'2', "abc"},
        {'3', "def"},
        {'4', "ghi"},
        {'5', "jkl"},
        {'6', "mno"},
        {'7', "pqrs"},
        {'8', "tuv"},
        {'9', "wxyz"}};
    void helper(vector<string> &r, string &s, string &cur, int beg = 0) {
      if (s.empty()) return;
      if (beg == s.size()) {
        r.push_back(cur);
      } else {
        auto characters = phone[s[beg]];
        for (const auto &c : characters) {
          cur.push_back(c);
          helper(r, s, cur, beg + 1);
          cur.pop_back();
        }
      }
    }
   public:
    vector<string> letterCombinations(string digits) {
      vector<string> res;
      string tmp = "";
      helper(res, digits, tmp);
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q17, sample_input01) {
  solution = new Solution();
  string digits = "23";
  vector<string> exp = {"ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"};
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solution->letterCombinations(digits), exp);
  delete solution;
}

TEST_F(q17, sample_input02) {
  solution = new Solution();
  string digits = "";
  vector<string> exp = {};
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solution->letterCombinations(digits), exp);
  delete solution;
}

TEST_F(q17, sample_input03) {
  solution = new Solution();
  string digits = "2";
  vector<string> exp = {"a", "b", "c"};
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solution->letterCombinations(digits), exp);
  delete solution;
}