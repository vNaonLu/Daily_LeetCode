
#ifndef LEETCODE_Q47_H__
#define LEETCODE_Q47_H__
#include <iostream>
#include <unordered_map>
#include <vector>

namespace l47 {
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 47.
  *     Permutations II
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given a collection of numbers, ‘nums’ ,that might contain duplicates,
  *   return “all possible unique permutations “in any order” .”.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘1 ≤ nums.length ≤ 8’
  *   • ‘-10 ≤ nums[i] ≤ 10’
  *
*/

class Solution {
 private:
  void helper(vector<vector<int>> &r, vector<int> &c, unordered_map<int, int> &cnt, const int &size) {
    if (size == c.size()) {
      r.push_back(c);
    } else {
      for (auto it = cnt.begin(); it != cnt.end(); ++it) {
        if (it->second == 0) continue;
        --it->second;
        helper(r, c, cnt, size);
        c.push_back(it->first);
        helper(r, c, cnt, size);
        c.pop_back();
        ++it->second;
      }
    }
  }

 public:
  vector<vector<int>> permuteUnique(vector<int> &nums) {
    unordered_map<int, int> cnt;
    vector<vector<int>> res;
    vector<int> tmp;
    for (const auto &n : nums) ++cnt[n];
    helper(res, tmp, cnt, nums.size());
    return res;
  }
};
}  // namespace l47

#endif