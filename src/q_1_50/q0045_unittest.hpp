
#ifndef Q45_UNITTEST_H__
#define Q45_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0045.hpp"
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 45.
  *     Jump Game II
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given an array of non-negative integers ‘nums’ , you are initially
  *   positioned at the first index of the array.
  *   
  *   Each element in the array represents your maximum jump length at that
  *   position.
  *   
  *   Your goal is to reach the last index in the minimum number of jumps.
  *   
  *   You can assume that you can always reach the last index.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘1 ≤ nums.length ≤ 10⁴’
  *   • ‘0 ≤ nums[i] ≤ 1000’
  *
*/

TEST(q45, sample_input01) {
  l45::Solution solver;
  vector<int> nums = {2, 3, 1, 1, 4};
  int exp = 2;
  EXPECT_EQ(solver.jump(nums), exp);
}

TEST(q45, sample_input02) {
  l45::Solution solver;
  vector<int> nums = {2, 3, 0, 1, 4};
  int exp = 2;
  EXPECT_EQ(solver.jump(nums), exp);
}

#endif