
#ifndef LEETCODE_Q41_H__
#define LEETCODE_Q41_H__
#include <iostream>
#include <vector>

namespace l41 {
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 41.
 *     First Missing Positive
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an unsorted integer array ‘nums’ , return the smallest missing
 *   positive
 *   You must implement an algorithm that runs in ‘O(n)’ time and uses
 *   constant extra space.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 5 × 10⁵’
 *   • ‘-2³¹ ≤ nums[i] ≤ 2³¹ - 1’
 *
 */

class Solution {
 public:
  int firstMissingPositive(vector<int>& nums) {
    int n = nums.size();
    int beg = 0, R = n - 1;
    while (beg <= R) {
      if (nums[beg] <= 0) {
        ++beg;
      } else if (nums[R] > 0) {
        --R;
      } else {
        swap(nums[beg++], nums[R--]);
      }
    }
    for (int i = beg; i < n; ++i) {
      int val = abs(nums[i]);
      if (val > n - beg) continue;
      if (nums[beg + val - 1] > 0) {
        nums[beg + val - 1] *= -1;
      }
    }
    for (int i = beg; i < n; ++i) {
      if (nums[i] > 0) {
        return i - beg + 1;
      }
    }
    return n - beg + 1;
  }
};
}  // namespace l41

#endif