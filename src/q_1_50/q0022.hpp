
#ifndef LEETCODE_Q22_H__
#define LEETCODE_Q22_H__
#include <iostream>
#include <string>
#include <vector>

namespace l22 {
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 22.
  *     Generate Parentheses
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given ‘n’ pairs of parentheses, write a function to “generate all
  *   combinations of well-formed parentheses”.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘1 ≤ n ≤ 8’
  *
*/

class Solution {
 private:
  void helper(vector<string> &res, string &c, const int &n, int l = 0, int r = 0) {
    if (c.size() == n * 2) {
      res.push_back(c);
    } else {
      if (l < n) {
        c.push_back('(');
        helper(res, c, n, l + 1, r);
        c.pop_back();
      }

      if (r < l) {
        c.push_back(')');
        helper(res, c, n, l, r + 1);
        c.pop_back();
      }
    }
  }

 public:
  vector<string> generateParenthesis(int n) {
    vector<string> res;
    string tmp = "";
    helper(res, tmp, n);
    return res;
  }
};
}  // namespace l22

#endif