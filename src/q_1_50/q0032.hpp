
#ifndef LEETCODE_Q32_H__
#define LEETCODE_Q32_H__
#include <iostream>
#include <stack>
#include <string>

namespace l32 {
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 32.
 *     Longest Valid Parentheses
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a string containing just the characters ‘'('’ and ‘')'’ , find
 *   the length of the longest valid (well-formed) parentheses substring.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘0 ≤ s.length ≤ 3 × 10⁴’
 *   • ‘s[i]’ is ‘'('’ , or ‘')'’ .
 *
 */

class Solution {
 public:
  int longestValidParentheses(string s) {
    int res = 0;
    stack<int> stk;
    stk.emplace(-1);
    for (int i = 0; i < s.size(); ++i) {
      if (s[i] == '(') {
        stk.emplace(i);
      } else {
        stk.pop();
        if (stk.empty()) {
          stk.emplace(i);
        } else {
          res = max(res, i - stk.top());
        }
      }
    }
    return res;
  }
};
}  // namespace l32

#endif