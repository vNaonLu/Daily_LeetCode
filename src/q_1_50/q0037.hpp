
#ifndef LEETCODE_Q37_H__
#define LEETCODE_Q37_H__
#include <iostream>
#include <vector>

namespace l37 {
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 37.
  *     Sudoku Solver
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Write a program to solve a Sudoku puzzle by filling the empty cells.
  *   
  *   A sudoku solution must satisfy “all of the following rules”.
  *   
  *   - Each of the digits ‘1-9’ must occur exactly once in each row.
  *   
  *   - Each of the digits ‘1-9’ must occur exactly once in each column.
  *   
  *   - Each of the digits ‘1-9’ must occur exactly once in each of the 9
  *   ‘3x3’ sub-boxes of the grid.
  *   
  *   The ‘'.'’ character indicates empty cells.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘board.length = 9’
  *   • ‘board[i].length = 9’
  *   • ‘board[i][j]’ is a digit or ‘'.'’ .
  *   • It is “guaranteed” that the input board has only one solution.
  *
*/

class Solution {
 private:
  bool valid(vector<vector<char>> &b, int r, int c) {
    char keep = b[r][c];
    for (int i = 0; i < 9; ++i) {
      if (b[i][c] == keep && i != r) return false;
      if (b[r][i] == keep && i != c) return false;
    }
    int row_block = r / 3 * 3;
    int col_block = c / 3 * 3;
    for (int i = 0; i < 3; ++i) {
      for (int j = 0; j < 3; ++j) {
        if (row_block + i == r && col_block + j == c) continue;
        if (b[row_block + i][col_block + j] == keep) return false;
      }
    }
    return true;
  }
  bool helper(vector<vector<char>> &b, int r = 0, int c = 0) {
    if (c == 9)
      return helper(b, r + 1, 0);
    else if (r == 9)
      return true;
    if (b[r][c] != '.') return helper(b, r, c + 1);
    for (char i = '1'; i <= '9'; ++i) {
      b[r][c] = i;
      if (valid(b, r, c) && helper(b, r, c + 1))
        return true;
    }
    b[r][c] = '.';
    return false;
  }

 public:
  void solveSudoku(vector<vector<char>> &board) {
    helper(board);
  }
};
}  // namespace l37

#endif