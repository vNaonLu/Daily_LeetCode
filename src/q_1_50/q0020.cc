#include <gtest/gtest.h>
#include <iostream>
#include <stack>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 20.
 *     Valid Parentheses
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a string ‘s’ containing just the characters ‘'('’ , ‘')'’ ,
 *   ‘'{'’ , ‘'}'’ , ‘'['’ and ‘']'’ , determine if the input string is
 *   An input string is valid
 *       1. Open brackets must be closed by the same type of
 *       2. Open brackets must be closed in the correct order.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s.length ≤ 10⁴’
 *   • ‘s’ consists of parentheses only ‘'()[]{}'’ .
 *
 */

struct q20 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    bool isValid(string s) {
      stack<char> st;
      for (const auto &c : s) {
        if (c == ')') {
          if (st.empty() || st.top() != '(')
            return false;
          st.pop();
        } else if (c == ']') {
          if (st.empty() || st.top() != '[')
            return false;
          st.pop();
        } else if (c == '}') {
          if (st.empty() || st.top() != '{')
            return false;
          st.pop();
        } else
          st.push(c);
      }
      return st.empty();
    }
  };

  class Solution *solution;
};

TEST_F(q20, sample_input01) {
  solution = new Solution();
  string s = "()";
  bool exp = true;
  EXPECT_EQ(solution->isValid(s), exp);
  delete solution;
}

TEST_F(q20, sample_input02) {
  solution = new Solution();
  string s = "()[]{}";
  bool exp = true;
  EXPECT_EQ(solution->isValid(s), exp);
  delete solution;
}

TEST_F(q20, sample_input03) {
  solution = new Solution();
  string s = "(]";
  bool exp = false;
  EXPECT_EQ(solution->isValid(s), exp);
  delete solution;
}

TEST_F(q20, sample_input04) {
  solution = new Solution();
  string s = "([)]";
  bool exp = false;
  EXPECT_EQ(solution->isValid(s), exp);
  delete solution;
}

TEST_F(q20, sample_input05) {
  solution = new Solution();
  string s = "{[]}";
  bool exp = true;
  EXPECT_EQ(solution->isValid(s), exp);
  delete solution;
}