
#ifndef Q15_UNITTEST_H__
#define Q15_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0015.hpp"
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 15. 3Sum
  *
  * Given an integer array nums, return all the
  * triplets [nums[i], nums[j], nums[k]] such that i != j ,
  * i != k , and j != k , and nums[i] + nums[j] +
  * nums[k] == 0 .
  * Notice that the solution set must not contain
  * duplicate triplets.
  *
  * Constraints:
  * -  0 <= nums.length <= 3000 
  * -  -10^(5) <= nums[i] <= 10^(5) 
  *
*/

TEST(q15, sample_input01) {
  vector<int> nums = {-1, 0, 1, 2, -1, -4};
  vector<vector<int>> exp = {{-1, -1, 2}, {-1, 0, 1}};
  l15::Solution solver;
  EXPECT_EQ(solver.threeSum(nums), exp);
}

TEST(q15, sample_input02) {
  vector<int> nums = {};
  vector<vector<int>> exp;
  l15::Solution solver;
  EXPECT_EQ(solver.threeSum(nums), exp);
}

TEST(q15, sample_input03) {
  vector<int> nums = {0};
  vector<vector<int>> exp;
  l15::Solution solver;
  EXPECT_EQ(solver.threeSum(nums), exp);
}

#endif