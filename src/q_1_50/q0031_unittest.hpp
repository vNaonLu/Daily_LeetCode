
#ifndef Q31_UNITTEST_H__
#define Q31_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0031.hpp"
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 31.
 *     Next Permutation
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Implement “next permutation” , which rearranges numbers into the
 *   lexicographically next greater permutation of
 *   If such an arrangement is not possible, it must rearrange it as the
 *   lowest possible order (i.e., sorted in ascending
 *   The replacement must be “<a
 *   href="http://en.wikipedia.org/wiki/In-place_algorithm"
 *   target="_blank">in place</a>” and use only constantextra memory.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 100’
 *   • ‘0 ≤ nums[i] ≤ 100’
 *
 */

TEST(q31, sample_input01) {
  l31::Solution solver;
  vector<int> nums = {1, 2, 3};
  vector<int> exp = {1, 3, 2};
  solver.nextPermutation(nums);
  // Assume the first argument is answer.
  EXPECT_EQ(nums, exp);
}

TEST(q31, sample_input02) {
  l31::Solution solver;
  vector<int> nums = {3, 2, 1};
  vector<int> exp = {1, 2, 3};
  solver.nextPermutation(nums);
  // Assume the first argument is answer.
  EXPECT_EQ(nums, exp);
}

TEST(q31, sample_input03) {
  l31::Solution solver;
  vector<int> nums = {1, 1, 5};
  vector<int> exp = {1, 5, 1};
  solver.nextPermutation(nums);
  // Assume the first argument is answer.
  EXPECT_EQ(nums, exp);
}

TEST(q31, sample_input04) {
  l31::Solution solver;
  vector<int> nums = {1};
  vector<int> exp = {1};
  solver.nextPermutation(nums);
  // Assume the first argument is answer.
  EXPECT_EQ(nums, exp);
}

#endif