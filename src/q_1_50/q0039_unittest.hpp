
#ifndef Q39_UNITTEST_H__
#define Q39_UNITTEST_H__
#include <gtest/gtest.h>

#include <leetcode/anyorder.hpp>

#include "q0039.hpp"
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 39.
  *     Combination Sum
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given an array of “distinct” integers ‘candidates’ and a target
  *   integer ‘target’ , return “a list of all “unique combinations” of ”
  *   ‘candidates’ “ where the chosen numbers sum to ” ‘target’ “.” You may
  *   return the combinations in “any order”.
  *   
  *   The “same” number may be chosen from ‘candidates’ an “unlimited number
  *   of times” . Two combinations are unique if the frequency of at least
  *   one of the chosen numbers is different.
  *   
  *   It is “guaranteed” that the number of unique combinations that sum up
  *   to ‘target’ is less than ‘150’ combinations for the given input.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘1 ≤ candidates.length ≤ 30’
  *   • ‘1 ≤ candidates[i] ≤ 200’
  *   • All elements of ‘candidates’ are “distinct” .
  *   • ‘1 ≤ target ≤ 500’
  *
*/

TEST(q39, sample_input01) {
  l39::Solution solver;
  vector<int> candidates = {2, 3, 6, 7};
  int target = 7;
  vector<vector<int>> exp = {{2, 2, 3}, {7}};
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solver.combinationSum(candidates, target), exp);
}

TEST(q39, sample_input02) {
  l39::Solution solver;
  vector<int> candidates = {2, 3, 5};
  int target = 8;
  vector<vector<int>> exp = {{2, 2, 2, 2}, {2, 3, 3}, {3, 5}};
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solver.combinationSum(candidates, target), exp);
}

TEST(q39, sample_input03) {
  l39::Solution solver;
  vector<int> candidates = {2};
  int target = 1;
  vector<vector<int>> exp = {};
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solver.combinationSum(candidates, target), exp);
}

TEST(q39, sample_input04) {
  l39::Solution solver;
  vector<int> candidates = {1};
  int target = 1;
  vector<vector<int>> exp = {{1}};
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solver.combinationSum(candidates, target), exp);
}

TEST(q39, sample_input05) {
  l39::Solution solver;
  vector<int> candidates = {1};
  int target = 2;
  vector<vector<int>> exp = {{1, 1}};
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solver.combinationSum(candidates, target), exp);
}

#endif