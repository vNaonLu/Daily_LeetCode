
#ifndef Q22_UNITTEST_H__
#define Q22_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0022.hpp"
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 22.
  *     Generate Parentheses
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given ‘n’ pairs of parentheses, write a function to “generate all
  *   combinations of well-formed parentheses”.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘1 ≤ n ≤ 8’
  *
*/

TEST(q22, sample_input01) {
  l22::Solution solver;
  int n = 3;
  vector<string> exp = {"((()))", "(()())", "(())()", "()(())", "()()()"};
  EXPECT_EQ(solver.generateParenthesis(n), exp);
}

TEST(q22, sample_input02) {
  l22::Solution solver;
  int n = 1;
  vector<string> exp = {"()"};
  EXPECT_EQ(solver.generateParenthesis(n), exp);
}

#endif