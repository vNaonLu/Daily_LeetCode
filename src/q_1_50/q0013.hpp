
#ifndef LEETCODE_Q13_H__
#define LEETCODE_Q13_H__
#include <iostream>
#include <string>
#include <unordered_map>

namespace l13 {
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 13.
 *     Roman to Integer
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Roman numerals are represented by seven different symbols: ‘I’ , ‘V’ ,
 *   ‘X’ , ‘L’ , ‘C’ , ‘D’ and ‘M’
 *    “Symbol”  “Value”
 *   I
 *   V
 *   X
 *   L
 *   C
 *   D
 *   M
 *   For example, ‘2’ is written as ‘II’ in Roman numeral, just two one's
 *   added together. ‘12’ is written as ‘XII’ , which is simply ‘X + II’ .
 *   The number ‘27’ is written as ‘XXVII’ , which is ‘XX + V + II’
 *   Roman numerals are usually written largest to smallest from left to
 *   right. However, the numeral for four is not ‘IIII’ . Instead, the
 *   number four is written as ‘IV’ . Because the one is before the five we
 *   subtract it making four. The same principle applies to the number
 *   nine, which is written as ‘IX’ . There are six instances where
 *   subtraction is
 *       -  ‘I’ can be placed before ‘V’ (5) and ‘X’ (10) to make 4 and
 *       -  ‘X’ can be placed before ‘L’ (50) and ‘C’ (100) to make 40 and
 *       -  ‘C’ can be placed before ‘D’ (500) and ‘M’ (1000) to make 400
 *   and
 *   Given a roman numeral, convert it to an integer.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s.length ≤ 15’
 *   • ‘s’ contains onlythe characters ‘('I', 'V', 'X', 'L', 'C', 'D', 'M')’ .
 *   • It is “guaranteed” that ‘s’ is a valid roman numeral in the range ‘[1, 3999]’ .
 *
 */

class Solution {
 private:
  unordered_map<char, int> symbol = {{'I', 1},
                                     {'V', 5},
                                     {'X', 10},
                                     {'L', 50},
                                     {'C', 100},
                                     {'D', 500},
                                     {'M', 1000}};

 public:
  int romanToInt(string s) {
    int res = 0;
    for (int i = 0; i < s.size(); ++i) {
      res += symbol[s[i]];
      if (i > 0 && symbol[s[i]] > symbol[s[i - 1]]) {
        res -= 2 * symbol[s[i - 1]];
      }
    }
    return res;
  }
};
}  // namespace l13

#endif