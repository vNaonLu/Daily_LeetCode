
#ifndef Q35_UNITTEST_H__
#define Q35_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0035.hpp"
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 35.
 *     Search Insert Position
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a sorted array of distinct integers and a target value, return
 *   the index if the target is found. If not, return the index where it
 *   would be if it were inserted in
 *   You mustwrite an algorithm with ‘O(log n)’ runtime complexity.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 10⁴’
 *   • ‘-10⁴ ≤ nums[i] ≤ 10⁴’
 *   • ‘nums’ contains “distinct” values sorted in “ascending” order.
 *   • ‘-10⁴ ≤ target ≤ 10⁴’
 *
 */

TEST(q35, sample_input01) {
  l35::Solution solver;
  vector<int> nums = {1, 3, 5, 6};
  int target = 5;
  int exp = 2;
  EXPECT_EQ(solver.searchInsert(nums, target), exp);
}

TEST(q35, sample_input02) {
  l35::Solution solver;
  vector<int> nums = {1, 3, 5, 6};
  int target = 2;
  int exp = 1;
  EXPECT_EQ(solver.searchInsert(nums, target), exp);
}

TEST(q35, sample_input03) {
  l35::Solution solver;
  vector<int> nums = {1, 3, 5, 6};
  int target = 7;
  int exp = 4;
  EXPECT_EQ(solver.searchInsert(nums, target), exp);
}

TEST(q35, sample_input04) {
  l35::Solution solver;
  vector<int> nums = {1, 3, 5, 6};
  int target = 0;
  int exp = 0;
  EXPECT_EQ(solver.searchInsert(nums, target), exp);
}

TEST(q35, sample_input05) {
  l35::Solution solver;
  vector<int> nums = {1};
  int target = 0;
  int exp = 0;
  EXPECT_EQ(solver.searchInsert(nums, target), exp);
}

#endif