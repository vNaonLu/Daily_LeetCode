
#ifndef Q2_UNITTEST_H__
#define Q2_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0002.hpp"
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 2.
  *    Add Two Numbers
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   You are given two “non-empty” linked lists representing two
  *   non-negative integers. The digits are stored in “reverse order” , and
  *   each of their nodes contains a single digit. Add the two numbers and
  *   return the sumas a linked list.
  *   
  *   You may assume the two numbers do not contain any leading zero, except
  *   the number 0 itself.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • The number of nodes in each linked list is in the range ‘[1, 100]’ .
  *   • ‘0 ≤ Node.val ≤ 9’
  *   • It is guaranteed that the list represents a number that does not have leading zeros.
  *
*/

TEST(q2, sample_input01) {
  l2::Solution solver;
  ListNode* l1 = ListNode::generate({2, 4, 3});
  ListNode* l2 = ListNode::generate({5, 6, 4});
  ListNode* exp = ListNode::generate({7, 0, 8});
  EXPECT_LISTNODE_EQ(solver.addTwoNumbers(l1, l2), exp);
}

TEST(q2, sample_input02) {
  l2::Solution solver;
  ListNode* l1 = ListNode::generate({0});
  ListNode* l2 = ListNode::generate({0});
  ListNode* exp = ListNode::generate({0});
  EXPECT_LISTNODE_EQ(solver.addTwoNumbers(l1, l2), exp);
}

TEST(q2, sample_input03) {
  l2::Solution solver;
  ListNode* l1 = ListNode::generate({9, 9, 9, 9, 9, 9, 9});
  ListNode* l2 = ListNode::generate({9, 9, 9, 9});
  ListNode* exp = ListNode::generate({8, 9, 9, 9, 0, 0, 0, 1});
  EXPECT_LISTNODE_EQ(solver.addTwoNumbers(l1, l2), exp);
}

#endif