#include <gtest/gtest.h>
#include <iostream>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 8.
 *    String to Integer (atoi)
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Implement the ‘myAtoi(string s)’ function, which converts a string to
 *   a 32-bit signed integer (similar to C/C++'s ‘atoi’
 *   The algorithm for ‘myAtoi(string s)’ is as
 *       1. Read in and ignore any leading
 *       2. Check if the next character (if not already at the end of the
 *   string) is ‘'-'’ or ‘'+'’ . Read this character in if it is either.
 *   This determines if the final result is negative or positive
 *   respectively. Assume the result is positive if neither is
 *       3. Read in next the characters until the next non-digit character
 *   or the end of the input is reached. The rest of the string is
 *       4. Convert these digits into an integer (i.e. ‘'123' -> 123’ ,
 *   ‘'0032' -> 32’ ). If no digits were read, then the integer is ‘0’ .
 *   Change the sign as necessary (from step
 *       5. If the integer is out of the 32-bit signed integer range
 *   ‘[-2³¹, 2³¹ - 1]’ , then clamp the integer so that it remains in the
 *   range. Specifically, integers less than ‘-2³¹’ should be clamped to
 *   ‘-2³¹’ , and integers greater than ‘2³¹ - 1’ should be clamped to ‘2³¹
 *   - 1’
 *       6. Return the integer as the final
 *    “Note:”
 *       - Only the space character ‘' '’ is considered a whitespace
 *       -  “Do not ignore” any characters other than the leading
 *   whitespace or the rest of the string after the digits.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘0 ≤ s.length ≤ 200’
 *   • ‘s’ consists of English letters (lower-case and upper-case), digits ( ‘0-9’ ), ‘' '’ , ‘'+'’ , ‘'-'’ , and ‘'.'’ .
 *
 */

struct q8 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int myAtoi(string s) {
      int sign = 1;
      int res = 0;
      const char *c = s.c_str();
      while (*c == ' ') ++c;
      if (*c == '-')
        sign = -1, ++c;
      else if (*c == '+')
        sign = 1, ++c;
      while (*c >= '0' && *c <= '9') {
        int num = *c - '0';
        if (numeric_limits<int>::max() / 10 < res || (numeric_limits<int>::max() / 10 == res && num > 7))
          return sign == 1 ? numeric_limits<int>::max() : numeric_limits<int>::min();
        res *= 10;
        res += num;
        ++c;
      }
      return res * sign;
    }
  };

  class Solution *solution;
};

TEST_F(q8, sample_input01) {
  solution = new Solution();
  string s = "42";
  int exp = 42;
  EXPECT_EQ(solution->myAtoi(s), exp);
  delete solution;
}

TEST_F(q8, sample_input02) {
  solution = new Solution();
  string s = "   -42";
  int exp = -42;
  EXPECT_EQ(solution->myAtoi(s), exp);
  delete solution;
}

TEST_F(q8, sample_input03) {
  solution = new Solution();
  string s = "4193 with words";
  int exp = 4193;
  EXPECT_EQ(solution->myAtoi(s), exp);
  delete solution;
}

TEST_F(q8, sample_input04) {
  solution = new Solution();
  string s = "words and 987";
  int exp = 0;
  EXPECT_EQ(solution->myAtoi(s), exp);
  delete solution;
}

TEST_F(q8, sample_input05) {
  solution = new Solution();
  string s = "-91283472332";
  int exp = -2147483648;
  EXPECT_EQ(solution->myAtoi(s), exp);
  delete solution;
}