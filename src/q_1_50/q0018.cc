#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/anyorder.hpp>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 18.
 *     4Sum
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an array ‘nums’ of ‘n’ integers, return “an array of all the
 *   “unique” quadruplets” ‘[nums[a], nums[b], nums[c], nums[d]]’ such
 *       -  ‘0 ≤ a, b, c, d< n’
 *       -  ‘a’ , ‘b’ , ‘c’ , and ‘d’ are “distinct”
 *       -  ‘nums[a] + nums[b] + nums[c] + nums[d] = target’
 *   You may return the answer in “any order” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 200’
 *   • ‘-10⁹ ≤ nums[i] ≤ 10⁹’
 *   • ‘-10⁹ ≤ target ≤ 10⁹’
 *
 */

struct q18 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    vector<vector<int>> fourSum(vector<int> &nums, int target) {
      set<vector<int>> res;
      sort(nums.begin(), nums.end());
      for (int i = 0; i < int(nums.size() - 3); ++i) {
        for (int j = i + 1; j < int(nums.size() - 2); ++j) {
          if (j > i + 1 && nums[j] == nums[j - 1]) continue;
          int left = j + 1, right = nums.size() - 1;
          int cur = target - nums[i] - nums[j];
          while (left < right) {
            long sum = nums[left] + nums[right];
            if (sum == cur) {
              vector<int> out{nums[i], nums[j], nums[left], nums[right]};
              res.insert(out);
              ++left;
              --right;
            } else if (sum < cur)
              ++left;
            else
              --right;
          }
        }
      }
      return vector<vector<int>>(res.begin(), res.end());
    }
  };

  class Solution *solution;
};

TEST_F(q18, sample_input01) {
  solution = new Solution();
  vector<int> nums = {1, 0, -1, 0, -2, 2};
  int target = 0;
  vector<vector<int>> exp = {{-2, -1, 1, 2}, {-2, 0, 0, 2}, {-1, 0, 0, 1}};
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solution->fourSum(nums, target), exp);
  delete solution;
}

TEST_F(q18, sample_input02) {
  solution = new Solution();
  vector<int> nums = {2, 2, 2, 2, 2};
  int target = 8;
  vector<vector<int>> exp = {{2, 2, 2, 2}};
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solution->fourSum(nums, target), exp);
  delete solution;
}