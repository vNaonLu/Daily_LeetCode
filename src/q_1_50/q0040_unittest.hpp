
#ifndef Q40_UNITTEST_H__
#define Q40_UNITTEST_H__
#include <gtest/gtest.h>

#include <leetcode/anyorder.hpp>

#include "q0040.hpp"
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 40.
  *     Combination Sum II
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given a collection of candidate numbers ( ‘candidates’ ) and a target
  *   number ( ‘target’ ), find all unique combinations in ‘candidates’
  *   where the candidate numbers sum to ‘target’.
  *   
  *   Each number in ‘candidates’ may only be used “once” in the combination.
  *   
  *   “Note:” The solution set must not contain duplicate combinations.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘1 ≤candidates.length ≤ 100’
  *   • ‘1 ≤candidates[i] ≤ 50’
  *   • ‘1 ≤ target ≤ 30’
  *
*/

TEST(q40, sample_input01){
  l40::Solution solver;
  vector<int> candidates = {10, 1, 2, 7, 6, 1, 5};
  int target = 8;
  vector<vector<int>> exp = {{2, 6}, {1, 7}, {1, 2, 5}, {1, 1, 6}};
  EXPECT_EQ_ANY_ORDER(solver.combinationSum2(candidates, target), exp);
}

TEST(q40, sample_input02){
  l40::Solution solver;
  vector<int> candidates = {2, 5, 2, 1, 2};
  int target = 5;
  vector<vector<int>> exp = {{5}, {1, 2, 2}};
  EXPECT_EQ_ANY_ORDER(solver.combinationSum2(candidates, target), exp);
}

#endif