
#ifndef LEETCODE_Q34_H__
#define LEETCODE_Q34_H__
#include <iostream>
#include <vector>

namespace l34 {
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 34. Find First and Last Position of Element in Sorted Array
  *
  * Given an array of integers nums sorted in
  * ascending order, find the starting and ending position of
  * a given target value.
  * If target is not found in the array, return [-1,
  * -1] .
  * You mustwrite an algorithm with O(log n) runtime
  * complexity.
  *
  * Constraints:
  * -  0 <= nums.length <= 10^(5) 
  * -  -10^(9)<= nums[i]<= 10^(9) 
  * -  nums is a non-decreasing array.
  * -  -10^(9)<= target<= 10^(9) 
  *
*/
class Solution {
 public:
  vector<int> searchRange(vector<int>& nums, int target) {
    vector<int> res = {-1, -1};
    if (nums.empty()) return res;
    int l = 0, r = nums.size() - 1;
    int m;
    while (l <= r) {
      m = l + (r - l) / 2;
      if (nums[m] == target) {
        break;
      } else if (nums[m] > target) {
        r = m - 1;
      } else {
        l = m + 1;
      }
    }
    if (nums[m] == target) {
      res[0] = res[1] = m;
      while (res[0] > 0 && nums[res[0] - 1] == target) --res[0];
      while (res[1] < nums.size() - 1 && nums[res[1] + 1] == target) ++res[1];
    }
    return res;
  }
};
}  // namespace l34
#endif