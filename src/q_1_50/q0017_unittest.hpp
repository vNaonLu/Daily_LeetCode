
#ifndef Q17_UNITTEST_H__
#define Q17_UNITTEST_H__
#include <gtest/gtest.h>

#include <leetcode/anyorder.hpp>

#include "q0017.hpp"
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 17.
  *     Letter Combinations of a Phone Number
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given a string containing digits from ‘2-9’ inclusive, return all
  *   possible letter combinations that the number could represent. Return
  *   the answer in “any order”.
  *   
  *   A mapping of digit to letters (just like on the telephone buttons) is
  *   given below. Note that 1 does not map to any letters.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘0 ≤ digits.length ≤ 4’
  *   • ‘digits[i]’ is a digit in the range ‘['2', '9']’ .
  *
*/

TEST(q17, sample_input01) {
  l17::Solution solver;
  string digits = "23";
  vector<string> exp = {"ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"};
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solver.letterCombinations(digits), exp);
}

TEST(q17, sample_input02) {
  l17::Solution solver;
  string digits = "";
  vector<string> exp = {};
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solver.letterCombinations(digits), exp);
}

TEST(q17, sample_input03) {
  l17::Solution solver;
  string digits = "2";
  vector<string> exp = {"a", "b", "c"};
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solver.letterCombinations(digits), exp);
}

#endif