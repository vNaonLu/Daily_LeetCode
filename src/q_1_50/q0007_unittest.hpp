
#ifndef Q7_UNITTEST_H__
#define Q7_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0007.hpp"
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 7.
  *    Reverse Integer
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given a signed 32-bit integer ‘x’ , return ‘x’ “ with its digits
  *   reversed” . If reversing ‘x’ causes the value to go outside the signed
  *   32-bit integer range ‘[-2³¹, 2³¹ - 1]’ , then return ‘0’.
  *   
  *   “Assume the environment does not allow you to store 64-bit integers
  *   (signed or unsigned).”.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘-2³¹ ≤ x ≤ 2³¹ - 1’
  *
*/

TEST(q7, sample_input01) {
  l7::Solution solver;
  int x = 123;
  int exp = 321;
  EXPECT_EQ(solver.reverse(x), exp);
}

TEST(q7, sample_input02) {
  l7::Solution solver;
  int x = -123;
  int exp = -321;
  EXPECT_EQ(solver.reverse(x), exp);
}

TEST(q7, sample_input03) {
  l7::Solution solver;
  int x = 120;
  int exp = 21;
  EXPECT_EQ(solver.reverse(x), exp);
}

TEST(q7, sample_input04) {
  l7::Solution solver;
  int x = 0;
  int exp = 0;
  EXPECT_EQ(solver.reverse(x), exp);
}

TEST(q7, input01) {
  l7::Solution solver;
  int x = 1534236469;
  int exp = 0;
  EXPECT_EQ(solver.reverse(x), exp);
}

#endif