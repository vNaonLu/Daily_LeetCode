
#ifndef LEETCODE_Q24_H__
#define LEETCODE_Q24_H__
#include <iostream>
#include <leetcode/listnode.hpp>

namespace l24 {
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 24.
  *     Swap Nodes in Pairs
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given alinked list, swap every two adjacent nodes and return its head.
  *   You must solve the problem withoutmodifying the values in the
  *   list&#39;s nodes (i.e., only nodes themselves may be changed.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • The number of nodes in thelistis in the range ‘[0, 100]’ .
  *   • ‘0 ≤ Node.val ≤ 100’
  *
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
 public:
  ListNode* swapPairs(ListNode* head) {
    ListNode dummy(0, head);
    ListNode* p = &dummy;
    while (p != nullptr && p->next != nullptr && p->next->next != nullptr) {
      ListNode *q = p->next->next, *next = p->next;
      next->next = q->next;
      p->next = q;
      q->next = next;
      p = next;
    }
    return dummy.next;
  }
};
}  // namespace l24

#endif