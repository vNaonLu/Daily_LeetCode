
#ifndef LEETCODE_Q42_H__
#define LEETCODE_Q42_H__
#include <iostream>
#include <vector>

namespace l42 {
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 42.
 *     Trapping Rain Water
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given ‘n’ non-negative integers representing an elevation map where
 *   the width of each bar is ‘1’ , compute how much water it can trap
 *   after raining.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘n = height.length’
 *   • ‘1 ≤ n ≤ 2 × 10⁴’
 *   • ‘0 ≤ height[i] ≤ 10⁵’
 *
 */

class Solution {
 public:
  int trap(vector<int>& height) {
    vector<int> dp(height.size(), 0);
    int res = 0;
    dp[0] = height[0];
    for (int i = 1; i < height.size(); ++i)
      dp[i] = max(dp[i - 1], height[i]);
    *(dp.end() - 1) = min(dp.back(), height.back());
    for (int i = height.size() - 2; i >= 0; --i)
      dp[i] = min(dp[i], max(dp[i + 1], height[i]));
    for (int i = 0; i < dp.size(); ++i)
      res += max(0, dp[i] - height[i]);
    return res;
  }
};
}  // namespace l42

#endif