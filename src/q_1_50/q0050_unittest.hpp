
#ifndef Q50_UNITTEST_H__
#define Q50_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0050.hpp"
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 50.
 *     Pow(x, n)
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Implement <a href="http://www.cplusplus.com/reference/valarray/pow/"
 *   target="_blank">pow(x, n)</a>, which calculates ‘x’ raised to the
 *   power ‘n’ (i.e., ‘xⁿ’ ).
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘-100.0 <x< 100.0’
 *   • ‘-2³¹≤ n ≤2³¹-1’
 *   • ‘-10⁴ ≤ xⁿ ≤ 10⁴’
 *
 */

inline bool approximately_equal(double x, double y) noexcept {
  return abs(y - x) < 1e-6;
}

TEST(q50, sample_input01) {
  l50::Solution solver;
  double x = 2.00000;
  int n = 10;
  double exp = 1024.00000;
  EXPECT_TRUE(approximately_equal(solver.myPow(x, n), exp));
}

TEST(q50, sample_input02) {
  l50::Solution solver;
  double x = 2.10000;
  int n = 3;
  double exp = 9.26100;
  EXPECT_TRUE(approximately_equal(solver.myPow(x, n), exp));
}

TEST(q50, sample_input03) {
  l50::Solution solver;
  double x = 2.00000;
  int n = -2;
  double exp = 0.25000;
  EXPECT_TRUE(approximately_equal(solver.myPow(x, n), exp));
}

#endif