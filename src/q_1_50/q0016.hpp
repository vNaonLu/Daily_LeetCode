
#ifndef LEETCODE_Q16_H__
#define LEETCODE_Q16_H__
#include <iostream>
#include <vector>

namespace l16 {
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 16.
 *     3Sum Closest
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an integer array ‘nums’ of length ‘n’ and an integer ‘target’ ,
 *   find three integers in ‘nums’ such that the sum is closest to ‘target’
 *   Return “the sum of the three integers”
 *   You may assume that each input would have exactly one solution.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘3 ≤ nums.length ≤ 1000’
 *   • ‘-1000 ≤ nums[i] ≤ 1000’
 *   • ‘-10⁴ ≤ target ≤ 10⁴’
 *
 */

class Solution {
 public:
  int threeSumClosest(vector<int>& nums, int target) {
    int ret = nums[0] + nums[1] + nums[2];
    int diff = abs(ret - target);
    sort(nums.begin(), nums.end());
    for (int i = 0; i < nums.size() - 2; ++i) {
      if (nums[i] * 3 > target) return min(ret, nums[i] + nums[i + 1] + nums[i + 2]);
      int left = i + 1, right = nums.size() - 1;
      while (left < right) {
        int sum = nums[i] + nums[left] + nums[right];
        int newDiff = abs(sum - target);
        if (diff > newDiff) {
          diff = newDiff;
          ret = sum;
        }
        if (sum < target)
          ++left;
        else
          --right;
      }
    }
    return ret;
  }
};
}  // namespace l16

#endif