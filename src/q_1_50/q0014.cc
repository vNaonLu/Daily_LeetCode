#include <gtest/gtest.h>
#include <iostream>
#include <string>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 14.
 *     Longest Common Prefix
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Write a function to find the longest common prefix string amongst an
 *   array of
 *   If there is no common prefix, return an empty string ‘''’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ strs.length ≤ 200’
 *   • ‘0 ≤ strs[i].length ≤ 200’
 *   • ‘strs[i]’ consists of only lower-case English letters.
 *
 */

struct q14 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    string longestCommonPrefix(vector<string>& strs) {
      string res = "";
      for (int i = 0; i < strs.front().size(); ++i) {
        char c = strs.front()[i];
        bool common = true;
        for (int j = 1; j < strs.size() && common; ++j)
          common &= strs[j][i] == c;
          
        if (common) res.push_back(c);
        else break;
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q14, sample_input01) {
  solution = new Solution();
  vector<string> strs = {"flower", "flow", "flight"};
  string exp = "fl";
  EXPECT_EQ(solution->longestCommonPrefix(strs), exp);
  delete solution;
}

TEST_F(q14, sample_input02) {
  solution = new Solution();
  vector<string> strs = {"dog", "racecar", "car"};
  string exp = "";
  EXPECT_EQ(solution->longestCommonPrefix(strs), exp);
  delete solution;
}