
#ifndef Q18_UNITTEST_H__
#define Q18_UNITTEST_H__
#include <gtest/gtest.h>

#include <leetcode/anyorder.hpp>

#include "q0018.hpp"
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 18.
 *     4Sum
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an array ‘nums’ of ‘n’ integers, return “an array of all the
 *   “unique” quadruplets” ‘[nums[a], nums[b], nums[c], nums[d]]’ such
 *       -  ‘0 ≤ a, b, c, d< n’
 *       -  ‘a’ , ‘b’ , ‘c’ , and ‘d’ are “distinct”
 *       -  ‘nums[a] + nums[b] + nums[c] + nums[d] = target’
 *   You may return the answer in “any order” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 200’
 *   • ‘-10⁹ ≤ nums[i] ≤ 10⁹’
 *   • ‘-10⁹ ≤ target ≤ 10⁹’
 *
 */

TEST(q18, sample_input01) {
  l18::Solution solver;
  vector<int> nums = {1, 0, -1, 0, -2, 2};
  int target = 0;
  vector<vector<int>> exp = {{-2, -1, 1, 2}, {-2, 0, 0, 2}, {-1, 0, 0, 1}};
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solver.fourSum(nums, target), exp);
}

TEST(q18, sample_input02) {
  l18::Solution solver;
  vector<int> nums = {2, 2, 2, 2, 2};
  int target = 8;
  vector<vector<int>> exp = {{2, 2, 2, 2}};
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solver.fourSum(nums, target), exp);
}

#endif