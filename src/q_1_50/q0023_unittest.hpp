
#ifndef Q23_UNITTEST_H__
#define Q23_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0023.hpp"
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 23.
 *     Merge k Sorted Lists
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an array of ‘k’ linked-lists ‘lists’ , each linked-list
 *   is sorted in ascending
 *    “Merge all the linked-lists into one sorted linked-list and return
 *   it.” 
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘k = lists.length’
 *   • ‘0 ≤ k ≤ 10^4’
 *   • ‘0 ≤ lists[i].length ≤ 500’
 *   • ‘-10^4 ≤ lists[i][j] ≤ 10^4’
 *   • ‘lists[i]’ is sorted in “ascending order” .
 *   • The sum of ‘lists[i].length’ won't exceed ‘10^4’ .
 *
 */

TEST(q23, sample_input01) {
  l23::Solution solver;
  vector<ListNode*> lists = {ListNode::generate({1, 4, 5}), ListNode::generate({1, 3, 4}), ListNode::generate({2, 6})};
  ListNode* exp = ListNode::generate({1, 1, 2, 3, 4, 4, 5, 6});
  EXPECT_LISTNODE_EQ(solver.mergeKLists(lists), exp);
}

TEST(q23, sample_input02) {
  l23::Solution solver;
  vector<ListNode*> lists = {};
  ListNode* exp = ListNode::generate({});
  EXPECT_LISTNODE_EQ(solver.mergeKLists(lists), exp);
}

TEST(q23, sample_input03) {
  l23::Solution solver;
  vector<ListNode*> lists = {ListNode::generate({})};
  ListNode* exp = ListNode::generate({});
  EXPECT_LISTNODE_EQ(solver.mergeKLists(lists), exp);
}

#endif