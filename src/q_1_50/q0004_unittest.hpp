
#ifndef Q4_UNITTEST_H__
#define Q4_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0004.hpp"
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 4.
  *    Median of Two Sorted Arrays
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given two sorted arrays ‘nums1’ and ‘nums2’ of size ‘m’ and ‘n’
  *   respectively, return “the median” of the two sorted arrays.
  *   
  *   The overall run time complexity should be ‘O(log (m+n))’.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘nums1.length = m’
  *   • ‘nums2.length = n’
  *   • ‘0 ≤ m ≤ 1000’
  *   • ‘0 ≤ n ≤ 1000’
  *   • ‘1 ≤ m + n ≤ 2000’
  *   • ‘-10⁶ ≤ nums1[i], nums2[i] ≤ 10⁶’
  *
*/

TEST(q4, sample_input01) {
  l4::Solution solver;
  vector<int> nums1 = {1, 3};
  vector<int> nums2 = {2};
  double exp = 2;
  EXPECT_EQ(solver.findMedianSortedArrays(nums1, nums2), exp);
}

TEST(q4, sample_input02) {
  l4::Solution solver;
  vector<int> nums1 = {1, 2};
  vector<int> nums2 = {3, 4};
  double exp = 2.5;
  EXPECT_EQ(solver.findMedianSortedArrays(nums1, nums2), exp);
}

TEST(q4, sample_input03) {
  l4::Solution solver;
  vector<int> nums1 = {0, 0};
  vector<int> nums2 = {0, 0};
  double exp = 0;
  EXPECT_EQ(solver.findMedianSortedArrays(nums1, nums2), exp);
}

TEST(q4, sample_input04) {
  l4::Solution solver;
  vector<int> nums1 = {};
  vector<int> nums2 = {1};
  double exp = 1;
  EXPECT_EQ(solver.findMedianSortedArrays(nums1, nums2), exp);
}

TEST(q4, sample_input05) {
  l4::Solution solver;
  vector<int> nums1 = {2};
  vector<int> nums2 = {};
  double exp = 2;
  EXPECT_EQ(solver.findMedianSortedArrays(nums1, nums2), exp);
}

#endif