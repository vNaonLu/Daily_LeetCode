#include <gtest/gtest.h>
#include <iostream>
#include <string>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 22.
 *     Generate Parentheses
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given ‘n’ pairs of parentheses, write a function to “generate all
 *   combinations of well-formed parentheses” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ n ≤ 8’
 *
 */

struct q22 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    void helper(vector<string> &res, string &c, const int &n, int l = 0, int r = 0) {
      if (c.size() == n * 2) {
        res.push_back(c);
      } else {
        if (l < n) {
          c.push_back('(');
          helper(res, c, n, l + 1, r);
          c.pop_back();
        }
        if (r < l) {
          c.push_back(')');
          helper(res, c, n, l, r + 1);
          c.pop_back();
        }
      }
    }
   public:
    vector<string> generateParenthesis(int n) {
      vector<string> res;
      string tmp = "";
      helper(res, tmp, n);
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q22, sample_input01) {
  solution = new Solution();
  int n = 3;
  vector<string> exp = {"((()))", "(()())", "(())()", "()(())", "()()()"};
  EXPECT_EQ(solution->generateParenthesis(n), exp);
  delete solution;
}

TEST_F(q22, sample_input02) {
  solution = new Solution();
  int n = 1;
  vector<string> exp = {"()"};
  EXPECT_EQ(solution->generateParenthesis(n), exp);
  delete solution;
}