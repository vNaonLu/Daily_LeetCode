
#ifndef Q48_UNITTEST_H__
#define Q48_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0048.hpp"
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 48. Rotate Image
  *
  * You are given an n x n 2D matrix representing an
  * image, rotate the image by “90“ degrees
  * (clockwise).
  * You have to rotate the image <a
  * href="https://en.wikipedia.org/wiki/In-place_algorithm"
  * target="_blank"> “in-place“ </a>, which means you have to
  * modify the input 2D matrix directly. “DO NOT“
  * allocate another 2D matrix and do the rotation.
  *
  * Constraints:
  * -  matrix.length == n 
  * -  matrix[i].length == n 
  * -  1 <= n <= 20 
  * -  -1000 <= matrix[i][j] <= 1000 
  *
*/

TEST(q48, sample_input01) {
  vector<vector<int>> matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
  vector<vector<int>> exp = {{7, 4, 1}, {8, 5, 2}, {9, 6, 3}};
  l48::Solution solver;
  solver.rotate(matrix);
  EXPECT_EQ(matrix, exp);
}

TEST(q48, sample_input02) {
  vector<vector<int>> matrix = {{5, 1, 9, 11}, {2, 4, 8, 10}, {13, 3, 6, 7}, {15, 14, 12, 16}};
  vector<vector<int>> exp = {{15, 13, 2, 5}, {14, 3, 4, 1}, {12, 6, 8, 9}, {16, 7, 10, 11}};
  l48::Solution solver;
  solver.rotate(matrix);
  EXPECT_EQ(matrix, exp);
}

TEST(q48, sample_input03) {
  vector<vector<int>> matrix = {{1}};
  vector<vector<int>> exp = {{1}};
  l48::Solution solver;
  solver.rotate(matrix);
  EXPECT_EQ(matrix, exp);
}

TEST(q48, sample_input04) {
  vector<vector<int>> matrix = {{1, 2}, {3, 4}};
  vector<vector<int>> exp = {{3, 1}, {4, 2}};
  l48::Solution solver;
  solver.rotate(matrix);
  EXPECT_EQ(matrix, exp);
}

#endif