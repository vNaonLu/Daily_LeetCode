
#ifndef Q46_UNITTEST_H__
#define Q46_UNITTEST_H__
#include <gtest/gtest.h>

#include <algorithm>

#include "q0046.hpp"
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 46. Permutations
  *
  * Given an array nums of distinct integers, return
  * all the possible permutations . You can return the
  * answer in “any order“ .
  *
  * Constraints:
  * -  1 <= nums.length <= 6 
  * -  -10 <= nums[i] <= 10 
  * - All the integers of nums are “unique“ .
  *
*/

TEST(q46, sample_input01) {
  l46::Solution solver;
  vector<int> nums = {1, 2, 3};
  vector<vector<int>> act = solver.permute(nums);
  vector<vector<int>> exp = {{1, 2, 3}, {2, 1, 3}, {3, 1, 2}, {1, 3, 2}, {2, 3, 1}, {3, 2, 1}};
  sort(act.begin(), act.end());
  sort(exp.begin(), exp.end());
  EXPECT_EQ(act, exp);
}

TEST(q46, sample_input02) {
  l46::Solution solver;
  vector<int> nums = {0, 1};
  vector<vector<int>> act = solver.permute(nums);
  vector<vector<int>> exp = {{0, 1}, {1, 0}};
  sort(act.begin(), act.end());
  sort(exp.begin(), exp.end());
  EXPECT_EQ(act, exp);
}

TEST(q46, sample_input03) {
  l46::Solution solver;
  vector<int> nums = {1};
  vector<vector<int>> act = solver.permute(nums);
  vector<vector<int>> exp = {{1}};
  sort(act.begin(), act.end());
  sort(exp.begin(), exp.end());
  EXPECT_EQ(act, exp);
}

#endif