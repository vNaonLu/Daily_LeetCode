#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/listnode.hpp>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 21.
 *     Merge Two Sorted Lists
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given the heads of two sorted linked lists ‘list1’ and ‘list2’
 *   Merge the two lists in a one “sorted” list. The list should be made by
 *   splicing together the nodes of the first two
 *   Return “the head of the merged linked list” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The number of nodes in both lists is in the range ‘[0, 50]’ .
 *   • ‘-100 ≤ Node.val ≤ 100’
 *   • Both ‘list1’ and ‘list2’ are sorted in “non-decreasing” order.
 *
 */

struct q21 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
      if (l1 == nullptr) return l2;
      if (l2 == nullptr) return l1;
      ListNode dummy;
      ListNode* p = &dummy;
      while (l1 != nullptr && l2 != nullptr) {
        if (l1->val <= l2->val) {
          p->next = l1;
          l1 = l1->next;
        } else {
          p->next = l2;
          l2 = l2->next;
        }
        p = p->next;
      }
      if (l1 != nullptr) p->next = l1;
      if (l2 != nullptr) p->next = l2;
      return dummy.next;
    }
  };

  class Solution *solution;
};

TEST_F(q21, sample_input01) {
  solution = new Solution();
  ListNode* list1 = ListNode::generate({1, 2, 4});
  ListNode* list2 = ListNode::generate({1, 3, 4});
  ListNode* exp = ListNode::generate({1, 1, 2, 3, 4, 4});
  ListNode* act = solution->mergeTwoLists(list1, list2);
  EXPECT_LISTNODE_EQ(act, exp);
  ListNode::release(list1, list2, exp, act);
  delete solution;
}

TEST_F(q21, sample_input02) {
  solution = new Solution();
  ListNode* list1 = ListNode::generate({});
  ListNode* list2 = ListNode::generate({});
  ListNode* exp = ListNode::generate({});
  ListNode* act = solution->mergeTwoLists(list1, list2);
  EXPECT_LISTNODE_EQ(act, exp);
  ListNode::release(list1, list2, exp, act);
  delete solution;
}

TEST_F(q21, sample_input03) {
  solution = new Solution();
  ListNode* list1 = ListNode::generate({});
  ListNode* list2 = ListNode::generate({0});
  ListNode* exp = ListNode::generate({0});
  ListNode* act = solution->mergeTwoLists(list1, list2);
  EXPECT_LISTNODE_EQ(act, exp);
  ListNode::release(list1, list2, exp, act);
  delete solution;
}