
#ifndef LEETCODE_Q45_H__
#define LEETCODE_Q45_H__
#include <iostream>
#include <vector>

namespace l45 {
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 45.
  *     Jump Game II
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given an array of non-negative integers ‘nums’ , you are initially
  *   positioned at the first index of the array.
  *   
  *   Each element in the array represents your maximum jump length at that
  *   position.
  *   
  *   Your goal is to reach the last index in the minimum number of jumps.
  *   
  *   You can assume that you can always reach the last index.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘1 ≤ nums.length ≤ 10⁴’
  *   • ‘0 ≤ nums[i] ≤ 1000’
  *
*/

class Solution {
 public:
  int jump(vector<int>& nums) {
    int res = 0;
    int cur_max = 0, last = 0;
    for (int i = 0; i < nums.size() && last < nums.size() - 1; ++i) {
      cur_max = max(cur_max, i + nums[i]);
      if (i == last) {
        ++res;
        last = cur_max;
      }
    }
    return res;
  }
};
}  // namespace l45

#endif