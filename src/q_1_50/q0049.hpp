
#ifndef LEETCODE_Q49_H__
#define LEETCODE_Q49_H__
#include <iostream>
#include <map>
#include <string>
#include <vector>

namespace l49 {
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 49. Group Anagrams
  * Given an array of strings strs , group “the
  * anagrams” together. You can return the answer in “any
  * order” .
  * An “Anagram” is a word or phrase formed by
  * rearranging the letters of a different word or phrase,
  * typically using all the original letters exactly
  * once.
  *
  * Constraints:
  * -  1 <= strs.length <= 10^(4) 
  * -  0 <= strs[i].length <= 100 
  * -  strs[i] consists of lowercase English letters.
  *
*/

class Solution {
 public:
  vector<vector<string>> groupAnagrams(vector<string>& strs) {
    map<vector<char>, vector<string>> mapping;
    for (const auto& s : strs) {
      vector<char> key(s.begin(), s.end());
      sort(key.begin(), key.end());
      mapping[key].push_back(s);
    }

    vector<vector<string>> res;
    for (auto it = mapping.begin(); it != mapping.end(); ++it) {
      res.push_back(it->second);
    }
    return res;
  }
};
}  // namespace l49

#endif