#include <gtest/gtest.h>
#include <iostream>
#include <string>
#include <unordered_map>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 3.
 *    Longest Substring Without Repeating Characters
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a string ‘s’ , find the length of the “longest substring”
 *   without repeating characters.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘0 ≤ s.length ≤ 5 × 10⁴’
 *   • ‘s’ consists of English letters, digits, symbols and spaces.
 *
 */

struct q3 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int lengthOfLongestSubstring(string s) {
      int res = 0;
      unordered_map<char, int> last_idx;      int j = 0;
      for (int i = 0; i < s.size(); i++) {
        if (last_idx.count(s[i])) {
          j = max(j, last_idx[s[i]] + 1);
        }
        res = max(res, i - j + 1);
        last_idx[s[i]] = i;
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q3, sample_input01) {
  solution = new Solution();
  string s = "abcabcbb";
  int exp = 3;
  EXPECT_EQ(solution->lengthOfLongestSubstring(s), exp);
  delete solution;
}

TEST_F(q3, sample_input02) {
  solution = new Solution();
  string s = "bbbbb";
  int exp = 1;
  EXPECT_EQ(solution->lengthOfLongestSubstring(s), exp);
  delete solution;
}

TEST_F(q3, sample_input03) {
  solution = new Solution();
  string s = "pwwkew";
  int exp = 3;
  EXPECT_EQ(solution->lengthOfLongestSubstring(s), exp);
  delete solution;
}

TEST_F(q3, sample_input04) {
  solution = new Solution();
  string s = "";
  int exp = 0;
  EXPECT_EQ(solution->lengthOfLongestSubstring(s), exp);
  delete solution;
}