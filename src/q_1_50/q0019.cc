#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/listnode.hpp>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 19.
 *     Remove Nth Node From End of List
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given the ‘head’ of a linked list, remove the ‘nᵗʰ’ node from the end
 *   of the list and return its head.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The number of nodes in the list is ‘sz’ .
 *   • ‘1 ≤ sz ≤ 30’
 *   • ‘0 ≤ Node.val ≤ 100’
 *   • ‘1 ≤ n ≤ sz’
 *
 */

struct q19 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    ListNode *removeNthFromEnd(ListNode *head, int n) {
      ListNode dummy(0, head);
      ListNode *p = &dummy;
      ListNode *fast = &dummy;
      while (n--) {
        fast = fast->next;
      }
      while (fast != nullptr && fast->next != nullptr) {
        fast = fast->next;
        p = p->next;
      }
      p->next = p->next->next;
      return dummy.next;
    }
  };

  class Solution *solution;
};

TEST_F(q19, sample_input01) {
  solution = new Solution();
  ListNode* head = ListNode::generate({1, 2, 3, 4, 5});
  int n = 2;
  ListNode* exp = ListNode::generate({1, 2, 3, 5});
  EXPECT_LISTNODE_EQ(solution->removeNthFromEnd(head, n), exp);
  delete solution;
}

TEST_F(q19, sample_input02) {
  solution = new Solution();
  ListNode* head = ListNode::generate({1});
  int n = 1;
  ListNode* exp = ListNode::generate({});
  EXPECT_LISTNODE_EQ(solution->removeNthFromEnd(head, n), exp);
  delete solution;
}

TEST_F(q19, sample_input03) {
  solution = new Solution();
  ListNode* head = ListNode::generate({1, 2});
  int n = 1;
  ListNode* exp = ListNode::generate({1});
  EXPECT_LISTNODE_EQ(solution->removeNthFromEnd(head, n), exp);
  delete solution;
}