#include <gtest/gtest.h>
#include <iostream>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 28.
 *     Implement strStr()
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Implement <a href="http://www.cplusplus.com/reference/cstring/strstr/"
 *   Return the index of the first occurrence of needle in haystack, or
 *   ‘-1’ if ‘needle’ is not part of ‘haystack’
 *    “Clarification:”
 *   What should we return when ‘needle’ is an empty string? This is a
 *   great question to ask during an
 *   For the purpose of this problem, we will return 0 when ‘needle’ is an
 *   empty string. This is consistent to C's<a
 *   href="http://www.cplusplus.com/reference/cstring/strstr/"
 *   target="_blank">strstr()</a> and Java's<a
 *   com/javase/7/docs/api/java/lang/String.html#indexOf(java.lang.String)"
 *   target="_blank">indexOf()</a>.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘0 ≤ haystack.length, needle.length ≤ 5 × 10⁴’
 *   • ‘haystack’ and ‘needle’ consist of only lower-case English characters.
 *
 */

struct q28 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int strStr(string haystack, string needle) {
      if (needle.empty()) return 0;
      for (int i = 0; i <= (int)haystack.size() - (int)needle.size(); ++i) {
        if (haystack.substr(i, needle.size()) == needle)
          return i;
      }
      return -1;
    }
  };

  class Solution *solution;
};

TEST_F(q28, sample_input01) {
  solution = new Solution();
  string haystack = "hello";
  string needle = "ll";
  int exp = 2;
  EXPECT_EQ(solution->strStr(haystack, needle), exp);
  delete solution;
}

TEST_F(q28, sample_input02) {
  solution = new Solution();
  string haystack = "aaaaa";
  string needle = "bba";
  int exp = -1;
  EXPECT_EQ(solution->strStr(haystack, needle), exp);
  delete solution;
}

TEST_F(q28, sample_input03) {
  solution = new Solution();
  string haystack = "";
  string needle = "";
  int exp = 0;
  EXPECT_EQ(solution->strStr(haystack, needle), exp);
  delete solution;
}