
#ifndef Q1290_UNITTEST_H__
#define Q1290_UNITTEST_H__
#include <gtest/gtest.h>

#include "q1290.hpp"
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1290.
 *       Convert Binary Number in a Linked List to Integer
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given ‘head’ which is a reference node toa singly-linked list. The
 *   value of each node in the linked list is either 0 or 1. The linked
 *   list holds the binary representation of a
 *   Return the “decimal value” of the number in the linked
 *   
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The Linked List is not empty.
 *   • Number of nodeswill not exceed ‘30’ .
 *   • Each node's value is either ‘0’ or ‘1’ .
 *
 */

TEST(q1290, sample_input01) {
  l1290::Solution solver;
  ListNode* head = ListNode::generate({1, 0, 1});
  int exp = 5;
  EXPECT_EQ(solver.getDecimalValue(head), exp);
}

TEST(q1290, sample_input02) {
  l1290::Solution solver;
  ListNode* head = ListNode::generate({0});
  int exp = 0;
  EXPECT_EQ(solver.getDecimalValue(head), exp);
}

TEST(q1290, sample_input03) {
  l1290::Solution solver;
  ListNode* head = ListNode::generate({1});
  int exp = 1;
  EXPECT_EQ(solver.getDecimalValue(head), exp);
}

TEST(q1290, sample_input04) {
  l1290::Solution solver;
  ListNode* head = ListNode::generate({1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0});
  int exp = 18880;
  EXPECT_EQ(solver.getDecimalValue(head), exp);
}

TEST(q1290, sample_input05) {
  l1290::Solution solver;
  ListNode* head = ListNode::generate({0, 0});
  int exp = 0;
  EXPECT_EQ(solver.getDecimalValue(head), exp);
}

#endif