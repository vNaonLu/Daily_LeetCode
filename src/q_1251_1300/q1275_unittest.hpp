
#ifndef Q1275_UNITTEST_H__
#define Q1275_UNITTEST_H__
#include <gtest/gtest.h>

#include "q1275.hpp"
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 1275. Find Winner on a Tic Tac Toe Game
  *
  * Tic-tac-toe is playedbytwo players A and B on
  * a<i>3</i>x<i>3</i>grid.
  * Here are the rules of Tic-Tac-Toe:
  * - Players take turns placing characters into
  * empty squares (" ").
  * - The first player A always places "X"
  * characters, while the second player B always places "O"
  * characters.
  * - "X" and "O" characters are always placed into
  * empty squares, never on filled ones.
  * - The game ends when there are 3 of the same
  * (non-empty) character filling any row, column, or
  * diagonal.
  * - The game also ends if all squares are
  * non-empty.
  * - No more moves can be played if the game is
  * over.
  * Given an array moves where each elementis another
  * array of size 2 corresponding to the row and
  * column of the grid where they mark their respective
  * character in the order in which A and B play.
  * Return the winner of the game if it exists ( A or
  * B ), in case the game ends in a draw return
  * "Draw", if there are still movements to play return
  * "Pending".
  * You can assume that moves is “valid“ (It follows
  * the rules of Tic-Tac-Toe),the grid is initially
  * empty and A will play “first“ .
  *
  * Constraints:
  * -  1 <= moves.length <= 9 
  * -  moves[i].length == 2 
  * -  0 <= moves[i][j] <= 2 
  * - There are no repeated elements on moves .
  * -  moves follow the rules of tic tac toe.
  *
*/

TEST(q1275, sample_input01) {
  vector<vector<int>> moves = {{0, 0}, {2, 0}, {1, 1}, {2, 1}, {2, 2}};
  string exp = "A";
  l1275::Solution solver;
  EXPECT_EQ(solver.tictactoe(moves), exp);
}

TEST(q1275, sample_input02) {
  vector<vector<int>> moves = {{0, 0}, {1, 1}, {0, 1}, {0, 2}, {1, 0}, {2, 0}};
  string exp = "B";
  l1275::Solution solver;
  EXPECT_EQ(solver.tictactoe(moves), exp);
}

TEST(q1275, sample_input03) {
  vector<vector<int>> moves = {{0, 0}, {1, 1}, {2, 0}, {1, 0}, {1, 2}, {2, 1}, {0, 1}, {0, 2}, {2, 2}};
  string exp = "Draw";
  l1275::Solution solver;
  EXPECT_EQ(solver.tictactoe(moves), exp);
}

TEST(q1275, sample_input04) {
  vector<vector<int>> moves = {{0, 0}, {1, 1}};
  string exp = "Pending";
  l1275::Solution solver;
  EXPECT_EQ(solver.tictactoe(moves), exp);
}

#endif