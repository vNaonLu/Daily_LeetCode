
#ifndef Q1293_UNITTEST_H__
#define Q1293_UNITTEST_H__
#include <gtest/gtest.h>

#include "q1293.hpp"
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 1414. Shortest Path in a Grid with Obstacles Elimination
  * You are given an m x n integer matrix grid where
  * each cell is either 0 (empty) or 1 (obstacle). You
  * can move up, down, left, or right from and to an
  * empty cell in “one step” .
  * Return the minimum number of “steps” to walk from
  * the upper left corner (0, 0) to the lower right
  * corner (m - 1, n - 1) given that you can eliminate
  * “at most” k obstacles . If it is not possible to
  * find such walk return -1 .
  *
  * Constraints:
  * -  m == grid.length 
  * -  n == grid[i].length 
  * -  1 <= m, n <= 40 
  * -  1 <= k <= m * n 
  * -  grid[i][j] == 0 “or” 1 
  * -  grid[0][0] == grid[m - 1][n - 1] == 0 
  *
*/

TEST(q1293, sample_input01) {
  vector<vector<int>> grid = {{0, 0, 0},
                              {1, 1, 0},
                              {0, 0, 0},
                              {0, 1, 1},
                              {0, 0, 0}};
  int k = 1;
  int exp = 6;
  l1293::Solution solver;
  EXPECT_EQ(solver.shortestPath(grid, k), exp);
}

TEST(q1293, sample_input02) {
  vector<vector<int>> grid = {{0, 1, 1},
                              {1, 1, 1},
                              {1, 0, 0}};
  int k = 1;
  int exp = -1;
  l1293::Solution solver;
  EXPECT_EQ(solver.shortestPath(grid, k), exp);
}

#endif