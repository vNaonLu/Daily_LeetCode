
#ifndef Q1286_UNITTEST_H__
#define Q1286_UNITTEST_H__
#include <gtest/gtest.h>

#include "q1286.hpp"
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1286.
 *       Iterator for Combination
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Design the ‘CombinationIterator’
 *       -  ‘CombinationIterator(string characters, int combinationLength)’
 *   Initializes the object witha string ‘characters’ of “sorted distinct”
 *   lowercase English letters and a number ‘combinationLength’ as
 *       -  ‘next()’ Returns the next combination of length
 *   ‘combinationLength’ in “lexicographical order”
 *       -  ‘hasNext()’ Returns ‘true’ if and only ifthere exists a next
 *   combination.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ combinationLength ≤characters.length ≤ 15’
 *   • All the characters of ‘characters’ are “unique” .
 *   • At most ‘10⁴’ calls will be made to ‘next’ and ‘hasNext’ .
 *   • It's guaranteed that allcallsof the function ‘next’ are valid.
 *
 */

TEST(q1286, sample_input01) {
  l1286::CombinationIterator *combination_iterator = new l1286::CombinationIterator("abc", 2);
  EXPECT_EQ(combination_iterator->next(), "ab");
  EXPECT_EQ(combination_iterator->hasNext(), true);
  EXPECT_EQ(combination_iterator->next(), "ac");
  EXPECT_EQ(combination_iterator->hasNext(), true);
  EXPECT_EQ(combination_iterator->next(), "bc");
  EXPECT_EQ(combination_iterator->hasNext(), false);
  delete combination_iterator;
}

#endif