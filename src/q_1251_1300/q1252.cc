#include <algorithm>
#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1252.
 *       Cells with Odd Values in a Matrix
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   There is an ‘m x n’ matrix that is initialized to all ‘0’ 's. There is
 *   also a 2D array ‘indices’ where each ‘indices[i] = [rᵢ, cᵢ]’
 *   represents a “0-indexed location” to perform some increment operations
 *   on the
 *   For each location ‘indices[i]’ , do “both” of the
 *       1. Increment “all” the cells on row ‘rᵢ’
 *       2. Increment “all” the cells on column ‘cᵢ’
 *   Given ‘m’ , ‘n’ , and ‘indices’ , return “the “number of odd-valued
 *   cells” in the matrix after applying the increment to all locations in
 *   ” ‘indices’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ m, n ≤ 50’
 *   • ‘1 ≤ indices.length ≤ 100’
 *   • ‘0 ≤ rᵢ < m’
 *   • ‘0 ≤ cᵢ < n’
 *
 */

struct q1252 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int oddCells(int m, int n, vector<vector<int>> &indices) {
      auto inc_row = vector<int>(m, 0);
      auto inc_col = vector<int>(n, 0);
      for (auto &v : indices) {
        ++inc_row[v[0]];
        ++inc_col[v[1]];
      }
      auto row_odd = count_if(inc_row.begin(), inc_row.end(),
                              [](auto x) { return x & 1; });
      auto col_odd = count_if(inc_col.begin(), inc_col.end(),
                              [](auto x) { return x & 1; });
      return row_odd * (n - col_odd) + col_odd * (m - row_odd);
    }
  };

  class Solution *solution;
};

TEST_F(q1252, sample_input01) {
  solution                    = new Solution();
  int                 m       = 2;
  int                 n       = 3;
  vector<vector<int>> indices = {
      {0, 1},
      {1, 1}
  };
  int exp = 6;
  int act = solution->oddCells(m, n, indices);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1252, sample_input02) {
  solution                    = new Solution();
  int                 m       = 2;
  int                 n       = 2;
  vector<vector<int>> indices = {
      {1, 1},
      {0, 0}
  };
  int exp = 0;
  int act = solution->oddCells(m, n, indices);
  EXPECT_EQ(act, exp);
  delete solution;
}