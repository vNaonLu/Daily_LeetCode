#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1260.
 *       Shift 2D Grid
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a 2D ‘grid’ of size ‘m x n’ and an integer ‘k’ . You need to
 *   shift the ‘grid’  ‘k’
 *   In one shift
 *       - Element at ‘grid[i][j]’ moves to ‘grid[i][j + 1]’
 *       - Element at ‘grid[i][n - 1]’ moves to ‘grid[i + 1][0]’
 *       - Element at ‘grid[m- 1][n - 1]’ moves to ‘grid[0][0]’
 *   Return the “2D grid” after applying shift operation ‘k’ times.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘m =grid.length’
 *   • ‘n =grid[i].length’
 *   • ‘1 ≤ m ≤ 50’
 *   • ‘1 ≤ n ≤ 50’
 *   • ‘-1000 ≤ grid[i][j] ≤ 1000’
 *   • ‘0 ≤ k ≤ 100’
 *
 */

struct q1260 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    vector<vector<int>> shiftGrid(vector<vector<int>>& grid, int k) {
      int m = grid.size(), n = grid[0].size();
      int prod = m * n;
      vector<vector<int>> res(m, vector<int>(n));
      for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
          int idx = (i * n + j + k) % prod;
          res[idx / n][idx % n] = grid[i][j];
        }
      }

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1260, sample_input01) {
  solution = new Solution();
  vector<vector<int>> grid = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
  int k = 1;
  vector<vector<int>> exp = {{9, 1, 2}, {3, 4, 5}, {6, 7, 8}};
  vector<vector<int>> act = solution->shiftGrid(grid, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1260, sample_input02) {
  solution = new Solution();
  vector<vector<int>> grid = {{3, 8, 1, 9}, {19, 7, 2, 5}, {4, 6, 11, 10}, {12, 0, 21, 13}};
  int k = 4;
  vector<vector<int>> exp = {{12, 0, 21, 13}, {3, 8, 1, 9}, {19, 7, 2, 5}, {4, 6, 11, 10}};
  vector<vector<int>> act = solution->shiftGrid(grid, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1260, sample_input03) {
  solution = new Solution();
  vector<vector<int>> grid = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
  int k = 9;
  vector<vector<int>> exp = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
  vector<vector<int>> act = solution->shiftGrid(grid, k);
  EXPECT_EQ(act, exp);
  delete solution;
}