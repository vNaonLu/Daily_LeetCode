
#ifndef LEETCODE_Q1290_H__
#define LEETCODE_Q1290_H__
#include <iostream>
#include <leetcode/listnode.hpp>

namespace l1290 {
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1290.
 *       Convert Binary Number in a Linked List to Integer
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given ‘head’ which is a reference node toa singly-linked list. The
 *   value of each node in the linked list is either 0 or 1. The linked
 *   list holds the binary representation of a
 *   Return the “decimal value” of the number in the linked
 *   
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The Linked List is not empty.
 *   • Number of nodeswill not exceed ‘30’ .
 *   • Each node's value is either ‘0’ or ‘1’ .
 *
 */

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
 public:
  int getDecimalValue(ListNode* head) {
    int res = 0;
    while (nullptr != head) {
      res <<= 1;
      if (head->val == 1) res |= 1;
      head = head->next;
    }
    return res;
  }
};
}  // namespace l1290

#endif