
#ifndef LEETCODE_Q1275_H__
#define LEETCODE_Q1275_H__
#include <iostream>
#include <string>
#include <vector>

namespace l1275 {
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 1275. Find Winner on a Tic Tac Toe Game
  *
  * Tic-tac-toe is playedbytwo players A and B on
  * a<i>3</i>x<i>3</i>grid.
  * Here are the rules of Tic-Tac-Toe:
  * - Players take turns placing characters into
  * empty squares (" ").
  * - The first player A always places "X"
  * characters, while the second player B always places "O"
  * characters.
  * - "X" and "O" characters are always placed into
  * empty squares, never on filled ones.
  * - The game ends when there are 3 of the same
  * (non-empty) character filling any row, column, or
  * diagonal.
  * - The game also ends if all squares are
  * non-empty.
  * - No more moves can be played if the game is
  * over.
  * Given an array moves where each elementis another
  * array of size 2 corresponding to the row and
  * column of the grid where they mark their respective
  * character in the order in which A and B play.
  * Return the winner of the game if it exists ( A or
  * B ), in case the game ends in a draw return
  * "Draw", if there are still movements to play return
  * "Pending".
  * You can assume that moves is “valid“ (It follows
  * the rules of Tic-Tac-Toe),the grid is initially
  * empty and A will play “first“ .
  *
  * Constraints:
  * -  1 <= moves.length <= 9 
  * -  moves[i].length == 2 
  * -  0 <= moves[i][j] <= 2 
  * - There are no repeated elements on moves .
  * -  moves follow the rules of tic tac toe.
  *
*/
class Solution {
 private:
  bool winner(const vector<vector<int>> &b, const int &r, const int &c) {
    if (b[r][0] == b[r][1] && b[r][1] == b[r][2]) return true;
    if (b[0][c] == b[1][c] && b[1][c] == b[2][c]) return true;
    if (c + r == 2 && b[2][0] == b[1][1] && b[1][1] == b[0][2]) return true;
    if (c == r && b[0][0] == b[1][1] && b[1][1] == b[2][2]) return true;
    return false;
  }

 public:
  string tictactoe(vector<vector<int>> &moves) {
    vector<vector<int>> board(3, vector<int>(3, 0));
    int val = 1;
    for (int i = 0; i < moves.size(); ++i) {
      board[moves[i][0]][moves[i][1]] = val;
      if (winner(board, moves[i][0], moves[i][1])) {
        return val == 1 ? "A" : "B";
      }
      val *= -1;
    }
    return moves.size() == 9 ? "Draw" : "Pending";
  }
};
}  // namespace l1275
#endif