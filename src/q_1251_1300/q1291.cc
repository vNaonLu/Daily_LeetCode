#include <gtest/gtest.h>
#include <algorithm>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1291.
 *       Sequential Digits
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Aninteger has “sequential digits” if and only if each digit in the
 *   number is one more than the previous
 *   Return a “sorted” list of all the integersin the range ‘[low, high]’
 *   inclusive that have sequential digits.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘10 ≤ low ≤ high ≤ 10^9’
 *
 */

struct q1291 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    vector<int> sequentialDigits(int low, int high) {
      vector<int> res;
      int         cur = 0;
      for (int i = 1; i < 10; ++i) {
        cur = i;
        for (int j = i + 1; j < 10; ++j) {
          cur = cur * 10 + j;
          if (cur <= high and cur >= low) {
            res.emplace_back(cur);
          }
        }
      }
      sort(res.begin(), res.end());
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1291, sample_input01) {
  solution = new Solution();
  int low = 100;
  int high = 300;
  vector<int> exp = {123, 234};
  vector<int> act = solution->sequentialDigits(low, high);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1291, sample_input02) {
  solution = new Solution();
  int low = 1000;
  int high = 13000;
  vector<int> exp = {1234, 2345, 3456, 4567, 5678, 6789, 12345};
  vector<int> act = solution->sequentialDigits(low, high);
  EXPECT_EQ(act, exp);
  delete solution;
}