
#ifndef Q1254_UNITTEST_H__
#define Q1254_UNITTEST_H__
#include <gtest/gtest.h>

#include "q1254.hpp"
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1254.
 *       Number of Closed Islands
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a 2D ‘grid’ consists of ‘0s’ (land)and ‘1s’ (water). An “island”
 *   is a maximal 4-directionally connected group of ‘<font
 *   face="monospace">0</font>s’ and a “closed island” is an island
 *   “totally” (all left, top, right, bottom) surrounded by ‘1s.’
 *   Return the number of “closed islands” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ grid.length, grid[0].length ≤ 100’
 *   • ‘0 ≤ grid[i][j] ≤1’
 *
 */

TEST(q1254, sample_input01) {
  l1254::Solution solver;
  vector<vector<int>> grid = {{1, 1, 1, 1, 1, 1, 1, 0}, {1, 0, 0, 0, 0, 1, 1, 0}, {1, 0, 1, 0, 1, 1, 1, 0}, {1, 0, 0, 0, 0, 1, 0, 1}, {1, 1, 1, 1, 1, 1, 1, 0}};
  int exp = 2;
  EXPECT_EQ(solver.closedIsland(grid), exp);
}

TEST(q1254, sample_input02) {
  l1254::Solution solver;
  vector<vector<int>> grid = {{0, 0, 1, 0, 0}, {0, 1, 0, 1, 0}, {0, 1, 1, 1, 0}};
  int exp = 1;
  EXPECT_EQ(solver.closedIsland(grid), exp);
}

TEST(q1254, sample_input03) {
  l1254::Solution solver;
  vector<vector<int>> grid = {{1, 1, 1, 1, 1, 1, 1}, {1, 0, 0, 0, 0, 0, 1}, {1, 0, 1, 1, 1, 0, 1}, {1, 0, 1, 0, 1, 0, 1}, {1, 0, 1, 1, 1, 0, 1}, {1, 0, 0, 0, 0, 0, 1}, {1, 1, 1, 1, 1, 1, 1}};
  int exp = 2;
  EXPECT_EQ(solver.closedIsland(grid), exp);
}

#endif