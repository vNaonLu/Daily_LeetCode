
#ifndef LEETCODE_Q74_H__
#define LEETCODE_Q74_H__
#include <iostream>
#include <vector>

namespace l74 {
using namespace std;

/**
  * this file is generated by gquestion.py

  *
  * 74. Search a 2D Matrix
  *
  * Write an efficient algorithm that searches for a
  * value in an m x n matrix. This matrix has the
  * following properties:
  * - Integers in each row are sorted from left to
  * right.
  * - The first integer of each row is greater than
  * the last integer of the previous row.
  *
  * Constraints:
  * -  m == matrix.length 
  * -  n == matrix[i].length 
  * -  1 <= m, n <= 100 
  * -  -10^(4) <= matrix[i][j], target <= 10^(4) 
  *
*/
class Solution {
 public:
  bool searchMatrix(vector<vector<int>>& matrix, int target) {
    for (int i = 0; i < matrix.size(); ++i) {
      if (target > matrix[i].back()) continue;
      if (target < matrix[i].front()) continue;
      int l = 0, r = matrix[i].size() - 1;
      while (l <= r) {
        int mid = l + (r - l) / 2;
        if (target == matrix[i][mid]) return true;

        if (target < matrix[i][mid])
          r = mid - 1;
        else
          l = mid + 1;
      }
    }
    return false;
  }
};
}  // namespace l74
#endif