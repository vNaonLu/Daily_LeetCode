#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 1887.
 *       Reduction Operations to Make the Array Elements Equal
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an integer array ‘nums’ , your goal is to make all elements in
 *   ‘nums’ equal. To complete one operation, follow these
 *       1. Find the “largest” value in ‘nums’ . Let its index be ‘i’ (
 *   “0-indexed” ) and its value be ‘largest’ . If there are multiple
 *   elements with the largest value, pick the smallest ‘i’
 *       2. Find the “next largest” value in ‘nums’ “strictly smaller” than
 *   ‘largest’ . Let its value be ‘nextLargest’
 *       3. Reduce ‘nums[i]’ to ‘nextLargest’
 *   Return “the number of operations to make all elements in ” ‘nums’ “
 *   equal” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 5 × 10⁴’
 *   • ‘1 ≤ nums[i] ≤ 5 × 10⁴’
 *
 */

struct q1887 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int reductionOperations(vector<int>& nums) {
      map<int, int> freq;
      for (const auto& x : nums) ++freq[x];
      int size = freq.size() - 1;
      int presum = 0;
      int res = 0;
      for (auto it = freq.rbegin(); it != freq.rend() && size; ++it, --size) {
        presum += it->second;
        res += presum;
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1887, sample_input01) {
  solution = new Solution();
  vector<int> nums = {5, 1, 3};
  int exp = 3;
  EXPECT_EQ(solution->reductionOperations(nums), exp);
  delete solution;
}

TEST_F(q1887, sample_input02) {
  solution = new Solution();
  vector<int> nums = {1, 1, 1};
  int exp = 0;
  EXPECT_EQ(solution->reductionOperations(nums), exp);
  delete solution;
}

TEST_F(q1887, sample_input03) {
  solution = new Solution();
  vector<int> nums = {1, 1, 2, 2, 3};
  int exp = 4;
  EXPECT_EQ(solution->reductionOperations(nums), exp);
  delete solution;
}