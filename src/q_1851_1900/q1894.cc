#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1894.
 *       Find the Student that Will Replace the Chalk
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   There are ‘n’ students in a class numbered from ‘0’ to ‘n - 1’ . The
 *   teacher will give each student a problem starting with the student
 *   number ‘0’ , then the student number ‘1’ , and so on until the teacher
 *   reaches the student number ‘n - 1’ . After that, the teacher will
 *   restart the process, starting with the student number ‘0’
 *   You are given a “0-indexed” integer array ‘chalk’ and an integer ‘k’ .
 *   There are initially ‘k’ pieces of chalk. When the student number ‘i’
 *   is given a problem to solve, they will use ‘chalk[i]’ pieces of chalk
 *   to solve that problem. However, if the current number of chalk pieces
 *   is “strictly less” than ‘chalk[i]’ , then the student number ‘i’ will
 *   be asked to “replace” the
 *   Return “the “index” of the student that will “replace” the chalk” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘chalk.length = n’
 *   • ‘1 ≤ n ≤ 10⁵’
 *   • ‘1 ≤ chalk[i] ≤ 10⁵’
 *   • ‘1 ≤ k ≤ 10⁹’
 *
 */

struct q1894 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int chalkReplacer(vector<int> &chalk, int k) {
      vector<int64_t> accum(chalk.begin(), chalk.end());
      for (auto it = accum.begin() + 1; it != accum.end(); ++it) {
        *it += *(it - 1);
      }
      k %= accum.back();

      return upper_bound(accum.begin(), accum.end(), k) - accum.begin();
    }
  };

  class Solution *solution;
};

TEST_F(q1894, sample_input01) {
  solution = new Solution();
  vector<int> chalk = {5, 1, 5};
  int k = 22;
  int exp = 0;
  int act = solution->chalkReplacer(chalk, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1894, sample_input02) {
  solution = new Solution();
  vector<int> chalk = {3, 4, 1, 2};
  int k = 25;
  int exp = 1;
  int act = solution->chalkReplacer(chalk, k);
  EXPECT_EQ(act, exp);
  delete solution;
}