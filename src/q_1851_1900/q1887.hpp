
#ifndef LEETCODE_Q1887_H__
#define LEETCODE_Q1887_H__
#include <iostream>
#include <map>
#include <vector>

namespace l1887 {
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 1887.
  *       Reduction Operations to Make the Array Elements Equal
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given an integer array ‘nums’ , your goal is to make all elements in
  *   ‘nums’ equal. To complete one operation, follow these.
  *   
  *   - Find the “largest” value in ‘nums’ . Let its index be ‘i’ (
  *   “0-indexed” ) and its value be ‘largest’ . If there are multiple
  *   elements with the largest value, pick the smallest ‘i’.
  *   
  *   - Find the “next largest” value in ‘nums’ “strictly smaller” than
  *   ‘largest’ . Let its value be ‘nextLargest’.
  *   
  *   - Reduce ‘nums[i]’ to ‘nextLargest’.
  *   
  *   Return “the number of operations to make all elements in ” ‘nums’ “
  *   equal”.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘1 ≤ nums.length ≤ 5 × 10⁴’
  *   • ‘1 ≤ nums[i] ≤ 5 × 10⁴’
  *
*/

class Solution {
 public:
  int reductionOperations(vector<int>& nums) {
    map<int, int> freq;
    for (const auto& x : nums) ++freq[x];
    int size = freq.size() - 1;
    int presum = 0;
    int res = 0;
    for (auto it = freq.rbegin(); it != freq.rend() && size; ++it, --size) {
      presum += it->second;
      res += presum;
    }
    return res;
  }
};
}  // namespace l1887

#endif