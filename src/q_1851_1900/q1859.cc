#include <gtest/gtest.h>
#include <iostream>
#include <map>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1859.
 *       Sorting the Sentence
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   A “sentence” is a list of words that are separated by a single space
 *   with no leading or trailing spaces. Each word consists of lowercase
 *   and uppercase English
 *   A sentence can be “shuffled” by appending the “1-indexed word
 *   position” to each word then rearranging the words in the
 *       - For example, the sentence ‘'This is a sentence'’ can be shuffled
 *   as ‘'sentence4 a3 is2 This1'’ or ‘'is2 sentence4 This1 a3'’
 *   Given a “shuffled sentence” ‘s’ containing no more than ‘9’ words,
 *   reconstruct and return “the original sentence”
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘2 ≤ s.length ≤ 200’
 *   • ‘s’ consists of lowercase and uppercase English letters, spaces, and
 * digits from ‘1’ to ‘9’ . • The number of words in ‘s’ is between ‘1’ and ‘9’
 * . • The words in ‘s’ are separated by a single space. • ‘s’ contains no
 * leading or trailing spaces.
 *
 */

struct q1859 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  private:
    template <typename It>
    It toNotSpace(It beg, It end) {
      while (beg != end && *beg == ' ') {
        ++beg;
      }
      return beg;
    }

    template <typename It>
    It getSpace(It beg, It end) {
      while (beg != end && *beg != ' ') {
        ++beg;
      }
      return beg;
    }

    map<int, string> toDict(string const &s) {
      auto beg = toNotSpace(s.begin(), s.end());
      auto res = map<int, string>();
      while (beg != s.end()) {
        auto space = getSpace(beg, s.end());
        auto word  = string(beg, space);
        auto num   = word.back() - '0';
        word.pop_back();
        res.emplace(num, std::move(word));
        beg = toNotSpace(space, s.end());
      }
      return res;
    }

  public:
    string sortSentence(string s) {
      auto dict = toDict(s);
      auto res  = string("");
      for (auto &x : dict) {
        if (!res.empty()) {
          res += " ";
        }
        res += std::move(x.second);
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1859, sample_input01) {
  solution   = new Solution();
  string s   = "is2 sentence4 This1 a3";
  string exp = "This is a sentence";
  string act = solution->sortSentence(s);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1859, sample_input02) {
  solution   = new Solution();
  string s   = "Myself2 Me1 I4 and3";
  string exp = "Me Myself and I";
  string act = solution->sortSentence(s);
  EXPECT_EQ(act, exp);
  delete solution;
}
