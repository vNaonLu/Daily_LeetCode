
#ifndef Q1887_UNITTEST_H__
#define Q1887_UNITTEST_H__
#include <gtest/gtest.h>

#include "q1887.hpp"
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 1887.
  *       Reduction Operations to Make the Array Elements Equal
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given an integer array ‘nums’ , your goal is to make all elements in
  *   ‘nums’ equal. To complete one operation, follow these.
  *   
  *   - Find the “largest” value in ‘nums’ . Let its index be ‘i’ (
  *   “0-indexed” ) and its value be ‘largest’ . If there are multiple
  *   elements with the largest value, pick the smallest ‘i’.
  *   
  *   - Find the “next largest” value in ‘nums’ “strictly smaller” than
  *   ‘largest’ . Let its value be ‘nextLargest’.
  *   
  *   - Reduce ‘nums[i]’ to ‘nextLargest’.
  *   
  *   Return “the number of operations to make all elements in ” ‘nums’ “
  *   equal”.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘1 ≤ nums.length ≤ 5 × 10⁴’
  *   • ‘1 ≤ nums[i] ≤ 5 × 10⁴’
  *
*/

TEST(q1887, sample_input01) {
  l1887::Solution solver;
  vector<int> nums = {5, 1, 3};
  int exp = 3;
  EXPECT_EQ(solver.reductionOperations(nums), exp);
}

TEST(q1887, sample_input02) {
  l1887::Solution solver;
  vector<int> nums = {1, 1, 1};
  int exp = 0;
  EXPECT_EQ(solver.reductionOperations(nums), exp);
}

TEST(q1887, sample_input03) {
  l1887::Solution solver;
  vector<int> nums = {1, 1, 2, 2, 3};
  int exp = 4;
  EXPECT_EQ(solver.reductionOperations(nums), exp);
}

#endif