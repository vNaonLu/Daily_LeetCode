
#ifndef Q1881_UNITTEST_H__
#define Q1881_UNITTEST_H__
#include <gtest/gtest.h>

#include "q1881.hpp"
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1881.
 *       Maximum Value after Insertion
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given a very large integer ‘n’ , represented as a
 *   string,​​​​​​ and an integer digit ‘x’ . The digits in ‘n’ and the
 *   digit ‘x’ are in the “inclusive” range ‘[1, 9]’ , and ‘n’ may
 *   represent a “negative”
 *   You want to “maximize ” ‘n’ “'s numerical value” by inserting ‘x’
 *   anywhere in the decimal representation of ‘n’ ​​​​​​. You “cannot”
 *   insert ‘x’ to the left of the negative
 *       - For example, if ‘n = 73’ and ‘x = 6’ , it would be best to
 *   insert it between ‘7’ and ‘3’ , making ‘n = 763’
 *       - If ‘n = -55’ and ‘x = 2’ , it would be best to insert it before
 *   the first ‘5’ , making ‘n = -255’
 *   Return “a string representing the “maximum” value of ” ‘n’ “​​​​​​
 *   after the insertion” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ n.length ≤ 10⁵’
 *   • ‘1 ≤ x ≤ 9’
 *   • The digits in ‘n’ ​​​ are in the range ‘[1, 9]’ .
 *   • ‘n’ is a valid representation of an integer.
 *   • In the case of a negative ‘n’ ,​​​​​​ it will begin with ‘'-'’ .
 *
 */

TEST(q1881, sample_input01){
  l1881::Solution solver;
  string n = "99";
  int x = 9;
  string exp = "999";
  EXPECT_EQ(solver.maxValue(n, x), exp);
}

TEST(q1881, sample_input02) {
  l1881::Solution solver;
  string n = "-13";
  int x = 2;
  string exp = "-123";
  EXPECT_EQ(solver.maxValue(n, x), exp);
}

TEST(q1881, input01) {
  l1881::Solution solver;
  string n = "469975787943862651173569913153377";
  int x = 3;
  string exp = "4699757879438632651173569913153377";
  EXPECT_EQ(solver.maxValue(n, x), exp);
}

#endif