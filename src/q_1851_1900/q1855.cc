#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1855.
 *       Maximum Distance Between a Pair of Values
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given two “non-increasing 0-indexed ” integer arrays ‘nums1’
 *   ​​​​​​ and ‘nums2’
 *   A pair of indices ‘(i, j)’ , where ‘0 ≤ i < nums1.length’ and ‘0 ≤ j <
 *   nums2.length’ , is “valid” if both ‘i ≤ j’ and ‘nums1[i] ≤ nums2[j]’ .
 *   The “distance” of the pair is ‘j - i’
 *   Return “the “maximum distance” of any “valid” pair ” ‘(i, j)’ “. If
 *   there are no valid pairs, return ” ‘0’
 *   An array ‘arr’ is “non-increasing” if ‘arr[i-1] ≥ arr[i]’ for every ‘1
 *   ≤ i < arr.length’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums1.length, nums2.length ≤ 10⁵’
 *   • ‘1 ≤ nums1[i], nums2[j] ≤ 10⁵’
 *   • Both ‘nums1’ and ‘nums2’ are “non-increasing” .
 *
 */

struct q1855 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int maxDistance(vector<int>& nums1, vector<int>& nums2) {
      int res = 0;
      for (int i = 0; i < nums1.size(); ++i) {
        auto curr = nums1[i];
        int l = i, r = nums2.size() - 1;
        while (l <= r) {
          int m = l + (r - l) / 2;
          if (nums2[m] < curr) {
            r = m - 1;
          } else {
            l = m + 1;
          }
        }
        res = max(res, r - i);
      }

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1855, sample_input01) {
  solution = new Solution();
  vector<int> nums1 = {55, 30, 5, 4, 2};
  vector<int> nums2 = {100, 20, 10, 10, 5};
  int exp = 2;
  int act = solution->maxDistance(nums1, nums2);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1855, sample_input02) {
  solution = new Solution();
  vector<int> nums1 = {2, 2, 2};
  vector<int> nums2 = {10, 10, 1};
  int exp = 1;
  int act = solution->maxDistance(nums1, nums2);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1855, sample_input03) {
  solution = new Solution();
  vector<int> nums1 = {30, 29, 19, 5};
  vector<int> nums2 = {25, 25, 25, 25, 25};
  int exp = 2;
  int act = solution->maxDistance(nums1, nums2);
  EXPECT_EQ(act, exp);
  delete solution;
}