
#ifndef LEETCODE_Q337_H__
#define LEETCODE_Q337_H__
#include <iostream>
#include <leetcode/treenode.hpp>
#include <unordered_map>

namespace l337 {
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 337.
 *      House Robber III
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   The thief has found himself a new place for his thievery again. There
 *   is only one entrance to this area, called ‘root’
 *   Besides the ‘root’ , each house has one and only one parent house.
 *   After a tour, the smart thief realized that all houses in this place
 *   form a binary tree. It will automatically contact the police if “two
 *   directly-linked houses were broken into on the same night”
 *   Given the ‘root’ of the binary tree, return “the maximum amount of
 *   money the thief can rob “without alerting the police” ” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The number of nodes in the tree is in the range ‘[1, 10⁴]’ .
 *   • ‘0 ≤ Node.val ≤ 10⁴’
 *
 */

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
 private:
  int robRec(TreeNode* node, unordered_map<TreeNode*, int>& mem) {
    if (node == nullptr) {
      return 0;
    }

    if (mem.count(node) != 0) {
      return mem[node];
    }

    int maxWithNode = node->val;
    if (node->left != nullptr) {
      maxWithNode += robRec(node->left->left, mem) + robRec(node->left->right, mem);
    }
    if (node->right != nullptr) {
      maxWithNode += robRec(node->right->left, mem) + robRec(node->right->right, mem);
    }

    int maxWithoutNode = robRec(node->left, mem) + robRec(node->right, mem);

    return mem[node] = max(maxWithNode, maxWithoutNode);
  }

 public:
  int rob(TreeNode* root) {
    unordered_map<TreeNode*, int> mem;
    return robRec(root, mem);
  }
};
}  // namespace l337

#endif