#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 322.
 *      Coin Change
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an integer array ‘coins’ representing coins of different
 *   denominations and an integer ‘amount’ representing a total amount of
 *   Return “the fewest number of coins that you need to make up that
 *   amount” . If that amount of money cannot be made up by any combination
 *   of the coins, return ‘-1’
 *   You may assume that you have an infinite number of each kind of coin.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ coins.length ≤ 12’
 *   • ‘1 ≤ coins[i] ≤ 2³¹ - 1’
 *   • ‘0 ≤ amount ≤ 10⁴’
 *
 */

struct q322 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int coinChange(vector<int>& coins, int amount) {
      vector<int> dp(amount + 1, amount + 1);
      dp[0] = 0;
      for (const auto& c : coins) {
        for (int x = c; x < dp.size(); ++x) {
          dp[x] = min(dp[x], 1 + dp[x - c]);
        }
      }
      return dp.back() == amount + 1 ? -1 : dp.back();
    }
  };

  class Solution *solution;
};

TEST_F(q322, sample_input01) {
  solution = new Solution();
  vector<int> coins = {1, 2, 5};
  int amount = 11;
  int exp = 3;
  EXPECT_EQ(solution->coinChange(coins, amount), exp);
  delete solution;
}

TEST_F(q322, sample_input02) {
  solution = new Solution();
  vector<int> coins = {2};
  int amount = 3;
  int exp = -1;
  EXPECT_EQ(solution->coinChange(coins, amount), exp);
  delete solution;
}

TEST_F(q322, sample_input03) {
  solution = new Solution();
  vector<int> coins = {1};
  int amount = 0;
  int exp = 0;
  EXPECT_EQ(solution->coinChange(coins, amount), exp);
  delete solution;
}

TEST_F(q322, sample_input04) {
  solution = new Solution();
  vector<int> coins = {1};
  int amount = 1;
  int exp = 1;
  EXPECT_EQ(solution->coinChange(coins, amount), exp);
  delete solution;
}

TEST_F(q322, sample_input05) {
  solution = new Solution();
  vector<int> coins = {1};
  int amount = 2;
  int exp = 2;
  EXPECT_EQ(solution->coinChange(coins, amount), exp);
  delete solution;
}