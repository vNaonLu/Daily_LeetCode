#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 315.
 *      Count of Smaller Numbers After Self
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an integer array ‘nums’ and you have to return a new
 *   ‘counts’ array. The ‘counts’ array has the property where ‘counts[i]’
 *   is the number of smaller elements to the right of ‘nums[i]’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 10⁵’
 *   • ‘-10⁴ ≤ nums[i] ≤ 10⁴’
 *
 */

struct q315 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    void merge_sort(vector<pair<int, int>> &a, int beg, int end, vector<int> &res) {
      if (beg >= end) return;

      int mid = beg + (end - beg) / 2;

      merge_sort(a, beg, mid, res);
      merge_sort(a, mid + 1, end, res);

      vector<pair<int, int>> temp;

      int left = beg,
          right = mid + 1,
          count = 0;
      while (left <= mid && right <= end) {
        if (a[left].first > a[right].first) {
          temp.emplace_back(a[right++]);
          ++count;
        } else {
          res[a[left].second] += count;
          temp.emplace_back(a[left++]);
        }
      }

      while (left <= mid) {
        res[a[left].second] += count;
        temp.emplace_back(a[left++]);
      }

      while (right <= end) {
        temp.emplace_back(a[right++]);
      }

      for (const auto &x : temp) {
        a[beg++] = x;
      }
    }

   public:
    vector<int> countSmaller(vector<int> &nums) {
      vector<int>            res(nums.size(), 0);
      vector<pair<int, int>> nums_pair;
      for (int i = 0; i < nums.size(); ++i) {
        nums_pair.emplace_back(nums[i], i);
      }
      merge_sort(nums_pair, 0, nums.size() - 1, res);
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q315, sample_input01) {
  solution = new Solution();
  vector<int> nums = {5, 2, 6, 1};
  vector<int> exp = {2, 1, 1, 0};
  vector<int> act = solution->countSmaller(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q315, sample_input02) {
  solution = new Solution();
  vector<int> nums = {-1};
  vector<int> exp = {0};
  vector<int> act = solution->countSmaller(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q315, sample_input03) {
  solution = new Solution();
  vector<int> nums = {-1, -1};
  vector<int> exp = {0, 0};
  vector<int> act = solution->countSmaller(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}