
#ifndef LEETCODE_Q347_H__
#define LEETCODE_Q347_H__
#include <iostream>
#include <set>
#include <unordered_map>
#include <vector>

namespace l347 {
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 347.
  *      Top K Frequent Elements
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given an integer array ‘nums’ and an integer ‘k’ , return “the” ‘k’
  *   “most frequent elements” . You may return the answer in “any order”.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘1 ≤ nums.length ≤ 10⁵’
  *   • ‘k’ is in the range ‘[1, the number of unique elements in the array]’ .
  *   • It is “guaranteed” that the answer is “unique” .
  *
*/

class Solution {
 public:
  vector<int> topKFrequent(vector<int>& nums, int k) {
    unordered_map<int, int> cnt;
    for (const auto& n : nums) ++cnt[n];
    set<pair<int, int>> ordered;
    for (auto it = cnt.begin(); it != cnt.end(); ++it) {
      ordered.insert(make_pair(it->second, it->first));
    }
    vector<int> res;
    for (auto it = ordered.rbegin(); it != ordered.rend(); ++it) {
      res.push_back((*it).second);
      if (res.size() == k) break;
    }
    return res;
  }
};
}  // namespace l347

#endif