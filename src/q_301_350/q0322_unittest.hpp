
#ifndef Q322_UNITTEST_H__
#define Q322_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0322.hpp"
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 322.
  *      Coin Change
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   You are given an integer array ‘coins’ representing coins of different
  *   denominations and an integer ‘amount’ representing a total amount of
  *   money.
  *   
  *   Return “the fewest number of coins that you need to make up that
  *   amount” . If that amount of money cannot be made up by any combination
  *   of the coins, return ‘-1’.
  *   
  *   You may assume that you have an infinite number of each kind of coin.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘1 ≤ coins.length ≤ 12’
  *   • ‘1 ≤ coins[i] ≤ 2³¹ - 1’
  *   • ‘0 ≤ amount ≤ 10⁴’
  *
*/

TEST(q322, sample_input01) {
  l322::Solution solver;
  vector<int> coins = {1, 2, 5};
  int amount = 11;
  int exp = 3;
  EXPECT_EQ(solver.coinChange(coins, amount), exp);
}

TEST(q322, sample_input02) {
  l322::Solution solver;
  vector<int> coins = {2};
  int amount = 3;
  int exp = -1;
  EXPECT_EQ(solver.coinChange(coins, amount), exp);
}

TEST(q322, sample_input03) {
  l322::Solution solver;
  vector<int> coins = {1};
  int amount = 0;
  int exp = 0;
  EXPECT_EQ(solver.coinChange(coins, amount), exp);
}

TEST(q322, sample_input04) {
  l322::Solution solver;
  vector<int> coins = {1};
  int amount = 1;
  int exp = 1;
  EXPECT_EQ(solver.coinChange(coins, amount), exp);
}

TEST(q322, sample_input05) {
  l322::Solution solver;
  vector<int> coins = {1};
  int amount = 2;
  int exp = 2;
  EXPECT_EQ(solver.coinChange(coins, amount), exp);
}

#endif