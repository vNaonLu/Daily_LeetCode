
#ifndef Q334_UNITTEST_H__
#define Q334_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0334.hpp"
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 334. Increasing Triplet Subsequence
  * Given an integer array nums , return true if
  * there exists a triple of indices (i, j, k) such that i
  * < j < k and nums[i] < nums[j] < nums[k] . If no
  * such indices exists, return false .
  *
  * Constraints:
  * -  1 <= nums.length <= 5 * 10^(5) 
  * -  -2^(31) <= nums[i] <= 2^(31) - 1 
  *  “Follow up:“ Could you implement a solution that runs in O(n) time complexity and O(1) space complexity?
  *
*/

TEST(q334, sample_input01) {
  vector<int> nums = {1, 2, 3, 4, 5};
  bool exp = true;
  l334::Solution solver;
  EXPECT_EQ(solver.increasingTriplet(nums), exp);
}

TEST(q334, sample_input02) {
  vector<int> nums = {5, 4, 3, 2, 1};
  bool exp = false;
  l334::Solution solver;
  EXPECT_EQ(solver.increasingTriplet(nums), exp);
}

TEST(q334, sample_input03) {
  vector<int> nums = {2, 1, 5, 0, 4, 6};
  bool exp = true;
  l334::Solution solver;
  EXPECT_EQ(solver.increasingTriplet(nums), exp);
}

TEST(q334, input01) {
  vector<int> nums = {20, 100, 10, 12, 5, 13};
  bool exp = true;
  l334::Solution solver;
  EXPECT_EQ(solver.increasingTriplet(nums), exp);
}

TEST(q334, input02) {
  vector<int> nums = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
  bool exp = false;
  l334::Solution solver;
  EXPECT_EQ(solver.increasingTriplet(nums), exp);
}

#endif