
#ifndef Q337_UNITTEST_H__
#define Q337_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0337.hpp"
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 337.
 *      House Robber III
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   The thief has found himself a new place for his thievery again. There
 *   is only one entrance to this area, called ‘root’
 *   Besides the ‘root’ , each house has one and only one parent house.
 *   After a tour, the smart thief realized that all houses in this place
 *   form a binary tree. It will automatically contact the police if “two
 *   directly-linked houses were broken into on the same night”
 *   Given the ‘root’ of the binary tree, return “the maximum amount of
 *   money the thief can rob “without alerting the police” ” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The number of nodes in the tree is in the range ‘[1, 10⁴]’ .
 *   • ‘0 ≤ Node.val ≤ 10⁴’
 *
 */

TEST(q337, sample_input01) {
  l337::Solution solver;
  TreeNode* root = TreeNode::generate({3, 2, 3, NULL_TREENODE, 3, NULL_TREENODE, 1});
  int exp = 7;
  EXPECT_EQ(solver.rob(root), exp);
}

TEST(q337, sample_input02) {
  l337::Solution solver;
  TreeNode* root = TreeNode::generate({3, 4, 5, 1, 3, NULL_TREENODE, 1});
  int exp = 9;
  EXPECT_EQ(solver.rob(root), exp);
}

#endif