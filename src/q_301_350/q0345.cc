#include <gtest/gtest.h>
#include <iostream>
#include <string>
#include <unordered_set>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 345.
 *      Reverse Vowels of a String
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a string ‘s’ , reverse only all the vowels in the string and
 *   return
 *   The vowels are ‘'a'’ , ‘'e'’ , ‘'i'’ , ‘'o'’ , and ‘'u'’ , and they
 *   can appear in both cases.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s.length ≤ 3 × 10⁵’
 *   • ‘s’ consist of “printable ASCII” characters.
 *
 */

struct q345 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    string reverseVowels(string s) {
      auto mp = set<char>{'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};
      auto vowel_pos = vector<int>();
      for (int i = 0; i < s.size(); ++i) {
        if (mp.count(s[i])) {
          vowel_pos.emplace_back(i);
        }
      }

      auto l = 0;
      auto r = int(vowel_pos.size() - 1);

      while (l < r) {
        swap(s[vowel_pos[l++]], s[vowel_pos[r--]]);
      }

      return s;
    }
  };

  class Solution *solution;
};

TEST_F(q345, sample_input01) {
  solution   = new Solution();
  string s   = "hello";
  string exp = "holle";
  string act = solution->reverseVowels(s);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q345, sample_input02) {
  solution   = new Solution();
  string s   = "leetcode";
  string exp = "leotcede";
  string act = solution->reverseVowels(s);
  EXPECT_EQ(act, exp);
  delete solution;
}