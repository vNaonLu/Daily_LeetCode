#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 312.
 *      Burst Balloons
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given ‘n’ balloons, indexed from ‘0’ to ‘n - 1’ . Each balloon
 *   is painted with a number on it represented by an array ‘nums’ . You
 *   are asked to burst all the
 *   If you burst the ‘iᵗʰ’ balloon, you will get ‘nums[i - 1] × nums[i] ×
 *   nums[i + 1]’ coins. If ‘i - 1’ or ‘i + 1’ goes out of bounds of the
 *   array, then treat it as if there is a balloon with a ‘1’ painted on
 *   Return “the maximum coins you can collect by bursting the balloons
 *   wisely” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘n = nums.length’
 *   • ‘1 ≤ n ≤ 500’
 *   • ‘0 ≤ nums[i] ≤ 100’
 *
 */

struct q312 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int maxCoins(vector<int>& nums) {
      int                 n = nums.size() + 2;
      vector<vector<int>> dp(n, vector<int>(n));
      vector<int>         nnums(n, 1);
      int                 i = 0;
      for (auto num : nums) nnums[i++] = num;
      for (int len = 2; len <= n; ++len) {
        for (int i = 0; i <= n - len; ++i) {
          int j = i + len - 1;
          for (int k = i + 1; k < j; ++k)
            dp[i][j] = max(dp[i][j], dp[i][k] + dp[k][j] + nnums[i] * nnums[k] * nnums[j]);
        }
      }
      return dp.front().back();
    }
  };

  class Solution *solution;
};

TEST_F(q312, sample_input01) {
  solution = new Solution();
  vector<int> nums = {3, 1, 5, 8};
  int exp = 167;
  int act = solution->maxCoins(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q312, sample_input02) {
  solution = new Solution();
  vector<int> nums = {1, 5};
  int exp = 10;
  int act = solution->maxCoins(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}