#include <gtest/gtest.h>
#include <iostream>
#include <string>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 316.
 *      Remove Duplicate Letters
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a string ‘s’ , remove duplicate letters so that every letter
 *   appears once and only once. You must make sure your result is “the
 *   smallest in lexicographical order” among all possible results.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s.length ≤ 10⁴’
 *   • ‘s’ consists of lowercase English letters.
 *
 */

struct q316 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    string removeDuplicateLetters(string s) {
      vector<int> cnt(26, 0),
                  visit(26, 0);

      string res;
      for (auto const &c : s) {
        ++cnt[c - 'a'];
      }

      for (auto const &c : s) {
        int idx = c - 'a';
        --cnt[idx];

        if (!visit[idx]) {
          while (res.size() > 0 && res.back() > c && cnt[res.back() - 'a'] > 0) {
            visit[res.back() - 'a'] = 0;
            res.pop_back();
          }

          res += c;
          visit[idx] = 1;
        }
      }

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q316, sample_input01) {
  solution = new Solution();
  string s = "bcabc";
  string exp = "abc";
  string act = solution->removeDuplicateLetters(s);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q316, sample_input02) {
  solution = new Solution();
  string s = "cbacdcbc";
  string exp = "acdb";
  string act = solution->removeDuplicateLetters(s);
  EXPECT_EQ(act, exp);
  delete solution;
}