#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 344.
 *      Reverse String
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Write a function that reverses a string. The input string is given as
 *   an array of characters ‘s’
 *   You must do this by modifying the input array <a
 *   href="https://en.wikipedia.org/wiki/In-place_algorithm"
 *   target="_blank">in-place</a> with ‘O(1)’ extra memory.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s.length ≤ 10⁵’
 *   • ‘s[i]’ is a <a href="https://en.wikipedia.org/wiki/ASCII#Printable_characters" target="_blank">printable ascii character</a>.
 *
 */

struct q344 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    void reverseString(vector<char>& s) {
      int l = 0, r = s.size() - 1;
      char tmp = ' ';
      while (l <= r) {
        tmp = s[r];
        s[r--] = s[l];
        s[l++] = tmp;
      }
    }
  };

  class Solution *solution;
};

TEST_F(q344, sample_input01) {
  solution = new Solution();
  vector<char> s = {'h', 'e', 'l', 'l', 'o'};
  vector<char> exp = {'o', 'l', 'l', 'e', 'h'};
  solution->reverseString(s);
  // Assume the first argument is answer.
  EXPECT_EQ(s, exp);
  delete solution;
}

TEST_F(q344, sample_input02) {
  solution = new Solution();
  vector<char> s = {'H', 'a', 'n', 'n', 'a', 'h'};
  vector<char> exp = {'h', 'a', 'n', 'n', 'a', 'H'};
  solution->reverseString(s);
  // Assume the first argument is answer.
  EXPECT_EQ(s, exp);
  delete solution;
}