#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 309.
 *      Best Time to Buy and Sell Stock with Cooldown
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an array ‘prices’ where ‘prices[i]’ is the price of a
 *   given stock on the ‘iᵗʰ’
 *   Find the maximum profit you can achieve. You may complete as many
 *   transactions as you like (i.e., buy one and sell one share of the
 *   stock multiple times) with the following
 *       - After you sell your stock, you cannot buy stock on the next day
 *   (i.e., cooldown one
 *    “Note:” You may not engage in multiple transactions simultaneously
 *   (i.e., you must sell the stock before you buy again).
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ prices.length ≤ 5000’
 *   • ‘0 ≤ prices[i] ≤ 1000’
 *
 */

struct q309 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int maxProfit(vector<int>& prices) {
      int rest = 0,
          hold = numeric_limits<int>::min(),
          sold = numeric_limits<int>::min();
      for (const auto& x : prices) {
        int before = sold;
        sold = hold + x;
        hold = max(hold, rest - x);
        rest = max(rest, before);
      }
      return max(rest, sold);
    }
  };

  class Solution *solution;
};

TEST_F(q309, sample_input01) {
  solution = new Solution();
  vector<int> prices = {1, 2, 3, 0, 2};
  int exp = 3;
  EXPECT_EQ(solution->maxProfit(prices), exp);
  delete solution;
}

TEST_F(q309, sample_input02) {
  solution = new Solution();
  vector<int> prices = {1};
  int exp = 0;
  EXPECT_EQ(solution->maxProfit(prices), exp);
  delete solution;
}