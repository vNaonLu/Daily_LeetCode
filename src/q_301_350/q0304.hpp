
#ifndef LEETCODE_Q304_H__
#define LEETCODE_Q304_H__
#include <iostream>

namespace l304 {
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 304.
 *      Range Sum Query 2D - Immutable
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a 2D matrix ‘matrix’ , handle multiple queries of the following
 *       - Calculate the “sum” of the elements of ‘matrix’ inside the
 *   rectangle defined by its “upper left corner” ‘(row1, col1)’ and “lower
 *   right corner” ‘(row2, col2)’
 *   Implement the NumMatrix
 *       -  ‘NumMatrix(int[][] matrix)’ Initializes the object with the
 *   integer matrix ‘matrix’
 *       -  ‘int sumRegion(int row1, int col1, int row2, int col2)’ Returns
 *   the “sum” of the elements of ‘matrix’ inside the rectangle defined by
 *   its “upper left corner” ‘(row1, col1)’ and “lower right corner”
 *   ‘(row2, col2)’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘m = matrix.length’
 *   • ‘n = matrix[i].length’
 *   • ‘1 ≤ m, n ≤ 200’
 *   • ‘-10⁵ ≤ matrix[i][j] ≤ 10⁵’
 *   • ‘0 ≤ row1 ≤ row2 < m’
 *   • ‘0 ≤ col1 ≤ col2 < n’
 *   • At most ‘10⁴’ calls will be made to ‘sumRegion’ .
 *
 */

class NumMatrix {
 private:
  int m;
  int n;
  vector<vector<int>> presum;

 public:
  NumMatrix(vector<vector<int>>& matrix) {
    m = matrix.size();
    n = matrix.front().size();
    presum = matrix;
    for (int i = 0; i < m; ++i)
      for (int j = 1; j < n; ++j)
        presum[i][j] += presum[i][j - 1];
  }

  int sumRegion(int row1, int col1, int row2, int col2) {
    int res = 0;
    for (int i = row1; i <= row2; ++i) {
      if (col1 > 0) {
        res += presum[i][col2] - presum[i][col1 - 1];
      } else {
        res += presum[i][col2];
      }
    }
    return res;
  }
};

/**
 * Your NumMatrix object will be instantiated and called as such:
 * NumMatrix* obj = new NumMatrix(matrix);
 * int param_1 = obj->sumRegion(row1,col1,row2,col2);
 */
}  // namespace l304

#endif