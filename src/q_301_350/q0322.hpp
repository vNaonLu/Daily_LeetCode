
#ifndef LEETCODE_Q322_H__
#define LEETCODE_Q322_H__
#include <iostream>
#include <vector>

namespace l322 {
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 322.
  *      Coin Change
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   You are given an integer array ‘coins’ representing coins of different
  *   denominations and an integer ‘amount’ representing a total amount of
  *   money.
  *   
  *   Return “the fewest number of coins that you need to make up that
  *   amount” . If that amount of money cannot be made up by any combination
  *   of the coins, return ‘-1’.
  *   
  *   You may assume that you have an infinite number of each kind of coin.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘1 ≤ coins.length ≤ 12’
  *   • ‘1 ≤ coins[i] ≤ 2³¹ - 1’
  *   • ‘0 ≤ amount ≤ 10⁴’
  *
*/

class Solution {
 public:
  int coinChange(vector<int>& coins, int amount) {
    vector<int> dp(amount + 1, amount + 1);
    dp[0] = 0;
    for (int i = 1; i <= amount; ++i)
      for (const auto& c : coins)
        if (i >= c)
          dp[i] = min(dp[i], dp[i - c] + 1);
    return dp.back() == amount + 1 ? -1 : dp.back();
  }
};
}  // namespace l322

#endif