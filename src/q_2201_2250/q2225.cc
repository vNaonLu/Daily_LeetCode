#include <gtest/gtest.h>
#include <iostream>
#include <unordered_map>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 2225.
 *       Find Players With Zero or One Losses
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an integer array ‘matches’ where ‘matches[i] = [winnerᵢ,
 *   loserᵢ]’ indicates that the player ‘winnerᵢ’ defeated player ‘loserᵢ’
 *   in a
 *   Return “a list ” ‘answer’ “ of size ” ‘2’ “ where:”
 *       -  ‘answer[0]’ is a list of all players that have “not” lost any
 *       -  ‘answer[1]’ is a list of all players that have lost exactly
 *   “one”
 *   The values in the two lists should be returned in “increasing”
 *    “Note:”
 *       - You should only consider the players that have played “at least
 *   one”
 *       - The testcases will be generated such that “no” two matches will
 *   have the “same” outcome.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ matches.length ≤ 10⁵’
 *   • ‘matches[i].length = 2’
 *   • ‘1 ≤ winnerᵢ, loserᵢ ≤ 10⁵’
 *   • ‘winnerᵢ ≠ loserᵢ’
 *   • All ‘matches[i]’ are “unique” .
 *
 */

struct q2225 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    vector<vector<int>> findWinners(vector<vector<int>> &matches) {
      auto loss_map = unordered_map<int, int>();
      for (auto &v : matches) {
        if (!loss_map.count(v[0])) {
          loss_map[v[0]] = 0;
        }

        ++loss_map[v[1]];
      }

      auto res = vector<vector<int>>(2, vector<int>());

      for (auto [player, loss_cnt] : loss_map) {
        if (loss_cnt == 0) {
          res[0].emplace_back(player);
        } else if (loss_cnt == 1) {
          res[1].emplace_back(player);
        }
      }

      sort(res[0].begin(), res[0].end());
      sort(res[1].begin(), res[1].end());

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q2225, sample_input01) {
  solution                    = new Solution();
  vector<vector<int>> matches = {
      { 1, 3},
      { 2, 3},
      { 3, 6},
      { 5, 6},
      { 5, 7},
      { 4, 5},
      { 4, 8},
      { 4, 9},
      {10, 4},
      {10, 9}
  };
  vector<vector<int>> exp = {
      {1, 2, 10},
      { 4, 5,  7,8}
  };
  vector<vector<int>> act = solution->findWinners(matches);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2225, sample_input02) {
  solution                    = new Solution();
  vector<vector<int>> matches = {
      {2, 3},
      {1, 3},
      {5, 4},
      {6, 4}
  };
  vector<vector<int>> exp = {
      {1, 2, 5, 6},
      {   }
  };
  vector<vector<int>> act = solution->findWinners(matches);
  EXPECT_EQ(act, exp);
  delete solution;
}