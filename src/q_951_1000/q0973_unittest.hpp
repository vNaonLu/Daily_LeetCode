
#ifndef Q973_UNITTEST_H__
#define Q973_UNITTEST_H__
#include <gtest/gtest.h>

#include <leetcode/anyorder.hpp>

#include "q0973.hpp"
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 973.
  *      K Closest Points to Origin
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given an array of ‘points’ where ‘points[i] = [xᵢ, yᵢ]’ represents a
  *   point on the “X-Y” plane and an integer ‘k’ , return the ‘k’ closest
  *   points to the origin ‘(0, 0)’.
  *   
  *   The distance between two points on the “X-Y” plane is the Euclidean
  *   distance (i.e., ‘&radic;(x₁ - x₂)² + (y₁ - y₂)²’ ).
  *   
  *   You may return the answer in “any order” . The answer is “guaranteed”
  *   to be “unique” (except for the order that it is in).
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘1 ≤ k ≤ points.length ≤ 10⁴’
  *   • ‘-10⁴ < xᵢ, yᵢ < 10⁴’
  *
*/

TEST(q973, sample_input01) {
  l973::Solution solver;
  vector<vector<int>> points = {{1, 3}, {-2, 2}};
  int k = 1;
  vector<vector<int>> exp = {{-2, 2}};
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solver.kClosest(points, k), exp);
}

TEST(q973, sample_input02) {
  l973::Solution solver;
  vector<vector<int>> points = {{3, 3}, {5, -1}, {-2, 4}};
  int k = 2;
  vector<vector<int>> exp = {{3, 3}, {-2, 4}};
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solver.kClosest(points, k), exp);
}

#endif