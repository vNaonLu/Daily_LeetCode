#include <gtest/gtest.h>
#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 983.
 *      Minimum Cost For Tickets
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You have planned some train traveling one year in advance. The days of
 *   the year in which you will travel are given as an integer array ‘days’
 *   . Each day is an integer from ‘1’ to ‘365’
 *   Train tickets are sold in “three different ways”
 *       - a “1-day” pass is sold for ‘costs[0]’
 *       - a “7-day” pass is sold for ‘costs[1]’ dollars,
 *       - a “30-day” pass is sold for ‘costs[2]’
 *   The passes allow that many days of consecutive
 *       - For example, if we get a “7-day” pass on day ‘2’ , then we can
 *   travel for ‘7’ days: ‘2’ , ‘3’ , ‘4’ , ‘5’ , ‘6’ , ‘7’ , and ‘8’
 *   Return “the minimum number of dollars you need to travel every day in
 *   the given list of days” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ days.length ≤ 365’
 *   • ‘1 ≤ days[i] ≤ 365’
 *   • ‘days’ is in strictly increasing order.
 *   • ‘costs.length = 3’
 *   • ‘1 ≤ costs[i] ≤ 1000’
 *
 */

struct q983 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    vector<int>             costs;
    unordered_set<int>      dayset;
    unordered_map<int, int> memos;

    int helper(int x) {
      if (x > 365) return 0;
      auto it = memos.find(x);
      if (it != memos.end()) return it->second;

      int res;
      if (dayset.count(x)) {
        res = min({helper(x + 1) + costs[0],
                   helper(x + 7) + costs[1],
                   helper(x + 30) + costs[2]});
      } else {
        res = helper(x + 1);
      }

      memos[x] = res;
      return res;
    }

   public:
    int mincostTickets(vector<int>& days, vector<int>& costs) {
      this->costs = move(costs);
      for (const auto& x : days) dayset.insert(x);

      return helper(1);
    }
  };

  class Solution *solution;
};

TEST_F(q983, sample_input01) {
  solution = new Solution();
  vector<int> days = {1, 4, 6, 7, 8, 20};
  vector<int> costs = {2, 7, 15};
  int exp = 11;
  int act = solution->mincostTickets(days, costs);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q983, sample_input02) {
  solution = new Solution();
  vector<int> days = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 31};
  vector<int> costs = {2, 7, 15};
  int exp = 17;
  int act = solution->mincostTickets(days, costs);
  EXPECT_EQ(act, exp);
  delete solution;
}