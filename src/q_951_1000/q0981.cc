#include <gtest/gtest.h>
#include <iostream>
#include <map>
#include <unordered_map>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 981.
 *      Time Based Key-Value Store
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Design a time-based key-value data structure that can store multiple
 *   values for the same key at different time stamps and retrieve the
 *   key's value at a certain
 *   Implement the ‘TimeMap’
 *       -  ‘TimeMap()’ Initializes the object of the data
 *       -  ‘void set(String key, String value, int timestamp)’ Stores the
 *   key ‘key’ with the value ‘value ’ at the given time ‘timestamp’
 *       -  ‘String get(String key, int timestamp)’ Returns a value such
 *   that ‘set’ was called previously, with ‘timestamp_prev ≤ timestamp’ .
 *   If there are multiple such values, it returns the value associated
 *   with the largest ‘timestamp_prev’ . If there are no values, it returns
 *   ‘''’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ key.length, value.length ≤ 100’
 *   • ‘key’ and ‘value’ consist of lowercase English letters and digits.
 *   • ‘1 ≤ timestamp ≤ 10⁷’
 *   • All the timestamps ‘timestamp’ of ‘set’ are strictly increasing.
 *   • At most ‘2 × 10⁵’ calls will be made to ‘set’ and ‘get’ .
 *
 */

struct q981 : public ::testing::Test {
  // Leetcode answer here
  class TimeMap {
  private:
    unordered_map<string, map<int, string>> data;

  public:
    TimeMap() {
    }

    void set(string key, string value, int timestamp) {
      auto &find = data[key];
      find[timestamp] = value;
    }

    string get(string key, int timestamp) {
      auto find = data.find(key);
      if (find != data.end()) {
        auto tm_find = find->second.upper_bound(timestamp);
        if (tm_find != find->second.begin()) {
          return (--tm_find)->second;
        }
      }

      return "";
    }
  };

  /**
   * Your TimeMap object will be instantiated and called as such:
   * TimeMap* obj = new TimeMap();
   * obj->set(key,value,timestamp);
   * string param_2 = obj->get(key,timestamp);
   */

  class TimeMap *time_map;
};

TEST_F(q981, sample_input01) {
  time_map = new TimeMap();
  time_map->set("foo", "bar", 1);
  EXPECT_EQ(time_map->get("foo", 1), "bar");
  EXPECT_EQ(time_map->get("foo", 3), "bar");
  time_map->set("foo", "bar2", 4);
  EXPECT_EQ(time_map->get("foo", 4), "bar2");
  EXPECT_EQ(time_map->get("foo", 5), "bar2");
  delete time_map;
}