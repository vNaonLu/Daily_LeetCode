#include <gtest/gtest.h>
#include <iostream>
#include <numeric>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 985.
 *      Sum of Even Numbers After Queries
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an integer array ‘nums’ and an array ‘queries’ where
 *   ‘queries[i] = [valᵢ, indexᵢ]’
 *   For each query ‘i’ , first, apply ‘nums[indexᵢ] = nums[indexᵢ] + valᵢ’
 *   , then print the sum of the even values of ‘nums’
 *   Return “an integer array ” ‘answer’ “ where ” ‘answer[i]’ “ is the
 *   answer to the ” ‘iᵗʰ’ “ query” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 10⁴’
 *   • ‘-10⁴ ≤ nums[i] ≤ 10⁴’
 *   • ‘1 ≤ queries.length ≤ 10⁴’
 *   • ‘-10⁴ ≤ valᵢ ≤ 10⁴’
 *   • ‘0 ≤ indexᵢ < nums.length’
 *
 */

struct q985 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    vector<int> sumEvenAfterQueries(vector<int>         &nums,
                                    vector<vector<int>> &queries) {
      auto res    = vector<int>(queries.size());
      res.front() = accumulate(nums.begin(), nums.end(), 0, [](auto x, auto y) {
        return x + ((y & 1) == 0 ? y : 0);
      });
      for (int i = 0; i < queries.size(); ++i) {
        auto &v   = queries[i];
        auto &tag = nums[v[1]];
        if (i != 0) {
          res[i] = res[i - 1];
        }
        if ((tag & 1) == 0) {
          res[i] -= tag;
        }

        tag += v[0];
        if ((tag & 1) == 0) {
          res[i] += tag;
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q985, sample_input01) {
  solution                    = new Solution();
  vector<int>         nums    = {1, 2, 3, 4};
  vector<vector<int>> queries = {
      { 1, 0},
      {-3, 1},
      {-4, 0},
      { 2, 3}
  };
  vector<int> exp = {8, 6, 2, 4};
  vector<int> act = solution->sumEvenAfterQueries(nums, queries);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q985, sample_input02) {
  solution                    = new Solution();
  vector<int>         nums    = {1};
  vector<vector<int>> queries = {
      {4, 0}
  };
  vector<int> exp = {0};
  vector<int> act = solution->sumEvenAfterQueries(nums, queries);
  EXPECT_EQ(act, exp);
  delete solution;
}