
#ifndef Q997_UNITTEST_H__
#define Q997_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0997.hpp"
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 997.
  *      Find the Town Judge
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   In a town, there are ‘n’ people labeled from ‘1’ to ‘n’ . There is a
  *   rumor that one of these people is secretly the town judge.
  *   
  *   If the town judge exists,.
  *   
  *   - The town judge trusts nobody.
  *   
  *   - Everybody (except for the town judge) trusts the town judge.
  *   
  *   - There is exactly one person that satisfies properties “1” and “2”.
  *   
  *   You are given an array ‘trust’ where ‘trust[i] = [aᵢ, bᵢ]’
  *   representing that the person labeled ‘aᵢ’ trusts the person labeled
  *   ‘bᵢ’.
  *   
  *   Return “the label of the town judge if the town judge exists and can
  *   be identified, or return ” ‘-1’ “ otherwise”.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘1 ≤ n ≤ 1000’
  *   • ‘0 ≤ trust.length ≤ 10⁴’
  *   • ‘trust[i].length = 2’
  *   • All the pairs of ‘trust’ are “unique” .
  *   • ‘aᵢ ≠ bᵢ’
  *   • ‘1 ≤ aᵢ, bᵢ ≤ n’
  *
*/

TEST(q997, sample_input01) {
  l997::Solution solver;
  int n = 2;
  vector<vector<int>> trust = {{1, 2}};
  int exp = 2;
  EXPECT_EQ(solver.findJudge(n, trust), exp);
}

TEST(q997, sample_input02) {
  l997::Solution solver;
  int n = 3;
  vector<vector<int>> trust = {{1, 3}, {2, 3}};
  int exp = 3;
  EXPECT_EQ(solver.findJudge(n, trust), exp);
}

TEST(q997, sample_input03) {
  l997::Solution solver;
  int n = 3;
  vector<vector<int>> trust = {{1, 3}, {2, 3}, {3, 1}};
  int exp = -1;
  EXPECT_EQ(solver.findJudge(n, trust), exp);
}

TEST(q997, sample_input04) {
  l997::Solution solver;
  int n = 3;
  vector<vector<int>> trust = {{1, 2}, {2, 3}};
  int exp = -1;
  EXPECT_EQ(solver.findJudge(n, trust), exp);
}

TEST(q997, sample_input05) {
  l997::Solution solver;
  int n = 4;
  vector<vector<int>> trust = {{1, 3}, {1, 4}, {2, 3}, {2, 4}, {4, 3}};
  int exp = 3;
  EXPECT_EQ(solver.findJudge(n, trust), exp);
}

#endif