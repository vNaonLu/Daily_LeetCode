#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 986.
 *      Interval List Intersections
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given two lists of closed intervals, ‘firstList’ and
 *   ‘secondList’ , where ‘firstList[i] = [startᵢ, endᵢ]’ and
 *   ‘secondList[j] = [startⱼ, endⱼ]’ . Each list of intervals is pairwise
 *   “disjoint” and in “sorted order”
 *   Return “the intersection of these two interval lists”
 *   A “closed interval” ‘[a, b]’ (with ‘a ≤ b’ ) denotes the set of real
 *   numbers ‘x’ with ‘a ≤ x ≤ b’
 *   The “intersection” of two closed intervals is a set of real numbers
 *   that are either empty or represented as a closed interval. For
 *   example, the intersection of ‘[1, 3]’ and ‘[2, 4]’ is ‘[2, 3]’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘0 ≤ firstList.length, secondList.length ≤ 1000’
 *   • ‘firstList.length + secondList.length ≥ 1’
 *   • ‘0 ≤ startᵢ < endᵢ ≤ 10⁹’
 *   • ‘endᵢ < startᵢ₊₁’
 *   • ‘0 ≤ startⱼ < endⱼ ≤ 10⁹ ’
 *   • ‘endⱼ < startⱼ₊₁’
 *
 */

struct q986 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    vector<vector<int>> intervalIntersection(vector<vector<int>>& firstList, vector<vector<int>>& secondList) {
      vector<vector<int>> res;
      auto fit = firstList.begin();
      auto sit = secondList.begin();
      int lo, hi;
      while (fit != firstList.end() && sit != secondList.end()) {
        lo = max((*fit)[0], (*sit)[0]);
        hi = min((*fit)[1], (*sit)[1]);
        if (lo <= hi) {
          res.push_back({lo, hi});
        }
        if ((*fit)[1] < (*sit)[1]) {
          ++fit;
        } else {
          ++sit;
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q986, sample_input01) {
  solution = new Solution();
  vector<vector<int>> firstList = {{0, 2}, {5, 10}, {13, 23}, {24, 25}};
  vector<vector<int>> secondList = {{1, 5}, {8, 12}, {15, 24}, {25, 26}};
  vector<vector<int>> exp = {{1, 2}, {5, 5}, {8, 10}, {15, 23}, {24, 24}, {25, 25}};
  EXPECT_EQ(solution->intervalIntersection(firstList, secondList), exp);
  delete solution;
}

TEST_F(q986, sample_input02) {
  solution = new Solution();
  vector<vector<int>> firstList = {{1, 3}, {5, 9}};
  vector<vector<int>> secondList = {};
  vector<vector<int>> exp = {};
  EXPECT_EQ(solution->intervalIntersection(firstList, secondList), exp);
  delete solution;
}

TEST_F(q986, sample_input03) {
  solution = new Solution();
  vector<vector<int>> firstList = {};
  vector<vector<int>> secondList = {{4, 8}, {10, 12}};
  vector<vector<int>> exp = {};
  EXPECT_EQ(solution->intervalIntersection(firstList, secondList), exp);
  delete solution;
}

TEST_F(q986, sample_input04) {
  solution = new Solution();
  vector<vector<int>> firstList = {{1, 7}};
  vector<vector<int>> secondList = {{3, 10}};
  vector<vector<int>> exp = {{3, 7}};
  EXPECT_EQ(solution->intervalIntersection(firstList, secondList), exp);
  delete solution;
}