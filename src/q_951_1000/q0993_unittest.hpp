
#ifndef Q993_UNITTEST_H__
#define Q993_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0993.hpp"
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 993.
 *      Cousins in Binary Tree
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given the ‘root’ of a binary tree with unique values and the values of
 *   two different nodes of the tree ‘x’ and ‘y’ , return ‘true’ “if the
 *   nodes corresponding to the values ” ‘x’ “ and ” ‘y’ “ in the tree are
 *   “cousins” , or ” ‘false’ “ otherwise.”
 *   Two nodes of a binary tree are “cousins” if they have the same depth
 *   with different
 *   Note that in a binary tree, the root node is at the depth ‘0’ , and
 *   children of each depth ‘k’ node are at the depth ‘k + 1’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The number of nodes in the tree is in the range ‘[2, 100]’ .
 *   • ‘1 ≤ Node.val ≤ 100’
 *   • Each node has a “unique” value.
 *   • ‘x ≠ y’
 *   • ‘x’ and ‘y’ are exist in the tree.
 *
 */

TEST(q993, sample_input01) {
  l993::Solution solver;
  TreeNode* root = TreeNode::generate({1, 2, 3, 4});
  int x = 4;
  int y = 3;
  bool exp = false;
  EXPECT_EQ(solver.isCousins(root, x, y), exp);
}

TEST(q993, sample_input02) {
  l993::Solution solver;
  TreeNode* root = TreeNode::generate({1, 2, 3, NULL_TREENODE, 4, NULL_TREENODE, 5});
  int x = 5;
  int y = 4;
  bool exp = true;
  EXPECT_EQ(solver.isCousins(root, x, y), exp);
}

TEST(q993, sample_input03) {
  l993::Solution solver;
  TreeNode* root = TreeNode::generate({1, 2, 3, NULL_TREENODE, 4});
  int x = 2;
  int y = 3;
  bool exp = false;
  EXPECT_EQ(solver.isCousins(root, x, y), exp);
}

#endif