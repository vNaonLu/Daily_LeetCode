
#ifndef Q994_UNITTEST_H__
#define Q994_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0994.hpp"
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 994. Rotting Oranges
  *
  * You are given an m x n grid where each cell can
  * have one of three values:
  * -  0 representing an empty cell,
  * -  1 representing a fresh orange, or
  * -  2 representing a rotten orange.
  * Every minute, any fresh orange that is
  * “4-directionally adjacent“ to a rotten orange becomes
  * rotten.
  * Return the minimum number of minutes that must
  * elapse until no cell has a fresh orange . If this is
  * impossible, return -1 .
  *
  * Constraints:
  * -  m == grid.length 
  * -  n == grid[i].length 
  * -  1 <= m, n <= 10 
  * -  grid[i][j] is 0 , 1 , or 2 .
  *
*/

TEST(q994, sample_input01) {
  vector<vector<int>> grid = {{2, 1, 1},
                              {1, 1, 0},
                              {0, 1, 1}};
  int exp = 4;
  l994::Solution solver;
  EXPECT_EQ(solver.orangesRotting(grid), exp);
}

TEST(q994, sample_input02) {
  vector<vector<int>> grid = {{2, 1, 1},
                              {0, 1, 1},
                              {1, 0, 1}};
  int exp = -1;
  l994::Solution solver;
  EXPECT_EQ(solver.orangesRotting(grid), exp);
}

TEST(q994, sample_input03) {
  vector<vector<int>> grid = {{0, 2}};
  int exp = 0;
  l994::Solution solver;
  EXPECT_EQ(solver.orangesRotting(grid), exp);
}

TEST(q994, input01) {
  vector<vector<int>> grid = {{2, 0, 1, 1, 1, 1, 1, 1, 1, 1},
                              {1, 0, 1, 0, 0, 0, 0, 0, 0, 1},
                              {1, 0, 1, 0, 1, 1, 1, 1, 0, 1},
                              {1, 0, 1, 0, 1, 0, 0, 1, 0, 1},
                              {1, 0, 1, 0, 1, 0, 0, 1, 0, 1},
                              {1, 0, 1, 0, 1, 1, 0, 1, 0, 1},
                              {1, 0, 1, 0, 0, 0, 0, 1, 0, 1},
                              {1, 0, 1, 1, 1, 1, 1, 1, 0, 1},
                              {1, 0, 0, 0, 0, 0, 0, 0, 0, 1},
                              {1, 1, 1, 1, 1, 1, 1, 1, 1, 1}};
  int exp = 58;
  l994::Solution solver;
  EXPECT_EQ(solver.orangesRotting(grid), exp);
}

#endif