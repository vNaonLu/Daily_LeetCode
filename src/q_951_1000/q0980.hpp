
#ifndef LEETCODE_Q980_H__
#define LEETCODE_Q980_H__
#include <iostream>
#include <vector>

namespace l980 {
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 980.
 *      Unique Paths III
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an ‘m x n’ integer array ‘grid’ where ‘grid[i][j]’ could
 *       -  ‘1’ representing the starting square. There is exactly one
 *   starting
 *       -  ‘2’ representing the ending square. There is exactly one ending
 *       -  ‘0’ representing empty squares we can walk
 *       -  ‘-1’ representing obstacles that we cannot walk
 *   Return “the number of 4-directional walks from the starting square to
 *   the ending square, that walk over every non-obstacle square exactly
 *   once” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘m = grid.length’
 *   • ‘n = grid[i].length’
 *   • ‘1 ≤ m, n ≤ 20’
 *   • ‘1 ≤ m × n ≤ 20’
 *   • ‘-1 ≤ grid[i][j] ≤ 2’
 *   • There is exactly one starting cell and one ending cell.
 *
 */

class Solution {
 private:
  int res = 0;
  int empty = 1;
  int m, n;
  void helper(vector<vector<int>>& grid, int i, int j, int cnt = 0) {
    if (i < 0 || i >= m || j < 0 || j >= n) return;
    if (grid[i][j] == -1) return;

    if (grid[i][j] == 2) {
      if (cnt == empty) ++res;
      return;
    }

    ++cnt;
    grid[i][j] = -1;
    helper(grid, i + 1, j, cnt);
    helper(grid, i, j + 1, cnt);
    helper(grid, i - 1, j, cnt);
    helper(grid, i, j - 1, cnt);
    grid[i][j] = 0;
  }

 public:
  int uniquePathsIII(vector<vector<int>>& grid) {
    m = grid.size();
    n = grid[0].size();
    int si = -1, sj = -1;
    for (int i = 0; i < m; ++i) {
      for (int j = 0; j < n; ++j) {
        if (grid[i][j] == 1) {
          si = i;
          sj = j;
        } else if (grid[i][j] == 0) {
          ++empty;
        }
      }
    }
    helper(grid, si, sj);
    return res;
  }
};
}  // namespace l980

#endif