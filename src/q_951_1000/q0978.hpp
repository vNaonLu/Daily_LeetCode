
#ifndef LEETCODE_Q978_H__
#define LEETCODE_Q978_H__
#include <iostream>
#include <vector>

namespace l978 {
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 978. Longest Turbulent Subarray
  *
  * Given an integer array arr , return the length of
  * a maximum size turbulent subarray of arr .
  * A subarray is “turbulent“ if the comparison sign
  * flips between each adjacent pair of elements in
  * the subarray.
  * More formally, a subarray [arr[i], arr[i + 1],
  * ..., arr[j]] of arr is said to be turbulent if and
  * only if:
  * - For i <= k < j :
  * 	
  * -  arr[k] > arr[k + 1] when k is odd, and
  * -  arr[k] < arr[k + 1] when k is even.
  * 	
  * 	
  * - Or, for i <= k < j :
  * 	
  * -  arr[k] > arr[k + 1] when k is even, and
  * -  arr[k] < arr[k + 1] when k is odd.
  * 	
  * 	
  *
  * Constraints:
  * -  1 <= arr.length <= 4 * 10^(4) 
  * -  0 <= arr[i] <= 10^(9) 
  *
*/
class Solution {
 public:
  int maxTurbulenceSize(vector<int>& arr) {
    if (arr.size() == 0)
      return 0;
    else if (arr.size() == 1)
      return 1;
    int res = 0, cur = 0;
    long long diff = 0;
    for (int i = 1; i < arr.size(); ++i) {
      long long curd = arr[i] - arr[i - 1];
      if (diff * curd >= 0) {
        cur = curd == 0 ? 0 : 1;
      }
      diff = curd;
      res = max(res, ++cur);
    }
    return res;
  }
};
}  // namespace l978
#endif