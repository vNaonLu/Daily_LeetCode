
#ifndef Q980_UNITTEST_H__
#define Q980_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0980.hpp"
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 980.
 *      Unique Paths III
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an ‘m x n’ integer array ‘grid’ where ‘grid[i][j]’ could
 *       -  ‘1’ representing the starting square. There is exactly one
 *   starting
 *       -  ‘2’ representing the ending square. There is exactly one ending
 *       -  ‘0’ representing empty squares we can walk
 *       -  ‘-1’ representing obstacles that we cannot walk
 *   Return “the number of 4-directional walks from the starting square to
 *   the ending square, that walk over every non-obstacle square exactly
 *   once” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘m = grid.length’
 *   • ‘n = grid[i].length’
 *   • ‘1 ≤ m, n ≤ 20’
 *   • ‘1 ≤ m × n ≤ 20’
 *   • ‘-1 ≤ grid[i][j] ≤ 2’
 *   • There is exactly one starting cell and one ending cell.
 *
 */

TEST(q980, sample_input01) {
  l980::Solution solver;
  vector<vector<int>> grid = {{1, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 2, -1}};
  int exp = 2;
  EXPECT_EQ(solver.uniquePathsIII(grid), exp);
}

TEST(q980, sample_input02) {
  l980::Solution solver;
  vector<vector<int>> grid = {{1, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 2}};
  int exp = 4;
  EXPECT_EQ(solver.uniquePathsIII(grid), exp);
}

TEST(q980, sample_input03) {
  l980::Solution solver;
  vector<vector<int>> grid = {{0, 1}, {2, 0}};
  int exp = 0;
  EXPECT_EQ(solver.uniquePathsIII(grid), exp);
}

#endif