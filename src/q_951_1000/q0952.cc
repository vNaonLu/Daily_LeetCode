#include <gtest/gtest.h>
#include <iostream>
#include <unordered_map>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 952.
 *      Largest Component Size by Common Factor
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an integer array of unique positive integers ‘nums’ .
 *   Consider the following
 *       - There are ‘nums.length’ nodes, labeled ‘nums[0]’ to
 *   ‘nums[nums.length - 1]’
 *       - There is an undirected edge between ‘nums[i]’ and ‘nums[j]’ if
 *   ‘nums[i]’ and ‘nums[j]’ share a common factor greater than ‘1’
 *   Return “the size of the largest connected component in the graph” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 2 × 10⁴’
 *   • ‘1 ≤ nums[i] ≤ 10⁵’
 *   • All the values of ‘nums’ are “unique” .
 *
 */

struct q952 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    vector<int> rank, parent;
    int find(int x) {
      if (parent[x] == x) return x;
      return parent[x] = find(parent[x]);
    }
    void unionDsu(int x, int y) {
      int __x = find(x), __y = find(y);
      if (__x == __y) return;
      if (rank[__x] < rank[__y]) {
        parent[__x] = __y;
      } else if (rank[__y] < rank[__x]) {
        parent[__y] = __x;
      } else {
        parent[__y] = __x;
        rank[__x] += 1;
      }
    }
   public:
    int largestComponentSize(vector<int> &nums) {
      int N = *max_element(nums.begin(), nums.end());
      parent.resize(N + 1);
      rank.resize(N + 1, 1);
      for (int i = 0; i <= N; ++i) parent[i] = i;
      for (const auto &x : nums) {
        for (int i = 2; i * i <= x; ++i) {
          if (x % i == 0) {
            unionDsu(x, i);
            unionDsu(x / i, i);
          }
        }
      }
      unordered_map<int, int> count;
      int res = 0;
      for (const auto &x : nums) {
        auto __x = find(x);
        ++count[__x];
      }
      for (const auto &p : count) {
        res = max(res, p.second);
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q952, sample_input01) {
  solution = new Solution();
  vector<int> nums = {4, 6, 15, 35};
  int exp = 4;
  EXPECT_EQ(solution->largestComponentSize(nums), exp);
  delete solution;
}

TEST_F(q952, sample_input02) {
  solution = new Solution();
  vector<int> nums = {20, 50, 9, 63};
  int exp = 2;
  EXPECT_EQ(solution->largestComponentSize(nums), exp);
  delete solution;
}

TEST_F(q952, sample_input03) {
  solution = new Solution();
  vector<int> nums = {2, 3, 6, 7, 4, 12, 21, 39};
  int exp = 8;
  EXPECT_EQ(solution->largestComponentSize(nums), exp);
  delete solution;
}