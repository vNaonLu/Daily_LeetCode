#include <gtest/gtest.h>
#include <iostream>
#include <string>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 990.
 *      Satisfiability of Equality Equations
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an array of strings ‘equations’ that represent
 *   relationships between variables where each string ‘equations[i]’ is of
 *   length ‘4’ and takes one of two different forms: ‘'xᵢ=yᵢ'’ or
 *   ‘'xᵢ≠yᵢ'’ .Here, ‘xᵢ’ and ‘yᵢ’ are lowercase letters (not necessarily
 *   different) that represent one-letter variable
 *   Return ‘true’ “ if it is possible to assign integers to variable names
 *   so as to satisfy all the given equations, or ” ‘false’ “ otherwise” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ equations.length ≤ 500’
 *   • ‘equations[i].length = 4’
 *   • ‘equations[i][0]’ is a lowercase letter.
 *   • ‘equations[i][1]’ is either ‘'='’ or ‘'!'’ .
 *   • ‘equations[i][2]’ is ‘'='’ .
 *   • ‘equations[i][3]’ is a lowercase letter.
 *
 */

struct q990 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  private:
    int union_find(vector<int> &u, int x) {
      return u[x] == -1 || u[x] == x ? x : union_find(u, u[x]);
    }

  public:
    bool equationsPossible(vector<string> &equations) {
      auto mp = vector<int>(127, -1);
      for (auto &s : equations) {
        if (s[1] == '=') {
          mp[union_find(mp, s[0])] = union_find(mp, s[3]);
        }
      }
      for (auto &s : equations) {
        if (s[1] == '!' && union_find(mp, s[0]) == union_find(mp, s[3])) {
          return false;
        }
      }
      return true;
    }
  };

  class Solution *solution;
};

TEST_F(q990, sample_input01) {
  solution                 = new Solution();
  vector<string> equations = {"a==b", "b!=a"};
  bool           exp       = false;
  bool           act       = solution->equationsPossible(equations);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q990, sample_input02) {
  solution                 = new Solution();
  vector<string> equations = {"b==a", "a==b"};
  bool           exp       = true;
  bool           act       = solution->equationsPossible(equations);
  EXPECT_EQ(act, exp);
  delete solution;
}