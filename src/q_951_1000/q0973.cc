#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/anyorder.hpp>
#include <queue>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 973.
 *      K Closest Points to Origin
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an array of ‘points’ where ‘points[i] = [xᵢ, yᵢ]’ represents a
 *   point on the “X-Y” plane and an integer ‘k’ , return the ‘k’ closest
 *   points to the origin ‘(0, 0)’
 *   The distance between two points on the “X-Y” plane is the Euclidean
 *   distance (i.e., ‘&radic;(x₁ - x₂)² + (y₁ - y₂)²’
 *   You may return the answer in “any order” . The answer is “guaranteed”
 *   to be “unique” (except for the order that it is in).
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ k ≤ points.length ≤ 10⁴’
 *   • ‘-10⁴ < xᵢ, yᵢ < 10⁴’
 *
 */

struct q973 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    using pii = pair<int, int>;
   public:
    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {
      vector<vector<int>> res;
      priority_queue<pii, vector<pii>, greater<pii>> pq;
      for (int i = 0; i < points.size(); ++i) 
        pq.push(make_pair(points[i][0] * points[i][0] + points[i][1] * points[i][1],
                          i));
      while(k--){
        auto top = pq.top();
        pq.pop();
        res.push_back(points[top.second]);
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q973, sample_input01) {
  solution = new Solution();
  vector<vector<int>> points = {{1, 3}, {-2, 2}};
  int k = 1;
  vector<vector<int>> exp = {{-2, 2}};
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solution->kClosest(points, k), exp);
  delete solution;
}

TEST_F(q973, sample_input02) {
  solution = new Solution();
  vector<vector<int>> points = {{3, 3}, {5, -1}, {-2, 4}};
  int k = 2;
  vector<vector<int>> exp = {{3, 3}, {-2, 4}};
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solution->kClosest(points, k), exp);
  delete solution;
}