
#ifndef Q952_UNITTEST_H__
#define Q952_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0952.hpp"
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 952.
 *      Largest Component Size by Common Factor
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an integer array of unique positive integers ‘nums’ .
 *   Consider the following
 *       - There are ‘nums.length’ nodes, labeled ‘nums[0]’ to
 *   ‘nums[nums.length - 1]’
 *       - There is an undirected edge between ‘nums[i]’ and ‘nums[j]’ if
 *   ‘nums[i]’ and ‘nums[j]’ share a common factor greater than ‘1’
 *   Return “the size of the largest connected component in the graph” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 2 × 10⁴’
 *   • ‘1 ≤ nums[i] ≤ 10⁵’
 *   • All the values of ‘nums’ are “unique” .
 *
 */

TEST(q952, sample_input01) {
  l952::Solution solver;
  vector<int> nums = {4, 6, 15, 35};
  int exp = 4;
  EXPECT_EQ(solver.largestComponentSize(nums), exp);
}

TEST(q952, sample_input02) {
  l952::Solution solver;
  vector<int> nums = {20, 50, 9, 63};
  int exp = 2;
  EXPECT_EQ(solver.largestComponentSize(nums), exp);
}

TEST(q952, sample_input03) {
  l952::Solution solver;
  vector<int> nums = {2, 3, 6, 7, 4, 12, 21, 39};
  int exp = 8;
  EXPECT_EQ(solver.largestComponentSize(nums), exp);
}

#endif