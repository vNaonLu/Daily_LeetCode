#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 974.
 *      Subarray Sums Divisible by K
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an integer array ‘nums’ and an integer ‘k’ , return “the number
 *   of non-empty “subarrays” that have a sum divisible by ” ‘k’
 *   A “subarray” is a “contiguous” part of an array.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 3 × 10⁴’
 *   • ‘-10⁴ ≤ nums[i] ≤ 10⁴’
 *   • ‘2 ≤ k ≤ 10⁴’
 *
 */

struct q974 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int subarraysDivByK(vector<int> &nums, int k) {
      int         n = nums.size();
      vector<int> sums(k, 0);
      int         res  = 0;
      int         curr = 0;
      ++sums[0];
      for (int i = 0; i < n; ++i) {
        curr = (curr + nums[i] % k + k) % k;
        res += sums[curr];
        ++sums[curr];
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q974, sample_input01) {
  solution         = new Solution();
  vector<int> nums = {4, 5, 0, -2, -3, 1};
  int         k    = 5;
  int         exp  = 7;
  int         act  = solution->subarraysDivByK(nums, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q974, sample_input02) {
  solution         = new Solution();
  vector<int> nums = {5};
  int         k    = 9;
  int         exp  = 0;
  int         act  = solution->subarraysDivByK(nums, k);
  EXPECT_EQ(act, exp);
  delete solution;
}
