
#ifndef Q986_UNITTEST_H__
#define Q986_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0986.hpp"
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 986. Interval List Intersections
  *
  * You are given two lists of closed intervals,
  * firstList and secondList , where firstList[i] =
  * [start⎽(i), end⎽(i)] and secondList[j] = [start⎽(j),
  * end⎽(j)] . Each list of intervals is pairwise
  * “disjoint“ and in “sorted order“ .
  * Return the intersection of these two interval
  * lists .
  * A “closed interval“ [a, b] (with a <= b ) denotes
  * the set of real numbers x with a <= x <= b .
  * The “intersection“ of two closed intervals is a
  * set of real numbers that are either empty or
  * represented as a closed interval. For example, the
  * intersection of [1, 3] and [2, 4] is [2, 3] .
  *
  * Constraints:
  * -  0 <= firstList.length, secondList.length <= 1000 
  * -  firstList.length + secondList.length >= 1 
  * -  0 <= start⎽(i) < end⎽(i) <= 10^(9) 
  * -  end⎽(i) < start⎽(i+1) 
  * -  0 <= start⎽(j) < end⎽(j) <= 10^(9) 
  * -  end⎽(j) < start⎽(j+1) 
  *
*/

TEST(q986, sample_input01) {
  vector<vector<int>> firstList = {{0, 2}, {5, 10}, {13, 23}, {24, 25}},
                      secondList = {{1, 5}, {8, 12}, {15, 24}, {25, 26}};
  vector<vector<int>> exp = {{1, 2}, {5, 5}, {8, 10}, {15, 23}, {24, 24}, {25, 25}};
  l986::Solution solver;
  EXPECT_EQ(solver.intervalIntersection(firstList, secondList), exp);
}

TEST(q986, sample_input02) {
  vector<vector<int>> firstList = {{1, 3}, {5, 9}},
                      secondList = {};
  vector<vector<int>> exp = {};
  l986::Solution solver;
  EXPECT_EQ(solver.intervalIntersection(firstList, secondList), exp);
}

TEST(q986, sample_input03) {
  vector<vector<int>> firstList = {},
                      secondList = {{4, 8}, {10, 12}};
  vector<vector<int>> exp = {};
  l986::Solution solver;
  EXPECT_EQ(solver.intervalIntersection(firstList, secondList), exp);
}

TEST(q986, sample_input04) {
  vector<vector<int>> firstList = {{1, 7}},
                      secondList = {{3, 10}};
  vector<vector<int>> exp = {{3, 7}};
  l986::Solution solver;
  EXPECT_EQ(solver.intervalIntersection(firstList, secondList), exp);
}

#endif