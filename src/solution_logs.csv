timestamp,id,tc,sc,notes
1630886400,1,n,n,n = |nums.size()|
1630886400,88,n + m,n + m,
1630886400,189,n,n,n = |nums.size()|
1630886400,977,n,n,n = |nums.size()|
1630886400,1629,n,1,n = |releaseTims.size()|
1630972800,121,n,q,n = |prices.size()|
1630972800,167,n,1,n = |numbers.size()|
1630972800,206,n,1,n = node count of |head|
1630972800,283,n,1,n = |nums.size()|
1630972800,350,n * log(n),1,"n = max(|nums1.size()|, |nums2.size()|)"
1631059200,118,n^2,1,n = |numRows.size()|
1631059200,344,n,1,n = |s.size()|
1631059200,557,n,1,n = |s.size()|
1631059200,566,n * m,1,"m = |mat.size()|, n = |mat[i].size()|"
1631059200,848,n,1,n = |shifts.size()|
1631145600,19,n,1,n = node count of |head|
1631145600,36,1,1,
1631145600,74,log(m)*log(n),m,"m = |matrix.size()|, n = |matrix[i].size()|"
1631145600,764,n^2,n^2,
1631145600,876,n,1,n = node count of |head|
1631232000,3,n,1,n = |s.size()|
1631232000,242,n,1,"n = max(|s.size()|, |t.size()|)"
1631232000,383,n,1,"n = |ransomNode.size()|, m = |magazine.size()|"
1631232000,387,n,1,n = |s.size()|
1631232000,446,n^2 * log(n),n^2,n = |nums.size()|
1631232000,567,n*m,n,"m = |s1.size()|, m = |s2.size()|"
1631318400,21,n + m,1,"n = node count of |list1|, m = node count of |list2|"
1631318400,141,n,1,n = node count of |head|
1631318400,203,n,1,n = node count of |head|
1631318400,224,n,n,n = |s.size()|
1631318400,695,m * n,m * n,"m = |grid.size()|, n = |grid[i].size()|"
1631318400,733,m * n,m * n,"m = |image.size()|, n = |image[i].size()|"
1631404800,83,n,1,n = node count of |head|
1631404800,116,n,n,n = node count of |root|
1631404800,617,n + m,1,"n = node count of |root1|, m = node count of |root2| and H = max(height of |root1|, height of |root2|)"
1631404800,882,m * log(m),m * n,m = |edges.size()|
1631491200,20,n,n,n = |s.size()|
1631491200,542,n * m,n * m,"n = |mat.size()|, m = |mat[i].size()|"
1631491200,994,n * m,n * m,"n = |grid.size()|, m = |grid[i].size()|"
1631491200,1189,n,1,n = |text.size()|
1631577600,94,n,log(n),"n = node count of |root|, H = height of |root|"
1631577600,144,n,log(n),"n = node count of |root|, H = height of |root|"
1631577600,145,n,log(n),"n = node count of |root|, H = height of |root|"
1631577600,917,n,1,n = |s.size()|
1631664000,46,n^2,n^2,n = |nums.size()|
1631664000,77,n * k,n * k,
1631664000,101,n,log(n),"n = node count of |root|, H = height of |root|"
1631664000,102,n,log(n),"n = node count of |root|, H = height of |root|"
1631664000,104,n,log(n),"n = node count of |root|, H = height of |root|"
1631664000,784,n * s^n,n,n = |s.size()|
1631664000,978,n,1,n = |arr.size()|
1631750400,54,n * m,n * m,"m = |matrix.size()|, n = |matrix[0].size()|"
1631750400,70,n,1,
1631750400,112,n,log(n),n = nodes count of |root|
1631750400,120,n^2,1,n = |triangle.size()|
1631750400,198,n,n,n = |nums.size()|
1631750400,226,n,log(n),n = nodes count of |root|
1631836800,191,1,1,
1631836800,231,1,1,
1631836800,700,log(n),1,n = nodes count of |root|
1631836800,701,log(n),1,n = nodes count of |root|
1631923200,98,n,n,n = nodes count of |root|
1631923200,136,n,1,n = |nums.size()|
1631923200,190,1,1,
1631923200,235,n,log(n),n = nodes count of |root|
1631923200,282,-,-,not calculated
1631923200,653,n,n,n = nodes count of |root|
1632009600,15,n * log(n),1,n = |nums.size()|
1632009600,33,log(n),1,n = |nums.size()|
1632009600,34,log(n),1,n = |nums.size()|
1632009600,115,m * n,m * n,"m = |s.size()|, n = |t.size()|"
1632009600,169,n,n,n = |nums.size()|
1632096000,56,n * log(n),1,n = |intervals.size()|
1632096000,75,n,1,n = |nums.size()|
1632096000,153,log(n),1,n = |nums.size()|
1632096000,162,log(n),log(n),n = |nums.size()|
1632096000,706,-,-,not calculated
1632096000,1275,1,1,
1632182400,48,n^2,n^2,n = |matrix.size()|
1632182400,59,n^2,1,
1632182400,82,n,n,"n = nodes count of |head|, n in SC is used to removed the dangling nodes"
1632182400,119,n,1,n = |rowIndex|
1632182400,485,n,1,n = |nums.size()|
1632268800,11,n * log(n),1,n = |height.size()|
1632268800,240,m * n,1,"m = |matrix.size()|, n = |matrix[i].size()|"
1632268800,435,n,n,n = |intervals.size()|
1632268800,844,n,n,"n = max(|s.size()|, |t.size()|)"
1632268800,986,n,1,"n = max(|firstList.size()|, |secondList.size()|)"
1632268800,1239,-,-,not calculated
1632355200,1328,n,1,n = |palindrome.size()|
1632355200,438,-,-,not calculated
1632355200,713,-,-,not calculated
1632355200,209,n,1,n = |nums.size()|
1632355200,334,n,1,n = |nums.size()|
1632355200,238,n,1,n = |nums.size()|
1632355200,560,n,n,n = |nums.size()|
1632468215,1137,n,n,
1632470216,547,n,1,n = |isConnected.size()|
1632470405,415,n,1,"n = min(|num1.size()|, |num2.size()|)"
1632469428,200,m * n,m * n,"m = grid.size(), n = |grid[i].size()|"
1632471088,409,n,n,n = |s.size()|
1632555781,1293,m * n,m * n,"m = |grid.size()|, n = |grid[i].size()|"
1632556546,117,-,-,not calculated
1632557169,572,-,-,not calculated
1632558876,290,-,-,not calculated
1632559678,763,n,1,n = |s.size()|
1632639105,1091,m * n,m * n,"m = |grid.size()|, n = |grid[i].size()|"
1632641232,130,m * n,m * n,"m = |board.size()|, n = |board[i].size()|"
1632642813,797,-,-,not calculated
1632649132,49,E * log(E),E,E = total string length of |strs|
1632652111,43,m * n,1,"m = |num1.size()|, n = |num2.size()|"
1632653054,782,-,-,not calculated
1632720357,78,n^2,1,n = |nums.size()|
1632721240,90,-,-,not calculated
1632721952,187,-,-,not calculated
1632722620,5,n^2,1,n = |s.size()|
1632729760,929,E * log(E),E,E = total string length of |emails|
1632794107,47,-,-,not calculate
1632795300,39,n^2,n,n = |candidates.size()|
1632796828,40,-,-,not calculated
1632797537,2,n,1,"n = max(nodes count of |l1|, nodes count of |l2|)"
1632799320,142,n,1,n = nodes count of |head|
1632824560,922,n,1,n = |nums.size()|
1632891902,17,-,-,not calculated
1632892741,22,-,-,not calculated
1632894985,79,m * n,1,"m = |board.size()|, n = |board[i].size()|"
1632896282,160,n,n,"n = max(nodes count of |headA|, nodes count of |headB|)"
1632906000,725,n,1,n = nodes count of |head|
1632980038,213,n,1,n = |nums.size()|
1632980439,55,n,1,n = |nums.size()|
1632980888,24,n,1,n = nodes count of |head|
1632982627,707,-,-,not calculated
1632987223,698,n * log(n),n^2,n = |nums.size()|
1633059407,1143,m * n,m * n,"m = |text1.size()|, n = |text2.size()|"
1633059544,45,n,1,n = |nums.size()|
1633060271,62,m * n,m * n,
1633061197,143,n,n,n = nodes count of |head|
1633062467,25,n,n,n = nodes count of |head|
1633152026,174,m * n,m * n,"m = |dungeon.size()|, n = |dungeon[i].size()|"
1633155807,413,n,1,n = |nums.size()|
1633156455,155,-,-,not calculated
1633156950,1249,n,n,n = |s.size()|
1633158396,1823,n,n,
1633231996,91,n,n,n = |s.size()|
1633233168,139,-,-,not calculated
1633234049,108,log(n),log(n),n = |nums.size()|
1633236433,105,n * log(m),n * log(m),"n = |preorder.size()|, m = |inorder.size()|"
1633239729,103,n,n,n = nodes count of |root|
1633317884,463,m * n,1,"m = |grid.size()|, n =|grid[i].size()|"
1633320734,300,n * log(n),n,n = |nums.size()|
1633321502,673,n^2,n,n = |nums.size()|
1633321870,199,n,log(n),n = nodes count of |root|
1633322411,113,n * log(n),log(n),n = nodes count of |root|
1633324271,450,log(n),1,n = nodes count of |root|
1633359712,37,1,1,
1633368103,7,n,1,n = digits of |x|
1633369991,93,1,1,
1633406792,583,m * n,m * n,"m = |word1.size()|, n = |word2.size()|"
1633407952,230,n,n,n = nodes count of |root|
1633408623,173,-,-,not calculated
1633409934,501,n,log(n),n = nodes count of |root|
1633449083,1545,-,-,not calculated
1633449665,717,n,1,n = |bits.size()|
1633449971,338,-,-,not calculated
1633450822,898,n^2,n,n = |arr.size()|
1633452063,201,-,-,not calculated
1633452404,693,k,1,k = digits of |n|
1633453100,1356,n * log(n),1,n = |arr.size()|
1633453939,762,-,-,not calculated
1633494564,442,n,1,n = |nums.size()|
1633495550,343,n^2,n,
1633496519,322,m * n,m,"n = |coins.size()|, m = |amount|"
1633497078,72,m * n,m * n,"m = |word1.size()|, n = |word2.size()|"
1633498043,236,(log(n))^2,log(n),n = nodes count of |root|
1633499699,297,-,-,not calculated
1633572673,997,n + m,n,m = |trust.size()|
1633573961,1557,-,-,not calculated
1633575441,841,-,-,not calculated
1633666682,208,-,-,not calculated
1633668536,384,-,-,not calculated
1633669012,215,n * log(n),1,n = |nums.size()|
1633669783,347,n * log(n),n,n = |nums.size()|
1633679723,257,n,log(n),n = nodes count of |root|
1633681655,4,log(n + m),1,"m = |nums1.size()|, n = |nums2.size()|"
1633760516,202,-,-,not calculated
1633761755,149,n^2,n,n = |points.size()|
1633763131,451,n * log(n),n,n = |s.size()|
1633763918,973,n * log(n),n,n = |points.size()|
1633765094,212,m * n * E,E,"m = |board.size()|, n = |board[i].size()|, E = max string length in |words|"
1633768716,96,n^2,n,
1633770546,8,n,1,n = |s.size()|
1633844239,509,n,1,
1633844788,6,m * n,1,"m = |s.size()|, n = |numRows|"
1633845363,9,n,1,n = digits of |x|
1633846805,10,m * n,m * n,"m = |s.size()|, n = |p.size()|"
1633935194,543,n,log(n),n = nodes count of |root|
1633936043,746,n,n,n = |cost.size()|
1633944690,12,n,1,n = digits of |num|
1633945756,114,n,n,n = nodes count of |root|
1633946119,111,n,log(n),n = nodes count of |root|
1633946964,110,n,log(n),n = nodes count of |root|
1634008827,374,log(n),1,
1634010759,740,n * log(n),n,n = |nums.size()|
1634012282,1887,n * log(n),n,n = |nums.size()|
1634047875,2018,-,-,not calculated
1634098265,1008,n,n,n = |preorder.size()|
1634099545,540,log(n),1,n = |nums.size()|
1634099980,1534,n^3,1,n = |arr.size()|
1634100393,1822,n,1,n = |nums.size()|
1634100901,946,m + n,"max(m, n)","m = |pushed.size()|, n = |popped.size()|"
1634102483,852,log(n),1,n = |arr.size()|
1634183792,279,n * sqrt(n),n,
1634186123,53,n,1,n = |nums.size()|
1634186921,918,n,1,n = |nums.size()|
1634263688,309,n,1,n = |prices.size()|
1634264253,152,n,1,n = |nums.size()|
1634264916,1567,n,1,n = |nums.size()|
1634361209,123,n,n,n = |prices.size()|
1634362149,1014,n,1,n = |values.size()|
1634362548,122,n,1,n = |prices.size()|
1634450834,437,n,log(n),n = nodes count of |root|
1634451644,714,n,1,n = |prices.size()|
1634456264,1361,n,n,
1634457126,1881,-,-,not calculated
1634533028,993,n,n,n = nodes count of |root|
1634534996,42,n,n,n = |height.size()|
1634611910,496,m + n^2,n,"m = |nums1.size()|, n = |nums2.size()|"
1634616335,1559,m * n,"max(m, n)","m = |grid.size()|, n = |grid[i].size()|"
1634707071,151,n,1,n = |s.size()|
1634707826,264,n,n,
1634709113,148,n * log(n),n,n = nodes count of |head|
1634793254,380,-,-,not calculated
1634882128,931,m * n,m * n,"m = |matrix.size()|, n = |matrix[i].size()|"
1634954120,154,log(n),1,n = |nums.size()|
1634954194,1314,m * n * k^2,1,"m = |mat.size()|, n = |mat[i].size()|"
1634954261,304,-,-,not calculated
1635084205,222,n,log(n),n = nodes count of |root|
1635084466,63,m * n,m * n,"m = |obstacleGrid.size()|, n = |obstacleGrid[i].size()|"
1635142942,64,m * n,1,"m = |grid.size()|, n = |grid[i].size()|"
1635142998,221,m * n,m * n,"m = |matrix.size()|, n = |matrix[i].size()|"
1635228790,516,n^2,n^2,n = |s.size()|
1635229589,561,n * log(n),1,n = |nums.size()|
1635314453,376,n,n,n = |nums.size()|
1635402727,392,n,1,"n = max(|s.size()|, |t.size()|)"
1635483384,518,m,n,"n = |amount|, m = |coins.size()|"
1635576545,1044,n^2,n,n = |s.size()|
1635577782,377,n,1,n = |nums.size()|
1635657131,430,n,n,n = nodes count of |head|
1635762185,1480,n,1,n = |nums.size()|
1635848636,980,m * n,"max(m, n)","m = |grid.size()|, n = |grid[i].size()|"
1635934602,129,n,n,n = nodes count of |root|
1636020053,404,n,log(n),n = nodes count of |root|
1636020560,1254,m * n,m * n,"m = |grid.size()|, n = |grid[i].size()|"
1636107697,441,1,1,
1636200478,260,n,n,n = |nums.size()|
1636200975,884,-,-,not calculated
1636268616,951,n,log(n),"n = max(nodes count of |root1|, nodes count of |root2|)"
1636269498,13,n,1,n = |s.size()|
1636269925,14,n * E,E,"n = |strs.size()|, E = max string length in |strs|"
1636367199,621,n * log(n),n,n = |tasks.size()|
1636452626,1178,-,-,not calculated
1636537958,1043,n^2,n,n = |arr.size()|
1636637312,1413,n,1,n = |nums.size()|
1636637675,1221,n,1,n = |s.size()|
1636712980,888,n + m,m,"n = |aliceSizes.size()|, m = |bobSizes.size()||"
1636775460,739,n^2,n,n = |temperatures.size()|
1636867104,1286,-,-,not calculated
1636970945,368,n^2,n,n = |nums.size()|
1637057607,668,m * log(n),1,
1637144267,16,n^2 + n * log(n),1,n = |nums.size()|
1637145808,23,n,1,n = total nodes count in |lists||
1637231266,448,n,n,n = |nums.size()|
1637332759,461,1,1,
1637388855,26,n,1,n = |nums.size()|
1637389266,27,n^2,1,n = |nums.size()|
1637390195,28,n * m,m,"n = |haystack.size()|, m = |needle.size()||"
1637390313,29,-,-,not calculated
1637472197,106,n,n,n = |inorder.size()|
1637575977,18,n^3 + n * log(n),n,n = |nums.size()|
1637663491,952,-,-,not calculated
1637664293,2011,n,1,n = |operations.size()|
1637664648,258,1,1,
1637748640,1002,n * E,1,"n = |words.size()|, E = max string length in |words|"
1637834577,263,-,-,not calculated
1637933848,35,log(n),1,n = |nums.size()|
1637992943,31,-,-,not calculated
1638080945,50,n,1,
1638180456,721,-,-,not calculated
1638267562,85,-,-,not calculated
1638367234,32,n,n,n = |s.size()|
1638368659,41,n,1,n = |nums.size()|
1638421458,328,n,1,n = nodes count of |head|
1638527857,520,n,1,n = |word.size()|
1638627730,1032,-,-,not calculated
1638684527,337,n,log(n),n = nodes count of |root|
1638785770,1217,n,1,n = |position.size()|
1638872889,1290,n,1,n = nodes count of |head|
1638957076,563,n,log(n),n = nodes count of |root|
1639043885,1306,-,-,not calculated
1639130363,790,n,1,
1639204080,878,"log(n * min(a, b))",1,
1639292692,416,n + S,S,"n = |nums.size()|, S = |accumulate(nums.begin(), nums.end(), 0)|"
1639390259,1446,n,1,n = |s.size()|
1639476347,938,n,log(n),n = nodes count |root|
1639562641,147,n * log(n),n,n = nodes count of |head|
1639581445,30,n * m,n + m,"n = |s.size()|, m = |words.size()|"
1639650103,310,n,n,
1639754067,57,n,1,n = |intervals.size()|
1639798550,902,m * E,E,"m = digits of |n|, E = total string length in |digits|"
1639906705,394,n,n,n = |s.size()|
1639994821,1200,-,-,not calculated
1640068458,61,n,1,n = nodes count of |head|
1640181487,507,sqrt(n),1,n = |num|
1640254196,210,n,n^2,n = |numCourses|
1640341744,44,m * n,m * n,"m = |s.size()|, n = |p.size()|"
1640436158,227,n,n,n = |s.size()|
1640501959,66,n,1,n = |digits.size()|
1640600766,476,1,1,
1640688019,58,n,1,n = |s.size()|
1640772812,92,m,m - n,"m = |right|, n = |left|"
1640858735,1015,n,1,n = |k|
1640932444,1026,n,n,n = nodes count of |root|
1641018982,312,n^3,n^2,n = |nums.size()|
1641108373,1010,n,n,n = |time.size()|
1641204999,38,-,-,not calculated
1641291355,1009,1,1,
1641377883,131,n * n^2,n,n = |s.size()|
1641463884,1094,n * log(n),n,n = |trips.size()|
1641550266,382,-,-,not calculated
1641621353,1463,m * n^2,m * n^2,"m = |grid.size()|, n = |grid[i].size()|"
1641709784,1041,n,1,n = |instructions.size()|
1641809668,67,n,1,"n = max(|a.size()|, |b.size()|)"
1641895478,1022,n,log(n),n = nodes count of |root|
1641981598,2042,n,1,n = |s.size()|
1642068641,452,n,n,n = |points.size()|
1642155290,69,log(n),1,n = |x|
1642227974,1345,n,n,n = |arr.size()|
1642317260,849,n,n,n = |seats.size()|
1642402211,80,n,1,n = |nums.size()|
1642500950,605,n,1,
1642587714,95,-,-,not calculated
1642673617,875,n * log(m),1,"n = |piles.size()|, m = max element in |piles|"
1642774331,134,n,1,n = |gas.size()|
1642831045,1510,n * sqrt(n),n,
1642917897,1291,-,-,not calculated
1643019139,769,n,1,n = |arr.size()|
1643105297,941,n,1,n = |arr.size()|
1643128023,60,n,1,
1643191597,1305,n + m,n + m,"n = nodes count of |root1|, m =  nodes count of |root2|"
1643278371,421,n,n,n = |nums.size()|
1643364752,211,-,-,not calculated
1643433425,84,n,n,n = |heights.size()|
1643520261,515,n,n,n = nodes count of |root|
1643599565,1672,m * n,1,"m = |accounts.size()|, n = |accounts[i].size()|"
1643694112,1267,m * n,m + n,"m = |grid.size()|, n = |grid[i].size()|"
1643776658,1081,n,1,n = |s.size()|
1643866174,454,n^2,n^2,n = |nums1.size()|
1643947335,525,n,n,n = |nums.size()|
1644046016,1720,n,1,n = |encoded.size()|
1644128531,1752,n,1,n = |nums.size()|
1644228798,389,n,1,n = |t.size()|
1644316434,1020,m * n,m * n,"m = |grid.size()|, n = |grid[i].size()|"
1644401802,532,n * log(n),n,n = |nums.size()|
1644405019,840,n * m,1,"m = |grid.size()|, n = |grid[i].size()|"
1644478978,1155,m * n,m,m = |target|
1644481394,1828,n * m,1,"m = |points.size()|, n = |queries.size()|"
1644481889,1929,n,1,n = |nums.size()|
1644482168,2090,n,1,n = |nums.size()|
1644487435,1419,n,1,n = |croakOfFrogs.size()|
1644491077,767,n,n,n = |s.size()|
1644493026,1786,(n + E) * log(n) + n^2,E + n,E = |edges.size()|
1644498353,124,n,n,n = nodes count of |root|
1644575693,504,log(n)/log(7),log(n)/log(7),n = |num|
1644576520,393,n,1,n = |data.size()|
1644587892,752,-,-,not calculated
1644594109,397,-,-,not calculated
1644595383,1529,n,1,n = |target.size()|
1644654459,127,-,-,not calculated
1644655722,1390,sqrt(m) * n,m,"m = max element in |nums|, n = |nums.size()|"
1644656412,1582,m * n,"max(n, m)","m = |mat.size()|, n = |mat[i].size()|"
1644759992,492,sqrt(n),1,n = |area|
1644833741,1879,-,-,not calculated
1644920104,1122,n,1,n = |arr1.size()|
1644920732,315,n * log(n),n,n = |nums.size()|
1644921963,1039,n^2,n^2,n = |values.size()|
1645006239,1017,log(n),1,
1645006627,2134,n,1,n = |nums.size()|
1645007711,1509,n * log(n),1,n = |nums.size()|
1645094268,1031,n,1,n = |nums.size()|
1645094995,1191,n,n,n = |arr.size()|
1645106118,1705,-,-,not calculated
1645107887,375,n * log(n),log(n) + n^2,
1645109016,1323,n,1,n = digits of |num|
1645110152,684,n * E,n * E,"n = nodes count in |edges|, E = |edges.size()|"
1645179934,402,n + k,1,n = |num.size()|
1645180769,1145,n,n,n = nodes count of |root|
1645185067,1408,n^2 * E^2,1,"n = |words.size()|, E = |words[i].size()|"
1645199352,65,n,1,n = |s.size()|
1645252793,1675,n * log(n),n,n = |nums.size()|
1645253563,1053,n^2,1,n = |arr.size()|
1645337955,1288,n * log(n),1,n = |intervals.size()|
1645338794,539,n * log(n),n,n = |timePoints.size()|
1645440155,1963,n,1,n = |s.size()|
1645454062,862,n,n,n = |nums.size()|
1645455030,907,n,n,n = |arr.size()|
1645456135,352,-,-,not calculated
1645458502,771,m,n,"m = |stones.size()|, n = |jevels.size()|"
1645458760,1029,n,n,n = |costs.size()|
1645524060,171,n,1,n = |columnTitle.size()|
1645524303,1674,n,m,"n = |nums.size()|, m = |limit|"
1645611916,133,n^2,n^2,n = nodes count of |node|
1645614827,1903,n,1,n = |num.size()|
1645615551,1791,1,1,
1645697979,1838,n * log(n),1,n = |nums.size()|
1645699265,1124,n,n,n = |hours.size()|
1645776291,165,n,1,"n = max(|version1.size()|, |version2.size()|)"
1645807685,146,-,-,not calculated
1645855280,847,n^2,n,n = |graph.size()|
1645889531,51,1,1,
1645892344,52,-,-,not calculated
1645893691,86,n,1,n = nodes count of |head|
1645932447,662,n,n,n = nodes count of |root|
1646034210,228,n,1,n = |nums.size()|
1646116191,109,n,log(n),n = nodes count of |head|
1646139889,68,n * E,1,"n = |words.size()|, E = |words[i].size()|"
1646217223,1344,1,1,
1646302437,1507,n,1,n = |date.size()|
1646388558,799,n^2,1,n = |query_row|
1646390098,1462,n^2,n,n = |numCourses|
1646445844,999,n^2,1,n = |board.size()|
1646446489,388,n^2,n,n = |input.size()|
1646542150,1359,n^2,n^2,
1646651333,1968,n,1,n = |nums.size()|
1646714169,1019,n,n,n = nodes count of |head|
1646820437,779,"min(n, log(k))","min(n, log(k))",
1646821047,1007,n,1,n = |tops.size()|
1646907454,1680,n,1,
1646908143,1464,n,1,n = |nums.size()|
1646994460,983,1,1,
1647062764,138,n,n,n = nodes count of |head|
1647065323,1905,m * n,m * n,"m = |grid1.size()|, n = |grid1[i].size()|"
1647149326,1162,n^2,n^2,n = |grid.size()|
1647151727,417,-,-,not calculated
1647154425,2200,n,n,n = |nums.size()|
1647253767,71,n,n,n = |path.size()|
1647339563,934,n^2,n^2,n = |grid.size()|
1647340932,1926,n * m,n * m,"n = |maze.size()|, m = |maze[i].size()|"
1647427017,2180,1,1,
1647511694,856,n,n,n = |s.size()|
1647512542,1319,n,n * m,m = |connections.size()|
1647598447,316,n,1,n = |s.size()|
1647599160,1376,n,n,
1647600841,802,n,n^2,n = |graph.size()|
1647668403,895,-,-,not calculated
1647671463,1129,N_r * N_b,n^2,"N_r = |redEdges.size()|, N_b = |blueEdges.size()|"
1647673780,1466,E,E,E = |connections.size()|
1647755825,1654,-,-,not calculated
1647756845,365,-,-,not calculated
1647851487,433,-,-,not calculated
1647921074,1663,n,1,
1648031268,991,log(n),1,n = |target|
1648031698,1615,n^2 * M,M,M = |roads.size()|
1648032122,886,n,m,m = |dislikes.size()|
1648032979,785,n,n,n = |graph.size()|
1648117410,881,n * log(n),1,n = |people.size()|
1648203089,1471,n * log(n),n,n = |arr.size()|
1648266974,1035,n * m,n * m,"n = |nums1.size()|, m = |nums2.size()|"
1648395219,1337,-,-,not calculated
1648462831,81,n,1,n = |nums.size()|
1648548649,287,n,1,n = |nums.size()|
1648636976,1829,n,1,n = |nums.size()|
1648705682,410,-,-,not calculated
1648808544,2149,n,1,n = |nums.size()|
1648887053,680,n,1,n = |s.size()|
1648971543,704,-,-,not calculated
1649050097,1721,n,1,n = nodes count of |head|
1649153536,912,n * log(n),n,n = |nums.size()|
1649239852,923,-,-,not calculated
1649242399,367,log(n),1,n = |num|
1649242676,1385,m * log(m) + m * log(n),1,"m = |arr1.size()|, n = |arr2.size()|"
1649243579,744,n,1,n = |letters.size()|
1649327269,1046,n * log(n),n,n = |stones.size()|
1649327747,278,log(n),1,
1649414242,1539,log(n),1,
1649420157,703,k*log(k),k,
1649476844,1608,n * log(n),1,
1649570366,682,n*L,n*L,
1649571859,1351,m*log(n),1,
1649672507,1260,m*n,1,
1649673058,1346,n,n,
1649759057,633,sqrt(c),1,
1649759383,289,m*n,m*n,
1649848079,1855,m*log(n),1,
1649932631,1523,1,1,
1649932832,1491,n,1,
1650022234,669,H,1,
1650022690,1281,log(n)/log(10),1,
1650077170,538,n,H,
1650077624,1779,n,1,
1650078724,976,n*log(n),n,
1650168649,897,n,n,
1650170540,1502,n*log(n),1,
1650170759,1790,n,1,
1650276876,589,-,-,
1650277265,1232,n,1,
1650339893,99,n,H,
1650340633,1588,n^2,n,
1650449227,1572,n,1,
1650501162,705,1,N,
1650502905,1768,n+m,1,
1650503189,1678,n,1,
1650588591,709,n,1,
1650589095,1309,n,1,
1650589588,953,-,-,
1650696742,535,-,-,
1650781437,1396,1,n,
1650882767,284,-,-,
1650883394,1603,1,1,
1650883793,303,1,n,
1650969337,1584,n^2 * log(n),n^2,
1650970938,896,n,1,
1651054875,1202,-,-,
1651056054,459,n,n,
1651140956,150,n*E,n,
1651141701,1631,-,-,
1651217053,1367,-,-,
1651285849,989,"max(N,log(k)/log10)",1,
1651286363,399,-,-,
1651375300,2006,n^2,1,
1651468658,905,n,1,
1651469517,1886,n^2,1,
1651571998,581,-,-,
1651658390,1679,n,n,
1651658666,1630,-,-,
1651659282,429,n,H,
1651745557,225,-,-,
1651746241,556,-,-,
1651747304,503,-,-,
1651832955,1209,-,-,
1651901423,456,n*log(n),n,
1651985044,910,n*log(n,1,
1651985487,341,-,-,
1652090126,692,-,-,
1652180489,216,-,-,
1652182060,445,-,-,
1652238931,1641,-,-,
1652350262,860,-,-,
1652350761,1845,-,-,
1652438020,1093,-,-,
1652502898,743,n*E*log(n),E*log(n),
1652504395,1797,-,-,
1652590790,1302,n,H,
1652591113,729,-,-,
1652592922,622,-,-,
1652694978,140,n*L,L*m,
1652782534,1379,-,-,
1652869287,1192,-,-,
1652955430,329,-,-,
1653041866,643,-,-,
1653113013,1991,-,-,
1653200803,647,n^3) to O(n^2,1) to O(n^2,
1653301424,474,-,-,
1653372234,1437,-,-,
1653473583,354,nlog(n),n,
1653560775,623,-,-,
1653646430,1342,-,-,
1653711600,268,-,-,
1653804572,318,-,-,
1653906030,405,-,-,
1653992354,1461,-,-,
1654077851,2266,-,-,
1654165315,867,-,-,
1654234889,1688,-,-,
1654350155,1827,-,-,
1654408634,654,-,-,
1654510587,1049,-,-,
1654597519,219,-,-,
1654682567,1332,-,-,
1654770912,794,-,-,
1654831791,342,-,-,
1654921763,1658,-,-,
1655015364,1695,-,-,
1655115690,1128,-,-,
1655202360,1382,-,-,
1655299261,1048,-,-,
1655374940,1609,-,-,
1655474973,968,-,-,
1655534908,745,-,-,
1655615905,1268,-,-,
1655719883,820,-,-,
1655820724,1642,-,-,
1655892855,1805,-,-,
1655979767,630,-,-,
1656065197,1364,-,-,
1656131048,665,-,-,
1656225418,1423,n,1,
1656324501,1689,n,1,
1656410925,1647,-,-,
1656499047,406,-,-,
1656561717,462,-,-,
1656670826,1710,-,-,
1656739517,1465,-,-,
1656829616,1576,-,-,
1656929819,135,-,-,
1657016645,128,-,-,
1657102685,640,-,-,
1657190084,97,-,-,
1657275681,1473,-,-,
1657356281,1696,-,-,
1657433586,830,-,-,
1657534900,2274,-,-,
1657536128,1967,-,-,
1657602600,473,-,-,
1657707154,1863,-,-,
1657794812,1146,-,-,
1657809593,611,n^2,1,
1657888975,658,k + log(n),1,
1657890008,1894,n,n,
1657953511,576,MaxMove * m * n,m * n,
1657955727,1760,-,-,
1658039135,629,-,-,
1658039860,1552,n * log(n),1,
1658140563,1074,-,-,
1658141668,1283,-,-,
1658204842,1898,-,-,
1658205447,1870,-,-,
1658313489,1482,n * log(RANGE),1,
1658314925,1818,-,-,
1658336415,792,m * log(n),n,
1658404669,275,log(n),1,
1658504084,482,n,1,
1658568933,1712,n + log(n),1,
1658645564,826,-,-,
1658646762,436,n * log(n),n,
1658834354,528,-,-,
1658917313,1574,-,-,
1658917895,1508,-,-,
1659003468,1292,-,-,
1659005793,1498,-,-,
1659090091,890,n*E,E,
1659091280,981,-,-,
1659091770,1300,-,-,
1659170660,916,-,-,
1659172536,1802,-,-,
1659172968,1901,-,-,
1659242458,307,-,-,
1659243649,1488,-,-,
1659350186,1562,-,-,
1659350930,1648,-,-,
1659435695,1201,-,-,
1659436233,911,-,-,
1659437701,378,-,-,
1659523848,2311,-,-,
1659609106,858,-,-,
1659695330,1089,-,-,
1659769951,458,-,-,
1659848879,1220,-,-,
1659954128,1266,-,-,
1660040386,823,-,-,
1660134995,958,-,-,
1660190675,1920,-,-,
1660310382,2221,n^2,1,
1660365724,292,-,-,
1660458910,126,-,-,
1660557958,401,-,-,
1660646003,804,-,-,
1660731956,326,-,-,
1660818237,1338,n*log(n),n,
1660904257,659,-,-,
1660975844,871,-,-,
1661064524,936,-,-,
1661096785,89,-,-,
1661097314,137,-,-,
1661097862,166,-,-,
1661098916,179,-,-,
1661100003,345,-,-,
1661156581,207,-,-,
1661157263,220,-,-,
1661157903,223,-,-,
1661183246,229,n,n,
1661249252,234,n,n,
1661253439,355,-,-,
1661335236,317,-,-,
1661338216,468,n,1,
1661346484,724,n,n,
1661423014,205,n,n,
1661490698,869,-,-,
1661578913,363,m^2 * n^2,m * n,
1661670068,1329,k^2 * log(k),k,
1661766420,349,n,n,
1661782006,73,m*n,m+n,
1661782625,76,n,1,
1661854521,434,n,1,
1661940715,412,n,1,
1661941401,414,n,n,
1661963745,687,-,-,
1662025393,1448,-,-,
1662121047,637,-,-,
1662182452,967,-,-,
1662277060,424,n,n,
1662278349,987,n*log^2(n),n,
1662370339,299,n,n,
1662459067,814,-,-,
1662544330,606,n,log(n),
1662559676,217,n,n,
1662570409,500,n*E,1,
1662571121,495,n,1,
1662630816,1706,n*m,1,
1662709405,1996,n,1,
1662813528,188,-,-,
1662877020,1383,n*log(n),n,
1662976265,948,n,1,
1662978303,2131,n,n,
1663063697,541,n,1,
1663138902,1457,n,log(n),
1663243775,2007,n,n,
1663321960,1770,n^2,n,
1663393297,336,-,-,
1663482470,815,-,-,
1663580782,609,n*E,n*E,
1663665164,718,-,-,
1663769400,985,"max(firstList.size(), secondList.size())",1,
1663823674,100,n,log(n),
1663925939,232,-,-,
1663995309,590,-,-,
1664102111,735,n,n,
1664185074,990,n,1,
1664185614,947,-,-,
1664275387,838,n,n,
1664358540,661,n * m,1,
1664443359,87,-,-,
1664443691,214,-,-,
1664542714,218,-,-,
1664597547,455,k*log(k),1,
1664685040,645,n,1,
1664771504,1578,n,1,
1664777811,747,n,1,
1664858910,819,-,-,
1664937806,868,-,-,
1665022813,933,log(n),n,
1665108666,732,-,-,
1665209133,783,-,-,
1665210085,821,n,1,
1665292364,513,n,log(n),
1665380357,655,-,-,
1665466100,559,n,log(n),
1665554084,965,n,log(n),
1665638397,2236,-,-,
1665713296,2095,n,1,
1665811579,1531,-,-,
1665902404,1335,-,-,
1665991097,1832,n,1,
1666073632,2331,n,log(n),
1666141250,671,n,h,
1666221575,872,n1+n2,log(n1)+log(n2),
1666359165,2368,n,n^2,
1666436526,748,-,-,
1666529685,824,-,-,
1666617544,1295,-,-,
1666666334,1662,E,E,
1666753398,523,n,k,
1666852339,835,-,-,
1666930468,1018,-,-,
1667015246,2136,n*log(n),n,
1667104013,796,n,n,
1667191048,766,-,-,
1667300122,728,-,-,
1667397824,697,-,-,
1667489110,925,n,1,
1667557659,696,n,1,
1667622014,1051,n * log(n),n,
1667715703,899,n*log(n),n,
1667818081,1071,-,-,
1667902882,1544,n,1,
1667990487,901,n,n,
1668075155,1047,n,1,
1668167055,1078,E,E,
1668258233,295,n*log(n),n,
1668318557,1154,-,-,
1668430038,241,-,-,
1668509907,357,-,-,
1668596780,372,n,1,
1668678374,722,nE,E,
1668737342,908,n,1,
1668839262,587,-,-,
1668928016,1037,1,1,
1669033165,859,n,1,
1669111484,812,n^3,1,
1669202159,914,n,n,
1669257638,657,n,1,
1669344720,530,-,-,
1669450088,1470,-,-,
1669537450,1287,log(n),1,
1669716209,2225,n*log(n),n,
1669717622,1252,m + n + indices.size(),m + n,
1669784129,1207,n,n,
1669897183,1704,-,-,
1669975617,1657,n*log(n),n,
1670059406,1160,words.size()*E+chars.size(),E,
1670133337,2256,n,n,
1670227851,1455,sentence.size() + searchWord.size() * words count in sentence,sentence.size(),
1670323866,1486,n,1,
1670343428,1614,s.size(),1,
1670412846,1512,nums.size(),nums.size(),
1670495565,1556,digit of n,1,
1670557438,1971,edges.size() + n,edges.size() + n,
1670650202,2000,word.size(),1,
1670756081,2022,m * n,1,
1670845900,2032,nums1.size() + nums2.size() + nums3.size(),"max(nums1.size(), nums2.size(), nums3.size())",
1670931488,1925,n^2,n,
1671010649,1784,s.size(),1,
1671070831,1816,s.size(),1,
1671186601,1748,n,n,
1671253419,1716,1,1,
1671342358,1668,-,-,
1671455040,1652,code.size()*k,1,
1671532549,1837,n/k,1,
1671625768,1684,allowed.size() + words.size() * elem length in words,allowed.size,
1671708729,1859,s.size(),s.size(),
1671768074,1732,gain.size(),1,
1671864098,1952,sqrt(n),1,
1671950638,2389,nums.size() * log(nums.size()) + nums.size() * queries.size(),nums.size(),
1672036767,1656,-,-,
1672145999,2279,capacity.size() * log(capacity.size(),capacity.size(),
1672195678,1962,piles.size() * log(piles.size*(),piles.size(),
1672311424,1834,tasks.size() * log(tasks.size()),tasks.size(),
1672395272,1961,"max(s.size(), total length in words)",total length of words,
1672463882,1844,s.size(),1,
1672555695,2057,nums.size(),1,
1672642442,1941,s.size(),s.size(),
1672743061,944,strs.size() * strs[i].size(),1,
1672835610,2244,tasks.size(),tasks.size(),
1672907032,2053,total string length of arr,total string length of arr,
1672992904,1833,costs.size() * log(costs.size()),costs.size(),
1673073648,2154,nums.size(),nums.size(),
1673183382,2255,-,-,
1673261616,2293,nums.size() * log(nums.size(),nums.size(),
1673330767,2248,total elemnents of nums,total elements of nums.,
1673434746,1443,-,-,
1673510693,1519,edges.size(),"edges,szie()",
1673608195,2246,parent.szie(),parent.size(),
1673675646,1061,s1.size(),s1.size,
1673775220,2421,edges.size() * log(edges.size()),edges.size(),
1673856147,2235,1,1,
1673856506,2239,nums.size(),1,
1673962206,2319,grid.size()^2,1,
1674035605,2418,names.size() * log(names.size(),names.size(),
1674101054,974,nums.size(),k,
1674181438,491,-,-,
1674264569,2423,cnt.size() * log(cnt.size()),cnt.size(),
1674361741,2395,nums.size(),nums.size(),
1674455451,2164,nums.size() * log(nums.size()),nums.size(),
1674546978,909,-,-,
1674632935,2359,-,-,
1674711452,787,-,-,
1674801209,472,-,-,
1674962914,460,-,-,
1675064526,2347,-,-,
1675169764,1626,ages.size() * log(ages.size()),ages.size(),
1675253276,2206,nums.size(),nums.size(),
1675335803,2427,"min(n, m)",1,
1675401577,2413,1,1,
1675492380,2399,s.size(),1,
1675605193,2540,"max(nums1.size(), nums2.size())",nums1.size(),
1675672943,2544,ldigits(n),1,
1675778210,904,fruits.size(),1,
1675851423,2215,nums1.size() + nums2.size(),nums1.size() + nums2.size(),
1675925752,2306,-,-,
1676015275,2243,log(s.size())/log(k),s.size(),
1676098354,2325,key.size() + message.size(),1,
1676184733,2477,n,n,
1676284410,2315,s.size(),1,
1676374793,2363,items1.size()+items2.size(),items1.size()+items2.size(),
1676461515,2351,s.size(),s.size(),
1676544057,2169,"max(num1, num2)","max(num1, num2)",
1676630227,2469,1,1,
1676698334,2535,maxDigitCount(nums),1,
1676788969,2373,grid.size()*grid.size(),1,
1676818080,2485,,,
1676818394,125,s.size(),1,
1676861926,107,countOf(root),depthOf(root),
1676910133,2278,n,n,n = s.size()
1676913449,2264,n,n,n = num.size()
1676976324,2194,1,1,
1677062065,1011,n*log(n),1,n = weights.size()
1677153743,502,n * log(n),n,n = profits.size()
1677223611,2259,n,1,n = number.size()
1677302659,2148,n,1,n = nums.size()
1677397899,2220,n,1,n = digit of start and goal
1677481920,427,n^3,n,n = grid.size()
1677566400,652,n^2,n^2,n = node count of |root|
1677638630,2357,n,n,n = |nums.size()|
1677662681,2367,n,n,n = |nums.size()|
1677758607,443,n,1,n = |chars.size()|
1677825097,2460,n,1,n = |nums.size()|
1677908397,2444,n,1,n = |nums.size()|
1677991335,2441,n,n,n = |nums.size()|
1678085656,2490,n,1,n = |sentece.size()|
1678192004,2187,log(n),1,n = |numeric_limits<int64_t>::max()|
1678278126,2437,1,1,
1678297790,2210,n,1,n = |nums.size()|
1678335031,2451,m * n,m * n,m = |words.size()| and n = |words[i].size()|
1678362739,2506,E,E,E = total string length of |words|
1678368731,2446,1,1,
1678425798,2574,n,n,n = |nums.size()|
1678469578,2299,n,1,n = |password.size()|
1678469818,2181,n,1,n = nodes cound of |head|
1678517174,2231,n,n,n = digits of |num|
1678604263,2269,n,1,n = digits of |num|
1678611581,2185,n * m,1,n = |words.size()| and m = |pref.size()|
1678612555,2520,n,1,n = digits of |num|
1678676774,2455,n,1,n = |nums.size()|
1678791649,2529,log(n),1,n = |nums.size()|
1678866245,2553,n,m,"n = |nums.size()|, m = digits of |nums[i]|"
