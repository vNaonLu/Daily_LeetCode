
#ifndef Q1249_UNITTEST_H__
#define Q1249_UNITTEST_H__
#include <gtest/gtest.h>

#include "q1249.hpp"
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 1249.
  *       Minimum Remove to Make Valid Parentheses
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given a string <font face="monospace">s</font> of ‘'('’ , ‘')'’ and
  *   lowercase English characters.
  *   
  *   Your task is to remove the minimum number of parentheses ( ‘'('’ or
  *   ‘')'’ , in any positions ) so that the resulting “parentheses string”
  *   is valid and return “any” valid string.
  *   
  *   Formally, a “parentheses string” is valid if and only.
  *   
  *   - It is the empty string, contains only lowercase characters,.
  *   
  *   - It can be written as ‘AB’ ( ‘A’ concatenated with ‘B’ ), where ‘A’
  *   and ‘B’ are valid strings,.
  *   
  *   - It can be written as ‘(A)’ , where ‘A’ is a valid string.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘1 ≤ s.length ≤ 10⁵’
  *   • ‘s[i]’ is either ‘'('’ , ‘')'’ , or lowercase English letter ‘.’
  *
*/

TEST(q1249, sample_input01) {
  l1249::Solution solver;
  string s = "lee(t(c)o)de)";
  string exp = "lee(t(c)o)de";
  EXPECT_EQ(solver.minRemoveToMakeValid(s), exp);
}

TEST(q1249, sample_input02) {
  l1249::Solution solver;
  string s = "a)b(c)d";
  string exp = "ab(c)d";
  EXPECT_EQ(solver.minRemoveToMakeValid(s), exp);
}

TEST(q1249, sample_input03) {
  l1249::Solution solver;
  string s = "(a(b(c)d)";
  string exp = "a(b(c)d)";
  EXPECT_EQ(solver.minRemoveToMakeValid(s), exp);
}

#endif