#include <gtest/gtest.h>
#include <iostream>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1201.
 *       Ugly Number III
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   An “ugly number” is a positive integer that is divisible by ‘a’ , ‘b’
 *   , or ‘c’
 *   Given four integers ‘n’ , ‘a’ , ‘b’ , and ‘c’ , return the ‘nᵗʰ’ “ugly
 *   number” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ n, a, b, c ≤ 10⁹’
 *   • ‘1 ≤ a × b × c ≤ 10¹⁸’
 *   • It is guaranteed that the result will be in range ‘[1, 2 × 10⁹]’ .
 *
 */

struct q1201 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  private:
    template <typename type>
    type gcd(type a, type b) {
      return b == 0 ? a : gcd(b, a % b);
    }

  public:
    int nthUglyNumber(int n, int a, int b, int c) {
      int64_t lo = 0, hi = min<int64_t>({a, b, c}) * n;
      int64_t mid = 0, res = -1;
      int64_t lcm_abc = ((int64_t)a * b * c) * gcd(c, gcd(a, b)) / (gcd(a, b) * gcd(b, c) * gcd(a, c));
      int64_t lcm_ab = ((int64_t)a * b) / gcd(a, b);
      int64_t lcm_bc = ((int64_t)b * c) / gcd(b, c);
      int64_t lcm_ac = ((int64_t)a * c) / gcd(a, c);

      while (lo <= hi) {
        mid = lo + (hi - lo) / 2;

        auto curr = mid / a + mid / b + mid / c - mid / lcm_ab - mid / lcm_bc - mid / lcm_ac + mid / lcm_abc;

        if (curr < n) {
          lo = mid + 1;
        } else {
          res = mid;
          hi = mid - 1;
        }
      }

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1201, sample_input01) {
  solution = new Solution();
  int n = 3;
  int a = 2;
  int b = 3;
  int c = 5;
  int exp = 4;
  int act = solution->nthUglyNumber(n, a, b, c);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1201, sample_input02) {
  solution = new Solution();
  int n = 4;
  int a = 2;
  int b = 3;
  int c = 4;
  int exp = 6;
  int act = solution->nthUglyNumber(n, a, b, c);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1201, sample_input03) {
  solution = new Solution();
  int n = 5;
  int a = 2;
  int b = 11;
  int c = 13;
  int exp = 10;
  int act = solution->nthUglyNumber(n, a, b, c);
  EXPECT_EQ(act, exp);
  delete solution;
}