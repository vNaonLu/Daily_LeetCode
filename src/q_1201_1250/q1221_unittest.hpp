
#ifndef Q1221_UNITTEST_H__
#define Q1221_UNITTEST_H__
#include <gtest/gtest.h>

#include "q1221.hpp"
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1221.
 *       Split a String in Balanced Strings
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *    “Balanced” strings are those that have an equal quantity of ‘'L'’ and
 *   ‘'R'’
 *   Given a “balanced” string ‘s’ , split it in the maximum amount of
 *   balanced
 *   Return “the maximum amount of split “balanced” strings” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s.length ≤ 1000’
 *   • ‘s[i]’ is either ‘'L'’ or ‘'R'’ .
 *   • ‘s’ is a “balanced” string.
 *
 */

TEST(q1221, sample_input01) {
  l1221::Solution solver;
  string s = "RLRRLLRLRL";
  int exp = 4;
  EXPECT_EQ(solver.balancedStringSplit(s), exp);
}

TEST(q1221, sample_input02) {
  l1221::Solution solver;
  string s = "RLLLLRRRLR";
  int exp = 3;
  EXPECT_EQ(solver.balancedStringSplit(s), exp);
}

TEST(q1221, sample_input03) {
  l1221::Solution solver;
  string s = "LLLLRRRR";
  int exp = 1;
  EXPECT_EQ(solver.balancedStringSplit(s), exp);
}

TEST(q1221, sample_input04) {
  l1221::Solution solver;
  string s = "RLRRRLLRLL";
  int exp = 2;
  EXPECT_EQ(solver.balancedStringSplit(s), exp);
}

#endif