
#ifndef LEETCODE_Q1217_H__
#define LEETCODE_Q1217_H__
#include <iostream>
#include <vector>

namespace l1217 {
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1217.
 *       Minimum Cost to Move Chips to The Same Position
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   We have ‘n’ chips, where the position of the ‘iᵗʰ’ chip is
 *   ‘position[i]’
 *   We need to move all the chips to “the same position” . In one step, we
 *   can change the position of the ‘iᵗʰ’ chip from ‘position[i]’
 *       -  ‘position[i] + 2’ or ‘position[i] - 2’ with ‘cost = 0’
 *       -  ‘position[i] + 1’ or ‘position[i] - 1’ with ‘cost = 1’
 *   Return “the minimum cost” needed to move all the chips to the same
 *   position.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ position.length ≤ 100’
 *   • ‘1 ≤ position[i] ≤ 10^9’
 *
 */

class Solution {
 public:
  int minCostToMoveChips(vector<int>& position) {
    int even = 0, odd = 0;
    for (const auto& x : position) {
      if (x & 1) ++odd;
      else ++even;
    }
    return min(odd, even);
  }
};
}  // namespace l1217

#endif