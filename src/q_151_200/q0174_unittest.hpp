
#ifndef Q174_UNITTEST_H__
#define Q174_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0174.hpp"
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 174.
  *      Dungeon Game
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   The demons had captured the princess and imprisoned her in “the
  *   bottom-right corner” of a ‘dungeon’ . The ‘dungeon’ consists of ‘m x
  *   n’ rooms laid out in a 2D grid. Our valiant knight was initially
  *   positioned in “the top-left room” and must fight his way through
  *   ‘dungeon’ to rescue the princess.
  *   
  *   The knight has an initial health point represented by a positive
  *   integer. If at any point his health point drops to ‘0’ or below, he
  *   dies immediately.
  *   
  *   Some of the rooms are guarded by demons (represented by negative
  *   integers), so the knight loses health upon entering these rooms; other
  *   rooms are either empty (represented as 0) or contain magic orbs that
  *   increase the knight's health (represented by positive integers).
  *   
  *   To reach the princess as quickly as possible, the knight decides to
  *   move only “rightward” or “downward” in each step.
  *   
  *   Return “the knight's minimum initial health so that he can rescue the
  *   princess”.
  *   
  *   “Note” that any room can contain threats or power-ups, even the first
  *   room the knight enters and the bottom-right room where the princess is
  *   imprisoned.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘m = dungeon.length’
  *   • ‘n = dungeon[i].length’
  *   • ‘1 ≤ m, n ≤ 200’
  *   • ‘-1000 ≤ dungeon[i][j] ≤ 1000’
  *
*/

TEST(q174, sample_input01) {
  l174::Solution solver;
  vector<vector<int>> dungeon = {{-2, -3, 3}, {-5, -10, 1}, {10, 30, -5}};
  int exp = 7;
  EXPECT_EQ(solver.calculateMinimumHP(dungeon), exp);
}

TEST(q174, sample_input02) {
  l174::Solution solver;
  vector<vector<int>> dungeon = {{0}};
  int exp = 1;
  EXPECT_EQ(solver.calculateMinimumHP(dungeon), exp);
}

#endif