
#ifndef Q152_UNITTEST_H__
#define Q152_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0152.hpp"
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 152.
  *      Maximum Product Subarray
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given an integer array ‘nums’ , find a contiguous non-empty subarray
  *   within the array that has the largest product, and return “the
  *   product”
  *   It is “guaranteed” that the answer will fit in a “32-bit”
  *   A “subarray” is a contiguous subsequence of the array.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘1 ≤ nums.length ≤ 2 × 10⁴’
  *   • ‘-10 ≤ nums[i] ≤ 10’
  *   • The product of any prefix or suffix of ‘nums’ is “guaranteed” to fit in a “32-bit” integer.
  *
*/

TEST(q152, sample_input01) {
  l152::Solution solver;
  vector<int> nums = {2, 3, -2, 4};
  int exp = 6;
  EXPECT_EQ(solver.maxProduct(nums), exp);
}

TEST(q152, sample_input02) {
  l152::Solution solver;
  vector<int> nums = {-2, 0, -1};
  int exp = 0;
  EXPECT_EQ(solver.maxProduct(nums), exp);
}

#endif