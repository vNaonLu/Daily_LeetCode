
#ifndef LEETCODE_Q187_H__
#define LEETCODE_Q187_H__
#include <iostream>
#include <string>
#include <unordered_map>
#include <vector>

namespace l187 {
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * #187
  *      Repeated DNA Sequences
  *
  *============================= Description =============================
  *
  *   The “DNA sequence” is composed of a series of nucleotides abbreviated
  *   as ‘'A'‘ , ‘'C'‘ , ‘'G'‘ , and ‘'T'‘.
  *   
  *   - For example, ‘"ACGAATTCCG"‘ is a “DNA sequence”.
  *   
  *   When studying “DNA” , it is useful to identify repeated sequences
  *   within the DNA.
  *   
  *   Given a string ‘s‘ that represents a “DNA sequence” , return all the “
  *   ‘10‘ -letter-long” sequences (substrings) that occur more than once in
  *   a DNA molecule. You may return the answer in “any order”.
  *
  * ============================= Constraints =============================
  *
  *   • ‘1 <= s.length <= 10^(5)‘
  *   • ‘s[i]‘ is either ‘'A'‘ , ‘'C'‘ , ‘'G'‘ , or ‘'T'‘ .
  *
*/

class Solution {
 public:
  vector<string> findRepeatedDnaSequences(string s) {
    unordered_map<string, int> keep;
    vector<string> res;
    for (int i = 0; i < (int)s.size() - 10 + 1; ++i) {
      ++keep[s.substr(i, 10)];
    }
    for (auto it = keep.begin(); it != keep.end(); ++it) {
      if (it->second > 1) res.push_back(it->first);
    }
    return res;
  }
};
}  // namespace l187

#endif