
#ifndef LEETCODE_Q200_H__
#define LEETCODE_Q200_H__
#include <iostream>
#include <queue>
#include <vector>

namespace l200 {
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 200. Number of Islands
  * Given an m x n 2D binary grid grid which
  * represents a map of ';1'; s (land) and ';0'; s (water),
  * return the number of islands .
  * An “island“ is surrounded by water and is formed
  * by connecting adjacent lands horizontally or
  * vertically. You may assume all four edges of the grid
  * are all surrounded by water.
  *
  * Constraints:
  * -  m == grid.length 
  * -  n == grid[i].length 
  * -  1 <= m, n <= 300 
  * -  grid[i][j] is ';0'; or ';1'; .
  *
*/
class Solution {
 private:
  vector<int> dir = {-1, 0, 1, 0, 0, 1, 0, -1};

 public:
  int numIslands(vector<vector<char>>& grid) {
    int res = 0;
    int m = grid.size(), n = grid[0].size();
    queue<pair<int, int>> island;
    for (int i = 0; i < m; ++i) {
      for (int j = 0; j < n; ++j) {
        if (grid[i][j] == '1') {
          island.push({i, j});
          grid[i][j] = '0';
          while (!island.empty()) {
            auto& p = island.front();
            for (int k = 0; k < dir.size(); ++k) {
              int x = p.first + dir[k],
                  y = p.second + dir[++k];
              if (x >= 0 && x < m && y >= 0 && y < n && grid[x][y] == '1') {
                grid[x][y] = '0';
                island.emplace(x, y);
              }
            }
            island.pop();
          }
          ++res;
        }
      }
    }

    return res;
  }
};
}  // namespace l200
#endif