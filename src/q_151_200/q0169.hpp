
#ifndef LEETCODE_Q169_H__
#define LEETCODE_Q169_H__
#include <iostream>
#include <vector>

namespace l169 {
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 169. Majority Element
  *
  * Given an array nums of size n , return the
  * majority element .
  * The majority element is the element that appears
  * more than &lfloor;n / 2&rfloor; times. You may
  * assume that the majority element always exists in the
  * array.
  *
  * Constraints:
  * -  n == nums.length 
  * -  1 <= n <= 5 * 10^(4) 
  * -  -2^(31) <= nums[i] <= 2^(31) - 1 
  *  “Follow-up:“ Could you solve the problem in linear time and in O(1) space?
  *
*/
class Solution {
 public:
  int majorityElement(vector<int>& nums) {
    unordered_map<int, int> cnt;
    for (const auto& n : nums) ++cnt[n];
    int res = 0;
    int cur_cnt = 0;
    for (auto it = cnt.begin(); it != cnt.end(); ++it) {
      if (cur_cnt < it->second) {
        res = it->first;
        cur_cnt = it->second;
      }
    }
    return res;
  }
};
}  // namespace l169
#endif