
#ifndef LEETCODE_Q151_H__
#define LEETCODE_Q151_H__
#include <iostream>
#include <string>

namespace l151 {
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 151.
 *      Reverse Words in a String
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an input string ‘s’ , reverse the order of the “words”
 *   A “word” is defined as a sequence of non-space characters. The “words”
 *   in ‘s’ will be separated by at least one
 *   Return “a string of the words in reverse order concatenated by a
 *   single space.”
 *    “Note” that ‘s’ may contain leading or trailing spaces or multiple
 *   spaces between two words. The returned string should only have a
 *   single space separating the words. Do not include any extra spaces.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s.length ≤ 10⁴’
 *   • ‘s’ contains English letters (upper-case and lower-case), digits, and spaces ‘' '’ .
 *   • There is “at least one” word in ‘s’ .
 *
 */

class Solution {
 public:
  string reverseWords(string s) {
    string res;
    int length = 0;
    for (int i = s.size() - 1; i >= 0; --i) {
      if (s[i] != ' ') ++length;
      if (length > 0 && (s[i] == ' ' || i == 0)) {
        if (!res.empty()) res.push_back(' ');
        res += s.substr(s[i] == ' ' ? i + 1 : i, length);
        length = 0;
      }
    }
    return res;
  }
};
}  // namespace l151

#endif