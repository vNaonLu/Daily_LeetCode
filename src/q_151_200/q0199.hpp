
#ifndef LEETCODE_Q199_H__
#define LEETCODE_Q199_H__
#include <iostream>
#include <leetcode/treenode.hpp>
#include <vector>

namespace l199 {
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 199.
  *      Binary Tree Right Side View
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given the ‘root’ of a binary tree, imagine yourself standing on the
  *   “right side” of it, return “the values of the nodes you can see
  *   ordered from top to bottom”.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • The number of nodes in the tree is in the range ‘[0, 100]’ .
  *   • ‘-100 ≤ Node.val ≤ 100’
  *
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
 private:
  void helper(TreeNode *p, vector<int> &r, int level = 0) {
    if (p == nullptr) return;
    if (level >= r.size()) r.resize(level + 1, 0);
    r[level] = p->val;
    helper(p->left, r, level + 1);
    helper(p->right, r, level + 1);
  }

 public:
  vector<int> rightSideView(TreeNode *root) {
    vector<int> res;
    helper(root, res);
    return res;
  }
};
}  // namespace l199

#endif