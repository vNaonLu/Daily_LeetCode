#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 153.
 *      Find Minimum in Rotated Sorted Array
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Suppose an array of length ‘n’ sorted in ascending order is “rotated”
 *   between ‘1’ and ‘n’ times. For example, the array ‘nums =
 *   [0,1,2,4,5,6,7]’ might
 *       -  ‘[4,5,6,7,0,1,2]’ if it was rotated ‘4’
 *       -  ‘[0,1,2,4,5,6,7]’ if it was rotated ‘7’
 *   Notice that “rotating” an array ‘[a[0], a[1], a[2], ..., a[n-1]]’ 1
 *   time results in the array ‘[a[n-1], a[0], a[1], a[2], ..., a[n-2]]’
 *   Given the sorted rotated array ‘nums’ of “unique” elements, return
 *   “the minimum element of this array”
 *   You must write an algorithm that runs in ‘O(log n) time.’ 
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘n = nums.length’
 *   • ‘1 ≤ n ≤ 5000’
 *   • ‘-5000 ≤ nums[i] ≤ 5000’
 *   • All the integers of ‘nums’ are “unique” .
 *   • ‘nums’ is sorted and rotated between ‘1’ and ‘n’ times.
 *
 */

struct q153 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int findMin(vector<int>& nums) {
      int beg = 0, end = nums.size() - 1;
      if (nums[end] >= nums[beg])
        return nums[beg];
      else {
        while (beg <= end) {
          int mid = beg + (end - beg) / 2;
          if (mid + 1 < nums.size() && nums[mid] > nums[mid + 1]) return nums[mid + 1];
          if (mid - 1 >= 0 && nums[mid - 1] > nums[mid]) return nums[mid];
          if (nums[mid] > nums[0])
            beg = mid + 1;
          else
            end = mid - 1;
        }
        return -1;
      }
    }
  };

  class Solution *solution;
};

TEST_F(q153, sample_input01) {
  solution = new Solution();
  vector<int> nums = {3, 4, 5, 1, 2};
  int exp = 1;
  EXPECT_EQ(solution->findMin(nums), exp);
  delete solution;
}

TEST_F(q153, sample_input02) {
  solution = new Solution();
  vector<int> nums = {4, 5, 6, 7, 0, 1, 2};
  int exp = 0;
  EXPECT_EQ(solution->findMin(nums), exp);
  delete solution;
}

TEST_F(q153, sample_input03) {
  solution = new Solution();
  vector<int> nums = {11, 13, 15, 17};
  int exp = 11;
  EXPECT_EQ(solution->findMin(nums), exp);
  delete solution;
}