
#ifndef LEETCODE_Q152_H__
#define LEETCODE_Q152_H__
#include <iostream>
#include <vector>

namespace l152 {
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 152.
 *      Maximum Product Subarray
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an integer array ‘nums’ , find a contiguous non-empty subarray
 *   within the array that has the largest product, and return “the
 *   product”
 *   It is “guaranteed” that the answer will fit in a “32-bit”
 *   A “subarray” is a contiguous subsequence of the array.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 2 × 10⁴’
 *   • ‘-10 ≤ nums[i] ≤ 10’
 *   • The product of any prefix or suffix of ‘nums’ is “guaranteed” to fit in a “32-bit” integer.
 *
 */

class Solution {
 public:
  int maxProduct(vector<int>& nums) {
    int res = nums[0], prod = nums[0];
    for (int i = 1; i < nums.size(); ++i) {
      if (prod == 0) prod = 1;
      prod *= nums[i];
      res = max(res, prod);
    }
    prod = 1;
    for (int i = nums.size() - 1; i >= 0; --i) {
      if (prod == 0) prod = 1;
      prod *= nums[i];
      res = max(res, prod);
    }
    return res;
  }
};
}  // namespace l152

#endif