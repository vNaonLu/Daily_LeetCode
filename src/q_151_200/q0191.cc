#include <gtest/gtest.h>
#include <iostream>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 191.
 *      Number of 1 Bits
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Write a function that takes an unsigned integer and returns the number
 *   of '1' bits it has (also known as the <a
 *   href="http://en.wikipedia.org/wiki/Hamming_weight"
 *   target="_blank">Hamming
 *    “Note:”
 *       - Note that in some languages, such as Java, there is no unsigned
 *   integer type. In this case, the input will be given as a signed
 *   integer type. It should not affect your implementation, as the
 *   integer's internal binary representation is the same, whether it is
 *   signed or unsigned.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The input must be a “binary string” of length ‘32’ .
 *
 */

struct q191 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int hammingWeight(uint32_t n) {
      int res = 0;
      while (n != 0) {
        n &= n - 1;
        ++res;
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q191, sample_input01) {
  solution = new Solution();
  uint32_t n = 0b00000000000000000000000000001011;
  int exp = 3;
  EXPECT_EQ(solution->hammingWeight(n), exp);
  delete solution;
}

TEST_F(q191, sample_input02) {
  solution = new Solution();
  uint32_t n = 0b00000000000000000000000010000000;
  int exp = 1;
  EXPECT_EQ(solution->hammingWeight(n), exp);
  delete solution;
}

TEST_F(q191, sample_input03) {
  solution = new Solution();
  uint32_t n = 0b11111111111111111111111111111101;
  int exp = 31;
  EXPECT_EQ(solution->hammingWeight(n), exp);
  delete solution;
}