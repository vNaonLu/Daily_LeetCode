#include <gtest/gtest.h>
#include <iostream>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 190.
 *      Reverse Bits
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Reverse bits of a given 32 bits unsigned
 *    “Note:”
 *       - Note that in some languages, such as Java, there is no unsigned
 *   integer type. In this case, both input and output will be given as a
 *   signed integer type. They should not affect your implementation, as
 *   the integer's internal binary representation is the same, whether it
 *   is signed or unsigned.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The input must be a “binary string” of length ‘32’
 *
 */

struct q190 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    uint32_t reverseBits(uint32_t n) {
      uint32_t res = 0;
      for (int i = 0; i < 32; ++i) {
        res = (res << 1) + (n & 1);
        n >>= 1;
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q190, sample_input01) {
  solution = new Solution();
  uint32_t n = 0b00000010100101000001111010011100;
  uint32_t exp = 0b00111001011110000010100101000000;
  EXPECT_EQ(solution->reverseBits(n), exp);
  delete solution;
}

TEST_F(q190, sample_input02) {
  solution = new Solution();
  uint32_t n = 0b11111111111111111111111111111101;
  uint32_t exp = 0b10111111111111111111111111111111;
  EXPECT_EQ(solution->reverseBits(n), exp);
  delete solution;
}