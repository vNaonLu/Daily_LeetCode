
#ifndef Q151_UNITTEST_H__
#define Q151_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0151.hpp"
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 151.
 *      Reverse Words in a String
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an input string ‘s’ , reverse the order of the “words”
 *   A “word” is defined as a sequence of non-space characters. The “words”
 *   in ‘s’ will be separated by at least one
 *   Return “a string of the words in reverse order concatenated by a
 *   single space.”
 *    “Note” that ‘s’ may contain leading or trailing spaces or multiple
 *   spaces between two words. The returned string should only have a
 *   single space separating the words. Do not include any extra spaces.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s.length ≤ 10⁴’
 *   • ‘s’ contains English letters (upper-case and lower-case), digits, and spaces ‘' '’ .
 *   • There is “at least one” word in ‘s’ .
 *
 */

TEST(q151, sample_input01) {
  l151::Solution solver;
  string s = "the sky is blue";
  string exp = "blue is sky the";
  EXPECT_EQ(solver.reverseWords(s), exp);
}

TEST(q151, sample_input02) {
  l151::Solution solver;
  string s = "  hello world  ";
  string exp = "world hello";
  EXPECT_EQ(solver.reverseWords(s), exp);
}

TEST(q151, sample_input03) {
  l151::Solution solver;
  string s = "a good   example";
  string exp = "example good a";
  EXPECT_EQ(solver.reverseWords(s), exp);
}

TEST(q151, sample_input04) {
  l151::Solution solver;
  string s = "  Bob    Loves  Alice   ";
  string exp = "Alice Loves Bob";
  EXPECT_EQ(solver.reverseWords(s), exp);
}

TEST(q151, sample_input05) {
  l151::Solution solver;
  string s = "Alice does not even like bob";
  string exp = "bob like even not does Alice";
  EXPECT_EQ(solver.reverseWords(s), exp);
}

#endif