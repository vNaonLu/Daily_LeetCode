
#ifndef LEETCODE_Q162_H__
#define LEETCODE_Q162_H__
#include <iostream>
#include <vector>

namespace l162 {
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 162. Find Peak Element
  *
  * A peak element is an element that is strictly
  * greater than its neighbors.
  * Given an integer array nums , find a peak
  * element, and return its index. Ifthe array contains
  * multiple peaks, return the index to “any of the peaks“
  * .
  * You may imagine that nums[-1] = nums[n] =
  * -&infin; .
  * You must write an algorithm that runs in O(log n)
  * time.
  *
  * Constraints:
  * -  1 <= nums.length <= 1000 
  * -  -2^(31) <= nums[i] <= 2^(31) - 1 
  * -  nums[i] != nums[i + 1] for all valid i .
  *
*/
class Solution {
 public:
  int findPeakElement(vector<int>& nums) {
    int l = 0, r = nums.size() - 1;
    while (l < r) {
      int m = l + (r - l) / 2;
      if (nums[m] > nums[m + 1]) {
        r = m;
      } else {
        l = m + 1;
      }
    }
    return l;
  }
};
}  // namespace l162
#endif