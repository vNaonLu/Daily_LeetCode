#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/anyorder.hpp>
#include <string>
#include <unordered_map>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 187.
 *      Repeated DNA Sequences
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   The “DNA sequence” is composed of a series of nucleotides abbreviated
 *   as ‘'A'’ , ‘'C'’ , ‘'G'’ , and ‘'T'’
 *       - For example, ‘'ACGAATTCCG'’ is a “DNA sequence”
 *   When studying “DNA” , it is useful to identify repeated sequences
 *   within the
 *   Given a string ‘s’ that represents a “DNA sequence” , return all the “
 *   ‘10’ -letter-long” sequences (substrings) that occur more than once in
 *   a DNA molecule. You may return the answer in “any order” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s.length ≤ 10⁵’
 *   • ‘s[i]’ is either ‘'A'’ , ‘'C'’ , ‘'G'’ , or ‘'T'’ .
 *
 */

struct q187 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    vector<string> findRepeatedDnaSequences(string s) {
      unordered_map<string, int> keep;
      vector<string> res;
      for (int i = 0; i < (int)s.size() - 10 + 1; ++i) {
        ++keep[s.substr(i, 10)];
      }
      for (auto it = keep.begin(); it != keep.end(); ++it) {
        if (it->second > 1) res.push_back(it->first);
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q187, sample_input01) {
  solution = new Solution();
  string s = "AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT";
  vector<string> exp = {"AAAAACCCCC", "CCCCCAAAAA"};
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solution->findRepeatedDnaSequences(s), exp);
  delete solution;
}

TEST_F(q187, sample_input02) {
  solution = new Solution();
  string s = "AAAAAAAAAAAAA";
  vector<string> exp = {"AAAAAAAAAA"};
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solution->findRepeatedDnaSequences(s), exp);
  delete solution;
}