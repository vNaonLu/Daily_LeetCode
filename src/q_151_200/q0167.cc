#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 167.
 *      Two Sum II - Input Array Is Sorted
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a “1-indexed” array of integers ‘numbers’ that is already “
 *   “sorted in non-decreasing order” ” , find two numbers such that they
 *   add up to a specific ‘target’ number. Let these two numbers be
 *   ‘numbers[index₁]’ and ‘numbers[index₂]’ where ‘1 ≤ index₁ < index₂ ≤
 *   numbers.length’
 *   Return “ the indices of the two numbers, ” ‘index₁’ “ and ” ‘index₂’
 *   “, “added by one” as an integer array ” ‘[index₁, index₂]’ “ of length
 *   2.”
 *   The tests are generated such that there is “exactly one solution” .
 *   You “may not” use the same element twice.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘2 ≤ numbers.length ≤ 3 × 10⁴’
 *   • ‘-1000 ≤ numbers[i] ≤ 1000’
 *   • ‘numbers’ is sorted in “non-decreasing order” .
 *   • ‘-1000 ≤ target ≤ 1000’
 *   • The tests are generated such that there is “exactly one solution” .
 *
 */

struct q167 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    vector<int> twoSum(vector<int>& numbers, int target) {
      int l = 0, r = numbers.size() - 1;
      while (l < r) {
        int cur = numbers[l] + numbers[r];
        if (cur > target) {
          --r;
        } else if (cur < target) {
          ++l;
        } else {
          return {l + 1, r + 1};
        }
      }
      return {-1, -1};
    }
  };

  class Solution *solution;
};

TEST_F(q167, sample_input01) {
  solution = new Solution();
  vector<int> numbers = {2, 7, 11, 15};
  int target = 9;
  vector<int> exp = {1, 2};
  EXPECT_EQ(solution->twoSum(numbers, target), exp);
  delete solution;
}

TEST_F(q167, sample_input02) {
  solution = new Solution();
  vector<int> numbers = {2, 3, 4};
  int target = 6;
  vector<int> exp = {1, 3};
  EXPECT_EQ(solution->twoSum(numbers, target), exp);
  delete solution;
}

TEST_F(q167, sample_input03) {
  solution = new Solution();
  vector<int> numbers = {-1, 0};
  int target = -1;
  vector<int> exp = {1, 2};
  EXPECT_EQ(solution->twoSum(numbers, target), exp);
  delete solution;
}