
#ifndef Q199_UNITTEST_H__
#define Q199_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0199.hpp"
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 199.
  *      Binary Tree Right Side View
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given the ‘root’ of a binary tree, imagine yourself standing on the
  *   “right side” of it, return “the values of the nodes you can see
  *   ordered from top to bottom”.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • The number of nodes in the tree is in the range ‘[0, 100]’ .
  *   • ‘-100 ≤ Node.val ≤ 100’
  *
*/

TEST(q199, sample_input01) {
  l199::Solution solver;
  TreeNode* root = TreeNode::generate({1, 2, 3, 5, 4});
  vector<int> exp = {1, 3, 4};
  EXPECT_EQ(solver.rightSideView(root), exp);
}

TEST(q199, sample_input02) {
  l199::Solution solver;
  TreeNode* root = TreeNode::generate({1, 3});
  vector<int> exp = {1, 3};
  EXPECT_EQ(solver.rightSideView(root), exp);
}

TEST(q199, sample_input03) {
  l199::Solution solver;
  TreeNode* root = TreeNode::generate({});
  vector<int> exp = {};
  EXPECT_EQ(solver.rightSideView(root), exp);
}

#endif