#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 162.
 *      Find Peak Element
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   A peak element is an element that is strictly greater than its
 *   Given an integer array ‘nums’ , find a peak element, and return its
 *   index. Ifthe array contains multiple peaks, return the index to “any
 *   of the peaks”
 *   You may imagine that ‘nums[-1] = nums[n] = -&infin;’
 *   You must write an algorithm that runs in ‘O(log n)’ time.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 1000’
 *   • ‘-2³¹ ≤ nums[i] ≤ 2³¹ - 1’
 *   • ‘nums[i] ≠ nums[i + 1]’ for all valid ‘i’ .
 *
 */

struct q162 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int findPeakElement(vector<int>& nums) {
      int l = 0, r = nums.size() - 1;
      while (l < r) {
        int m = l + (r - l) / 2;
        if (nums[m] > nums[m + 1]) {
          r = m;
        } else {
          l = m + 1;
        }
      }
      return l;
    }
  };

  class Solution *solution;
};

TEST_F(q162, sample_input01) {
  solution = new Solution();
  vector<int> nums = {1, 2, 3, 1};
  int exp = 2;
  EXPECT_EQ(solution->findPeakElement(nums), exp);
  delete solution;
}

TEST_F(q162, sample_input02) {
  solution = new Solution();
  vector<int> nums = {1, 2, 1, 3, 5, 6, 4};
  int exp = 5;
  EXPECT_EQ(solution->findPeakElement(nums), exp);
  delete solution;
}