#include <algorithm>
#include <gtest/gtest.h>
#include <iostream>
#include <map>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1626.
 *       Best Team With No Conflicts
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are the manager of a basketball team. For the upcoming tournament,
 *   you want to choose the team with the highest overall score. The score
 *   of the team is the “sum” of scores of all the players in the
 *   However, the basketball team is not allowed to have “conflicts” . A
 *   “conflict” exists if a younger player has a “strictly higher” score
 *   than an older player. A conflict does “not” occur between players of
 *   the same
 *   Given two lists, ‘scores’ and ‘ages’ , where each ‘scores[i]’ and
 *   ‘ages[i]’ represents the score and age of the ‘iᵗʰ’ player,
 *   respectively, return “the highest overall score of all possible
 *   basketball teams” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ scores.length, ages.length ≤ 1000’
 *   • ‘scores.length = ages.length’
 *   • ‘1 ≤ scores[i] ≤ 10⁶’
 *   • ‘1 ≤ ages[i] ≤ 1000’
 *
 */

struct q1626 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int bestTeamScore(vector<int> &scores, vector<int> &ages) {
      vector<pair<int, int>> items;
      for (int i = 0; i < scores.size(); ++i) {
        items.emplace_back(scores[i], ages[i]);
      }
      sort(items.begin(), items.end());

      map<int, int> res;
      res[0] = 0;
      for (auto [score, age] : items) {
        auto iter0  = res.upper_bound(age);
        int  score2 = score + (--iter0)->second;
        auto iter   = res.insert(iter0, {age, score2});
        if (iter->second < score2) {
          iter->second = score2;
        }
        ++iter;
        while (iter != res.end() && iter->second <= score2) {
          auto it2 = iter++;
          res.erase(it2);
        }
      }
      return res.rbegin()->second;
    }
  };

  class Solution *solution;
};

TEST_F(q1626, sample_input01) {
  solution           = new Solution();
  vector<int> scores = {1, 3, 5, 10, 15};
  vector<int> ages   = {1, 2, 3, 4, 5};
  int         exp    = 34;
  int         act    = solution->bestTeamScore(scores, ages);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1626, sample_input02) {
  solution           = new Solution();
  vector<int> scores = {4, 5, 6, 5};
  vector<int> ages   = {2, 1, 2, 1};
  int         exp    = 16;
  int         act    = solution->bestTeamScore(scores, ages);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1626, sample_input03) {
  solution           = new Solution();
  vector<int> scores = {1, 2, 3, 5};
  vector<int> ages   = {8, 9, 10, 1};
  int         exp    = 6;
  int         act    = solution->bestTeamScore(scores, ages);
  EXPECT_EQ(act, exp);
  delete solution;
}
