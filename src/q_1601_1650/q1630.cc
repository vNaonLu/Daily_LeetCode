#include <gtest/gtest.h>
#include <iostream>
#include <unordered_map>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1630.
 *       Arithmetic Subarrays
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   A sequence of numbers is called “arithmetic” if it consists of at
 *   least two elements, and the difference between every two consecutive
 *   elements is the same. More formally, a sequence ‘s’ is arithmetic if
 *   and only if ‘s[i+1] - s[i] = s[1] - s[0] ’ for all valid ‘i’
 *   For example, these are “arithmetic”
 *   1, 3, 5, 7,
 *   7, 7, 7,
 *   3, -1, -5,
 *   The following sequence is not “arithmetic”
 *   1, 1, 2, 5,
 *   You are given an array of ‘n’ integers, ‘nums’ , and two arrays of ‘m’
 *   integers each, ‘l’ and ‘r’ , representing the ‘m’ range queries, where
 *   the ‘iᵗʰ’ query is the range ‘[l[i], r[i]]’ . All the arrays are
 *   “0-indexed”
 *   Return “a list of ” ‘boolean’ “elements” ‘answer’ “, where”
 *   ‘answer[i]’ “is” ‘true’ “if the subarray” ‘nums[l[i]], nums[l[i]+1],
 *   ... , nums[r[i]]’ “ can be “rearranged” to form an “arithmetic”
 *   sequence, and” ‘false’ “otherwise.” 
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘n = nums.length’
 *   • ‘m = l.length’
 *   • ‘m = r.length’
 *   • ‘2 ≤ n ≤ 500’
 *   • ‘1 ≤ m ≤ 500’
 *   • ‘0 ≤ l[i] < r[i] < n’
 *   • ‘-10⁵ ≤ nums[i] ≤ 10⁵’
 *
 */

struct q1630 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    bool helper(vector<int>& nums, int l, int r) {
      unordered_map<int, int> m;
      int min_n = numeric_limits<int>::max(),
          max_n = numeric_limits<int>::min();
      for (int i = l; i <= r; ++i) {
        auto& x = nums[i];
        ++m[x];
        min_n = min(min_n, x);
        max_n = max(max_n, x);
      }
      if (min_n != max_n) {
        int stride = (max_n - min_n) / (r - l);
        for (int i = min_n; i <= max_n; i += stride) {
          if (m[i] != 1) {
            return false;
          }
        }
      }
      return true;
    }

   public:
    vector<bool> checkArithmeticSubarrays(vector<int>& nums, vector<int>& l, vector<int>& r) {
      vector<bool> res(l.size(), false);
      for (int i = 0; i < res.size(); ++i) {
        res[i] = helper(nums, l[i], r[i]);
      }

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1630, sample_input01) {
  solution = new Solution();
  vector<int> nums = {-12, -9, -3, -12, -6, 15, 20, -25, -20, -15, -10};
  vector<int> l = {0, 1, 6, 4, 8, 7};
  vector<int> r = {4, 4, 9, 7, 9, 10};
  vector<bool> exp = {0, 1, 0, 0, 1, 1};
  vector<bool> act = solution->checkArithmeticSubarrays(nums, l, r);
  EXPECT_EQ(act, exp);
  delete solution;
}