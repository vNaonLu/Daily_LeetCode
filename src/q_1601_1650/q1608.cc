#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1608.
 *       Special Array With X Elements Greater Than or Equal X
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an array ‘nums’ of non-negative integers. ‘nums’ is
 *   considered “special” if there exists a number ‘x’ such that there are
 *   “exactly” ‘x’ numbers in ‘nums’ that are “greater than or equal to”
 *   ‘x’
 *   Notice that ‘x’ “does not” have to be an element in ‘nums’
 *   Return ‘x’ “if the array is “special” , otherwise, return ” ‘-1’ . It
 *   can be proven that if ‘nums’ is special, the value for ‘x’ is “unique”
 *   .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 100’
 *   • ‘0 ≤ nums[i] ≤ 1000’
 *
 */

struct q1608 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    int helper(vector<int> &nums, int x) {
      int count = 0;
      for (auto &y : nums) {
        if (y >= x) {
          ++count;
        }
      }
      return count - x;
    }

   public:
    int specialArray(vector<int> &nums) {
      int l = 0, r = nums.size();
      while (l <= r) {
        int m = l + (r - l) / 2,
            result = helper(nums, m);
        if (result == 0) {
          return m;
        } else if (result > 0) {
          l = m + 1;
        } else {
          r = m - 1;
        }
      }

      return -1;
    }
  };

  class Solution *solution;
};

TEST_F(q1608, sample_input01) {
  solution = new Solution();
  vector<int> nums = {3, 5};
  int exp = 2;
  int act = solution->specialArray(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1608, sample_input02) {
  solution = new Solution();
  vector<int> nums = {0, 0};
  int exp = -1;
  int act = solution->specialArray(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1608, sample_input03) {
  solution = new Solution();
  vector<int> nums = {0, 4, 3, 0, 4};
  int exp = 3;
  int act = solution->specialArray(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}