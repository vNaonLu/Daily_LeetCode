#include <gtest/gtest.h>
#include <iostream>
#include <string>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 1629.
 *       Slowest Key
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   A newly designed keypad was tested, where a tester pressed a sequence
 *   of ‘n’ keys, one at a
 *   You are given a string ‘keysPressed’ of length ‘n’ , where
 *   ‘keysPressed[i]’ was the ‘iᵗʰ’ key pressed in the testing sequence,
 *   and a sorted list ‘releaseTimes’ , where ‘releaseTimes[i]’ was the
 *   time the ‘iᵗʰ’ key was released. Both arrays are “0-indexed” . The
 *   ‘0ᵗʰ’ key was pressed at the time ‘0’ ,and every subsequent key was
 *   pressed at the “exact” time the previous key was
 *   The tester wants to know the key of the keypress that had the “longest
 *   duration” . The ‘iᵗʰ’ ^( )keypress had a “duration” of
 *   ‘releaseTimes[i] - releaseTimes[i - 1]’ , and the ‘0ᵗʰ’ keypress had a
 *   duration of ‘releaseTimes[0]’
 *   Note that the same key could have been pressed multiple times during
 *   the test, and these multiple presses of the same key “may not” have
 *   had the same “duration”
 *    “Return the key of the keypress that had the “longest duration” . If
 *   there are multiple such keypresses, return the lexicographically
 *   largest key of the keypresses.” 
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘releaseTimes.length = n’
 *   • ‘keysPressed.length = n’
 *   • ‘2 ≤ n ≤ 1000’
 *   • ‘1 ≤ releaseTimes[i] ≤ 10⁹’
 *   • ‘releaseTimes[i] < releaseTimes[i+1]’
 *   • ‘keysPressed’ contains only lowercase English letters.
 *
 */

struct q1629 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    char slowestKey(vector<int>& releaseTimes, string keysPressed) {
      if (keysPressed.size() < 1) return '\0';
      char res = keysPressed[0];
      int longest = releaseTimes[0];
      for (int i = 1; i < releaseTimes.size(); ++i) {
        int cur = releaseTimes[i] - releaseTimes[i - 1];
        if (cur > longest) {
          longest = cur;
          res = keysPressed[i];
        } else if (cur == longest) {
          res = max(res, keysPressed[i]);
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1629, sample_input01) {
  solution = new Solution();
  vector<int> releaseTimes = {9, 29, 49, 50};
  string keysPressed = "cbcd";
  char exp = 'c';
  EXPECT_EQ(solution->slowestKey(releaseTimes, keysPressed), exp);
  delete solution;
}

TEST_F(q1629, sample_input02) {
  solution = new Solution();
  vector<int> releaseTimes = {12, 23, 36, 46, 62};
  string keysPressed = "spuda";
  char exp = 'a';
  EXPECT_EQ(solution->slowestKey(releaseTimes, keysPressed), exp);
  delete solution;
}