#include <gtest/gtest.h>
#include <iostream>
#include <unordered_set>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 2395.
 *       Find Subarrays With Equal Sum
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a “0-indexed” integer array ‘nums’ , determine whether there
 *   exist “two” subarrays of length ‘2’ with “equal” sum. Note that the
 *   two subarrays must begin at “different”
 *   Return ‘true’ “ if these subarrays exist, and ” ‘false’ “ otherwise.”
 *   A “subarray” is a contiguous non-empty sequence of elements within an
 *   array.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘2 ≤ nums.length ≤ 1000’
 *   • ‘-10⁹ ≤ nums[i] ≤ 10⁹’
 *
 */

struct q2395 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    bool findSubarrays(vector<int> &nums) {
      unordered_set<int> memo;
      for (int i = 1; i < nums.size(); ++i) {
        if (!memo.emplace(nums[i] + nums[i - 1]).second) {
          return true;
        }
      }
      return false;
    }
  };

  class Solution *solution;
};

TEST_F(q2395, sample_input01) {
  solution         = new Solution();
  vector<int> nums = {4, 2, 4};
  bool        exp  = true;
  bool        act  = solution->findSubarrays(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2395, sample_input02) {
  solution         = new Solution();
  vector<int> nums = {1, 2, 3, 4, 5};
  bool        exp  = false;
  bool        act  = solution->findSubarrays(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2395, sample_input03) {
  solution         = new Solution();
  vector<int> nums = {0, 0, 0};
  bool        exp  = true;
  bool        act  = solution->findSubarrays(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}
