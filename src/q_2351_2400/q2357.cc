#include <gtest/gtest.h>
#include <iostream>
#include <unordered_set>
#include <vector>

using namespace std;

/**
 * The file is generated by LeetCodeDailyTools
 *
 * 2357.
 *       Make Array Zero by Subtracting Equal Amounts
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given a non-negative integer array ‘nums’ . In one operation,
 *   you
 *       - Choose a positive integer ‘x’ such that ‘x’ is less than or
 *   equal to the “smallest non-zero” element in ‘nums’
 *       - Subtract ‘x’ from every “positive” element in ‘nums’
 *   Return “the “minimum” number of operations to make every element in ”
 *   ‘nums’ “ equal to ” ‘0’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 100’
 *   • ‘0 ≤ nums[i] ≤ 100’
 *
 * see more details:
 * https://leetcode.com/problems/make-array-zero-by-subtracting-equal-amounts/
 */

struct q2357 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int minimumOperations(vector<int> &nums) {
      int                res = 0;
      unordered_set<int> exist;
      for (auto x : nums) {
        if (x != 0 && exist.emplace(x).second) {
          ++res;
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q2357, sample_input01) {
  solution         = new Solution();
  vector<int> nums = {1, 5, 0, 3, 5};
  int         exp  = 3;
  int         act  = solution->minimumOperations(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2357, sample_input02) {
  solution         = new Solution();
  vector<int> nums = {0};
  int         exp  = 0;
  int         act  = solution->minimumOperations(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}
