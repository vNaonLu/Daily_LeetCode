#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 384.
 *      Shuffle an Array
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an integer array ‘nums’ , design an algorithm to randomly
 *   shuffle the array. All permutations of the array should be “equally
 *   likely” as a result of the
 *   Implement the ‘Solution’
 *       -  ‘Solution(int[] nums)’ Initializes the object with the integer
 *   array ‘nums’
 *       -  ‘int[] reset()’ Resets the array to its original configuration
 *   and returns
 *       -  ‘int[] shuffle()’ Returns a random shuffling of the array.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 200’
 *   • ‘-10⁶ ≤ nums[i] ≤ 10⁶’
 *   • All the elements of ‘nums’ are “unique” .
 *   • At most ‘5 × 10⁴’ calls “in total” will be made to ‘reset’ and ‘shuffle’ .
 *
 */

struct q384 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    vector<int> m_set;
   public:
    Solution(vector<int>& nums) {
      m_set = nums;
    }
    vector<int> reset() {
      return m_set;
    }
    vector<int> shuffle() {
      vector<int> res = m_set;
      for (int i = 0; i < res.size(); ++i) {
        int idx = rand() % res.size();
        swap(res[i], res[idx]);
      }
      return res;
    }
  };

  class Solution *solution;
};
