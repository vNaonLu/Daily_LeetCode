
#ifndef Q368_UNITTEST_H__
#define Q368_UNITTEST_H__
#include <gtest/gtest.h>
#include <leetcode/anyorder.hpp>

#include "q0368.hpp"
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 368.
 *      Largest Divisible Subset
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a set of “distinct” positive integers ‘nums’ , return the
 *   largest subset ‘answer’ such that every pair ‘(answer[i], answer[j])’
 *   of elements in this subset
 *       -  ‘answer[i] % answer[j] = 0’ ,
 *       -  ‘answer[j] % answer[i] = 0’
 *   If there are multiple solutions, return any of them.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 1000’
 *   • ‘1 ≤ nums[i] ≤ 2 × 10⁹’
 *   • All the integers in ‘nums’ are “unique” .
 *
 */

TEST(q368, sample_input01) {
  l368::Solution solver;
  vector<int> nums = {1, 2, 3};
  vector<int> exp = {1, 2};
  EXPECT_EQ_ANY_ORDER(solver.largestDivisibleSubset(nums), exp);
}

TEST(q368, sample_input02) {
  l368::Solution solver;
  vector<int> nums = {1, 2, 4, 8};
  vector<int> exp = {1, 2, 4, 8};
  EXPECT_EQ_ANY_ORDER(solver.largestDivisibleSubset(nums), exp);
}

#endif