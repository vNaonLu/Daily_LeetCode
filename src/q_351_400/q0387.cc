#include <gtest/gtest.h>
#include <iostream>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 387.
 *      First Unique Character in a String
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a string ‘s’ , “find the first non-repeating character in it and
 *   return its index” . If it does not exist, return ‘-1’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s.length ≤ 10⁵’
 *   • ‘s’ consists of only lowercase English letters.
 *
 */

struct q387 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int firstUniqChar(string s) {
      vector<int> cnt(26, 0);
      for (const auto &c : s) ++cnt[c - 'a'];
      for (int i = 0; i < s.size(); ++i)
        if (cnt[s[i] - 'a'] == 1) return i;
      return -1;
    }
  };

  class Solution *solution;
};

TEST_F(q387, sample_input01) {
  solution = new Solution();
  string s = "leetcode";
  int exp = 0;
  EXPECT_EQ(solution->firstUniqChar(s), exp);
  delete solution;
}

TEST_F(q387, sample_input02) {
  solution = new Solution();
  string s = "loveleetcode";
  int exp = 2;
  EXPECT_EQ(solution->firstUniqChar(s), exp);
  delete solution;
}

TEST_F(q387, sample_input03) {
  solution = new Solution();
  string s = "aabb";
  int exp = -1;
  EXPECT_EQ(solution->firstUniqChar(s), exp);
  delete solution;
}