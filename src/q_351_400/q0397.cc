#include <gtest/gtest.h>
#include <iostream>
#include <queue>
#include <unordered_set>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 397.
 *      Integer Replacement
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a positive integer ‘n’ ,you can apply one of the
 *       1. If ‘n’ is even, replace ‘n’ with ‘n / 2’
 *       2. If ‘n’ is odd, replace ‘n’ with either ‘n + 1’ or ‘n - 1’
 *   Return “the minimum number of operations needed for ‘n’ to become ‘1’
 *   ” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ n ≤ 2³¹ - 1’
 *
 */

struct q397 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int integerReplacement(int n) {
      unordered_set<uint32_t> memos;
      queue<uint32_t> step;
      int res = 0;
      step.push(n);
      memos.insert(n);
      while (step.empty() != true) {
        queue<uint32_t> curr = move(step);
        while (curr.empty() != true) {
          auto x = curr.front(); curr.pop();
          if (x == 1) return res;
          if (x & 1) {
            if (memos.find(x + 1) == memos.end()) {
              memos.insert(x + 1); step.push(x + 1);
            }
            if (memos.find(x - 1) == memos.end()) {
              memos.insert(x - 1); step.push(x - 1);
            }
          } else {
            step.push(x / 2);
          }
        }
        ++res;
      }
      return -1;
    }
  };

  class Solution *solution;
};

TEST_F(q397, sample_input01) {
  solution = new Solution();
  int n = 8;
  int exp = 3;
  int act = solution->integerReplacement(n);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q397, sample_input02) {
  solution = new Solution();
  int n = 7;
  int exp = 4;
  int act = solution->integerReplacement(n);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q397, sample_input03) {
  solution = new Solution();
  int n = 4;
  int exp = 2;
  int act = solution->integerReplacement(n);
  EXPECT_EQ(act, exp);
  delete solution;
}