
#ifndef LEETCODE_Q380_H__
#define LEETCODE_Q380_H__
#include <iostream>
#include <unordered_set>

namespace l380 {
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 380.
 *      Insert Delete GetRandom O(1)
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Implement the ‘RandomizedSet’
 *       -  ‘RandomizedSet()’ Initializes the ‘RandomizedSet’
 *       -  ‘bool insert(int val)’ Inserts an item ‘val’ into the set if
 *   not present. Returns ‘true’ if the item was not present, ‘false’
 *       -  ‘bool remove(int val)’ Removes an item ‘val’ from the set if
 *   present. Returns ‘true’ if the item was present, ‘false’
 *       -  ‘int getRandom()’ Returns a random element from the current set
 *   of elements (it's guaranteed that at least one element exists when
 *   this method is called). Each element must have the “same probability”
 *   of being
 *   You must implement the functions of the class such that each function
 *   works in “average”  ‘O(1)’ time complexity.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘-2³¹ ≤ val ≤ 2³¹ - 1’
 *   • At most ‘2 ×’  ‘10⁵’ calls will be made to ‘insert’ , ‘remove’ , and ‘getRandom’ .
 *   • There will be “at least one” element in the data structure when ‘getRandom’ is called.
 *
 */

class RandomizedSet {
 private:
  unordered_set<int> data;

 public:
  RandomizedSet() {
    data.clear();
    srand(time(nullptr));
  }

  bool insert(int val) {
    if (data.count(val)) return false;
    data.insert(val);
    return true;
  }

  bool remove(int val) {
    if (!data.count(val)) return false;
    data.erase(val);
    return true;
  }

  int getRandom() {
    int idx = rand() % data.size();
    auto res = data.begin();
    while (idx-- > 0) ++res;
    return *res;
  }
};

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet* obj = new RandomizedSet();
 * bool param_1 = obj->insert(val);
 * bool param_2 = obj->remove(val);
 * int param_3 = obj->getRandom();
 */
}  // namespace l380

#endif