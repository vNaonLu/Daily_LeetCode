#include <gtest/gtest.h>
#include <iostream>
#include <unordered_set>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 380.
 *      Insert Delete GetRandom O(1)
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Implement the ‘RandomizedSet’
 *       -  ‘RandomizedSet()’ Initializes the ‘RandomizedSet’
 *       -  ‘bool insert(int val)’ Inserts an item ‘val’ into the set if
 *   not present. Returns ‘true’ if the item was not present, ‘false’
 *       -  ‘bool remove(int val)’ Removes an item ‘val’ from the set if
 *   present. Returns ‘true’ if the item was present, ‘false’
 *       -  ‘int getRandom()’ Returns a random element from the current set
 *   of elements (it's guaranteed that at least one element exists when
 *   this method is called). Each element must have the “same probability”
 *   of being
 *   You must implement the functions of the class such that each function
 *   works in “average”  ‘O(1)’ time complexity.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘-2³¹ ≤ val ≤ 2³¹ - 1’
 *   • At most ‘2 ×’  ‘10⁵’ calls will be made to ‘insert’ , ‘remove’ , and ‘getRandom’ .
 *   • There will be “at least one” element in the data structure when ‘getRandom’ is called.
 *
 */

struct q380 : public ::testing::Test {
  // Leetcode answer here
  class RandomizedSet {
   private:
    unordered_set<int> data;
   public:
    RandomizedSet() {
      data.clear();
      srand(time(nullptr));
    }
    bool insert(int val) {
      if (data.count(val)) return false;
      data.insert(val);
      return true;
    }
    bool remove(int val) {
      if (!data.count(val)) return false;
      data.erase(val);
      return true;
    }
    int getRandom() {
      int idx = rand() % data.size();
      auto res = data.begin();
      while (idx-- > 0) ++res;
      return *res;
    }
  };

  class RandomizedSet *randomized_set;
};

TEST_F(q380, sample_input01) {
  randomized_set = new RandomizedSet();
  EXPECT_EQ(randomized_set->insert(1), true);
  EXPECT_EQ(randomized_set->remove(2), false);
  EXPECT_EQ(randomized_set->insert(2), true);
  int rand = randomized_set->getRandom();
  EXPECT_TRUE(rand == 1 || rand == 2);
  EXPECT_EQ(randomized_set->remove(1), true);
  EXPECT_EQ(randomized_set->insert(2), false);
  EXPECT_EQ(randomized_set->getRandom(), 2);
  delete randomized_set;
}