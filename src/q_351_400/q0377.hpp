
#ifndef LEETCODE_Q377_H__
#define LEETCODE_Q377_H__
#include <iostream>
#include <vector>

namespace l377 {
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 377.
 *      Combination Sum IV
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an array of “distinct” integers ‘nums’ and a target integer
 *   ‘target’ , return “the number of possible combinations that add up to”
 *    ‘target’
 *   The answer is “guaranteed” to fit in a “32-bit” integer.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 200’
 *   • ‘1 ≤ nums[i] ≤ 1000’
 *   • All the elements of ‘nums’ are “unique” .
 *   • ‘1 ≤ target ≤ 1000’
 *
 */

class Solution {
 private:
  vector<int> dp;
  bool init = false;

 public:
  int combinationSum4(vector<int>& nums, int target) {
    if (!init) {
      init = true;
      dp.resize(1001, -1);
      dp[0] = 1;
    }
    if (target < 0) return 0;
    if (dp[target] != -1) return dp[target];
    dp[target] = 0;
    for (const int& c : nums) {
      dp[target] += combinationSum4(nums, target - c);
    }
    return dp[target];
  }
};
}  // namespace l377

#endif