
#ifndef Q384_UNITTEST_H__
#define Q384_UNITTEST_H__
#include <gtest/gtest.h>

#include <leetcode/anyorder.hpp>

#include "q0384.hpp"
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 384.
  *      Shuffle an Array
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given an integer array ‘nums’ , design an algorithm to randomly
  *   shuffle the array. All permutations of the array should be “equally
  *   likely” as a result of the shuffling.
  *   
  *   Implement the ‘Solution’.
  *   
  *   - ‘Solution(int[] nums)’ Initializes the object with the integer
  *   array ‘nums’.
  *   
  *   - ‘int[] reset()’ Resets the array to its original configuration and
  *   returns it.
  *   
  *   - ‘int[] shuffle()’ Returns a random shuffling of the array.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘1 ≤ nums.length ≤ 200’
  *   • ‘-10⁶ ≤ nums[i] ≤ 10⁶’
  *   • All the elements of ‘nums’ are “unique” .
  *   • At most ‘5 × 10⁴’ calls “in total” will be made to ‘reset’ and ‘shuffle’ .
  *
*/

TEST(q384, sample_input01){
  vector<int> nums = {1, 2, 3};
  l384::Solution solver(nums);
  EXPECT_EQ_ANY_ORDER(solver.shuffle(), nums);
  EXPECT_EQ(solver.reset(), nums);
  EXPECT_EQ_ANY_ORDER(solver.shuffle(), nums);
}

#endif