#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/anyorder.hpp>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 368.
 *      Largest Divisible Subset
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a set of “distinct” positive integers ‘nums’ , return the
 *   largest subset ‘answer’ such that every pair ‘(answer[i], answer[j])’
 *   of elements in this subset
 *       -  ‘answer[i] % answer[j] = 0’ ,
 *       -  ‘answer[j] % answer[i] = 0’
 *   If there are multiple solutions, return any of them.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 1000’
 *   • ‘1 ≤ nums[i] ≤ 2 × 10⁹’
 *   • All the integers in ‘nums’ are “unique” .
 *
 */

struct q368 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
      int n = nums.size();
      sort(nums.begin(), nums.end());
      vector<int> list(n, 1);
      vector<int> prev_idx(n, -1);
      int max = 0, index = 0;
      for (int i = 0; i < n; ++i) {
        for (int j = i - 1; j >= 0; --j) {
          if (list[j] + 1 > list[i] && nums[i] % nums[j] == 0) {
            list[i] = list[j] + 1;
            prev_idx[i] = j;
          }
        }
      }
      for (int i = 0; i < n; ++i) {
        if (list[i] > max) {
          max = list[i];
          index = i;
        }
      }
      vector<int> res;
      while (index >= 0) {
        res.emplace_back(nums[index]);
        index = prev_idx[index];
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q368, sample_input01) {
  solution = new Solution();
  vector<int> nums = {1, 2, 3};
  vector<int> exp = {1, 2};
  EXPECT_EQ_ANY_ORDER(solution->largestDivisibleSubset(nums), exp);
  delete solution;
}

TEST_F(q368, sample_input02) {
  solution = new Solution();
  vector<int> nums = {1, 2, 4, 8};
  vector<int> exp = {1, 2, 4, 8};
  EXPECT_EQ_ANY_ORDER(solution->largestDivisibleSubset(nums), exp);
  delete solution;
}