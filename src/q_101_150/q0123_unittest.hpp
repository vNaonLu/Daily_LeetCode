
#ifndef Q123_UNITTEST_H__
#define Q123_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0123.hpp"
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 123.
 *      Best Time to Buy and Sell Stock III
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an array ‘prices’ where ‘prices[i]’ is the price of a
 *   given stock on the ‘iᵗʰ’
 *   Find the maximum profit you can achieve. You may complete “at most two
 *   transactions”
 *    “Note:” You may not engage in multiple transactions simultaneously
 *   (i.e., you must sell the stock before you buy again).
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ prices.length ≤ 10⁵’
 *   • ‘0 ≤ prices[i] ≤ 10⁵’
 *
 */

TEST(q123, sample_input01) {
  l123::Solution solver;
  vector<int> prices = {3, 3, 5, 0, 0, 3, 1, 4};
  int exp = 6;
  EXPECT_EQ(solver.maxProfit(prices), exp);
}

TEST(q123, sample_input02) {
  l123::Solution solver;
  vector<int> prices = {1, 2, 3, 4, 5};
  int exp = 4;
  EXPECT_EQ(solver.maxProfit(prices), exp);
}

TEST(q123, sample_input03) {
  l123::Solution solver;
  vector<int> prices = {7, 6, 4, 3, 1};
  int exp = 0;
  EXPECT_EQ(solver.maxProfit(prices), exp);
}

TEST(q123, sample_input04) {
  l123::Solution solver;
  vector<int> prices = {1};
  int exp = 0;
  EXPECT_EQ(solver.maxProfit(prices), exp);
}

#endif