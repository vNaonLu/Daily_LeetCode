
#ifndef Q110_UNITTEST_H__
#define Q110_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0110.hpp"
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 110.
  *      Balanced Binary Tree
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given a binary tree, determine if it is height-balanced.
  *   
  *   For this problem, a height-balanced binary tree is defined.
  *   
  *   a binary tree in which the left and right subtrees of “every” node
  *   differ in height by no more than 1.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • The number of nodes in the tree is in the range ‘[0, 5000]’ .
  *   • ‘-10⁴ ≤ Node.val ≤ 10⁴’
  *
*/

TEST(q110, sample_input01) {
  l110::Solution solver;
  TreeNode* root = TreeNode::generate({3, 9, 20, NULL_TREENODE, NULL_TREENODE, 15, 7});
  bool exp = true;
  EXPECT_EQ(solver.isBalanced(root), exp);
}

TEST(q110, sample_input02) {
  l110::Solution solver;
  TreeNode* root = TreeNode::generate({1, 2, 2, 3, 3, NULL_TREENODE, NULL_TREENODE, 4, 4});
  bool exp = false;
  EXPECT_EQ(solver.isBalanced(root), exp);
}

TEST(q110, sample_input03) {
  l110::Solution solver;
  TreeNode* root = TreeNode::generate({});
  bool exp = true;
  EXPECT_EQ(solver.isBalanced(root), exp);
}

#endif