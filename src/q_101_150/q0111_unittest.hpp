
#ifndef Q111_UNITTEST_H__
#define Q111_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0111.hpp"
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 111.
  *      Minimum Depth of Binary Tree
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given a binary tree, find its minimum depth.
  *   
  *   The minimum depth is the number of nodes along the shortest path from
  *   the root node down to the nearest leaf node.
  *   
  *   “Note:” A leaf is a node with no children.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • The number of nodes in the tree is in the range ‘[0, 10⁵]’ .
  *   • ‘-1000 ≤ Node.val ≤ 1000’
  *
*/

TEST(q111, sample_input01) {
  l111::Solution solver;
  TreeNode* root = TreeNode::generate({3, 9, 20, NULL_TREENODE, NULL_TREENODE, 15, 7});
  int exp = 2;
  EXPECT_EQ(solver.minDepth(root), exp);
}

TEST(q111, sample_input02) {
  l111::Solution solver;
  TreeNode* root = TreeNode::generate({2, NULL_TREENODE, 3, NULL_TREENODE, 4, NULL_TREENODE, 5, NULL_TREENODE, 6});
  int exp = 5;
  EXPECT_EQ(solver.minDepth(root), exp);
}

#endif