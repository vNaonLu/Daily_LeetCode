
#ifndef LEETCODE_Q112_H__
#define LEETCODE_Q112_H__
#include <iostream>
#include <leetcode/treenode.hpp>

namespace l112 {
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 112. Path Sum
  *
  * Given the root of a binary tree and an integer
  * targetSum , return true if the tree has a
  * “root-to-leaf“ path such that adding up all the values along
  * the path equals targetSum .
  * A “leaf“ is a node with no children.
  *
  * Constraints:
  * - The number of nodes in the tree is in the range [0, 5000] .
  * -  -1000 <= Node.val <= 1000 
  * -  -1000 <= targetSum <= 1000 
  *
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
 public:
  bool hasPathSum(TreeNode* root, int targetSum) {
    if (root == nullptr) {
      return false;
    } else {
      int next = targetSum - root->val;
      if (root->left == nullptr && root->right == nullptr) {
        return next == 0;
      } else if (root->left == nullptr) {
        return hasPathSum(root->right, next);
      } else if (root->right == nullptr) {
        return hasPathSum(root->left, next);
      } else {
        return hasPathSum(root->left, next) || hasPathSum(root->right, next);
      }
    }
  }
};
}  // namespace l112
#endif