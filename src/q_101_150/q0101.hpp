
#ifndef LEETCODE_Q101_H__
#define LEETCODE_Q101_H__
#include <iostream>
#include <leetcode/tree_node.hpp>

namespace l101 {
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 101. Symmetric Tree
  *
  * Given the root of a binary tree, check whether it
  * is a mirror of itself (i.e., symmetric around its
  * center).
  *
  * Constraints:
  * - The number of nodes in the tree is in the range [1, 1000] .
  * -  -100 <= Node.val <= 100 
  *  “Follow up:“ Could you solve it both recursively and iteratively?
  *
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
 private:
  bool isSymmetric(TreeNode *l, TreeNode *r) {
    if (l == nullptr && r == nullptr)
      return true;
    else if (l == nullptr)
      return false;
    else if (r == nullptr)
      return false;
    else {
      return l->val == r->val &&
             isSymmetric(l->left, r->right) &&
             isSymmetric(l->right, r->left);
    }
  }

 public:
  bool isSymmetric(TreeNode *root) {
    if (root == nullptr) return true;
    return isSymmetric(root->left, root->right);
  }
};
}  // namespace l101
#endif