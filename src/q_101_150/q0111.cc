#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/treenode.hpp>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 111.
 *      Minimum Depth of Binary Tree
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a binary tree, find its minimum
 *   The minimum depth is the number of nodes along the shortest path from
 *   the root node down to the nearest leaf
 *    “Note:” A leaf is a node with no children.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The number of nodes in the tree is in the range ‘[0, 10⁵]’ .
 *   • ‘-1000 ≤ Node.val ≤ 1000’
 *
 */

struct q111 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int minDepth(TreeNode* root) {
      if (root == nullptr) return 0;
      if (root->left == nullptr) {
        return minDepth(root->right) + 1;
      } else if (root->right == nullptr) {
        return minDepth(root->left) + 1;
      } else {
        int left = minDepth(root->left);
        int right = minDepth(root->right);
        return min(left, right) + 1;
      }
    }
  };

  class Solution *solution;
};

TEST_F(q111, sample_input01) {
  solution = new Solution();
  TreeNode* root = TreeNode::generate({3, 9, 20, NULL_TREENODE, NULL_TREENODE, 15, 7});
  int exp = 2;
  EXPECT_EQ(solution->minDepth(root), exp);
  delete solution;
}

TEST_F(q111, sample_input02) {
  solution = new Solution();
  TreeNode* root = TreeNode::generate({2, NULL_TREENODE, 3, NULL_TREENODE, 4, NULL_TREENODE, 5, NULL_TREENODE, 6});
  int exp = 5;
  EXPECT_EQ(solution->minDepth(root), exp);
  delete solution;
}