
#ifndef LEETCODE_Q129_H__
#define LEETCODE_Q129_H__
#include <iostream>
#include <leetcode/treenode.hpp>
#include <numeric>

namespace l129 {
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 129.
 *      Sum Root to Leaf Numbers
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given the ‘root’ of a binary tree containing digits from ‘0’
 *   to ‘9’
 *   Each root-to-leaf path in the tree represents a
 *       - For example, the root-to-leaf path ‘1 -> 2 -> 3’ represents the
 *   number ‘123’
 *   Return “the total sum of all root-to-leaf numbers” . Test cases are
 *   generated so that the answer will fit in a “32-bit”
 *   A “leaf” node is a node with no children.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The number of nodes in the tree is in the range ‘[1, 1000]’ .
 *   • ‘0 ≤ Node.val ≤ 9’
 *   • The depth of the tree will not exceed ‘10’ .
 *
 */

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
 private:
  void helper(TreeNode *p, vector<int> &nums, int current = 0) {
    if (p != nullptr) {
      current = current * 10 + p->val;
      if (p->left == nullptr && p->right == nullptr) {
        nums.push_back(current);
      } else {
        helper(p->left, nums, current);
        helper(p->right, nums, current);
      }
    }
  }

 public:
  int sumNumbers(TreeNode *root) {
    vector<int> leavesSum;
    helper(root, leavesSum);
    return accumulate(leavesSum.begin(), leavesSum.end(), 0);
  }
};
}  // namespace l129

#endif