
#ifndef Q105_UNITTEST_H__
#define Q105_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0105.hpp"
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 105.
  *      Construct Binary Tree from Preorder and Inorder Traversal
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given two integer arrays ‘preorder’ and ‘inorder’ where ‘preorder’ is
  *   the preorder traversal of a binary tree and ‘inorder’ is the inorder
  *   traversal of the same tree, construct and return “the binary tree”.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘1 ≤ preorder.length ≤ 3000’
  *   • ‘inorder.length = preorder.length’
  *   • ‘-3000 ≤ preorder[i], inorder[i] ≤ 3000’
  *   • ‘preorder’ and ‘inorder’ consist of “unique” values.
  *   • Each value of ‘inorder’ also appears in ‘preorder’ .
  *   • ‘preorder’ is “guaranteed” to be the preorder traversal of the tree.
  *   • ‘inorder’ is “guaranteed” to be the inorder traversal of the tree.
  *
*/

TEST(q105, sample_input01) {
  l105::Solution solver;
  vector<int> preorder = {3, 9, 20, 15, 7};
  vector<int> inorder = {9, 3, 15, 20, 7};
  TreeNode* exp = TreeNode::generate({3, 9, 20, NULL_TREENODE, NULL_TREENODE, 15, 7});
  EXPECT_TREENODE_EQ(solver.buildTree(preorder, inorder), exp);
}

TEST(q105, sample_input02) {
  l105::Solution solver;
  vector<int> preorder = {-1};
  vector<int> inorder = {-1};
  TreeNode* exp = TreeNode::generate({-1});
  EXPECT_TREENODE_EQ(solver.buildTree(preorder, inorder), exp);
}

#endif