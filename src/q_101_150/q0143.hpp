
#ifndef LEETCODE_Q143_H__
#define LEETCODE_Q143_H__
#include <iostream>
#include <leetcode/listnode.hpp>

namespace l143 {
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 143.
  *      Reorder List
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   You are given the head of a singly linked-list. The list can be
  *   represented.
  *   
  *   L₀ &rarr; L₁ &rarr; &hellip; &rarr; L⎽(n - 1) &rarr;.
  *   
  *   “Reorder the list to be on the following form:”.
  *   
  *   L₀ &rarr; Lₙ &rarr; L₁ &rarr; L⎽(n - 1) &rarr; L₂ &rarr; L⎽(n - 2)
  *   &rarr;.
  *   
  *   You may not modify the values in the list&#39;s nodes. Only nodes
  *   themselves may be changed.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • The number of nodes in the list is in the range ‘[1, 5 × 10⁴]’ .
  *   • ‘1 ≤ Node.val ≤ 1000’
  *
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
 public:
  void reorderList(ListNode* head) {
    vector<int> arr;
    ListNode* p = head;
    while (p != nullptr) {
      arr.push_back(p->val);
      p = p->next;
    }
    int i = 1, j = arr.size() - 1, cnt = 0;
    p = head;
    while (i <= j) {
      if (cnt++ % 2 == 0) {
        p->next = new ListNode(arr[j--]);
      } else {
        p->next = new ListNode(arr[i++]);
      }
      p = p->next;
    }
  }
};
}  // namespace l143

#endif