#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/treenode.hpp>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 102.
 *      Binary Tree Level Order Traversal
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given the ‘root’ of a binary tree, return “the level order traversal
 *   of its nodes' values” . (i.e., from left to right, level by level).
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The number of nodes in the tree is in the range ‘[0, 2000]’ .
 *   • ‘-1000 ≤ Node.val ≤ 1000’
 *
 */

struct q102 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    void helper(TreeNode *p, vector<vector<int>> &r, int level) {
      if (p == nullptr) return;
      if (level >= r.size()) r.resize(level + 1);
      r[level].push_back(p->val);
      helper(p->left, r, level + 1);
      helper(p->right, r, level + 1);
    }
   public:
    vector<vector<int>> levelOrder(TreeNode *root) {
      vector<vector<int>> res;
      helper(root, res, 0);
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q102, sample_input01) {
  solution = new Solution();
  TreeNode* root = TreeNode::generate({3, 9, 20, NULL_TREENODE, NULL_TREENODE, 15, 7});
  vector<vector<int>> exp = {{3}, {9, 20}, {15, 7}};
  EXPECT_EQ(solution->levelOrder(root), exp);
  delete solution;
}

TEST_F(q102, sample_input02) {
  solution = new Solution();
  TreeNode* root = TreeNode::generate({1});
  vector<vector<int>> exp = {{1}};
  EXPECT_EQ(solution->levelOrder(root), exp);
  delete solution;
}

TEST_F(q102, sample_input03) {
  solution = new Solution();
  TreeNode* root = TreeNode::generate({});
  vector<vector<int>> exp = {};
  EXPECT_EQ(solution->levelOrder(root), exp);
  delete solution;
}