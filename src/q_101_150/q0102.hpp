
#ifndef LEETCODE_Q102_H__
#define LEETCODE_Q102_H__
#include <iostream>
#include <leetcode/tree_node.hpp>
#include <vector>

namespace l102 {
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 102. Binary Tree Level Order Traversal
  *
  * Given the root of a binary tree, return the level
  * order traversal of its nodes'; values . (i.e.,
  * from left to right, level by level).
  *
  * Constraints:
  * - The number of nodes in the tree is in the range [0, 2000] .
  * -  -1000 <= Node.val <= 1000 
  *
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
 private:
  void helper(TreeNode *p, vector<vector<int>> &r, int level) {
    if (p == nullptr) return;
    if (level >= r.size()) r.resize(level + 1);

    r[level].push_back(p->val);
    helper(p->left, r, level + 1);
    helper(p->right, r, level + 1);
  }

 public:
  vector<vector<int>> levelOrder(TreeNode *root) {
    vector<vector<int>> res;
    helper(root, res, 0);
    return res;
  }
};
}  // namespace l102
#endif