
#ifndef LEETCODE_Q113_H__
#define LEETCODE_Q113_H__
#include <iostream>
#include <leetcode/treenode.hpp>
#include <vector>

namespace l113 {
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 113.
  *      Path Sum II
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given the ‘root’ of a binary tree and an integer ‘targetSum’ , return
  *   “all “root-to-leaf” paths where the sum of the node values in the path
  *   equals ” ‘targetSum’ “. Each path should be returned as a list of the
  *   node “values” , not node references”.
  *   
  *   A “root-to-leaf” path is a path starting from the root and ending at
  *   any leaf node. A “leaf” is a node with no children.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • The number of nodes in the tree is in the range ‘[0, 5000]’ .
  *   • ‘-1000 ≤ Node.val ≤ 1000’
  *   • ‘-1000 ≤ targetSum ≤ 1000’
  *
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
 private:
  void helper(TreeNode *p, vector<vector<int>> &r, vector<int> &cur, const int &t, int sum = 0) {
    if (p == nullptr) return;
    sum += p->val;
    cur.push_back(p->val);
    if (sum == t && p->left == nullptr && p->right == nullptr) {
      r.push_back(cur);
    } else {
      helper(p->left, r, cur, t, sum);
      helper(p->right, r, cur, t, sum);
    }
    sum -= p->val;
    cur.pop_back();
  }

 public:
  vector<vector<int>> pathSum(TreeNode *root, int targetSum) {
    vector<vector<int>> res;
    vector<int> tmp;
    helper(root, res, tmp, targetSum);
    return res;
  }
};
}  // namespace l113

#endif