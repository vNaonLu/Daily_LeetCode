
#ifndef Q106_UNITTEST_H__
#define Q106_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0106.hpp"
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 106.
 *      Construct Binary Tree from Inorder and Postorder Traversal
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given two integer arrays ‘inorder’ and ‘postorder’ where ‘inorder’ is
 *   the inorder traversal of a binary tree and ‘postorder’ is the
 *   postorder traversal of the same tree, construct and return “the binary
 *   tree” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ inorder.length ≤ 3000’
 *   • ‘postorder.length = inorder.length’
 *   • ‘-3000 ≤ inorder[i], postorder[i] ≤ 3000’
 *   • ‘inorder’ and ‘postorder’ consist of “unique” values.
 *   • Each value of ‘postorder’ also appears in ‘inorder’ .
 *   • ‘inorder’ is “guaranteed” to be the inorder traversal of the tree.
 *   • ‘postorder’ is “guaranteed” to be the postorder traversal of the tree.
 *
 */

TEST(q106, sample_input01) {
  l106::Solution solver;
  vector<int> inorder = {9, 3, 15, 20, 7};
  vector<int> postorder = {9, 15, 7, 20, 3};
  TreeNode* exp = TreeNode::generate({3, 9, 20, NULL_TREENODE, NULL_TREENODE, 15, 7});
  EXPECT_TREENODE_EQ(solver.buildTree(inorder, postorder), exp);
}

TEST(q106, sample_input02) {
  l106::Solution solver;
  vector<int> inorder = {-1};
  vector<int> postorder = {-1};
  TreeNode* exp = TreeNode::generate({-1});
  EXPECT_TREENODE_EQ(solver.buildTree(inorder, postorder), exp);
}

#endif