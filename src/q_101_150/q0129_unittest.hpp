
#ifndef Q129_UNITTEST_H__
#define Q129_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0129.hpp"
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 129.
 *      Sum Root to Leaf Numbers
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given the ‘root’ of a binary tree containing digits from ‘0’
 *   to ‘9’
 *   Each root-to-leaf path in the tree represents a
 *       - For example, the root-to-leaf path ‘1 -> 2 -> 3’ represents the
 *   number ‘123’
 *   Return “the total sum of all root-to-leaf numbers” . Test cases are
 *   generated so that the answer will fit in a “32-bit”
 *   A “leaf” node is a node with no children.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The number of nodes in the tree is in the range ‘[1, 1000]’ .
 *   • ‘0 ≤ Node.val ≤ 9’
 *   • The depth of the tree will not exceed ‘10’ .
 *
 */

TEST(q129, sample_input01) {
  l129::Solution solver;
  TreeNode* root = TreeNode::generate({1, 2, 3});
  int exp = 25;
  EXPECT_EQ(solver.sumNumbers(root), exp);
}

TEST(q129, sample_input02) {
  l129::Solution solver;
  TreeNode* root = TreeNode::generate({4, 9, 0, 5, 1});
  int exp = 1026;
  EXPECT_EQ(solver.sumNumbers(root), exp);
}

#endif