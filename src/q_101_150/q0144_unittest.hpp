
#ifndef Q144_UNITTEST_H__
#define Q144_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0144.hpp"
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 144. Binary Tree Preorder Traversal
  *
  * Given the root of a binary tree, return the
  * preorder traversal of its nodes'; values .
  *
  * Constraints:
  * - The number of nodes in the tree is in the range [0, 100] .
  * -  -100 <= Node.val <= 100 
  *  “Follow up:“ Recursive solution is trivial, could you do it iteratively?
  *
*/

TEST(q144, sample_input01) {
  int null = -1;
  TreeNode *root = TreeNode::generate({1, null, 2, null, null, 3}, null);
  vector<int> exp = {1, 2, 3};
  l144::Solution solver;
  EXPECT_EQ(solver.preorderTraversal(root), exp);
  TreeNode::release(root);
}

TEST(q144, sample_input02) {
  int null = -1;
  TreeNode *root = TreeNode::generate({}, null);
  vector<int> exp = {};
  l144::Solution solver;
  EXPECT_EQ(solver.preorderTraversal(root), exp);
  TreeNode::release(root);
}

TEST(q144, sample_input03) {
  int null = -1;
  TreeNode *root = TreeNode::generate({1}, null);
  vector<int> exp = {1};
  l144::Solution solver;
  EXPECT_EQ(solver.preorderTraversal(root), exp);
  TreeNode::release(root);
}

TEST(q144, sample_input04) {
  int null = -1;
  TreeNode *root = TreeNode::generate({1, 2}, null);
  vector<int> exp = {1, 2};
  l144::Solution solver;
  EXPECT_EQ(solver.preorderTraversal(root), exp);
  TreeNode::release(root);
}

TEST(q144, sample_input05) {
  int null = -1;
  TreeNode *root = TreeNode::generate({1, null, 2}, null);
  vector<int> exp = {1, 2};
  l144::Solution solver;
  EXPECT_EQ(solver.preorderTraversal(root), exp);
  TreeNode::release(root);
}

#endif