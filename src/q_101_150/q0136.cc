#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 136.
 *      Single Number
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a “non-empty” array of integers ‘nums’ , every element appears
 *   “twice” except for one. Find that single
 *   You mustimplement a solution with a linear runtime complexity and
 *   useonly constantextra space.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 3 × 10⁴’
 *   • ‘-3 × 10⁴ ≤ nums[i] ≤ 3 × 10⁴’
 *   • Each element in the array appears twice except for one element which appears only once.
 *
 */

struct q136 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int singleNumber(vector<int>& nums) {
      int res = 0;
      for (const auto& n : nums) {
        res ^= n;
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q136, sample_input01) {
  solution = new Solution();
  vector<int> nums = {2, 2, 1};
  int exp = 1;
  EXPECT_EQ(solution->singleNumber(nums), exp);
  delete solution;
}

TEST_F(q136, sample_input02) {
  solution = new Solution();
  vector<int> nums = {4, 1, 2, 1, 2};
  int exp = 4;
  EXPECT_EQ(solution->singleNumber(nums), exp);
  delete solution;
}

TEST_F(q136, sample_input03) {
  solution = new Solution();
  vector<int> nums = {1};
  int exp = 1;
  EXPECT_EQ(solution->singleNumber(nums), exp);
  delete solution;
}