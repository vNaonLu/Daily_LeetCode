#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 121.
 *      Best Time to Buy and Sell Stock
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an array ‘prices’ where ‘prices[i]’ is the price of a
 *   given stock on the ‘iᵗʰ’
 *   You want to maximize your profit by choosing a “single day” to buy one
 *   stock and choosing a “different day in the future” to sell that
 *   Return “the maximum profit you can achieve from this transaction” . If
 *   you cannot achieve any profit, return ‘0’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ prices.length ≤ 10⁵’
 *   • ‘0 ≤ prices[i] ≤ 10⁴’
 *
 */

struct q121 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int maxProfit(vector<int> &prices) {
      int res    = 0;
      int lowest = numeric_limits<int>::max();
      for (auto p : prices) {
        lowest = min(lowest, p);
        res    = max(res, p - lowest);
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q121, sample_input01) {
  solution           = new Solution();
  vector<int> prices = {7, 1, 5, 3, 6, 4};
  int         exp    = 5;
  EXPECT_EQ(solution->maxProfit(prices), exp);
  delete solution;
}

TEST_F(q121, sample_input02) {
  solution           = new Solution();
  vector<int> prices = {7, 6, 4, 3, 1};
  int         exp    = 0;
  EXPECT_EQ(solution->maxProfit(prices), exp);
  delete solution;
}