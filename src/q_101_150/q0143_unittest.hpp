
#ifndef Q143_UNITTEST_H__
#define Q143_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0143.hpp"
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 143.
  *      Reorder List
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   You are given the head of a singly linked-list. The list can be
  *   represented.
  *   
  *   L₀ &rarr; L₁ &rarr; &hellip; &rarr; L⎽(n - 1) &rarr;.
  *   
  *   “Reorder the list to be on the following form:”.
  *   
  *   L₀ &rarr; Lₙ &rarr; L₁ &rarr; L⎽(n - 1) &rarr; L₂ &rarr; L⎽(n - 2)
  *   &rarr;.
  *   
  *   You may not modify the values in the list&#39;s nodes. Only nodes
  *   themselves may be changed.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • The number of nodes in the list is in the range ‘[1, 5 × 10⁴]’ .
  *   • ‘1 ≤ Node.val ≤ 1000’
  *
*/

TEST(q143, sample_input01) {
  l143::Solution solver;
  ListNode* head = ListNode::generate({1, 2, 3, 4});
  ListNode* exp = ListNode::generate({1, 4, 2, 3});
  solver.reorderList(head);
  // Assume the first argument is answer.
  EXPECT_LISTNODE_EQ(head, exp);
}

TEST(q143, sample_input02) {
  l143::Solution solver;
  ListNode* head = ListNode::generate({1, 2, 3, 4, 5});
  ListNode* exp = ListNode::generate({1, 5, 2, 4, 3});
  solver.reorderList(head);
  // Assume the first argument is answer.
  EXPECT_LISTNODE_EQ(head, exp);
}

#endif