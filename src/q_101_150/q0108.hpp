
#ifndef LEETCODE_Q108_H__
#define LEETCODE_Q108_H__
#include <iostream>
#include <leetcode/treenode.hpp>
#include <vector>

namespace l108 {
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 108.
  *      Convert Sorted Array to Binary Search Tree
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given an integer array ‘nums’ where the elements are sorted in
  *   “ascending order” , convert “it to a “height-balanced” binary search
  *   tree”.
  *   
  *   A “height-balanced” binary tree is a binary tree in which the depth of
  *   the two subtrees of every node never differs by more than one.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘1 ≤ nums.length ≤ 10⁴’
  *   • ‘-10⁴ ≤ nums[i] ≤ 10⁴’
  *   • ‘nums’ is sorted in a “strictly increasing” order.
  *
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
 private:
  TreeNode* helper(vector<int>& ns, int l, int r) {
    if (l > r) return nullptr;
    int mid = l + (r - l) / 2;
    return new TreeNode(ns[mid],
                        helper(ns, l, mid - 1),
                        helper(ns, mid + 1, r));
  }

 public:
  TreeNode* sortedArrayToBST(vector<int>& nums) {
    TreeNode* res = nullptr;
    if (!nums.empty()) {
      res = helper(nums, 0, nums.size() - 1);
    }
    return res;
  }
};
}  // namespace l108

#endif