
#ifndef LEETCODE_Q111_H__
#define LEETCODE_Q111_H__
#include <iostream>
#include <leetcode/treenode.hpp>

namespace l111 {
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 111.
  *      Minimum Depth of Binary Tree
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given a binary tree, find its minimum depth.
  *   
  *   The minimum depth is the number of nodes along the shortest path from
  *   the root node down to the nearest leaf node.
  *   
  *   “Note:” A leaf is a node with no children.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • The number of nodes in the tree is in the range ‘[0, 10⁵]’ .
  *   • ‘-1000 ≤ Node.val ≤ 1000’
  *
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
 public:
  int minDepth(TreeNode* root) {
    if (root == nullptr) return 0;
    if (root->left == nullptr) {
      return minDepth(root->right) + 1;
    } else if (root->right == nullptr) {
      return minDepth(root->left) + 1;
    } else {
      int left = minDepth(root->left);
      int right = minDepth(root->right);
      return min(left, right) + 1;
    }
  }
};
}  // namespace l111

#endif