#include <gtest/gtest.h>
#include <iostream>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 116.
 *      Populating Next Right Pointers in Each Node
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given a “perfect binary tree” where all leaves are on the same
 *   level, and every parent has two children. The binary tree has the
 *   following
 *   struct Node
 *     int
 *     Node
 *     Node
 *     Node
 *   Populate each next pointer to point to its next right node. If there
 *   is no next right node, the next pointer should be set to ‘NULL’
 *   Initially, all next pointers are set to ‘NULL’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The number of nodes in the tree is in the range ‘[0, 2¹² - 1]’ .
 *   • ‘-1000 ≤ Node.val ≤ 1000’
 *   • You may only use constant extra space.
 *   • The recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem.
 *
 */

struct q116 : public ::testing::Test {
  // Leetcode answer here
  class Node {
   public:
    int val;
    Node* left;
    Node* right;
    Node* next;
    Node() : val(0), left(NULL), right(NULL), next(NULL) {}
    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}
    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
  };
  class Solution {
   public:
    Node* connect(Node* root) {
      if (root == nullptr) return root;
      vector<vector<Node*>> level;
      level.push_back({root});
      int li = 0;
      while (li < level.size()) {
        ++li;
        auto q = level.back();
        vector<Node*> leaves;
        for (int i = 0; i < q.size(); ++i) {
          if (i != q.size() - 1) {
            q[i]->next = q[i + 1];
          }
          if (q[i]->left != nullptr)
            leaves.push_back(q[i]->left);
          if (q[i]->right != nullptr)
            leaves.push_back(q[i]->right);
        }
        if (leaves.size() > 0)
          level.push_back(leaves);
      }
      return root;
    }
  };

  class Solution *solution;
};

TEST_F(q116, NOT_IMPLEMENT) {
   EXPECT_TRUE("NOT IMPLEMENT");
}