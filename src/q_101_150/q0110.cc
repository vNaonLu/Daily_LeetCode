#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/treenode.hpp>
#include <unordered_map>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 110.
 *      Balanced Binary Tree
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a binary tree, determine if it is
 *   For this problem, a height-balanced binary tree is defined
 *   a binary tree in which the left and right subtrees of “every” node
 *   differ in height by no more than
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The number of nodes in the tree is in the range ‘[0, 5000]’ .
 *   • ‘-10⁴ ≤ Node.val ≤ 10⁴’
 *
 */

struct q110 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    unordered_map<unsigned long, int> H;
    int height(TreeNode* root) {
      if (root == nullptr) return 0;
      if (!H.count((unsigned long)root))
        H[(unsigned long)root] = max(height(root->left), height(root->right)) + 1;
      return H[(unsigned long)root];
    }
   public:
    bool isBalanced(TreeNode* root) {
      if (root == nullptr) return true;
      if (root->left == nullptr) {
        return height(root->right) <= 1;
      } else if (root->right == nullptr) {
        return height(root->left) <= 1;
      }
      if (!isBalanced(root->left)) return false;
      if (!isBalanced(root->right)) return false;
      return abs(height(root->left) - height(root->right)) <= 1;
    }
  };

  class Solution *solution;
};

TEST_F(q110, sample_input01) {
  solution = new Solution();
  TreeNode* root = TreeNode::generate({3, 9, 20, NULL_TREENODE, NULL_TREENODE, 15, 7});
  bool exp = true;
  EXPECT_EQ(solution->isBalanced(root), exp);
  delete solution;
}

TEST_F(q110, sample_input02) {
  solution = new Solution();
  TreeNode* root = TreeNode::generate({1, 2, 2, 3, 3, NULL_TREENODE, NULL_TREENODE, 4, 4});
  bool exp = false;
  EXPECT_EQ(solution->isBalanced(root), exp);
  delete solution;
}

TEST_F(q110, sample_input03) {
  solution = new Solution();
  TreeNode* root = TreeNode::generate({});
  bool exp = true;
  EXPECT_EQ(solution->isBalanced(root), exp);
  delete solution;
}