#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/treenode.hpp>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 112.
 *      Path Sum
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given the ‘root’ of a binary tree and an integer ‘targetSum’ , return
 *   ‘true’ if the tree has a “root-to-leaf” path such that adding up all
 *   the values along the path equals ‘targetSum’
 *   A “leaf” is a node with no children.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The number of nodes in the tree is in the range ‘[0, 5000]’ .
 *   • ‘-1000 ≤ Node.val ≤ 1000’
 *   • ‘-1000 ≤ targetSum ≤ 1000’
 *
 */

struct q112 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    bool hasPathSum(TreeNode* root, int targetSum) {
      if (root == nullptr) {
        return false;
      } else {
        int next = targetSum - root->val;
        if (root->left == nullptr && root->right == nullptr) {
          return next == 0;
        } else if (root->left == nullptr) {
          return hasPathSum(root->right, next);
        } else if (root->right == nullptr) {
          return hasPathSum(root->left, next);
        } else {
          return hasPathSum(root->left, next) || hasPathSum(root->right, next);
        }
      }
    }
  };

  class Solution *solution;
};

TEST_F(q112, sample_input01) {
  solution = new Solution();
  TreeNode* root = TreeNode::generate({5, 4, 8, 11, NULL_TREENODE, 13, 4, 7, 2, NULL_TREENODE, NULL_TREENODE, NULL_TREENODE, 1});
  int targetSum = 22;
  bool exp = true;
  EXPECT_EQ(solution->hasPathSum(root, targetSum), exp);
  delete solution;
}

TEST_F(q112, sample_input02) {
  solution = new Solution();
  TreeNode* root = TreeNode::generate({1, 2, 3});
  int targetSum = 5;
  bool exp = false;
  EXPECT_EQ(solution->hasPathSum(root, targetSum), exp);
  delete solution;
}

TEST_F(q112, sample_input03) {
  solution = new Solution();
  TreeNode* root = TreeNode::generate({});
  int targetSum = 0;
  bool exp = false;
  EXPECT_EQ(solution->hasPathSum(root, targetSum), exp);
  delete solution;
}