#include <gtest/gtest.h>
#include <iostream>
#include <numeric>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 135.
 *      Candy
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   There are ‘n’ children standing in a line. Each child is assigned a
 *   rating value given in the integer array ‘ratings’
 *   You are giving candies to these children subjected to the following
 *       - Each child must have at least one
 *       - Children with a higher rating get more candies than their
 *   Return “the minimum number of candies you need to have to distribute
 *   the candies to the children” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘n = ratings.length’
 *   • ‘1 ≤ n ≤ 2 × 10⁴’
 *   • ‘0 ≤ ratings[i] ≤ 2 × 10⁴’
 *
 */

struct q135 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int candy(vector<int> &ratings) {
      vector<int> candies(ratings.size(), 1);
      for (int i = 1; i < ratings.size(); ++i) {
        if (ratings[i] > ratings[i - 1]) {
          candies[i] = candies[i - 1] + 1;
        }
      }
      for (int i = ratings.size() - 2; i >= 0; --i) {
        if (ratings[i] > ratings[i + 1]) {
          candies[i] = max(candies[i], candies[i + 1] + 1);
        }
      }

      return accumulate(candies.begin(), candies.end(), 0);
    }
  };

  class Solution *solution;
};

TEST_F(q135, sample_input01) {
  solution = new Solution();
  vector<int> ratings = {1, 0, 2};
  int exp = 5;
  int act = solution->candy(ratings);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q135, sample_input02) {
  solution = new Solution();
  vector<int> ratings = {1, 2, 2};
  int exp = 4;
  int act = solution->candy(ratings);
  EXPECT_EQ(act, exp);
  delete solution;
}