#include <gtest/gtest.h>
#include <iostream>
#include <unordered_map>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 128.
 *      Longest Consecutive Sequence
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an unsorted array of integers ‘nums’ , return “the length of the
 *   longest consecutive elements sequence.”
 *   You must write an algorithm that runs in ‘O(n)’ time.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘0 ≤ nums.length ≤ 10⁵’
 *   • ‘-10⁹ ≤ nums[i] ≤ 10⁹’
 *
 */

struct q128 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int longestConsecutive(vector<int> &nums) {
      int res = 0;
      unordered_map<int, int> hash;
      for (const auto &n : nums) {
        if (hash[n] != 0)
          continue;

        int l = hash[n - 1],
            r = hash[n + 1];
        int len = hash[n + 1] + hash[n - 1] + 1;
        res = max(len, res);
        hash[n] = hash[n + r] = hash[n - l] = len;
      }

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q128, sample_input01) {
  solution = new Solution();
  vector<int> nums = {100, 4, 200, 1, 3, 2};
  int exp = 4;
  int act = solution->longestConsecutive(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q128, sample_input02) {
  solution = new Solution();
  vector<int> nums = {0, 3, 7, 2, 5, 8, 4, 6, 0, 1};
  int exp = 9;
  int act = solution->longestConsecutive(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}