
#ifndef LEETCODE_Q103_H__
#define LEETCODE_Q103_H__
#include <deque>
#include <iostream>
#include <leetcode/treenode.hpp>
#include <vector>

namespace l103 {
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 103.
  *      Binary Tree Zigzag Level Order Traversal
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given the ‘root’ of a binary tree, return “the zigzag level order
  *   traversal of its nodes&#39; values” . (i.e., from left to right, then
  *   right to left for the next level and alternate between).
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • The number of nodes in the tree is in the range ‘[0, 2000]’ .
  *   • ‘-100 ≤ Node.val ≤ 100’
  *
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
 public:
  vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
    vector<vector<int>> res;
    if (root == nullptr) return res;
    deque<TreeNode*> dq;
    dq.push_back(root);
    int i = 0;
    TreeNode* temp = nullptr;
    while (!dq.empty()) {
      int s = dq.size();
      vector<int> ll;
      if (i % 2 == 0) {
        while (s--) {
          temp = dq.front();
          dq.pop_front();
          ll.push_back(temp->val);
          if (temp->left != NULL) dq.push_back(temp->left);
          if (temp->right != NULL) dq.push_back(temp->right);
        }
      } else {
        while (s--) {
          temp = dq.back();
          dq.pop_back();
          ll.push_back(temp->val);
          if (temp->right != NULL) dq.push_front(temp->right);
          if (temp->left != NULL) dq.push_front(temp->left);
        }
      }
      res.push_back(ll);
      i++;
    }
    return res;
  }
};
}  // namespace l103

#endif