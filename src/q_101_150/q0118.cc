#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 118.
 *      Pascal's Triangle
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an integer ‘numRows’ , return the first numRows of “Pascal's
 *   triangle”
 *   In “Pascal's triangle” , each number is the sum of the two numbers
 *   directly above it as shown:
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ numRows ≤ 30’
 *
 */

struct q118 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    vector<vector<int>> generate(int numRows) {
      vector<vector<int>> res(numRows);
      for (int i = 0; i < numRows; ++i) {
        res[i].resize(i + 1, 1);
        for (int j = 1; j < i; ++j) {
          res[i][j] = res[i - 1][j - 1] + res[i - 1][j];
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q118, sample_input01) {
  solution = new Solution();
  int numRows = 5;
  vector<vector<int>> exp = {{1}, {1, 1}, {1, 2, 1}, {1, 3, 3, 1}, {1, 4, 6, 4, 1}};
  EXPECT_EQ(solution->generate(numRows), exp);
  delete solution;
}

TEST_F(q118, sample_input02) {
  solution = new Solution();
  int numRows = 1;
  vector<vector<int>> exp = {{1}};
  EXPECT_EQ(solution->generate(numRows), exp);
  delete solution;
}