
#ifndef LEETCODE_Q120_H__
#define LEETCODE_Q120_H__
#include <iostream>
#include <vector>

namespace l120 {
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 120. Triangle
  *
  * Given a triangle array, return the minimum path
  * sum from top to bottom .
  * For each step, you may move to an adjacent number
  * of the row below. More formally, if you are on
  * index i on the current row, you may move to either
  * index i or index i + 1 on the next row.
  *
  * Constraints:
  * -  1 <= triangle.length <= 200 
  * -  triangle[0].length == 1 
  * -  triangle[i].length == triangle[i - 1].length + 1 
  * -  -10^(4) <= triangle[i][j] <= 10^(4) 
  *  “Follow up:“ Could youdo this using only O(n) extra space, where n is the total number of rows in the triangle?
  *
*/
class Solution {
 public:
  int minimumTotal(vector<vector<int>>& triangle) {
    for (int i = triangle.size() - 2; i > -1; --i) {
      for (int j = 0; j < triangle[i].size(); ++j) {
        triangle[i][j] += min(triangle[i + 1][j], triangle[i + 1][j + 1]);
      }
    }
    return triangle[0][0];
  }
};
}  // namespace l120
#endif