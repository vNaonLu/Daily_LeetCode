
#ifndef Q148_UNITTEST_H__
#define Q148_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0148.hpp"
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 148.
 *      Sort List
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given the ‘head’ of a linked list, return “the list after sorting it
 *   in “ascending order” ” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The number of nodes in the list is in the range ‘[0, 5 × 10⁴]’ .
 *   • ‘-10⁵ ≤ Node.val ≤ 10⁵’
 *
 */

TEST(q148, sample_input01) {
  l148::Solution solver;
  ListNode* head = ListNode::generate({4, 2, 1, 3});
  ListNode* exp = ListNode::generate({1, 2, 3, 4});
  EXPECT_LISTNODE_EQ(solver.sortList(head), exp);
}

TEST(q148, sample_input02) {
  l148::Solution solver;
  ListNode* head = ListNode::generate({-1, 5, 3, 4, 0});
  ListNode* exp = ListNode::generate({-1, 0, 3, 4, 5});
  EXPECT_LISTNODE_EQ(solver.sortList(head), exp);
}

TEST(q148, sample_input03) {
  l148::Solution solver;
  ListNode* head = ListNode::generate({});
  ListNode* exp = ListNode::generate({});
  EXPECT_LISTNODE_EQ(solver.sortList(head), exp);
}

#endif