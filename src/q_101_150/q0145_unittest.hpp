
#ifndef Q145_UNITTEST_H__
#define Q145_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0145.hpp"
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 145. Binary Tree Postorder Traversal
  *
  * Given the root of abinary tree, return the
  * postorder traversal of its nodes'; values .
  *
  * Constraints:
  * - The number of the nodes in the tree is in the range [0, 100] .
  * -  -100 <= Node.val <= 100 
  *  “Follow up:“ Recursive solution is trivial, could you do it iteratively?
  *
*/

TEST(q145, sample_input01) {
  TreeNode *root = TreeNode::generate({1, NULL_TREENODE, 2, 3});
  vector<int> exp = {3, 2, 1};
  l145::Solution solver;
  EXPECT_EQ(solver.postorderTraversal(root), exp);
}

TEST(q145, sample_input02) {
  TreeNode *root = TreeNode::generate({});
  vector<int> exp = {};
  l145::Solution solver;
  EXPECT_EQ(solver.postorderTraversal(root), exp);
}

TEST(q145, sample_input03) {
  TreeNode *root = TreeNode::generate({1});
  vector<int> exp = {1};
  l145::Solution solver;
  EXPECT_EQ(solver.postorderTraversal(root), exp);
}

TEST(q145, sample_input04) {
  TreeNode *root = TreeNode::generate({1, 2});
  vector<int> exp = {2, 1};
  l145::Solution solver;
  EXPECT_EQ(solver.postorderTraversal(root), exp);
}

TEST(q145, sample_input05) {
  TreeNode *root = TreeNode::generate({1, NULL_TREENODE, 2});
  vector<int> exp = {2, 1};
  l145::Solution solver;
  EXPECT_EQ(solver.postorderTraversal(root), exp);
}

#endif