
#ifndef LEETCODE_Q141_H__
#define LEETCODE_Q141_H__
#include <iostream>
#include <leetcode/list_node.hpp>

namespace l141 {
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 141. Linked List Cycle
  *
  * Given head , the head of a linked list, determine
  * if the linked list has a cycle in it.
  * There is a cycle in a linked list if there is
  * some node in the list that can be reached again by
  * continuously following the next pointer. Internally,
  * pos is used to denote the index of the node
  * thattail';s next pointer is connected to. “Note that
  * pos is not passed as a parameter“ .
  * Return true if there is a cycle in the linked
  * list . Otherwise, return false .
  *
  * Constraints:
  * - The number of the nodes in the list is in the range [0, 10^(4)] .
  * -  -10^(5) <= Node.val <= 10^(5) 
  * -  pos is -1 or a “valid index“ in the linked-list.
  *  “Follow up:“ Can you solve it using O(1) (i.e. constant) memory?
  *
*/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
 public:
  bool hasCycle(ListNode *head) {
    ListNode *fast = head,
             *slow = head;
    while (fast != nullptr && fast->next != nullptr) {
      slow = slow->next;
      fast = fast->next->next;
      if (slow == fast) return true;
    }
    return false;
  }
};
}  // namespace l141
#endif