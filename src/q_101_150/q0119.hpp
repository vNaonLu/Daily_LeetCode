
#ifndef LEETCODE_Q119_H__
#define LEETCODE_Q119_H__
#include <iostream>
#include <vector>

namespace l119 {
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 119. Pascal's Triangle II
  *
  * Given an integer rowIndex , return the
  * rowIndex^(th) ( “0-indexed“ ) row of the “Pascal';s
  * triangle“ .
  * In “Pascal';s triangle“ , each number is the sum
  * of the two numbers directly above it as shown:
  *
  * Constraints:
  * -  0 <= rowIndex <= 33 
  *  “Follow up:“ Could you optimize your algorithm to use only O(rowIndex) extra space?
  *
*/
class Solution {
 public:
  vector<int> getRow(int rowIndex) {
    vector<int> res(rowIndex + 1, 1);
    for (int i = 1; i < rowIndex; ++i) {
      res[i] = (double)res[i - 1] * (double)(rowIndex - i + 1) / (double)i;
    }
    return res;
  }
};
}  // namespace l119
#endif