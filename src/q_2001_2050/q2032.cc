#include <gtest/gtest.h>
#include <leetcode/anyorder.hpp>
#include <unordered_map>
#include <unordered_set>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 2032.
 *       Two Out of Three
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given three integer arrays ‘nums1’ , ‘nums2’ , and ‘nums3’ , return “a
 *   “distinct” array containing all the values that are present in “at
 *   least two” out of the three arrays. You may return the values in “any”
 *   order” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums1.length, nums2.length, nums3.length ≤ 100’
 *   • ‘1 ≤ nums1[i], nums2[j], nums3[k] ≤ 100’
 *
 */

struct q2032 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  private:
    void helper(unordered_map<int, int> &out, vector<int> const &ns) {
      auto cnt = unordered_set<int>(ns.begin(), ns.end());
      for (auto x : cnt) {
        ++out[x];
      }
    }

   public:
    vector<int> twoOutOfThree(vector<int>& nums1, vector<int>& nums2, vector<int>& nums3) {
      auto freq = unordered_map<int, int>();
      
      helper(freq, nums1);
      helper(freq, nums2);
      helper(freq, nums3);

      auto res = vector<int>();
      for (auto [x, cnt] : freq) {
        if (cnt >= 2) {
          res.emplace_back(x);
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q2032, sample_input01) {
  solution = new Solution();
  vector<int> nums1 = {1, 1, 3, 2};
  vector<int> nums2 = {2, 3};
  vector<int> nums3 = {3};
  vector<int> exp = {3, 2};
  vector<int> act = solution->twoOutOfThree(nums1, nums2, nums3);
  EXPECT_EQ_ANY_ORDER(act, exp);
  delete solution;
}

TEST_F(q2032, sample_input02) {
  solution = new Solution();
  vector<int> nums1 = {3, 1};
  vector<int> nums2 = {2, 3};
  vector<int> nums3 = {1, 2};
  vector<int> exp = {2, 3, 1};
  vector<int> act = solution->twoOutOfThree(nums1, nums2, nums3);
  EXPECT_EQ_ANY_ORDER(act, exp);
  delete solution;
}

TEST_F(q2032, sample_input03) {
  solution = new Solution();
  vector<int> nums1 = {1, 2, 2};
  vector<int> nums2 = {4, 3, 3};
  vector<int> nums3 = {5};
  vector<int> exp = {};
  vector<int> act = solution->twoOutOfThree(nums1, nums2, nums3);
  EXPECT_EQ_ANY_ORDER(act, exp);
  delete solution;
}
