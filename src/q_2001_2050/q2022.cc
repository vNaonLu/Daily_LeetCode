#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 2022.
 *       Convert 1D Array Into 2D Array
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given a “0-indexed” 1-dimensional (1D) integer array
 *   ‘original’ , and two integers, ‘m’ and ‘n’ . You are tasked with
 *   creating a 2-dimensional (2D) array with ‘ m’ rows and ‘n’ columns
 *   using “all” the elements from ‘original’
 *   The elements from indices ‘0’ to ‘n - 1’ ( “inclusive” ) of ‘original’
 *   should form the first row of the constructed 2D array, the elements
 *   from indices ‘n’ to ‘2 × n - 1’ ( “inclusive” ) should form the second
 *   row of the constructed 2D array, and so
 *   Return “an ” ‘m x n’ “ 2D array constructed according to the above
 *   procedure, or an empty 2D array if it is impossible” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ original.length ≤ 5 × 10⁴’
 *   • ‘1 ≤ original[i] ≤ 10⁵’
 *   • ‘1 ≤ m, n ≤ 4 × 10⁴’
 *
 */

struct q2022 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    vector<vector<int>> construct2DArray(vector<int> &original, int m, int n) {
      if (m * n != original.size()) {
        return vector<vector<int>>();
      }
      auto res = vector<vector<int>>(m, vector<int>(n, 0));
      auto beg = original.begin();
      for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
          *(res[i].begin() + j) = *beg++;
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q2022, sample_input01) {
  solution                     = new Solution();
  vector<int>         original = {1, 2, 3, 4};
  int                 m        = 2;
  int                 n        = 2;
  vector<vector<int>> exp      = {
           {1, 2},
           {3, 4}
  };
  vector<vector<int>> act = solution->construct2DArray(original, m, n);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2022, sample_input02) {
  solution                     = new Solution();
  vector<int>         original = {1, 2, 3};
  int                 m        = 1;
  int                 n        = 3;
  vector<vector<int>> exp      = {
           {1, 2, 3}
  };
  vector<vector<int>> act = solution->construct2DArray(original, m, n);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2022, sample_input03) {
  solution                     = new Solution();
  vector<int>         original = {1, 2};
  int                 m        = 1;
  int                 n        = 1;
  vector<vector<int>> exp      = {};
  vector<vector<int>> act      = solution->construct2DArray(original, m, n);
  EXPECT_EQ(act, exp);
  delete solution;
}
