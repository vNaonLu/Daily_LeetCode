#include <algorithm>
#include <gtest/gtest.h>
#include <iostream>
#include <unordered_map>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 2007.
 *       Find Original Array From Doubled Array
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   An integer array ‘original’ is transformed into a “doubled” array
 *   ‘changed’ by appending “twice the value” of every element in
 *   ‘original’ , and then randomly “shuffling” the resulting
 *   Given an array ‘changed’ , return ‘original’ “ if ” ‘changed’ “ is a
 *   “doubled” array. If ” ‘changed’ “ is not a “doubled” array, return an
 *   empty array. The elements in” ‘original’ “may be returned in “any”
 *   order” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ changed.length ≤ 10⁵’
 *   • ‘0 ≤ changed[i] ≤ 10⁵’
 *
 */

struct q2007 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    vector<int> findOriginalArray(vector<int> &changed) {
      if (changed.size() & 1) {
        return {};
      }
      sort(changed.begin(), changed.end());
      auto res  = vector<int>();
      auto freq = unordered_map<int, int>();
      for (auto x : changed) {
        ++freq[x];
      }
      for (auto x : changed) {
        auto curr = freq.find(x);
        if (curr->second != 0) {
          auto find_double = freq.find(x * 2);
          if (find_double == freq.end() || find_double->second == 0) {
            return {};
          }
          res.emplace_back(curr->first);
          --curr->second;
          --find_double->second;
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q2007, sample_input01) {
  solution            = new Solution();
  vector<int> changed = {1, 3, 4, 2, 6, 8};
  vector<int> exp     = {1, 3, 4};
  vector<int> act     = solution->findOriginalArray(changed);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2007, sample_input02) {
  solution            = new Solution();
  vector<int> changed = {6, 3, 0, 1};
  vector<int> exp     = {};
  vector<int> act     = solution->findOriginalArray(changed);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2007, sample_input03) {
  solution            = new Solution();
  vector<int> changed = {1};
  vector<int> exp     = {};
  vector<int> act     = solution->findOriginalArray(changed);
  EXPECT_EQ(act, exp);
  delete solution;
}