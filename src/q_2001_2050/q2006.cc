#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 2006.
 *       Count Number of Pairs With Absolute Difference K
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an integer array ‘nums’ and an integer ‘k’ , return “the number
 *   of pairs” ‘(i, j)’ “where” ‘i < j’ “such that” ‘|nums[i] - nums[j]| =
 *   k’
 *   The value of ‘|x|’ is defined
 *       -  ‘x’ if ‘x ≥ 0’
 *       -  ‘-x’ if ‘x < 0’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 200’
 *   • ‘1 ≤ nums[i] ≤ 100’
 *   • ‘1 ≤ k ≤ 99’
 *
 */

struct q2006 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int countKDifference(vector<int>& nums, int k) {
      int res = 0;
      for (int i = 0; i < nums.size() - 1; ++i) {
        for (int j = i + 1; j < nums.size(); ++j) {
          if (abs(nums[j] - nums[i]) == k) {
            ++res;
          }
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q2006, sample_input01) {
  solution = new Solution();
  vector<int> nums = {1, 2, 2, 1};
  int k = 1;
  int exp = 4;
  int act = solution->countKDifference(nums, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2006, sample_input02) {
  solution = new Solution();
  vector<int> nums = {1, 3};
  int k = 3;
  int exp = 0;
  int act = solution->countKDifference(nums, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2006, sample_input03) {
  solution = new Solution();
  vector<int> nums = {3, 2, 1, 5, 4};
  int k = 2;
  int exp = 3;
  int act = solution->countKDifference(nums, k);
  EXPECT_EQ(act, exp);
  delete solution;
}