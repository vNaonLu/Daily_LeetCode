
#ifndef Q2018_UNITTEST_H__
#define Q2018_UNITTEST_H__
#include <gtest/gtest.h>

#include "q2018.hpp"
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 2018.
  *       Check if Word Can Be Placed In Crossword
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   You are given an ‘m x n’ matrix ‘board’ , representing the “ current ”
  *   state of a crossword puzzle. The crossword contains lowercase English
  *   letters (from solved words), ‘' '’ to represent any “empty ” cells,
  *   and ‘'#'’ to represent any “blocked” cells.
  *   
  *   A word can be placed “ horizontally” (left to right “or” right to
  *   left) or “vertically” (top to bottom “or” bottom to top) in the board.
  *   
  *   - It does not occupy a cell containing the character ‘'#'’.
  *   
  *   - The cell each letter is placed in must either be ‘' '’ (empty) or
  *   “match” the letter already on the ‘board’.
  *   
  *   - There must not be any empty cells ‘' '’ or other lowercase letters
  *   “directly left or right”  “ ” of the word if the word was placed
  *   “horizontally”.
  *   
  *   - There must not be any empty cells ‘' '’ or other lowercase letters
  *   “directly above or below” the word if the word was placed “vertically”
  *   .
  *   
  *   Given a string ‘word’ , return ‘true’ “ if ” ‘word’ “ can be placed in
  *   ” ‘board’ “, or ” ‘false’ “ “otherwise” ”.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘m = board.length’
  *   • ‘n = board[i].length’
  *   • ‘1 ≤ m × n ≤ 2 × 10⁵’
  *   • ‘board[i][j]’ will be ‘' '’ , ‘'#'’ , or a lowercase English letter.
  *   • ‘1 ≤ word.length ≤ max(m, n)’
  *   • ‘word’ will contain only lowercase English letters.
  *
*/

TEST(q2018, sample_input01) {
  l2018::Solution solver;
  vector<vector<char>> board = {{'#', ' ', '#'}, {' ', ' ', '#'}, {'#', 'c', ' '}};
  string word = "abc";
  bool exp = true;
  EXPECT_EQ(solver.placeWordInCrossword(board, word), exp);
}

TEST(q2018, sample_input02) {
  l2018::Solution solver;
  vector<vector<char>> board = {{' ', '#', 'a'}, {' ', '#', 'c'}, {' ', '#', 'a'}};
  string word = "ac";
  bool exp = false;
  EXPECT_EQ(solver.placeWordInCrossword(board, word), exp);
}

TEST(q2018, sample_input03) {
  l2018::Solution solver;
  vector<vector<char>> board = {{'#', ' ', '#'}, {' ', ' ', '#'}, {'#', ' ', 'c'}};
  string word = "ca";
  bool exp = true;
  EXPECT_EQ(solver.placeWordInCrossword(board, word), exp);
}

#endif