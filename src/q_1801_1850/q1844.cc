#include <gtest/gtest.h>
#include <iostream>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1844.
 *       Replace All Digits with Characters
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given a “0-indexed” string ‘s’ that has lowercase English
 *   letters in its “even” indices and digits in its “odd”
 *   There is a function ‘shift(c, x)’ , where ‘c’ is a character and ‘x’
 *   is a digit, that returns the ‘xᵗʰ’ character after ‘c’
 *       - For example, ‘shift('a', 5) = 'f'’ and ‘shift('x', 0) = 'x'’
 *   For every “odd” index ‘i’ , you want to replace the digit ‘s[i]’ with
 *   ‘shift(s[i-1], s[i])’
 *   Return ‘s’ “ after replacing all digits. It is “guaranteed” that ”
 *   ‘shift(s[i-1], s[i])’ “ will never exceed ” ‘'z'’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s.length ≤ 100’
 *   • ‘s’ consists only of lowercase English letters and digits.
 *   • ‘shift(s[i-1], s[i]) ≤ 'z'’ for all “odd” indices ‘i’ .
 *
 */

struct q1844 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  private:
    char shift(char x, char cnt) { return x + cnt - '0'; }

  public:
    string replaceDigits(string s) {
      for (int i = 0; i < s.size(); ++i) {
        if (s[i] >= '0' && s[i] <= '9') {
          s[i] = shift(s[i - 1], s[i]);
        }
      }
      return s;
    }
  };

  class Solution *solution;
};

TEST_F(q1844, sample_input01) {
  solution   = new Solution();
  string s   = "a1c1e1";
  string exp = "abcdef";
  string act = solution->replaceDigits(s);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1844, sample_input02) {
  solution   = new Solution();
  string s   = "a1b2c3d4e";
  string exp = "abbdcfdhe";
  string act = solution->replaceDigits(s);
  EXPECT_EQ(act, exp);
  delete solution;
}
