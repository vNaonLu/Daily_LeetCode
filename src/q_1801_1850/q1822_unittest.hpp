
#ifndef Q1822_UNITTEST_H__
#define Q1822_UNITTEST_H__
#include <gtest/gtest.h>

#include "q1822.hpp"
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 1822.
  *       Sign of the Product of an Array
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   There is a function ‘signFunc(x)’ that.
  *   
  *   - ‘1’ if ‘x’ is positive.
  *   
  *   - ‘-1’ if ‘x’ is negative.
  *   
  *   - ‘0’ if ‘x’ is equal to ‘0’.
  *   
  *   You are given an integer array ‘nums’ . Let ‘product’ be the product
  *   of all values in the array ‘nums’.
  *   
  *   Return ‘signFunc(product)’.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘1 ≤ nums.length ≤ 1000’
  *   • ‘-100 ≤ nums[i] ≤ 100’
  *
*/

TEST(q1822, sample_input01) {
  l1822::Solution solver;
  vector<int> nums = {-1, -2, -3, -4, 3, 2, 1};
  int exp = 1;
  EXPECT_EQ(solver.arraySign(nums), exp);
}

TEST(q1822, sample_input02) {
  l1822::Solution solver;
  vector<int> nums = {1, 5, 0, 2, -3};
  int exp = 0;
  EXPECT_EQ(solver.arraySign(nums), exp);
}

TEST(q1822, sample_input03) {
  l1822::Solution solver;
  vector<int> nums = {-1, 1, -1, 1, -1};
  int exp = -1;
  EXPECT_EQ(solver.arraySign(nums), exp);
}

#endif