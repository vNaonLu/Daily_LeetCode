#include <gtest/gtest.h>
#include <iostream>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1816.
 *       Truncate Sentence
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   A “sentence” is a list of words that are separated by a single space
 *   with no leading or trailing spaces. Each of the words consists of
 *   “only” uppercase and lowercase English letters (no
 *       - For example, ‘'Hello World'’ , ‘'HELLO'’ , and ‘'hello world
 *   hello world'’ are all
 *   You are given a sentence ‘s’ ​​​​​​ and an integer ‘k’ ​​​​​​. You
 *   want to “truncate” ‘s’ ​​​​​​ such that it contains only the “first”
 *   ‘k’ ​​​​​​ words. Return ‘s’ ​​​​ “​​ after “truncating” it.” 
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s.length ≤ 500’
 *   • ‘k’ is in the range ‘[1, the number of words in s]’ .
 *   • ‘s’ consist of only lowercase and uppercase English letters and spaces.
 *   • The words in ‘s’ are separated by a single space.
 *   • There are no leading or trailing spaces.
 *
 */

struct q1816 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    string truncateSentence(string s, int k) {
      auto beg = s.begin();
      auto iter = s.begin();
      auto res = string("");
      while(beg != s.end()) {
        if (*iter == ' ' || iter == s.end()) {
          res += string(beg, iter);
          beg = iter;
          --k;
        }

        if (k == 0) {
          break;
        }
        ++iter;
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1816, sample_input01) {
  solution = new Solution();
  string s = "Hello how are you Contestant";
  int k = 4;
  string exp = "Hello how are you";
  string act = solution->truncateSentence(s, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1816, sample_input02) {
  solution = new Solution();
  string s = "What is the solution to this problem";
  int k = 4;
  string exp = "What is the solution";
  string act = solution->truncateSentence(s, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1816, sample_input03) {
  solution = new Solution();
  string s = "chopper is not a tanuki";
  int k = 5;
  string exp = "chopper is not a tanuki";
  string act = solution->truncateSentence(s, k);
  EXPECT_EQ(act, exp);
  delete solution;
}
