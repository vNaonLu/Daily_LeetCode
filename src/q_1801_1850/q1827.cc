#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1827.
 *       Minimum Operations to Make the Array Increasing
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an integer array ‘nums’ ( “0-indexed” ). In one
 *   operation, you can choose an element of the array and increment it by
 *   ‘1’
 *       - For example, if ‘nums = [1,2,3]’ , you can choose to increment
 *   ‘nums[1]’ to make ‘nums = [1,<u> “3” </u>,3]’
 *   Return “the “minimum” number of operations needed to make” ‘nums’ “
 *   “strictly”  “increasing” .”
 *   An array ‘nums’ is “strictly increasing” if ‘nums[i] < nums[i+1]’ for
 *   all ‘0 ≤ i < nums.length - 1’ . An array of length ‘1’ is trivially
 *   strictly
 *   
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 5000’
 *   • ‘1 ≤ nums[i] ≤ 10⁴’
 *
 */

struct q1827 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int minOperations(vector<int>& nums) {
      int res = 0;
      int curr = nums.front();

      for (int i = 1; i < nums.size(); ++i) {
        if (nums[i] <= curr) {
          res += curr - nums[i] + 1;
          ++curr;
        } else {
          curr = nums[i];
        }
      }

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1827, sample_input01) {
  solution = new Solution();
  vector<int> nums = {1, 1, 1};
  int exp = 3;
  int act = solution->minOperations(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1827, sample_input02) {
  solution = new Solution();
  vector<int> nums = {1, 5, 2, 4, 1};
  int exp = 14;
  int act = solution->minOperations(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1827, sample_input03) {
  solution = new Solution();
  vector<int> nums = {8};
  int exp = 0;
  int act = solution->minOperations(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}