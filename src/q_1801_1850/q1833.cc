#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/anyorder.hpp>
#include <queue>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1833.
 *       Maximum Ice Cream Bars
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   It is a sweltering summer day, and a boy wants to buy some ice cream
 *   At the store, there are ‘n’ ice cream bars. You are given an array
 *   ‘costs’ of length ‘n’ , where ‘costs[i]’ is the price of the ‘iᵗʰ’ ice
 *   cream bar in coins. The boy initially has ‘coins’ coins to spend, and
 *   he wants to buy as many ice cream bars as
 *   Return “the “maximum” number of ice cream bars the boy can buy with ”
 *   ‘coins’ “ coins.”
 *    “Note:” The boy can buy the ice cream bars in any
 *
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘costs.length = n’
 *   • ‘1 ≤ n ≤ 10⁵’
 *   • ‘1 ≤ costs[i] ≤ 10⁵’
 *   • ‘1 ≤ coins ≤ 10⁸’
 *
 */

struct q1833 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int maxIceCream(vector<int> &costs, int coins) {
      int                                            res = 0;
      priority_queue<int, vector<int>, greater<int>> pq;
      for (auto x : costs) {
        pq.emplace(x);
      }
      while (coins > 0 && !pq.empty()) {
        auto x = pq.top();
        pq.pop();
        if (x <= coins) {
          coins -= x;
          ++res;
        } else {
          break;
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1833, sample_input01) {
  solution          = new Solution();
  vector<int> costs = {1, 3, 2, 4, 1};
  int         coins = 7;
  int         exp   = 4;
  int         act   = solution->maxIceCream(costs, coins);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1833, sample_input02) {
  solution          = new Solution();
  vector<int> costs = {10, 6, 8, 7, 7, 8};
  int         coins = 5;
  int         exp   = 0;
  int         act   = solution->maxIceCream(costs, coins);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1833, sample_input03) {
  solution          = new Solution();
  vector<int> costs = {1, 6, 3, 1, 2, 5};
  int         coins = 20;
  int         exp   = 6;
  int         act   = solution->maxIceCream(costs, coins);
  EXPECT_EQ(act, exp);
  delete solution;
}
