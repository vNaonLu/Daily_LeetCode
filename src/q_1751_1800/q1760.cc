#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1760.
 *       Minimum Limit of Balls in a Bag
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an integer array ‘nums’ where the ‘iᵗʰ’ bag contains
 *   ‘nums[i]’ balls. You are also given an integer ‘maxOperations’
 *   You can perform the following operation at most ‘maxOperations’
 *       - Take any bag of balls and divide it into two new bags with a
 *   “positive ” number of
 *           - For example, a bag of ‘5’ balls can become two new bags of
 *   ‘1’ and ‘4’ balls, or two new bags of ‘2’ and ‘3’
 *
 *   Your penalty is the “maximum” number of balls in a bag. You want to
 *   “minimize” your penalty after the
 *   Return “the minimum possible penaltyafter performing the operations” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 10⁵’
 *   • ‘1 ≤ maxOperations, nums[i] ≤ 10⁹’
 *
 */

struct q1760 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int minimumSize(vector<int> &nums, int maxOperations) {
      int res = numeric_limits<int>::max();
      int l = 1, r = 1e9 + 1;

      while (l <= r) {
        int m = l + (r - l) / 2;
        int opt = 0;

        for (auto &x : nums) {
          if (x > m) {
            opt += x / m;
            if (x % m == 0) {
              --opt;
            }
          }
        }

        if (opt <= maxOperations) {
          res = min(res, m);
          r = m - 1;
        } else {
          l = m + 1;
        }
      }

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1760, sample_input01) {
  solution = new Solution();
  vector<int> nums = {9};
  int maxOperations = 2;
  int exp = 3;
  int act = solution->minimumSize(nums, maxOperations);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1760, sample_input02) {
  solution = new Solution();
  vector<int> nums = {2, 4, 8, 2};
  int maxOperations = 4;
  int exp = 2;
  int act = solution->minimumSize(nums, maxOperations);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1760, sample_input03) {
  solution = new Solution();
  vector<int> nums = {7, 17};
  int maxOperations = 2;
  int exp = 7;
  int act = solution->minimumSize(nums, maxOperations);
  EXPECT_EQ(act, exp);
  delete solution;
}