#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1752.
 *       Check if Array Is Sorted and Rotated
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an array ‘nums’ , return ‘true’ “ if the array was originally
 *   sorted in non-decreasing order, then rotated “some” number of
 *   positions (including zero)” . Otherwise, return ‘false’
 *   There may be “duplicates” in the original
 *    “Note:” An array ‘A’ rotated by ‘x’ positions results in an array ‘B’
 *   of the same length such that ‘A[i] = B[(i+x) % A.length]’ , where ‘%’
 *   is the modulo operation.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 100’
 *   • ‘1 ≤ nums[i] ≤ 100’
 *
 */

struct q1752 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    bool check(vector<int>& nums) {
      int min_idx = 0;
      for (int i = 1; i < nums.size(); ++i) {
        if (nums[i] < nums[min_idx]) min_idx = i;
        else if (nums[i] == nums[min_idx] && nums[i] < nums[i - 1]) min_idx = i;
      }
      int n = nums.size();
      int curr = (min_idx + 1) % n, last = min_idx;
      while (curr != min_idx) {
        if (nums[curr] < nums[last]) return false;
        ++curr; ++last;
        if (curr >= n) curr %= n;
        if (last >= n) last %= n;
      }
      return true;
    }
  };

  class Solution *solution;
};

TEST_F(q1752, sample_input01) {
  solution = new Solution();
  vector<int> nums = {3, 4, 5, 1, 2};
  bool exp = true;
  bool act = solution->check(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1752, sample_input02) {
  solution = new Solution();
  vector<int> nums = {2, 1, 3, 4};
  bool exp = false;
  bool act = solution->check(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1752, sample_input03) {
  solution = new Solution();
  vector<int> nums = {1, 2, 3};
  bool exp = true;
  bool act = solution->check(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}