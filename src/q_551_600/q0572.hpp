
#ifndef LEETCODE_Q572_H__
#define LEETCODE_Q572_H__
#include <iostream>
#include <leetcode/treenode.hpp>

namespace l572 {
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 572. Subtree of Another Tree
  * Given the roots of two binary trees root and
  * subRoot , return true if there is a subtree of root
  * with the same structure and node values of subRoot
  * and false otherwise.
  * A subtree of a binary tree tree is a tree that
  * consists of a node in tree and all of this node';s
  * descendants. The tree tree could also be considered
  * as a subtree of itself.
  *
  * Constraints:
  * - The number of nodes in the root tree is in the range [1, 2000] .
  * - The number of nodes in the subRoot tree is in the range [1, 1000] .
  * -  -10^(4) <= root.val <= 10^(4) 
  * -  -10^(4) <= subRoot.val <= 10^(4) 
  *
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
 private:
  bool helper(TreeNode* p, TreeNode* q) {
    if (p != nullptr && q != nullptr) {
      return p->val == q->val &&
             helper(p->left, q->left) &&
             helper(p->right, q->right);
    } else if (p == nullptr && q == nullptr) {
      return true;
    } else {
      return false;
    }
  }

 public:
  bool isSubtree(TreeNode* root, TreeNode* subRoot) {
    if (root == nullptr && subRoot == nullptr)
      return true;
    else if (root == nullptr)
      return false;
    else if (subRoot == nullptr)
      return true;

    if (helper(root, subRoot)) return true;

    return isSubtree(root->left, subRoot) ||
           isSubtree(root->right, subRoot);
  }
};
}  // namespace l572
#endif