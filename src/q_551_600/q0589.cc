#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 589.
 *      N-ary Tree Preorder Traversal
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given the ‘root’ of an n-ary tree, return “the preorder traversal of
 *   its nodes' values”
 *   Nary-Tree input serialization is represented in their level order
 *   traversal. Each group of children is separated by the null value (See
 *   examples)
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The number of nodes in the tree is in the range ‘[0, 10⁴]’ .
 *   • ‘0 ≤ Node.val ≤ 10⁴’
 *   • The height of the n-ary tree is less than or equal to ‘1000’ .
 *
 */

struct q589 : public ::testing::Test {
  // Leetcode answer here
  // Definition for a Node.
  class Node {
   public:
    int val;
    vector<Node *> children;

    Node() {}

    Node(int _val) {
      val = _val;
    }

    Node(int _val, vector<Node *> _children) {
      val = _val;
      children = _children;
    }
  };

  class Solution {
   private:
    inline void helper(Node *p, vector<int> &r) {
      if (nullptr != p) {
        r.emplace_back(p->val);
        for (auto &c : p->children) {
          helper(c, r);
        }
      }
    }

   public:
    vector<int> preorder(Node *root) {
      vector<int> res;
      helper(root, res);

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q589, NOT_IMPLEMENT) {
   EXPECT_TRUE("NOT IMPLEMENT");
}