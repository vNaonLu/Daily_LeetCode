#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 581.
 *      Shortest Unsorted Continuous Subarray
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an integer array ‘nums’ , you need to find one “continuous
 *   subarray” that if you only sort this subarray in ascending order, then
 *   the whole array will be sorted in ascending
 *   Return “the shortest such subarray and output its length” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 10⁴’
 *   • ‘-10⁵ ≤ nums[i] ≤ 10⁵’
 *
 */

struct q581 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int findUnsortedSubarray(vector<int>& nums) {
      
    }
  };

  class Solution *solution;
};

TEST_F(q581, sample_input01) {
  solution = new Solution();
  vector<int> nums = {2, 6, 4, 8, 10, 9, 15};
  int exp = 5;
  int act = solution->findUnsortedSubarray(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q581, sample_input02) {
  solution = new Solution();
  vector<int> nums = {1, 2, 3, 4};
  int exp = 0;
  int act = solution->findUnsortedSubarray(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q581, sample_input03) {
  solution = new Solution();
  vector<int> nums = {1};
  int exp = 0;
  int act = solution->findUnsortedSubarray(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}