
#ifndef LEETCODE_Q561_H__
#define LEETCODE_Q561_H__
#include <iostream>
#include <vector>

namespace l561 {
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 561.
 *      Array Partition I
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an integer array ‘nums’ of ‘2n’ integers, group these integers
 *   into ‘n’ pairs ‘(a₁, b₁), (a₂, b₂), ..., (aₙ, bₙ)’ such that the sum
 *   of ‘min(aᵢ, bᵢ)’ for all ‘i’ is “maximized” . Return “ the maximized
 *   sum” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ n ≤ 10⁴’
 *   • ‘nums.length = 2 × n’
 *   • ‘-10⁴ ≤ nums[i] ≤ 10⁴’
 *
 */

class Solution {
 public:
  int arrayPairSum(vector<int>& nums) {
    int res = 0;
    int i = 0;
    sort(nums.begin(), nums.end());
    while (i < nums.size() - 1) {
      res += nums[i++];
      ++i;
    }
    return res;
  }
};
}  // namespace l561

#endif