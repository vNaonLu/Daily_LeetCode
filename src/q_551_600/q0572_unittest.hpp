
#ifndef Q572_UNITTEST_H__
#define Q572_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0572.hpp"
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 572. Subtree of Another Tree
  * Given the roots of two binary trees root and
  * subRoot , return true if there is a subtree of root
  * with the same structure and node values of subRoot
  * and false otherwise.
  * A subtree of a binary tree tree is a tree that
  * consists of a node in tree and all of this node';s
  * descendants. The tree tree could also be considered
  * as a subtree of itself.
  *
  * Constraints:
  * - The number of nodes in the root tree is in the range [1, 2000] .
  * - The number of nodes in the subRoot tree is in the range [1, 1000] .
  * -  -10^(4) <= root.val <= 10^(4) 
  * -  -10^(4) <= subRoot.val <= 10^(4) 
  *
*/

TEST(q572, sample_input01) {
  int null = -1;
  TreeNode *root = TreeNode::generate({3, 4, 5, 1, 2}, null);
  TreeNode *subRoot = TreeNode::generate({4, 1, 2}, null);
  bool exp = true;
  l572::Solution solver;
  EXPECT_EQ(solver.isSubtree(root, subRoot), exp);
  TreeNode::release(root);
  TreeNode::release(subRoot);
}

TEST(q572, sample_input02) {
  int null = -1;
  TreeNode *root = TreeNode::generate({3, 4, 5, 1, 2, null, null, null, null, 0}, null);
  TreeNode *subRoot = TreeNode::generate({4, 1, 2}, null);
  bool exp = false;
  l572::Solution solver;
  EXPECT_EQ(solver.isSubtree(root, subRoot), exp);
  TreeNode::release(root);
  TreeNode::release(subRoot);
}

#endif