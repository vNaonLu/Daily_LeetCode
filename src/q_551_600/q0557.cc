#include <gtest/gtest.h>
#include <iostream>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 557.
 *      Reverse Words in a String III
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a string ‘s’ , reverse the order of characters in each word
 *   within a sentence while still preserving whitespace and initial word
 *   order.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s.length ≤ 5 × 10⁴’
 *   • ‘s’ contains printable “ASCII” characters.
 *   • ‘s’ does not contain any leading or trailing spaces.
 *   • There is “at least one” word in ‘s’ .
 *   • All the words in ‘s’ are separated by a single space.
 *
 */

struct q557 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    string reverseWords(string s) {
      auto beg = s.begin();
      auto it  = s.begin();
      while (it != s.end()) {
        while (it != s.end() && *it == ' ') {
          ++it;
        }
        beg = it;
        while (it != s.end() && *it != ' ') {
          ++it;
        }
        reverse(beg, it);
      }
      return s;
    }
  };

  class Solution *solution;
};

TEST_F(q557, sample_input01) {
  solution   = new Solution();
  string s   = "Let\"s take LeetCode contest";
  string exp = "s\"teL ekat edoCteeL tsetnoc";
  EXPECT_EQ(solution->reverseWords(s), exp);
  delete solution;
}

TEST_F(q557, sample_input02) {
  solution   = new Solution();
  string s   = "God Ding";
  string exp = "doG gniD";
  EXPECT_EQ(solution->reverseWords(s), exp);
  delete solution;
}