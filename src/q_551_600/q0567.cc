#include <gtest/gtest.h>
#include <iostream>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 567.
 *      Permutation in String
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given two strings ‘s1’ and ‘s2’ , return ‘true’ “ if ” ‘s2’ “ contains
 *   a permutation of ” ‘s1’ “, or ” ‘false’ “ otherwise”
 *   In other words, return ‘true’ if one of ‘s1’ 's permutations is the
 *   substring of ‘s2’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s1.length, s2.length ≤ 10⁴’
 *   • ‘s1’ and ‘s2’ consist of lowercase English letters.
 *
 */

struct q567 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    bool checkInclusion(string s1, string s2) {
      if (s2.size() >= s1.size()) {
        vector<int> cnt(26), cnt2(26);
        mapping(s1, cnt, 0, s1.size());
        for (int i = 0; i < s2.size() - s1.size() + 1; ++i) {
          mapping(s2, cnt2, i, s1.size());
          if (cnt == cnt2) return true;
        }
      }
      return false;
    }
   private:
    inline void mapping(const string &s, vector<int> &out, int beg, size_t len) {
      fill(out.begin(), out.end(), 0);
      for (int i = 0; i < len; ++i) ++out[s[beg + i] - 'a'];
    }
  };

  class Solution *solution;
};

TEST_F(q567, sample_input01) {
  solution = new Solution();
  string s1 = "ab";
  string s2 = "eidbaooo";
  bool exp = true;
  EXPECT_EQ(solution->checkInclusion(s1, s2), exp);
  delete solution;
}

TEST_F(q567, sample_input02) {
  solution = new Solution();
  string s1 = "ab";
  string s2 = "eidboaoo";
  bool exp = false;
  EXPECT_EQ(solution->checkInclusion(s1, s2), exp);
  delete solution;
}