#include <gtest/gtest.h>
#include <iostream>
#include <unordered_map>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 560.
 *      Subarray Sum Equals K
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an array of integers ‘nums’ and an integer ‘k’ , return “the
 *   total number of continuous subarrays whose sum equals to ‘k’ ” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 2 × 10⁴’
 *   • ‘-1000 ≤ nums[i] ≤ 1000’
 *   • ‘-10⁷ ≤ k ≤ 10⁷’
 *
 */

struct q560 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int subarraySum(vector<int>& nums, int k) {
      int res = 0, sum = 0;
      unordered_map<int, int> hash;
      hash[sum] = 1;
      for (int i = 0; i < nums.size(); ++i) {
        sum += nums[i];
        if (hash.count(sum - k))
          res += hash.at(sum - k);
        ++hash[sum];
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q560, sample_input01) {
  solution = new Solution();
  vector<int> nums = {1, 1, 1};
  int k = 2;
  int exp = 2;
  EXPECT_EQ(solution->subarraySum(nums, k), exp);
  delete solution;
}

TEST_F(q560, sample_input02) {
  solution = new Solution();
  vector<int> nums = {1, 2, 3};
  int k = 3;
  int exp = 2;
  EXPECT_EQ(solution->subarraySum(nums, k), exp);
  delete solution;
}