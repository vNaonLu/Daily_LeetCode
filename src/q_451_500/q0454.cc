#include <gtest/gtest.h>
#include <iostream>
#include <unordered_map>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 454.
 *      4Sum II
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given four integer arrays ‘nums1’ , ‘nums2’ , ‘nums3’ , and ‘nums4’
 *   all of length ‘n’ , return the number of tuples ‘(i, j, k, l)’ such
 *       -  ‘0 ≤ i, j, k, l < n’
 *       -  ‘nums1[i] + nums2[j] + nums3[k] + nums4[l] = 0’ 
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘n = nums1.length’
 *   • ‘n = nums2.length’
 *   • ‘n = nums3.length’
 *   • ‘n = nums4.length’
 *   • ‘1 ≤ n ≤ 200’
 *   • ‘-2²⁸ ≤ nums1[i], nums2[i], nums3[i], nums4[i] ≤ 2²⁸’
 *
 */

struct q454 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int fourSumCount(vector<int> &nums1, vector<int> &nums2, vector<int> &nums3, vector<int> &nums4) {
      unordered_map<int, int> keep;
      for (const auto &x : nums1) {
        for (const auto &y : nums2) {
          ++keep[x + y];
        }
      }
      int res = 0;
      for (const auto &x : nums3) {
        for (const auto &y : nums4) {
          res += keep[-x - y];
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q454, sample_input01) {
  solution = new Solution();
  vector<int> nums1 = {1, 2};
  vector<int> nums2 = {-2, -1};
  vector<int> nums3 = {-1, 2};
  vector<int> nums4 = {0, 2};
  int exp = 2;
  int act = solution->fourSumCount(nums1, nums2, nums3, nums4);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q454, sample_input02) {
  solution = new Solution();
  vector<int> nums1 = {0};
  vector<int> nums2 = {0};
  vector<int> nums3 = {0};
  vector<int> nums4 = {0};
  int exp = 1;
  int act = solution->fourSumCount(nums1, nums2, nums3, nums4);
  EXPECT_EQ(act, exp);
  delete solution;
}