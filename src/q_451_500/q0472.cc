#include <gtest/gtest.h>
#include <iostream>
#include <string>
#include <unordered_set>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 472.
 *      Concatenated Words
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an array of strings ‘words’ ( “without duplicates” ), return
 *   “all the “concatenated words” in the given list of” ‘words’
 *   A “concatenated word” is defined as a string that is comprised
 *   entirely of at least two shorter words in the given array.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ words.length ≤ 10⁴’
 *   • ‘1 ≤ words[i].length ≤ 30’
 *   • ‘words[i]’ consists of only lowercase English letters.
 *   • All the strings of ‘words’ are “unique” .
 *   • ‘1 ≤ sum(words[i].length) ≤ 10⁵’
 *
 */

struct q472 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    vector<string> findAllConcatenatedWordsInADict(vector<string> &words) {
      unordered_set<string> words_set;
      vector<string>        res;
      for (auto &s : words) {
        words_set.emplace(s);
      }
      for (auto &s : words) {
        int         n = s.size();
        vector<int> dp(n + 1, 0);
        dp.front() = 1;
        for (int i = 0; i < n; ++i) {
          if (dp[i]) {
            for (int j = i + 1; j <= n; ++j) {
              if (j - i < n && words_set.count(s.substr(i, j - i))) {
                dp[j] = 1;
              }
            }
            if (dp[n]) {
              res.emplace_back(s);
              break;
            }
          }
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q472, sample_input01) {
  solution             = new Solution();
  vector<string> words = {"cat", "cats",        "catsdogcats",
                          "dog", "dogcatsdog",  "hippopotamuses",
                          "rat", "ratcatdogcat"};
  vector<string> exp   = {"catsdogcats", "dogcatsdog", "ratcatdogcat"};
  vector<string> act   = solution->findAllConcatenatedWordsInADict(words);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q472, sample_input02) {
  solution             = new Solution();
  vector<string> words = {"cat", "dog", "catdog"};
  vector<string> exp   = {"catdog"};
  vector<string> act   = solution->findAllConcatenatedWordsInADict(words);
  EXPECT_EQ(act, exp);
  delete solution;
}
