
#ifndef LEETCODE_Q451_H__
#define LEETCODE_Q451_H__
#include <iostream>
#include <map>
#include <queue>
#include <string>

namespace l451 {
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 451.
  *      Sort Characters By Frequency
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given a string ‘s’ , sort it in “decreasing order” based on the
  *   “frequency” of the characters. The “frequency” of a character is the
  *   number of times it appears in the string.
  *   
  *   Return “the sorted string” . If there are multiple answers, return
  *   “any of them”.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘1 ≤ s.length ≤ 5 × 10⁵’
  *   • ‘s’ consists of uppercase and lowercase English letters and digits.
  *
*/

class Solution {
 public:
  string frequencySort(string s) {
    string res;
    map<char, int> cnt;
    for (const auto &c : s) ++cnt[c];
    priority_queue<int> pq;
    for (const auto &it : cnt) pq.push(it.second);
    while (!pq.empty()) {
      int count = pq.top();
      pq.pop();
      for (const auto &it : cnt) {
        if (it.second == count) {
          while (count--)
            res.push_back(it.first);
          cnt.erase(it.first);
          break;
        }
      }
    }
    return res;
  }
};
}  // namespace l451

#endif