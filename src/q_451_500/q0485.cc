#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 485.
 *      Max Consecutive Ones
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a binary array ‘nums’ , return “the maximum number of
 *   consecutive ” ‘1’ “'s in the array” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 10⁵’
 *   • ‘nums[i]’ is either ‘0’ or ‘1’ .
 *
 */

struct q485 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int findMaxConsecutiveOnes(vector<int>& nums) {
      int res = 0;
      int cnt = 0;
      for (const auto& n : nums) {
        if (n == 1) {
          res = max(res, ++cnt);
        } else {
          cnt = 0;
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q485, sample_input01) {
  solution = new Solution();
  vector<int> nums = {1, 1, 0, 1, 1, 1};
  int exp = 3;
  EXPECT_EQ(solution->findMaxConsecutiveOnes(nums), exp);
  delete solution;
}

TEST_F(q485, sample_input02) {
  solution = new Solution();
  vector<int> nums = {1, 0, 1, 1, 0, 1};
  int exp = 2;
  EXPECT_EQ(solution->findMaxConsecutiveOnes(nums), exp);
  delete solution;
}