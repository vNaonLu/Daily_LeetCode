#include <algorithm>
#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 462.
 *      Minimum Moves to Equal Array Elements II
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an integer array ‘nums’ of size ‘n’ , return “the minimum number
 *   of moves required to make all array elements equal”
 *   In one move, you can increment or decrement an element of the array by
 *   ‘1’
 *   Test cases are designed so that the answer will fit in a “32-bit”
 *   integer.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘n = nums.length’
 *   • ‘1 ≤ nums.length ≤ 10⁵’
 *   • ‘-10⁹ ≤ nums[i] ≤ 10⁹’
 *
 */

struct q462 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int minMoves2(vector<int> &nums) {
      nth_element(nums.begin(), nums.begin() + nums.size() / 2, nums.end());
      int m = nums[nums.size() / 2],
          res = 0;
      for (auto &x : nums) {
        res += abs(m - x);
      }

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q462, sample_input01) {
  solution = new Solution();
  vector<int> nums = {1, 2, 3};
  int exp = 2;
  int act = solution->minMoves2(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q462, sample_input02) {
  solution = new Solution();
  vector<int> nums = {1, 10, 2, 9};
  int exp = 16;
  int act = solution->minMoves2(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}