#include <gtest/gtest.h>
#include <iostream>
#include <stack>
#include <unordered_map>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 496.
 *      Next Greater Element I
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   The “next greater element” of some element ‘x’ in an array is the
 *   “first greater” element that is “to the right” of ‘x’ in the same
 *   You are given two “distinct 0-indexed” integer arrays ‘nums1’ and
 *   ‘nums2’ , where ‘nums1’ is a subset of ‘nums2’
 *   For each ‘0 ≤ i < nums1.length’ , find the index ‘j’ such that
 *   ‘nums1[i] = nums2[j]’ and determine the “next greater element” of
 *   ‘nums2[j]’ in ‘nums2’ . If there is no next greater element, then the
 *   answer for this query is ‘-1’
 *   Return “an array ” ‘ans’ “ of length ” ‘nums1.length’ “ such that ”
 *   ‘ans[i]’ “ is the “next greater element” as described above.” 
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums1.length ≤ nums2.length ≤ 1000’
 *   • ‘0 ≤ nums1[i], nums2[i] ≤ 10⁴’
 *   • All integers in ‘nums1’ and ‘nums2’ are “unique” .
 *   • All the integers of ‘nums1’ also appear in ‘nums2’ .
 *
 */

struct q496 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
      unordered_map<int, int> mp;
      stack<int> mx;
      for (int i = nums2.size() - 1; i >= 0; --i) {
        while (!mx.empty() && mx.top() < nums2[i])
          mx.pop();
        if (mx.empty()) {
          mp[nums2[i]] = -1;
        } else {
          mp[nums2[i]] = mx.top();
        }
        mx.push(nums2[i]);
      }
      vector<int> res(nums1.size());
      for (int i = 0; i < nums1.size(); ++i)
        res[i] = mp[nums1[i]];
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q496, sample_input01) {
  solution = new Solution();
  vector<int> nums1 = {4, 1, 2};
  vector<int> nums2 = {1, 3, 4, 2};
  vector<int> exp = {-1, 3, -1};
  EXPECT_EQ(solution->nextGreaterElement(nums1, nums2), exp);
  delete solution;
}

TEST_F(q496, sample_input02) {
  solution = new Solution();
  vector<int> nums1 = {2, 4};
  vector<int> nums2 = {1, 2, 3, 4};
  vector<int> exp = {3, -1};
  EXPECT_EQ(solution->nextGreaterElement(nums1, nums2), exp);
  delete solution;
}