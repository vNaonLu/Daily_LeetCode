
#ifndef Q463_UNITTEST_H__
#define Q463_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0463.hpp"
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 463.
  *      Island Perimeter
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   You are given ‘row x col’  ‘grid’ representing a map where ‘grid[i][j]
  *   = 1’ representsland and ‘grid[i][j] = 0’ represents water.
  *   
  *   Grid cells are connected “horizontally/vertically” (not diagonally).
  *   The ‘grid’ is completely surrounded by water, and there is exactly one
  *   island (i.e., one or more connected land cells).
  *   
  *   The island doesn't have "lakes", meaning the water inside isn't
  *   connected to the water around the island. One cell is a square with
  *   side length 1. The grid is rectangular, width and height don&#39;t
  *   exceed 100. Determine the perimeter of the island.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘row = grid.length’
  *   • ‘col = grid[i].length’
  *   • ‘1 ≤ row, col ≤ 100’
  *   • ‘grid[i][j]’ is ‘0’ or ‘1’ .
  *   • There is exactly one island in ‘grid’ .
  *
*/

TEST(q463, sample_input01) {
  l463::Solution solver;
  vector<vector<int>> grid = {{0, 1, 0, 0}, {1, 1, 1, 0}, {0, 1, 0, 0}, {1, 1, 0, 0}};
  int exp = 16;
  EXPECT_EQ(solver.islandPerimeter(grid), exp);
}

TEST(q463, sample_input02) {
  l463::Solution solver;
  vector<vector<int>> grid = {{1}};
  int exp = 4;
  EXPECT_EQ(solver.islandPerimeter(grid), exp);
}

TEST(q463, sample_input03) {
  l463::Solution solver;
  vector<vector<int>> grid = {{1, 0}};
  int exp = 4;
  EXPECT_EQ(solver.islandPerimeter(grid), exp);
}

#endif