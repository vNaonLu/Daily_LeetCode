#include <algorithm>
#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 455.
 *      Assign Cookies
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Assume you are an awesome parent and want to give your children some
 *   cookies. But, you should give each child at most one
 *   Each child ‘i’ has a greed factor ‘g[i]’ , which is the minimum size
 *   of a cookie that the child will be content with; and each cookie ‘j’
 *   has a size ‘s[j]’ . If ‘s[j] ≥ g[i]’ , we can assign the cookie ‘j’ to
 *   the child ‘i’ , and the child ‘i’ will be content. Your goal is to
 *   maximize the number of your content children and output the maximum
 *   number.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ g.length ≤ 3 × 10⁴’
 *   • ‘0 ≤ s.length ≤ 3 × 10⁴’
 *   • ‘1 ≤ g[i], s[j] ≤ 2³¹ - 1’
 *
 */

struct q455 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int findContentChildren(vector<int> &g, vector<int> &s) {
      sort(g.begin(), g.end());
      sort(s.begin(), s.end());
      auto gbeg = g.begin();
      auto sbeg = s.begin();
      auto res  = (int)0;
      while (gbeg != g.end() && sbeg != s.end()) {
        if (*sbeg >= *gbeg) {
          ++sbeg;
          ++gbeg;
          ++res;
        } else if (*gbeg > *sbeg) {
          ++sbeg;
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q455, sample_input01) {
  solution        = new Solution();
  vector<int> g   = {1, 2, 3};
  vector<int> s   = {1, 1};
  int         exp = 1;
  int         act = solution->findContentChildren(g, s);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q455, sample_input02) {
  solution        = new Solution();
  vector<int> g   = {1, 2};
  vector<int> s   = {1, 2, 3};
  int         exp = 2;
  int         act = solution->findContentChildren(g, s);
  EXPECT_EQ(act, exp);
  delete solution;
}