#include <gtest/gtest.h>
#include <iostream>
#include <string>
#include <unordered_set>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 500.
 *      Keyboard Row
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an array of strings ‘words’ , return “the words that can be
 *   typed using letters of the alphabet on only one row of American
 *   keyboard like the image below”
 *   In the “American keyboard”
 *       - the first row consists of the characters ‘'qwertyuiop'’
 *       - the second row consists of the characters ‘'asdfghjkl'’ ,
 *       - the third row consists of the characters ‘'zxcvbnm'’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ words.length ≤ 20’
 *   • ‘1 ≤ words[i].length ≤ 100’
 *   • ‘words[i]’ consists of English letters (both lowercase and uppercase).
 *
 */

struct q500 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  private:
    inline const static unordered_set<char> row1{'q', 'w', 'e', 'r', 't',
                                                 'y', 'u', 'i', 'o', 'p'};
    inline const static unordered_set<char> row2{'a', 's', 'd', 'f', 'g',
                                                 'h', 'j', 'k', 'l'};
    inline const static unordered_set<char> row3{'z', 'x', 'c', 'v',
                                                 'b', 'n', 'm'};

  public:
    vector<string> findWords(vector<string> &words) {
      auto res = vector<string>();
      for (auto &s : words) {
        unordered_set<char> const *target = nullptr;
        auto                       beg    = s.begin();
        if (row1.count(tolower(*beg))) {
          target = &row1;
        } else if (row2.count(tolower(*beg))) {
          target = &row2;
        } else if (row3.count(tolower(*beg))) {
          target = &row3;
        }

        while (target != nullptr && ++beg != s.end()) {
          if (!target->count(tolower(*beg))) {
            break;
          }
        }

        if (beg == s.end()) {
          res.emplace_back(move(s));
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q500, sample_input01) {
  solution             = new Solution();
  vector<string> words = {"Hello", "Alaska", "Dad", "Peace"};
  vector<string> exp   = {"Alaska", "Dad"};
  vector<string> act   = solution->findWords(words);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q500, sample_input02) {
  solution             = new Solution();
  vector<string> words = {"omk"};
  vector<string> exp   = {};
  vector<string> act   = solution->findWords(words);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q500, sample_input03) {
  solution             = new Solution();
  vector<string> words = {"adsdf", "sfd"};
  vector<string> exp   = {"adsdf", "sfd"};
  vector<string> act   = solution->findWords(words);
  EXPECT_EQ(act, exp);
  delete solution;
}