#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1720.
 *       Decode XORed Array
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   There is a “hidden” integer array ‘arr’ that consists of ‘n’
 *   non-negative
 *   It was encoded into another integer array ‘encoded’ of length ‘n - 1’
 *   , such that ‘encoded[i] = arr[i] XOR arr[i + 1]’ . For example, if
 *   ‘arr = [1,0,2,1]’ , then ‘encoded = [1,2,3]’
 *   You are given the ‘encoded’ array. You are also given an integer
 *   ‘first’ , that is the first element of ‘arr’ , i.e. ‘arr[0]’
 *   Return “the original array” ‘arr’ . It can be proved that the answer
 *   exists and is unique.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘2 ≤ n ≤ 10⁴’
 *   • ‘encoded.length = n - 1’
 *   • ‘0 ≤ encoded[i] ≤ 10⁵’
 *   • ‘0 ≤ first ≤ 10⁵’
 *
 */

struct q1720 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    vector<int> decode(vector<int>& encoded, int first) {
      vector<int> res(encoded.size() + 1);
      res.front() = first;
      for (int i = 0; i < encoded.size(); ++i) {
        res[i + 1] = encoded[i] ^ res[i];
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1720, sample_input01) {
  solution = new Solution();
  vector<int> encoded = {1, 2, 3};
  int first = 1;
  vector<int> exp = {1, 0, 2, 1};
  vector<int> act = solution->decode(encoded, first);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1720, sample_input02) {
  solution = new Solution();
  vector<int> encoded = {6, 2, 7, 3};
  int first = 4;
  vector<int> exp = {4, 2, 0, 7, 4};
  vector<int> act = solution->decode(encoded, first);
  EXPECT_EQ(act, exp);
  delete solution;
}