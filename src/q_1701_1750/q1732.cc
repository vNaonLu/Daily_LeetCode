#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1732.
 *       Find the Highest Altitude
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   There is a biker going on a road trip. The road trip consists of ‘n +
 *   1’ points at different altitudes. The biker starts his trip on point
 *   ‘0’ with altitude equal ‘0’
 *   You are given an integer array ‘gain’ of length ‘n’ where ‘gain[i]’ is
 *   the “net gain in altitude” between points ‘i’ ​​​​​​ and ‘i +
 * 1’ for all ( ‘0 ≤ i < n)’ . Return “the “highest altitude” of a point.”
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘n = gain.length’
 *   • ‘1 ≤ n ≤ 100’
 *   • ‘-100 ≤ gain[i] ≤ 100’
 *
 */

struct q1732 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int largestAltitude(vector<int> &gain) {
      auto alt = (int)0;
      auto res = (int)0;
      for (auto x : gain) {
        alt += x;
        res = max(res, alt);
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1732, sample_input01) {
  solution         = new Solution();
  vector<int> gain = {-5, 1, 5, 0, -7};
  int         exp  = 1;
  int         act  = solution->largestAltitude(gain);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1732, sample_input02) {
  solution         = new Solution();
  vector<int> gain = {-4, -3, -2, -1, 4, 3, 2};
  int         exp  = 0;
  int         act  = solution->largestAltitude(gain);
  EXPECT_EQ(act, exp);
  delete solution;
}
