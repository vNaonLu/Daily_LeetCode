#include <cctype>
#include <gtest/gtest.h>
#include <iostream>
#include <string>
#include <unordered_map>
#include <unordered_set>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 819.
 *      Most Common Word
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a string ‘paragraph’ and a string array of the banned words
 *   ‘banned’ , return “the most frequent word that is not banned” . It is
 *   “guaranteed” there is “at least one word” that is not banned, and that
 *   the answer is “unique”
 *   The words in ‘paragraph’ are “case-insensitive” and the answer should
 *   be returned in “lowercase” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ paragraph.length ≤ 1000’
 *   • paragraph consists of English letters, space ‘' '’ , or one of the
 * symbols: ‘'!?',;.'’ . • ‘0 ≤ banned.length ≤ 100’ • ‘1 ≤ banned[i].length ≤
 * 10’ • ‘banned[i]’ consists of only lowercase English letters.
 *
 */

struct q819 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  private:
    template <typename It> string extractWord(It *beg, It end) {
      while (*beg != end && (**beg < 'a' || **beg > 'z')) {
        ++*beg;
      }
      auto it = *beg;
      while (it != end && (*it >= 'a' && *it <= 'z')) {
        ++it;
      }
      auto res = string(*beg, it);
      *beg     = it;
      return res;
    }

  public:
    string mostCommonWord(string paragraph, vector<string> &banned) {
      auto ban  = unordered_set<string>(banned.begin(), banned.end());
      auto freq = unordered_map<string, int>();
      auto beg  = paragraph.begin();
      transform(paragraph.begin(), paragraph.end(), paragraph.begin(),
                [](auto &c) { return tolower(c); });
      while (beg != paragraph.end()) {
        auto word = extractWord(&beg, paragraph.end());
        if (!word.empty() && !ban.count(word)) {
          ++freq[move(word)];
        }
      }
      auto res = max_element(freq.begin(), freq.end(), [](auto &x, auto &y) {
        return x.second < y.second;
      });
      return res->first;
    }
  };

  class Solution *solution;
};

TEST_F(q819, sample_input01) {
  solution         = new Solution();
  string paragraph = "Bob hit a ball, the hit BALL flew far after it was hit.";
  vector<string> banned = {"hit"};
  string         exp    = "ball";
  string         act    = solution->mostCommonWord(paragraph, banned);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q819, sample_input02) {
  solution                 = new Solution();
  string         paragraph = "a.";
  vector<string> banned    = {};
  string         exp       = "a";
  string         act       = solution->mostCommonWord(paragraph, banned);
  EXPECT_EQ(act, exp);
  delete solution;
}