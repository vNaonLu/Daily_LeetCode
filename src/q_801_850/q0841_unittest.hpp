
#ifndef Q841_UNITTEST_H__
#define Q841_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0841.hpp"
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 841.
  *      Keys and Rooms
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   There are ‘n’ rooms labeled from ‘0’ to ‘n - 1’ and all the rooms are
  *   locked except for room ‘0’ . Your goal is to visit all the rooms.
  *   However, you cannot enter a locked room without having its key.
  *   
  *   When you visit a room, you may find a set of “distinct keys” in it.
  *   Each key has a number on it, denoting which room it unlocks, and you
  *   can take all of them with you to unlock the other rooms.
  *   
  *   Given an array ‘rooms’ where ‘rooms[i]’ is the set of keys that you
  *   can obtain if you visited room ‘i’ , return ‘true’ “if you can visit
  *   “all” the rooms, or” ‘false’ “otherwise”.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘n = rooms.length’
  *   • ‘2 ≤ n ≤ 1000’
  *   • ‘0 ≤ rooms[i].length ≤ 1000’
  *   • ‘1 ≤ sum(rooms[i].length) ≤ 3000’
  *   • ‘0 ≤ rooms[i][j] < n’
  *   • All the values of ‘rooms[i]’ are “unique” .
  *
*/

TEST(q841, sample_input01) {
  l841::Solution solver;
  vector<vector<int>> rooms = {{1}, {2}, {3}, {}};
  bool exp = true;
  EXPECT_EQ(solver.canVisitAllRooms(rooms), exp);
}

TEST(q841, sample_input02) {
  l841::Solution solver;
  vector<vector<int>> rooms = {{1, 3}, {3, 0, 1}, {2}, {0}};
  bool exp = false;
  EXPECT_EQ(solver.canVisitAllRooms(rooms), exp);
}

#endif