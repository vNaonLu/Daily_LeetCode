#include <gtest/gtest.h>
#include <iostream>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 838.
 *      Push Dominoes
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   There are ‘n’ dominoes in a line, and we place each domino vertically
 *   upright. In the beginning, we simultaneously push some of the dominoes
 *   either to the left or to the
 *   After each second, each domino that is falling to the left pushes the
 *   adjacent domino on the left. Similarly, the dominoes falling to the
 *   right push their adjacent dominoes standing on the
 *   When a vertical domino has dominoes falling on it from both sides, it
 *   stays still due to the balance of the
 *   For the purposes of this question, we will consider that a falling
 *   domino expends no additional force to a falling or already fallen
 *   You are given a string ‘dominoes’ representing the initial state
 *       -  ‘dominoes[i] = 'L'’ , if the ‘iᵗʰ’ domino has been pushed to
 *   the
 *       -  ‘dominoes[i] = 'R'’ , if the ‘iᵗʰ’ domino has been pushed to
 *   the right,
 *       -  ‘dominoes[i] = '.'’ , if the ‘iᵗʰ’ domino has not been
 *   Return “a string representing the final state” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘n = dominoes.length’
 *   • ‘1 ≤ n ≤ 10⁵’
 *   • ‘dominoes[i]’ is either ‘'L'’ , ‘'R'’ , or ‘'.'’ .
 *
 */

struct q838 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    string pushDominoes(string dominoes) {
      auto res = string("");
      auto f   = vector<int>(dominoes.size(), 0);
      auto fs  = (int)0;
      for (int i = 0; i < f.size(); ++i) {
        if (dominoes[i] == 'R') {
          fs = dominoes.size();
        } else if (dominoes[i] == 'L') {
          fs = 0;
        } else {
          fs = max(0, --fs);
        }
        f[i] += fs;
      }
      fs = 0;
      for (int i = f.size() - 1; i >= 0; --i) {
        if (dominoes[i] == 'L') {
          fs = dominoes.size();
        } else if (dominoes[i] == 'R') {
          fs = 0;
        } else {
          fs = max(0, --fs);
        }
        f[i] -= fs;
      }
      for (auto c : f) {
        res.push_back(c == 0 ? '.' : c > 0 ? 'R' : 'L');
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q838, sample_input01) {
  solution        = new Solution();
  string dominoes = "RR.L";
  string exp      = "RR.L";
  string act      = solution->pushDominoes(dominoes);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q838, sample_input02) {
  solution        = new Solution();
  string dominoes = ".L.R...LR..L..";
  string exp      = "LL.RR.LLRRLL..";
  string act      = solution->pushDominoes(dominoes);
  EXPECT_EQ(act, exp);
  delete solution;
}