#include <gtest/gtest.h>
#include <iostream>
#include <string>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 821.
 *      Shortest Distance to a Character
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a string ‘s’ and a character ‘c’ that occurs in ‘s’ , return “an
 *   array of integers ” ‘answer’ “ where ” ‘answer.length = s.length’ “
 *   and ” ‘answer[i]’ “ is the “distance” from index ” ‘i’ “ to the
 *   “closest” occurrence of character ” ‘c’ “ in ” ‘s’
 *   The “distance” between two indices ‘i’ and ‘j’ is ‘abs(i - j)’ , where
 *   ‘abs’ is the absolute value function.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s.length ≤ 10⁴’
 *   • ‘s[i]’ and ‘c’ are lowercase English letters.
 *   • It is guaranteed that ‘c’ occurs at least once in ‘s’ .
 *
 */

struct q821 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    vector<int> shortestToChar(string s, char c) {
      auto res  = vector<int>(s.size(), s.size());
      auto prev = (int)-s.size();
      auto lo   = (int)0;
      for (int i = 0; i < s.size(); ++i) {
        if (s[i] == c) {
          while (lo != i) {
            res[lo] = min(lo - prev, i - lo);
            ++lo;
          }
          res[i] = 0;
          prev   = i;
        }
      }
      while (lo < res.size()) {
        res[lo] = lo - prev;
        ++lo;
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q821, sample_input01) {
  solution        = new Solution();
  string      s   = "loveleetcode";
  char        c   = 'e';
  vector<int> exp = {3, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0};
  vector<int> act = solution->shortestToChar(s, c);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q821, sample_input02) {
  solution        = new Solution();
  string      s   = "aaab";
  char        c   = 'b';
  vector<int> exp = {3, 2, 1, 0};
  vector<int> act = solution->shortestToChar(s, c);
  EXPECT_EQ(act, exp);
  delete solution;
}