#include <gtest/gtest.h>
#include <iostream>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1963.
 *       Minimum Number of Swaps to Make the String Balanced
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given a “0-indexed” string ‘s’ of “even” length ‘n’ . The
 *   string consists of “exactly” ‘n / 2’ opening brackets ‘'['’ and ‘n /
 *   2’ closing brackets ‘']'’
 *   A string is called “balanced” if and only
 *       - It is the empty string,
 *       - It can be written as ‘AB’ , where both ‘A’ and ‘B’ are
 *   “balanced” strings,
 *       - It can be written as ‘[C]’ , where ‘C’ is a “balanced”
 *   You may swap the brackets at “any” two indices “any” number of
 *   Return “the “minimum” number of swaps to make ” ‘s’ “ “balanced” ” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘n = s.length’
 *   • ‘2 ≤ n ≤ 10⁶’
 *   • ‘n’ is even.
 *   • ‘s[i]’ is either ‘'[' ’ or ‘']'’ .
 *   • The number of opening brackets ‘'['’ equals ‘n / 2’ , and the number of closing brackets ‘']'’ equals ‘n / 2’ .
 *
 */

struct q1963 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int minSwaps(string s) {
      int res = 0,
          left = 0,
          right = s.size() - 1,
          cnt = 0;
      while (left < right) {
        cnt += s[left++] == '[' ? 1 : -1;
        if (cnt < 0) {
          while (s[right] == ']') {
            --right;
          }
          cnt = 1;
          ++res;
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1963, sample_input01) {
  solution = new Solution();
  string s = "][][";
  int exp = 1;
  int act = solution->minSwaps(s);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1963, sample_input02) {
  solution = new Solution();
  string s = "]]][[[";
  int exp = 2;
  int act = solution->minSwaps(s);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1963, sample_input03) {
  solution = new Solution();
  string s = "[]";
  int exp = 0;
  int act = solution->minSwaps(s);
  EXPECT_EQ(act, exp);
  delete solution;
}