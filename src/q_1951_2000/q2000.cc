#include <gtest/gtest.h>
#include <iostream>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 2000.
 *       Reverse Prefix of Word
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a “0-indexed” string ‘word’ and a character ‘ch’ , “reverse” the
 *   segment of ‘word’ that starts at index ‘0’ and ends at the index of
 *   the “first occurrence” of ‘ch’ ( “inclusive” ). If the character ‘ch’
 *   does not exist in ‘word’ , do
 *       - For example, if ‘word = 'abcdefd'’ and ‘ch = 'd'’ , then you
 *   should “reverse” the segment that starts at ‘0’ and ends at ‘3’ (
 *   “inclusive” ). The resulting string will be ‘'<u>dcba</u>efd'’
 *   Return “the resulting string” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ word.length ≤ 250’
 *   • ‘word’ consists of lowercase English letters.
 *   • ‘ch’ is a lowercase English letter.
 *
 */

struct q2000 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    string reversePrefix(string word, char ch) {
      auto beg = word.begin();
      while (beg != word.end()) {
        if (*beg == ch) {
          reverse(word.begin(), beg + 1);
          break;
        }
        ++beg;
      }
      return word;
    }
  };

  class Solution *solution;
};

TEST_F(q2000, sample_input01) {
  solution = new Solution();
  string word = "abcdefd";
  char ch = 'd';
  string exp = "dcbaefd";
  string act = solution->reversePrefix(word, ch);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2000, sample_input02) {
  solution = new Solution();
  string word = "xyxzxe";
  char ch = 'z';
  string exp = "zxyxxe";
  string act = solution->reversePrefix(word, ch);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2000, sample_input03) {
  solution = new Solution();
  string word = "abcd";
  char ch = 'z';
  string exp = "abcd";
  string act = solution->reversePrefix(word, ch);
  EXPECT_EQ(act, exp);
  delete solution;
}
