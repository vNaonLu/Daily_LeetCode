#include <gtest/gtest.h>
#include <iostream>
#include <string>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1961.
 *       Check If String Is a Prefix of Array
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a string ‘s’ and an array of strings ‘words’ , determine whether
 *   ‘s’ is a “prefix string” of ‘words’
 *   A string ‘s’ is a “prefix string” of ‘words’ if ‘s’ can be made by
 *   concatenating the first ‘k’ strings in ‘words’ for some “positive” ‘k’
 *   no larger than ‘words.length’
 *   Return ‘true’ “ if ” ‘s’ “ is a “prefix string” of ” ‘words’ “, or ”
 *   ‘false’ “ otherwise” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ words.length ≤ 100’
 *   • ‘1 ≤ words[i].length ≤ 20’
 *   • ‘1 ≤ s.length ≤ 1000’
 *   • ‘words[i]’ and ‘s’ consist of only lowercase English letters.
 *
 */

struct q1961 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    bool isPrefixString(string s, vector<string> &words) {
      string tmp = "";
      for (auto &w : words) {
        tmp += w;
        if (tmp.size() >= s.size()) {
          break;
        }
      }
      return tmp == s;
    }
  };

  class Solution *solution;
};

TEST_F(q1961, sample_input01) {
  solution             = new Solution();
  string         s     = "iloveleetcode";
  vector<string> words = {"i", "love", "leetcode", "apples"};
  bool           exp   = true;
  bool           act   = solution->isPrefixString(s, words);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1961, sample_input02) {
  solution             = new Solution();
  string         s     = "iloveleetcode";
  vector<string> words = {"apples", "i", "love", "leetcode"};
  bool           exp   = false;
  bool           act   = solution->isPrefixString(s, words);
  EXPECT_EQ(act, exp);
  delete solution;
}
