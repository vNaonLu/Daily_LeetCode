#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1968.
 *       Array With Elements Not Equal to Average of Neighbors
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given a “0-indexed” array ‘nums’ of “distinct” integers. You
 *   want to rearrange the elements in the array such that every element in
 *   the rearranged array is “not” equal to the “average” of its
 *   More formally, the rearranged array should have the property such that
 *   for every ‘i’ in the range ‘1 ≤ i < nums.length - 1’ , ‘(nums[i-1] +
 *   nums[i+1]) / 2’ is “not” equal to ‘nums[i]’
 *   Return “ “any” rearrangement of ” ‘nums’ “ that meets the
 *   requirements” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘3 ≤ nums.length ≤ 10⁵’
 *   • ‘0 ≤ nums[i] ≤ 10⁵’
 *
 */

struct q1968 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    vector<int> rearrangeArray(vector<int>& nums) {
      vector<int> res = nums;
      for (int i = 1; i < res.size() - 1; ++i) {
        int x = res[i - 1],
            y = res[i],
            z = res[i + 1];
        if (x < y && y < z || x > y && y > z) {
          swap(res[i], res[i + 1]);
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1968, sample_input01) {
  solution = new Solution();
  vector<int> nums = {1, 2, 3, 4, 5};
  vector<int> exp = {1, 2, 4, 5, 3};
  vector<int> act = solution->rearrangeArray(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1968, sample_input02) {
  solution = new Solution();
  vector<int> nums = {6, 2, 0, 9, 7};
  vector<int> exp = {9, 7, 6, 2, 0};
  vector<int> act = solution->rearrangeArray(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}