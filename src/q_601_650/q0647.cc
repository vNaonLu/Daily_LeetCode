#include <gtest/gtest.h>
#include <iostream>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 647.
 *      Palindromic Substrings
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a string ‘s’ , return “the number of “palindromic substrings” in
 *   it”
 *   A string is a “palindrome” when it reads the same backward as
 *   A “substring” is a contiguous sequence of characters within the string
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s.length ≤ 1000’
 *   • ‘s’ consists of lowercase English letters.
 *
 */

struct q647 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int countSubstrings(string s) {
      int n = s.size(), res = 0;
      vector<vector<int>> dp(n, vector<int>(n, 0));
      for (int i = 0; i < n; ++i) {
        dp[i][i] = 1;
        ++res;
      }

      for (int i = 1; i < n; ++i) {
        for (int j = 0; j < i; ++j) {
          if ((j + 1 == i && s[i] == s[j]) ||
              (dp[j + 1][i - 1] == 1 && s[i] == s[j])) {
            dp[j][i] = 1;
            ++res;
          }
        }
      }

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q647, sample_input01) {
  solution = new Solution();
  string s = "abc";
  int exp = 3;
  int act = solution->countSubstrings(s);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q647, sample_input02) {
  solution = new Solution();
  string s = "aaa";
  int exp = 6;
  int act = solution->countSubstrings(s);
  EXPECT_EQ(act, exp);
  delete solution;
}