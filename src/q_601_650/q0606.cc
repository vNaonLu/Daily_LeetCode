#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/treenode.hpp>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 606.
 *      Construct String from Binary Tree
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given the ‘root’ of a binary tree, construct a string consisting of
 *   parenthesis and integers from a binary tree with the preorder
 *   traversal way, and return
 *   Omit all the empty parenthesis pairs that do not affect the one-to-one
 *   mapping relationship between the string and the original binary tree.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The number of nodes in the tree is in the range ‘[1, 10⁴]’ .
 *   • ‘-1000 ≤ Node.val ≤ 1000’
 *
 */

struct q606 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    string tree2str(TreeNode *root) {
      if (nullptr == root) {
        return "";
      }
      auto res   = to_string(root->val);
      auto left  = tree2str(root->left);
      auto right = tree2str(root->right);
      if (!right.empty()) {
        res += string("(") + left + string(")");
        res += string("(") + right + string(")");
      } else if (!left.empty()) {
        res += string("(") + left + string(")");
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q606, sample_input01) {
  solution       = new Solution();
  TreeNode *root = TreeNode::generate({1, 2, 3, 4});
  string    exp  = "1(2(4))(3)";
  string    act  = solution->tree2str(root);
  EXPECT_EQ(act, exp);
  TreeNode::release(root);
  delete solution;
}

TEST_F(q606, sample_input02) {
  solution       = new Solution();
  TreeNode *root = TreeNode::generate({1, 2, 3, NULL_TREENODE, 4});
  string    exp  = "1(2()(4))(3)";
  string    act  = solution->tree2str(root);
  EXPECT_EQ(act, exp);
  TreeNode::release(root);
  delete solution;
}