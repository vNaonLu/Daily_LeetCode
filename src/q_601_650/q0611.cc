#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 611.
 *      Valid Triangle Number
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an integer array ‘nums’ , return “the number of triplets chosen
 *   from the array that can make triangles if we take them as side lengths
 *   of a triangle” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 1000’
 *   • ‘0 ≤ nums[i] ≤ 1000’
 *
 */

struct q611 : public ::testing::Test {
  // Leetcode answer here
class Solution {
public:
    int triangleNumber(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        int res = 0;

        for (int i=0; i<(int)nums.size() - 2; ++i) {
            int k = i + 2;
            for (int j=i+1; j<nums.size() - 1 && nums[i] != 0; ++j) {
                while (k < nums.size() && nums[i] + nums[j] > nums[k]) {
                    ++k;
                }
                res += k-j-1;
            }
        }
        
        return res;
    }
};

  class Solution *solution;
};

TEST_F(q611, sample_input01) {
  solution = new Solution();
  vector<int> nums = {2, 2, 3, 4};
  int exp = 3;
  int act = solution->triangleNumber(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q611, sample_input02) {
  solution = new Solution();
  vector<int> nums = {4, 2, 3, 4};
  int exp = 4;
  int act = solution->triangleNumber(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}