
#ifndef Q1413_UNITTEST_H__
#define Q1413_UNITTEST_H__
#include <gtest/gtest.h>

#include "q1413.hpp"
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1413.
 *       Minimum Value to Get Positive Step by Step Sum
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an array of integers ‘nums’ , you start with an initial
 *   “positive” value “startValue”  “.”
 *   In each iteration, you calculate the step by step sum of “startValue”
 *   pluselements in ‘nums’ (from left to
 *   Return the minimum “positive” value of “startValue” such that the step
 *   by step sum is never less than
 *   
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 100’
 *   • ‘-100 ≤ nums[i] ≤ 100’
 *
 */

TEST(q1413, sample_input01) {
  l1413::Solution solver;
  vector<int> nums = {-3, 2, -3, 4, 2};
  int exp = 5;
  EXPECT_EQ(solver.minStartValue(nums), exp);
}

TEST(q1413, sample_input02) {
  l1413::Solution solver;
  vector<int> nums = {1, 2};
  int exp = 1;
  EXPECT_EQ(solver.minStartValue(nums), exp);
}

TEST(q1413, sample_input03) {
  l1413::Solution solver;
  vector<int> nums = {1, -2, -3};
  int exp = 5;
  EXPECT_EQ(solver.minStartValue(nums), exp);
}

#endif