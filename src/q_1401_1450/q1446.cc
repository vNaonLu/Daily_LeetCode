#include <gtest/gtest.h>
#include <iostream>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1446.
 *       Consecutive Characters
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   The “power” of the string is the maximum length of a non-empty
 *   substring that contains only one unique
 *   Given a string ‘s’ , return “the “power” of” ‘s’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s.length ≤ 500’
 *   • ‘s’ consists of only lowercase English letters.
 *
 */

struct q1446 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int maxPower(string s) {
      if (s.empty()) return 0;
      int res = 1, local = 1;
      for (int i = 1; i < s.size(); ++i) {
        if (s[i] == s[i - 1]) ++local;
        else local = 1;
        res = max(res, local);
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1446, sample_input01) {
  solution = new Solution();
  string s = "leetcode";
  int exp = 2;
  EXPECT_EQ(solution->maxPower(s), exp);
  delete solution;
}

TEST_F(q1446, sample_input02) {
  solution = new Solution();
  string s = "abbcccddddeeeeedcba";
  int exp = 5;
  EXPECT_EQ(solution->maxPower(s), exp);
  delete solution;
}

TEST_F(q1446, sample_input03) {
  solution = new Solution();
  string s = "triplepillooooow";
  int exp = 5;
  EXPECT_EQ(solution->maxPower(s), exp);
  delete solution;
}

TEST_F(q1446, sample_input04) {
  solution = new Solution();
  string s = "hooraaaaaaaaaaay";
  int exp = 11;
  EXPECT_EQ(solution->maxPower(s), exp);
  delete solution;
}

TEST_F(q1446, sample_input05) {
  solution = new Solution();
  string s = "tourist";
  int exp = 1;
  EXPECT_EQ(solution->maxPower(s), exp);
  delete solution;
}