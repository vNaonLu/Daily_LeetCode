#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 1413.
 *       Minimum Value to Get Positive Step by Step Sum
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an array of integers ‘nums’ , you start with an initial
 *   “positive” value “startValue”  “.”
 *   In each iteration, you calculate the step by step sum of “startValue”
 *   pluselements in ‘nums’ (from left to
 *   Return the minimum “positive” value of “startValue” such that the step
 *   by step sum is never less than 1.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 100’
 *   • ‘-100 ≤ nums[i] ≤ 100’
 *
 */

struct q1413 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int minStartValue(vector<int>& nums) {
      int res = 1;
      int current = res;
      for (const auto& x : nums) {
        int next = current + x;
        if (next < 1) {
          res += 1 - next;
          current = 1;
        } else {
          current = next;
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1413, sample_input01) {
  solution = new Solution();
  vector<int> nums = {-3, 2, -3, 4, 2};
  int exp = 5;
  EXPECT_EQ(solution->minStartValue(nums), exp);
  delete solution;
}

TEST_F(q1413, sample_input02) {
  solution = new Solution();
  vector<int> nums = {1, 2};
  int exp = 1;
  EXPECT_EQ(solution->minStartValue(nums), exp);
  delete solution;
}

TEST_F(q1413, sample_input03) {
  solution = new Solution();
  vector<int> nums = {1, -2, -3};
  int exp = 5;
  EXPECT_EQ(solution->minStartValue(nums), exp);
  delete solution;
}