#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/treenode.hpp>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1448.
 *       Count Good Nodes in Binary Tree
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a binary tree ‘root’ , a node “X” in the tree is named “good” if
 *   in the path from root to “X” there are no nodes with a value “greater
 *   than”
 *   Return the number of “good” nodes in the binary
 *
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The number of nodes in the binary tree is in the range ‘[1, 10^5]’ .
 *   • Each node's value is between ‘[-10^4, 10^4]’ .
 *
 */

struct q1448 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  private:
    void helper(TreeNode *p, int &r, int m = numeric_limits<int>::min()) {
      if (!p)
        return;
      if (p->val >= m)
        r++;
      helper(p->left, r, max(m, p->val));
      helper(p->right, r, max(m, p->val));
    }

  public:
    int goodNodes(TreeNode *root) {
      int res = 0;
      helper(root, res);
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1448, sample_input01) {
  solution       = new Solution();
  TreeNode *root = TreeNode::generate({3, 1, 4, 3, NULL_TREENODE, 1, 5});
  int       exp  = 4;
  int       act  = solution->goodNodes(root);
  EXPECT_EQ(act, exp);
  TreeNode::release(root);
  delete solution;
}

TEST_F(q1448, sample_input02) {
  solution       = new Solution();
  TreeNode *root = TreeNode::generate({3, 3, NULL_TREENODE, 4, 2});
  int       exp  = 3;
  int       act  = solution->goodNodes(root);
  EXPECT_EQ(act, exp);
  TreeNode::release(root);
  delete solution;
}

TEST_F(q1448, sample_input03) {
  solution       = new Solution();
  TreeNode *root = TreeNode::generate({1});
  int       exp  = 1;
  int       act  = solution->goodNodes(root);
  EXPECT_EQ(act, exp);
  TreeNode::release(root);
  delete solution;
}