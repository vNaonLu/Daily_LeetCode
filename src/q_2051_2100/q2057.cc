#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 2057.
 *       Smallest Index With Equal Value
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a “0-indexed” integer array ‘nums’ , return “the “smallest”
 *   index ” ‘i’ “ of ” ‘nums’ “ such that ” ‘i mod 10 = nums[i]’ “, or ”
 *   ‘-1’ “ if such index does not exist”
 *    ‘x mod y’ denotes the “remainder” when ‘x’ is divided by ‘y’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 100’
 *   • ‘0 ≤ nums[i] ≤ 9’
 *
 */

struct q2057 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int smallestEqual(vector<int> &nums) {
      for (int i = 0; i < nums.size(); ++i) {
        if (i % 10 == nums[i]) {
          return i;
        }
      }
      return -1;
    }
  };

  class Solution *solution;
};

TEST_F(q2057, sample_input01) {
  solution         = new Solution();
  vector<int> nums = {0, 1, 2};
  int         exp  = 0;
  int         act  = solution->smallestEqual(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2057, sample_input02) {
  solution         = new Solution();
  vector<int> nums = {4, 3, 2, 1};
  int         exp  = 2;
  int         act  = solution->smallestEqual(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2057, sample_input03) {
  solution         = new Solution();
  vector<int> nums = {1, 2, 3, 4, 5, 6, 7, 8, 9, 0};
  int         exp  = -1;
  int         act  = solution->smallestEqual(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}
