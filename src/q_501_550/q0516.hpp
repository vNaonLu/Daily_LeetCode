
#ifndef LEETCODE_Q516_H__
#define LEETCODE_Q516_H__
#include <iostream>
#include <string>

namespace l516 {
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 516.
 *      Longest Palindromic Subsequence
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a string ‘s’ , find “the longest palindromic “subsequence” 's
 *   length in” ‘s’
 *   A “subsequence” is a sequence that can be derived from another
 *   sequence by deleting some or no elements without changing the order of
 *   the remaining elements.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s.length ≤ 1000’
 *   • ‘s’ consists only of lowercase English letters.
 *
 */

class Solution {
 public:
  int longestPalindromeSubseq(string s) {
    int n = s.size();
    string rvs(s.rbegin(), s.rend());
    vector<vector<int>> dp(n + 1, vector<int>(n + 1, 0));
    for (int i = 1; i <= n; ++i) {
      for (int j = 1; j <= n; ++j) {
        if (rvs[i - 1] == s[j - 1]) {
          dp[i][j] = 1 + dp[i - 1][j - 1];
        } else {
          dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
        }
      }
    }
    return dp.back().back();
  }
};
}  // namespace l516

#endif