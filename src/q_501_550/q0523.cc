#include <gtest/gtest.h>
#include <iostream>
#include <unordered_map>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 523.
 *      Continuous Subarray Sum
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an integer array ‘nums’ and an integer ‘k’ , return ‘true’ “if ”
 *   ‘nums’ “ has a continuous subarray of size “at least two” whose
 *   elements sum up to a multiple of” ‘k’ “, or ” ‘false’ “ otherwise”
 *   An integer ‘x’ is a multiple of ‘k’ if there exists an integer ‘n’
 *   such that ‘x = n × k’ . ‘0’ is “always” a multiple of ‘k’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 10⁵’
 *   • ‘0 ≤ nums[i] ≤ 10⁹’
 *   • ‘0 ≤ sum(nums[i]) ≤ 2³¹ - 1’
 *   • ‘1 ≤ k ≤ 2³¹ - 1’
 *
 */

struct q523 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    bool checkSubarraySum(vector<int> &nums, int k) {
      auto mp = unordered_map<int, int>{
          {0, 0}
      };
      auto sum = (int)0;
      for (int i = 0; i < nums.size(); ++i) {
        sum += nums[i];
        auto it = mp.find(sum % k);
        if (it == mp.end()) {
          mp[sum % k] = i + 1;
        } else if (it->second < i) {
          return true;
        }
      }
      return false;
    }
  };

  class Solution *solution;
};

TEST_F(q523, sample_input01) {
  solution         = new Solution();
  vector<int> nums = {23, 2, 4, 6, 7};
  int         k    = 6;
  bool        exp  = true;
  bool        act  = solution->checkSubarraySum(nums, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q523, sample_input02) {
  solution         = new Solution();
  vector<int> nums = {23, 2, 6, 4, 7};
  int         k    = 6;
  bool        exp  = true;
  bool        act  = solution->checkSubarraySum(nums, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q523, sample_input03) {
  solution         = new Solution();
  vector<int> nums = {23, 2, 6, 4, 7};
  int         k    = 13;
  bool        exp  = false;
  bool        act  = solution->checkSubarraySum(nums, k);
  EXPECT_EQ(act, exp);
  delete solution;
}