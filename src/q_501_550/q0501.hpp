
#ifndef LEETCODE_Q501_H__
#define LEETCODE_Q501_H__
#include <iostream>
#include <leetcode/treenode.hpp>
#include <unordered_map>
#include <vector>

namespace l501 {
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 501.
  *      Find Mode in Binary Search Tree
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given the ‘root’ of a binary search tree (BST) with duplicates, return
  *   “all the <a href="https://en.wikipedia.org/wiki/Mode_(statistics)"
  *   target="_blank">mode(s)</a> (i.e., the most frequently occurred
  *   element) in it”.
  *   
  *   If the tree has more than one mode, return them in “any order”.
  *   
  *   Assume a BST is defined as.
  *   
  *   - The left subtree of a node contains only nodes with keys “less than
  *   or equal to” the node's key.
  *   
  *   - The right subtree of a node contains only nodes with keys “greater
  *   than or equal to” the node's key.
  *   
  *   - Both the left and right subtrees must also be binary search trees.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • The number of nodes in the tree is in the range ‘[1, 10⁴]’ .
  *   • ‘-10⁵ ≤ Node.val ≤ 10⁵’
  *
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
 private:
  unordered_map<int, int> mapping;
  int helper(TreeNode* p) {
    if (p == nullptr) return 0;
    int res = helper(p->left);
    res = max(res, ++mapping[p->val]);
    res = max(res, helper(p->right));
    return res;
  }

 public:
  vector<int> findMode(TreeNode* root) {
    vector<int> res;
    int maxmod = helper(root);
    for (auto it = mapping.begin(); it != mapping.end(); ++it) {
      if (it->second == maxmod) {
        res.push_back(it->first);
      }
    }
    return res;
  }
};
}  // namespace l501

#endif