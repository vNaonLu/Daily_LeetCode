
#ifndef Q518_UNITTEST_H__
#define Q518_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0518.hpp"
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 518.
 *      Coin Change 2
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an integer array ‘coins’ representing coins of different
 *   denominations and an integer ‘amount’ representing a total amount of
 *   Return “the number of combinations that make up that amount” . If that
 *   amount of money cannot be made up by any combination of the coins,
 *   return ‘0’
 *   You may assume that you have an infinite number of each kind of
 *   The answer is “guaranteed” to fit into a signed “32-bit” integer.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ coins.length ≤ 300’
 *   • ‘1 ≤ coins[i] ≤ 5000’
 *   • All the values of ‘coins’ are “unique” .
 *   • ‘0 ≤ amount ≤ 5000’
 *
 */

TEST(q518, sample_input01) {
  l518::Solution solver;
  int amount = 5;
  vector<int> coins = {1, 2, 5};
  int exp = 4;
  EXPECT_EQ(solver.change(amount, coins), exp);
}

TEST(q518, sample_input02) {
  l518::Solution solver;
  int amount = 3;
  vector<int> coins = {2};
  int exp = 0;
  EXPECT_EQ(solver.change(amount, coins), exp);
}

TEST(q518, sample_input03) {
  l518::Solution solver;
  int amount = 10;
  vector<int> coins = {10};
  int exp = 1;
  EXPECT_EQ(solver.change(amount, coins), exp);
}

#endif