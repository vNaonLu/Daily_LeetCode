#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/treenode.hpp>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 543.
 *      Diameter of Binary Tree
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given the ‘root’ of a binary tree, return “the length of the
 *   “diameter” of the tree”
 *   The “diameter” of a binary tree is the “length” of the longest path
 *   between any two nodes in a tree. This path may or may not pass through
 *   the ‘root’
 *   The “length” of a path between two nodes is represented by the number
 *   of edges between them.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The number of nodes in the tree is in the range ‘[1, 10⁴]’ .
 *   • ‘-100 ≤ Node.val ≤ 100’
 *
 */

struct q543 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    int helper(TreeNode *p, int &r) {
      if (p == nullptr) return -1;
      int left = helper(p->left, r);
      int right = helper(p->right, r);
      r = max(r, left + right + 2);
      return max(left, right) + 1;
    }
   public:
    int diameterOfBinaryTree(TreeNode *root) {
      int res = 0;
      helper(root, res);
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q543, sample_input01) {
  solution = new Solution();
  TreeNode* root = TreeNode::generate({1, 2, 3, 4, 5});
  int exp = 3;
  EXPECT_EQ(solution->diameterOfBinaryTree(root), exp);
  delete solution;
}

TEST_F(q543, sample_input02) {
  solution = new Solution();
  TreeNode* root = TreeNode::generate({1, 2});
  int exp = 1;
  EXPECT_EQ(solution->diameterOfBinaryTree(root), exp);
  delete solution;
}