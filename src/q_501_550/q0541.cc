#include <algorithm>
#include <gtest/gtest.h>
#include <iostream>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 541.
 *      Reverse String II
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a string ‘s’ and an integer ‘k’ , reverse the first ‘k’
 *   characters for every ‘2k’ characters counting from the start of the
 *   If there are fewer than ‘k’ characters left, reverse all of them. If
 *   there are less than ‘2k’ but greater than or equal to ‘k’ characters,
 *   then reverse the first ‘k’ characters and leave the other as original.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s.length ≤ 10⁴’
 *   • ‘s’ consists of only lowercase English letters.
 *   • ‘1 ≤ k ≤ 10⁴’
 *
 */

struct q541 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    string reverseStr(string s, int k) {
      auto beg = s.begin();
      while (distance(beg, s.end()) > k) {
        reverse(beg, beg + k);
        beg += min<int>(2 * k, distance(beg, s.end()));
      }
      reverse(beg, s.end());
      return s;
    }
  };

  class Solution *solution;
};

TEST_F(q541, sample_input01) {
  solution   = new Solution();
  string s   = "abcdefg";
  int    k   = 2;
  string exp = "bacdfeg";
  string act = solution->reverseStr(s, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q541, sample_input02) {
  solution   = new Solution();
  string s   = "abcd";
  int    k   = 2;
  string exp = "bacd";
  string act = solution->reverseStr(s, k);
  EXPECT_EQ(act, exp);
  delete solution;
}