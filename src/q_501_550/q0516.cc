#include <gtest/gtest.h>
#include <iostream>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 516.
 *      Longest Palindromic Subsequence
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a string ‘s’ , find “the longest palindromic “subsequence” 's
 *   length in” ‘s’
 *   A “subsequence” is a sequence that can be derived from another
 *   sequence by deleting some or no elements without changing the order of
 *   the remaining elements.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s.length ≤ 1000’
 *   • ‘s’ consists only of lowercase English letters.
 *
 */

struct q516 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int longestPalindromeSubseq(string s) {
      int n = s.size();
      string rvs(s.rbegin(), s.rend());
      vector<vector<int>> dp(n + 1, vector<int>(n + 1, 0));
      for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= n; ++j) {
          if (rvs[i - 1] == s[j - 1]) {
            dp[i][j] = 1 + dp[i - 1][j - 1];
          } else {
            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
          }
        }
      }
      return dp.back().back();
    }
  };

  class Solution *solution;
};

TEST_F(q516, sample_input01) {
  solution = new Solution();
  string s = "bbbab";
  int exp = 4;
  EXPECT_EQ(solution->longestPalindromeSubseq(s), exp);
  delete solution;
}

TEST_F(q516, sample_input02) {
  solution = new Solution();
  string s = "cbbd";
  int exp = 2;
  EXPECT_EQ(solution->longestPalindromeSubseq(s), exp);
  delete solution;
}