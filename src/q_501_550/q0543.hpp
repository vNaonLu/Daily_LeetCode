
#ifndef LEETCODE_Q543_H__
#define LEETCODE_Q543_H__
#include <iostream>
#include <leetcode/treenode.hpp>

namespace l543 {
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 543.
  *      Diameter of Binary Tree
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given the ‘root’ of a binary tree, return “the length of the
  *   “diameter” of the tree”.
  *   
  *   The “diameter” of a binary tree is the “length” of the longest path
  *   between any two nodes in a tree. This path may or may not pass through
  *   the ‘root’.
  *   
  *   The “length” of a path between two nodes is represented by the number
  *   of edges between them.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • The number of nodes in the tree is in the range ‘[1, 10⁴]’ .
  *   • ‘-100 ≤ Node.val ≤ 100’
  *
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *   int val;
 *   TreeNode *left;
 *   TreeNode *right;
 *   TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *   TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *   TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
 private:
  int helper(TreeNode *p, int &r) {
    if (p == nullptr) return -1;
    int left = helper(p->left, r);
    int right = helper(p->right, r);
    r = max(r, left + right + 2);
    return max(left, right) + 1;
  }

 public:
  int diameterOfBinaryTree(TreeNode *root) {
    int res = 0;
    helper(root, res);
    return res;
  }
};
}  // namespace l543

#endif