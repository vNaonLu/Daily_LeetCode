
#ifndef LEETCODE_Q542_H__
#define LEETCODE_Q542_H__
#include <iostream>
#include <vector>

namespace l542 {
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 542. 01 Matrix
  *
  * Given an m x n binary matrix mat , return the
  * distance of the nearest 0 for each cell .
  * The distance between two adjacent cells is 1 .
  *
  * Constraints:
  * -  m == mat.length 
  * -  n == mat[i].length 
  * -  1 <= m, n <= 10^(4) 
  * -  1 <= m * n <= 10^(4) 
  * -  mat[i][j] is either 0 or 1 .
  * - There is at least one 0 in mat .
  *
*/
class Solution {
 public:
  vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {
    int m = mat.size(), n = mat[0].size();
    vector<vector<int>> res(m, vector<int>(n, n * m));
    for (int i = 0; i < m; ++i) {
      for (int j = -0; j < n; ++j) {
        if (mat[i][j] == 0) {
          res[i][j] = 0;
        } else {
          if (i - 1 >= 0) res[i][j] = min(res[i][j], res[i - 1][j] + 1);
          if (j - 1 >= 0) res[i][j] = min(res[i][j], res[i][j - 1] + 1);
        }
      }
    }

    for (int i = m - 1; i > -1; --i) {
      for (int j = n - 1; j > -1; --j) {
        if (mat[i][j] == 0) {
          res[i][j] = 0;
        } else {
          if (i + 1 < m) res[i][j] = min(res[i][j], res[i + 1][j] + 1);
          if (j + 1 < n) res[i][j] = min(res[i][j], res[i][j + 1] + 1);
        }
      }
    }

    return res;
  }
};
}  // namespace l542
#endif