
#ifndef Q547_UNITTEST_H__
#define Q547_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0547.hpp"
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 547. Number of Provinces
  * There are n cities. Some of them are connected,
  * while some are not. If city a is connected directly
  * with city b , and city b is connected directly
  * with city c , then city a is connected indirectly
  * with city c .
  * A “province“ is a group of directly or indirectly
  * connected cities and no other cities outside of
  * the group.
  * You are given an n x n matrix isConnected where
  * isConnected[i][j] = 1 if the i^(th) city and the
  * j^(th) city are directly connected, and
  * isConnected[i][j] = 0 otherwise.
  * Return the total number of “provinces“ .
  *
  * Constraints:
  * -  1 <= n <= 200 
  * -  n == isConnected.length 
  * -  n == isConnected[i].length 
  * -  isConnected[i][j] is 1 or 0 .
  * -  isConnected[i][i] == 1 
  * -  isConnected[i][j] == isConnected[j][i] 
  *
*/

TEST(q547, sample_input01) {
  vector<vector<int>> isConnected = {{1, 1, 0},
                                     {1, 1, 0},
                                     {0, 0, 1}};
  int exp = 2;
  l547::Solution solver;
  EXPECT_EQ(solver.findCircleNum(isConnected), exp);
}

TEST(q547, sample_input02) {
  vector<vector<int>> isConnected = {{1, 0, 0},
                                     {0, 1, 0},
                                     {0, 0, 1}};
  int exp = 3;
  l547::Solution solver;
  EXPECT_EQ(solver.findCircleNum(isConnected), exp);
}

TEST(q547, input01) {
  vector<vector<int>> isConnected = {{1, 0, 0, 1},
                                     {0, 1, 1, 0},
                                     {0, 1, 1, 1},
                                     {1, 0, 1, 1}};
  int exp = 1;
  l547::Solution solver;
  EXPECT_EQ(solver.findCircleNum(isConnected), exp);
}

#endif