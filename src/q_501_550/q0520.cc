#include <gtest/gtest.h>
#include <iostream>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 520.
 *      Detect Capital
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   We define the usage of capitals in a word to be right when one of the
 *   following cases
 *       - All letters in this word are capitals, like ‘'USA'’
 *       - All letters in this word are not capitals, like ‘'leetcode'’
 *       - Only the first letter in this word is capital, like ‘'Google'’
 *   Given a string ‘word’ , return ‘true’ if the usage of capitals in it
 *   is right.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ word.length ≤ 100’
 *   • ‘word’ consists of lowercase and uppercase English letters.
 *
 */

struct q520 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    template <typename T>
    bool uppercase(T&& c) noexcept {
      return c >= 'A' && c <= 'Z';
    }
   public:
    bool detectCapitalUse(string word) {
      if (word.size() == 1) return true;
      if (uppercase(word.front()) && uppercase(word[1])) {
        for (int i = 2; i < word.size(); ++i)
          if (!uppercase(word[i])) return false;
      } else {
        for (int i = 1; i < word.size(); ++i)
          if (uppercase(word[i])) return false;
      }
      return true;
    }
  };

  class Solution *solution;
};

TEST_F(q520, sample_input01) {
  solution = new Solution();
  string word = "USA";
  bool exp = true;
  EXPECT_EQ(solution->detectCapitalUse(word), exp);
  delete solution;
}

TEST_F(q520, sample_input02) {
  solution = new Solution();
  string word = "FlaG";
  bool exp = false;
  EXPECT_EQ(solution->detectCapitalUse(word), exp);
  delete solution;
}