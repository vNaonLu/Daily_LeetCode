
#ifndef Q501_UNITTEST_H__
#define Q501_UNITTEST_H__
#include <gtest/gtest.h>

#include <leetcode/anyorder.hpp>

#include "q0501.hpp"
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 501.
  *      Find Mode in Binary Search Tree
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given the ‘root’ of a binary search tree (BST) with duplicates, return
  *   “all the <a href="https://en.wikipedia.org/wiki/Mode_(statistics)"
  *   target="_blank">mode(s)</a> (i.e., the most frequently occurred
  *   element) in it”.
  *   
  *   If the tree has more than one mode, return them in “any order”.
  *   
  *   Assume a BST is defined as.
  *   
  *   - The left subtree of a node contains only nodes with keys “less than
  *   or equal to” the node's key.
  *   
  *   - The right subtree of a node contains only nodes with keys “greater
  *   than or equal to” the node's key.
  *   
  *   - Both the left and right subtrees must also be binary search trees.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • The number of nodes in the tree is in the range ‘[1, 10⁴]’ .
  *   • ‘-10⁵ ≤ Node.val ≤ 10⁵’
  *
*/

TEST(q501, sample_input01) {
  l501::Solution solver;
  TreeNode* root = TreeNode::generate({1, NULL_TREENODE, 2, 2});
  vector<int> exp = {2};
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solver.findMode(root), exp);
}

TEST(q501, sample_input02) {
  l501::Solution solver;
  TreeNode* root = TreeNode::generate({0});
  vector<int> exp = {0};
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solver.findMode(root), exp);
}

#endif