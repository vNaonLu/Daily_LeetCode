#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 540.
 *      Single Element in a Sorted Array
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given a sorted array consisting of only integers where every
 *   element appears exactly twice, except for one element which appears
 *   exactly
 *   Return “the single element that appears only once”
 *   Your solution must run in ‘O(log n)’ time and ‘O(1)’ space.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 10⁵’
 *   • ‘0 ≤ nums[i] ≤ 10⁵’
 *
 */

struct q540 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int singleNonDuplicate(vector<int>& nums) {
      if (nums.size() == 1) return nums[0];
      int l = 0, r = nums.size() - 1;
      while (l <= r) {
        int mid = l + (r - l) / 2;
        if ((mid % 2 == 0 && nums[mid] != nums[mid + 1]) ||
            (mid % 2 == 1 && nums[mid] != nums[mid - 1])) {
          r = mid - 1;
        } else {
          l = mid + 1;
        }
      }
      return nums[l];
    }
  };

  class Solution *solution;
};

TEST_F(q540, sample_input01) {
  solution = new Solution();
  vector<int> nums = {1, 1, 2, 3, 3, 4, 4, 8, 8};
  int exp = 2;
  EXPECT_EQ(solution->singleNonDuplicate(nums), exp);
  delete solution;
}

TEST_F(q540, sample_input02) {
  solution = new Solution();
  vector<int> nums = {3, 3, 7, 7, 10, 11, 11};
  int exp = 10;
  EXPECT_EQ(solution->singleNonDuplicate(nums), exp);
  delete solution;
}