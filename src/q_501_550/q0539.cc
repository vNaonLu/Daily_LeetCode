#include <gtest/gtest.h>
#include <iostream>
#include <string>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 539.
 *      Minimum Time Difference
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a list of 24-hour clock time points in “'HH:MM'” format, return
 *   “the minimum “minutes” difference between any two time-points in the
 *   list” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘2 ≤ timePoints.length ≤ 2 × 10⁴’
 *   • ‘timePoints[i]’ is in the format “'HH:MM'” .
 *
 */

struct q539 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int findMinDifference(vector<string> &timePoints) {
      vector<int> minutes;
      for (const auto &s : timePoints) {
        int h, m;
        sscanf(s.c_str(), "%d:%d", &h, &m);
        minutes.emplace_back(h * 60 + m);
        minutes.emplace_back((h + 24) * 60 + m);  // adds next day
      }
      sort(minutes.begin(), minutes.end());
      int res = numeric_limits<int>::max();
      for (int i = 1; i < minutes.size(); ++i) {
        res = min(res, minutes[i] - minutes[i - 1]);
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q539, sample_input01) {
  solution = new Solution();
  vector<string> timePoints = {"23:59", "00:00"};
  int exp = 1;
  int act = solution->findMinDifference(timePoints);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q539, sample_input02) {
  solution = new Solution();
  vector<string> timePoints = {"00:00", "23:59", "00:00"};
  int exp = 0;
  int act = solution->findMinDifference(timePoints);
  EXPECT_EQ(act, exp);
  delete solution;
}