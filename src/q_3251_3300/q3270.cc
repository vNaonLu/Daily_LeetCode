// Copyright 2024 Naon Lu
//
// This file describes the solution of
// Find the Key of the Numbers
//
// https://leetcode.com/problems/find-the-key-of-the-numbers/
//
// Question ID: 3270
// Difficult  : Easy
// Solve Date : 2024/09/11 21:08

#include <iosfwd>

// -- This header must be included after others --
#include "leetcode/testing/solution_test_helper.h"

using namespace std;
using namespace lcd;

// Description of |3270. Find the Key of the Numbers|:
//
// You are given three positive integers |num1|, |num2|, and |num3|.
// The |key| of |num1|, |num2|, and |num3| is defined as a four-digit number
// such that:
//
//  • Initially, if any number has less than four digits, it is padded with
//  leading zeros.
//
//  • The |iᵗʰ| digit ( |1 <= i <= 4|) of the |key| is generated by taking the
//  smallest digit among the |iᵗʰ| digits of |num1|, |num2|, and |num3|.
// Return the |key| of the three numbers without leading zeros (if any).
//
//

LEETCODE_BEGIN_RESOLVING(3270, FindTheKeyOfTheNumbers, Solution);

class Solution {
public:
  int generateKey(int num1, int num2, int num3) {
    int x0 = findKey<10>(num1, num2, num3);
    int x1 = findKey<100>(num1, num2, num3);
    int x2 = findKey<1000>(num1, num2, num3);
    int x3 = findKey<10000>(num1, num2, num3);
    return x0 + 10 * x1 + 100 * x2 + 1000 * x3;
  }

private:
  template <int k>
  int findKey(int x, int y, int z) {
    return min({x % k, y % k, z % k}) / (k / 10);
  }
};

LEETCODE_END_RESOLVING(Solution);

///////////////////////////////////////////////////////////////////////////////
// The following is test data for unit test.
// Note that inputs should obey the constraints mentioned in LeetCode:
// * |1 <= num1, num2, num3 <= 9999|
///////////////////////////////////////////////////////////////////////////////

// [Example #1]
//  Input: num1 = 1, num2 = 10, num3 = 1000
// Output: 0
//

LEETCODE_SOLUTION_UNITTEST(3270, FindTheKeyOfTheNumbers, example_1) {
  auto solution = MakeSolution();
  int  num1     = 1;
  int  num2     = 10;
  int  num3     = 1000;
  int  expect   = 0;
  int  actual   = solution->generateKey(num1, num2, num3);
  LCD_EXPECT_EQ(expect, actual);
}

// [Example #2]
//  Input: num1 = 987, num2 = 879, num3 = 798
// Output: 777
//

LEETCODE_SOLUTION_UNITTEST(3270, FindTheKeyOfTheNumbers, example_2) {
  auto solution = MakeSolution();
  int  num1     = 987;
  int  num2     = 879;
  int  num3     = 798;
  int  expect   = 777;
  int  actual   = solution->generateKey(num1, num2, num3);
  LCD_EXPECT_EQ(expect, actual);
}

// [Example #3]
//  Input: num1 = 1, num2 = 2, num3 = 3
// Output: 1
//

LEETCODE_SOLUTION_UNITTEST(3270, FindTheKeyOfTheNumbers, example_3) {
  auto solution = MakeSolution();
  int  num1     = 1;
  int  num2     = 2;
  int  num3     = 3;
  int  expect   = 1;
  int  actual   = solution->generateKey(num1, num2, num3);
  LCD_EXPECT_EQ(expect, actual);
}
