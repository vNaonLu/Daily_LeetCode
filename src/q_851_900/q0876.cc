#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/listnode.hpp>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 876.
 *      Middle of the Linked List
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given the ‘head’ of a singly linked list, return “the middle node of
 *   the linked list”
 *   If there are two middle nodes, return “the second middle” node.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The number of nodes in the list is in the range ‘[1, 100]’ .
 *   • ‘1 ≤ Node.val ≤ 100’
 *
 */

struct q876 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    ListNode* middleNode(ListNode* head) {
      ListNode *fast = head, *slow = head;
      while (fast != nullptr && fast->next != nullptr) {
        slow = slow->next;
        fast = fast->next->next;
      }
      return slow;
    }
  };

  class Solution *solution;
};

TEST_F(q876, sample_input01) {
  solution = new Solution();
  ListNode* head = ListNode::generate({1, 2, 3, 4, 5});
  ListNode* exp = ListNode::generate({3, 4, 5});
  EXPECT_LISTNODE_EQ(solution->middleNode(head), exp);
  delete solution;
}

TEST_F(q876, sample_input02) {
  solution = new Solution();
  ListNode* head = ListNode::generate({1, 2, 3, 4, 5, 6});
  ListNode* exp = ListNode::generate({4, 5, 6});
  EXPECT_LISTNODE_EQ(solution->middleNode(head), exp);
  delete solution;
}