#include <gtest/gtest.h>
#include <iostream>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 868.
 *      Binary Gap
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a positive integer ‘n’ , find and return “the “longest distance”
 *   between any two “adjacent” ” ‘1’ “'s in the binary representation of ”
 *   ‘n’ “. If there are no two adjacent ” ‘1’ “'s, return ” ‘0’ “.”
 *   Two ‘1’ 's are “adjacent” if there are only ‘0’ 's separating them
 *   (possibly no ‘0’ 's). The “distance” between two ‘1’ 's is the
 *   absolute difference between their bit positions. For example, the two
 *   ‘1’ 's in ‘'1001'’ have a distance of 3.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ n ≤ 10⁹’
 *
 */

struct q868 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int binaryGap(int n) {
      while (n != 0 && ((n & 1) == 0)) {
        n >>= 1;
      }
      auto gap = (int)0;
      auto res = (int)0;
      while (n != 0) {
        if (n & 1) {
          res = max(res, gap);
          gap = 0;
        }
        ++gap;
        n >>= 1;
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q868, sample_input01) {
  solution = new Solution();
  int n    = 22;
  int exp  = 2;
  int act  = solution->binaryGap(n);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q868, sample_input02) {
  solution = new Solution();
  int n    = 8;
  int exp  = 0;
  int act  = solution->binaryGap(n);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q868, sample_input03) {
  solution = new Solution();
  int n    = 5;
  int exp  = 2;
  int act  = solution->binaryGap(n);
  EXPECT_EQ(act, exp);
  delete solution;
}