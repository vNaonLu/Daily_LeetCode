#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 896.
 *      Monotonic Array
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   An array is “monotonic” if it is either monotone increasing or
 *   monotone
 *   An array ‘nums’ is monotone increasing if for all ‘i ≤ j’ , ‘nums[i] ≤
 *   nums[j]’ . An array ‘nums’ is monotone decreasing if for all ‘i ≤ j’ ,
 *   ‘nums[i] ≥ nums[j]’
 *   Given an integer array ‘nums’ , return ‘true’ “ if the given array is
 *   monotonic, or ” ‘false’ “ otherwise” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 10⁵’
 *   • ‘-10⁵ ≤ nums[i] ≤ 10⁵’
 *
 */

struct q896 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    template <typename type>
    bool is_increasing(type beg, type end) {
      while (beg + 1 != end) {
        auto &first = *beg++;

        if (first > *beg) {
          return false;
        }
      }

      return true;
    }
    template <typename type>
    bool is_decreasing(type beg, type end) {
      while (beg + 1 != end) {
        auto &first = *beg++;

        if (first < *beg) {
          return false;
        }
      }

      return true;
    }

   public:
    bool isMonotonic(vector<int> &nums) {
      return is_increasing(nums.begin(), nums.end()) ||
             is_decreasing(nums.begin(), nums.end());
    }
  };

  class Solution *solution;
};

TEST_F(q896, sample_input01) {
  solution = new Solution();
  vector<int> nums = {1, 2, 2, 3};
  bool exp = true;
  bool act = solution->isMonotonic(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q896, sample_input02) {
  solution = new Solution();
  vector<int> nums = {6, 5, 4, 4};
  bool exp = true;
  bool act = solution->isMonotonic(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q896, sample_input03) {
  solution = new Solution();
  vector<int> nums = {1, 3, 2};
  bool exp = false;
  bool act = solution->isMonotonic(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}