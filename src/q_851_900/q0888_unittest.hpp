
#ifndef Q888_UNITTEST_H__
#define Q888_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0888.hpp"
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 888.
 *      Fair Candy Swap
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Alice and Bob have a different total number of candies. You are given
 *   two integer arrays ‘aliceSizes’ and ‘bobSizes’ where ‘aliceSizes[i]’
 *   is the number of candies of the ‘iᵗʰ’ box of candy that Alice has and
 *   ‘bobSizes[j]’ is the number of candies of the ‘jᵗʰ’ box of candy that
 *   Bob
 *   Since they are friends, they would like to exchange one candy box each
 *   so that after the exchange, they both have the same total amount of
 *   candy. The total amount of candy a person has is the sum of the number
 *   of candies in each box they
 *   Return a “n integer array ” ‘answer’ “ where ” ‘answer[0]’ “ is the
 *   number of candies in the box that Alice must exchange, and ”
 *   ‘answer[1]’ “ is the number of candies in the box that Bob must
 *   exchange” . If there are multiple answers, you may “return any” one of
 *   them. It is guaranteed that at least one answer exists.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ aliceSizes.length, bobSizes.length ≤ 10⁴’
 *   • ‘1 ≤ aliceSizes[i], bobSizes[j] ≤ 10⁵’
 *   • Alice and Bob have a different total number of candies.
 *   • There will be at least one valid answer for the given input.
 *
 */

TEST(q888, sample_input01) {
  l888::Solution solver;
  vector<int> aliceSizes = {1, 1};
  vector<int> bobSizes = {2, 2};
  vector<int> exp = {1, 2};
  EXPECT_EQ(solver.fairCandySwap(aliceSizes, bobSizes), exp);
}

TEST(q888, sample_input02) {
  l888::Solution solver;
  vector<int> aliceSizes = {1, 2};
  vector<int> bobSizes = {2, 3};
  vector<int> exp = {1, 2};
  EXPECT_EQ(solver.fairCandySwap(aliceSizes, bobSizes), exp);
}

TEST(q888, sample_input03) {
  l888::Solution solver;
  vector<int> aliceSizes = {2};
  vector<int> bobSizes = {1, 3};
  vector<int> exp = {2, 3};
  EXPECT_EQ(solver.fairCandySwap(aliceSizes, bobSizes), exp);
}

TEST(q888, sample_input04) {
  l888::Solution solver;
  vector<int> aliceSizes = {1, 2, 5};
  vector<int> bobSizes = {2, 4};
  vector<int> exp = {5, 4};
  EXPECT_EQ(solver.fairCandySwap(aliceSizes, bobSizes), exp);
}

#endif