#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 852.
 *      Peak Index in a Mountain Array
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Let's call an array ‘arr’ a “mountain” if the following properties
 *       -  ‘arr.length ≥ 3’
 *       - There exists some ‘i’ with ‘0 < i< arr.length - 1’ such
 *           -  ‘arr[0] < arr[1] < ... arr[i-1] < arr[i] ’
 *           -  ‘arr[i] > arr[i+1] > ... > arr[arr.length - 1]’
 *      
 *   Given an integer array ‘arr’ that is “guaranteed” to bea mountain,
 *   return any ‘i’ such that ‘arr[0] < arr[1] < ... arr[i - 1] < arr[i] >
 *   arr[i + 1] > ... > arr[arr.length - 1]’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘3 ≤ arr.length ≤ 10⁴’
 *   • ‘0 ≤ arr[i] ≤ 10⁶’
 *   • ‘arr’ is “guaranteed” to be a mountain array.
 *
 */

struct q852 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int peakIndexInMountainArray(vector<int>& arr) {
      int l = 0, r = arr.size() - 1;
      while (l <= r) {
        int mid = l + (r - l) / 2;
        if (mid > 0 && mid < arr.size() - 1) {
          if (arr[mid] > arr[mid - 1] && arr[mid] > arr[mid + 1]) {
            return mid;
          } else if (arr[mid] < arr[mid + 1]) {
            l = mid + 1;
          } else {
            r = mid - 1;
          }
        } else if (mid == 0) {
          return arr[mid] > arr[mid] ? mid : mid + 1;
        } else {
          return arr[mid] > arr[mid - 1] ? mid : mid - 1;
        }
      }
      return -1;
    }
  };

  class Solution *solution;
};

TEST_F(q852, sample_input01) {
  solution = new Solution();
  vector<int> arr = {0, 1, 0};
  int exp = 1;
  EXPECT_EQ(solution->peakIndexInMountainArray(arr), exp);
  delete solution;
}

TEST_F(q852, sample_input02) {
  solution = new Solution();
  vector<int> arr = {0, 2, 1, 0};
  int exp = 1;
  EXPECT_EQ(solution->peakIndexInMountainArray(arr), exp);
  delete solution;
}

TEST_F(q852, sample_input03) {
  solution = new Solution();
  vector<int> arr = {0, 10, 5, 2};
  int exp = 1;
  EXPECT_EQ(solution->peakIndexInMountainArray(arr), exp);
  delete solution;
}

TEST_F(q852, sample_input04) {
  solution = new Solution();
  vector<int> arr = {3, 4, 5, 1};
  int exp = 2;
  EXPECT_EQ(solution->peakIndexInMountainArray(arr), exp);
  delete solution;
}

TEST_F(q852, sample_input05) {
  solution = new Solution();
  vector<int> arr = {24, 69, 100, 99, 79, 78, 67, 36, 26, 19};
  int exp = 2;
  EXPECT_EQ(solution->peakIndexInMountainArray(arr), exp);
  delete solution;
}