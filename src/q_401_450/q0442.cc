#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 442.
 *      Find All Duplicates in an Array
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an integer array ‘nums’ of length ‘n’ where all the integers of
 *   ‘nums’ are in the range ‘[1, n]’ and each integer appears “once” or
 *   “twice” , return “an array of all the integers that appears “twice” ”
 *   You must write an algorithm that runs in ‘O(n)’ time and uses only
 *   constant extra space.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘n = nums.length’
 *   • ‘1 ≤ n ≤ 10⁵’
 *   • ‘1 ≤ nums[i] ≤ n’
 *   • Each element in ‘nums’ appears “once” or “twice” .
 *
 */

struct q442 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    vector<int> findDuplicates(vector<int>& nums) {
      vector<int> res;
      for(const auto &x : nums){
        int i = abs(x) - 1;
        if (nums[i] < 0) res.push_back(i + 1);
        nums[i] *= -1;
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q442, sample_input01) {
  solution = new Solution();
  vector<int> nums = {4, 3, 2, 7, 8, 2, 3, 1};
  vector<int> exp = {2, 3};
  EXPECT_EQ(solution->findDuplicates(nums), exp);
  delete solution;
}

TEST_F(q442, sample_input02) {
  solution = new Solution();
  vector<int> nums = {1, 1, 2};
  vector<int> exp = {1};
  EXPECT_EQ(solution->findDuplicates(nums), exp);
  delete solution;
}

TEST_F(q442, sample_input03) {
  solution = new Solution();
  vector<int> nums = {1};
  vector<int> exp = {};
  EXPECT_EQ(solution->findDuplicates(nums), exp);
  delete solution;
}