
#ifndef LEETCODE_Q448_H__
#define LEETCODE_Q448_H__
#include <iostream>
#include <vector>

namespace l448 {
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 448.
 *      Find All Numbers Disappeared in an Array
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an array ‘nums’ of ‘n’ integers where ‘nums[i]’ is in the range
 *   ‘[1, n]’ , return “an array of all the integers in the range” ‘[1, n]’
 *   “that do not appear in” ‘nums’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘n = nums.length’
 *   • ‘1 ≤ n ≤ 10⁵’
 *   • ‘1 ≤ nums[i] ≤ n’
 *
 */

class Solution {
 public:
  vector<int> findDisappearedNumbers(vector<int>& nums) {
    vector<bool> appear(nums.size() + 1, false);
    for (const auto x : nums) appear[x] = true;
    vector<int> res;
    for (int i = 1; i < appear.size(); ++i) {
      if (!appear[i]) res.emplace_back(i);
    }
    return res;
  }
};
}  // namespace l448

#endif