
#ifndef LEETCODE_Q404_H__
#define LEETCODE_Q404_H__
#include <iostream>
#include <leetcode/treenode.hpp>

namespace l404 {
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 404.
 *      Sum of Left Leaves
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given the ‘root’ of a binary tree, return the sum of all left leaves.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The number of nodes in the tree is in the range ‘[1, 1000]’ .
 *   • ‘-1000 ≤ Node.val ≤ 1000’
 *
 */

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
 public:
  int sumOfLeftLeaves(TreeNode* root, TreeNode* pre = nullptr) {
    if (root == nullptr) return 0;
    if (root->left == nullptr && root->right == nullptr &&
        pre != nullptr && pre->left == root) return root->val;
    return sumOfLeftLeaves(root->left, root) + sumOfLeftLeaves(root->right, root);
  }
};
}  // namespace l404

#endif