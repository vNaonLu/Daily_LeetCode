
#ifndef LEETCODE_Q438_H__
#define LEETCODE_Q438_H__
#include <iostream>
#include <string>
#include <unordered_map>
#include <vector>

namespace l438 {
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 438. Find All Anagrams in a String
  * Given two strings s and p , return an array of
  * all the start indices of p ';s anagrams in s . You
  * may return the answer in “any order“ .
  * An “Anagram“ is a word or phrase formed by
  * rearranging the letters of a different word or phrase,
  * typically using all the original letters exactly
  * once.
  *
  * Constraints:
  * -  1 <= s.length, p.length <= 3 * 10^(4) 
  * -  s and p consist of lowercase English letters.
  *
*/
class Solution {
 public:
  vector<int> findAnagrams(string s, string p) {
    vector<int> res;
    unordered_map<char, int> sc, pc;
    if (p.size() > s.size()) return res;
    for (int i = 0; i < p.size(); ++i) {
      ++sc[s[i]];
      ++pc[p[i]];
    }
    for (int i = 0; i < s.size() - p.size() + 1; ++i) {
      if (sc == pc) res.push_back(i);
      if (i + p.size() < s.size()) {
        --sc[s[i]];
        ++sc[s[i + p.size()]];
        if (!sc[s[i]]) sc.erase(s[i]);
      }
    }
    return res;
  }
};
}  // namespace l438
#endif