
#ifndef LEETCODE_Q450_H__
#define LEETCODE_Q450_H__
#include <iostream>
#include <leetcode/treenode.hpp>

namespace l450 {
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 450.
  *      Delete Node in a BST
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given a root node reference of a BST and a key, delete the node with
  *   the given key in the BST. Return the root node reference (possibly
  *   updated) of the BST.
  *   
  *   Basically, the deletion can be divided into two.
  *   
  *   - Search for a node to remove.
  *   
  *   - If the node is found, delete the node.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • The number of nodes in the tree is in the range ‘[0, 10⁴]’ .
  *   • ‘-10⁵ ≤ Node.val ≤ 10⁵’
  *   • Each node has a “unique” value.
  *   • ‘root’ is a valid binary search tree.
  *   • ‘-10⁵ ≤ key ≤ 10⁵’
  *
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
 private:
  TreeNode *remove(TreeNode *p) {
    TreeNode *min = p->right;
    while (min != nullptr && min->left != nullptr) {
      if (min->left->left == nullptr) {
        TreeNode *pre = min;
        min = min->left;
        pre->left = min->right;
        break;
      }
      min = min->left;
    }

    if (min == nullptr) {
      return p->left;
    } else if (p->right == min) {
      min->left = p->left;
      return min;
    } else {
      min->left = p->left;
      min->right = p->right;
      return min;
    }
  }

 public:
  TreeNode *deleteNode(TreeNode *root, int key) {
    TreeNode *p = root, *pre = nullptr;
    while (p != nullptr) {
      if (p->val > key) {
        pre = p;
        p = p->left;
      } else if (p->val < key) {
        pre = p;
        p = p->right;
      } else {
        if (pre == nullptr) {
          root = remove(p);
        } else {
          if (pre->left == p) {
            pre->left = remove(p);
          } else {
            pre->right = remove(p);
          }
        }
        break;
      }
    }
    return root;
  }
};
}  // namespace l450

#endif