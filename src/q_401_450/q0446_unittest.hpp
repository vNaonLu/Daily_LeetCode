
#ifndef Q446_UNITTEST_H__
#define Q446_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0446.hpp"
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 446. Arithmetic Slices II - Subsequence
  *
  * Given an integer array nums , return the number
  * of all the “arithmetic subsequences“ of nums .
  * A sequence of numbers is called arithmetic if it
  * consists of “at least three elements“ and if the
  * difference between any two consecutive elements is
  * the same.
  * - For example, [1, 3, 5, 7, 9] , [7, 7, 7, 7] ,
  * and [3, -1, -5, -9] are arithmetic sequences.
  * - For example, [1, 1, 2, 5, 7] is not an
  * arithmetic sequence.
  * A “subsequence“ of an array is a sequence that
  * can be formed by removing some elements (possibly
  * none) of the array.
  * - For example, [2,5,10] is a subsequence of
  * [1,2,1, “<u>2</u>“ ,4,1,<u> “5“ </u>,<u> “10“ </u>] .
  * The test cases are generated so that the answer
  * fits in “32-bit“ integer.
  *
  * Constraints:
  * -  1 <= nums.length <= 1000 
  * -  -2^(31) <= nums[i] <= 2^(31) - 1 
  *
*/

TEST(q446, sample_input01) {
  vector<int> nums = {2, 4, 6, 8, 10};
  int exp = 7;
  l446::Solution solver;
  EXPECT_EQ(solver.numberOfArithmeticSlices(nums), exp);
}

TEST(q446, sample_input02) {
  vector<int> nums = {7, 7, 7, 7, 7};
  int exp = 16;
  l446::Solution solver;
  EXPECT_EQ(solver.numberOfArithmeticSlices(nums), exp);
}

TEST(q446, input01) {
  vector<int> nums = {0, 2000000000, -294967296};
  int exp = 0;
  l446::Solution solver;
  EXPECT_EQ(solver.numberOfArithmeticSlices(nums), exp);
}

#endif