#include <gtest/gtest.h>
#include <iostream>
#include <string>
#include <unordered_map>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 424.
 *      Longest Repeating Character Replacement
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given a string ‘s’ and an integer ‘k’ . You can choose any
 *   character of the string and change it to any other uppercase English
 *   character. You can perform this operation at most ‘k’
 *   Return “the length of the longest substring containing the same letter
 *   you can get after performing the above operations” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s.length ≤ 10⁵’
 *   • ‘s’ consists of only uppercase English letters.
 *   • ‘0 ≤ k ≤ s.length’
 *
 */

struct q424 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int characterReplacement(string s, int k) {
      auto lo   = s.begin();
      auto hi   = s.begin();
      auto res  = (int)0;
      auto freq = (int)0;
      auto cnt  = unordered_map<char, int>();
      while (hi != s.end()) {
        freq = max(freq, ++cnt[*hi]);
        if (distance(lo, hi + 1) - freq > k) {
          --cnt[*lo++];
        }
        res = max<int>(res, distance(lo, ++hi));
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q424, sample_input01) {
  solution   = new Solution();
  string s   = "ABAB";
  int    k   = 2;
  int    exp = 4;
  int    act = solution->characterReplacement(s, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q424, sample_input02) {
  solution   = new Solution();
  string s   = "AABABBA";
  int    k   = 1;
  int    exp = 4;
  int    act = solution->characterReplacement(s, k);
  EXPECT_EQ(act, exp);
  delete solution;
}