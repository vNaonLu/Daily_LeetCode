#include <gtest/gtest.h>
#include <iostream>
#include <string>
#include <unordered_map>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 409.
 *      Longest Palindrome
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a string ‘s’ which consists of lowercase or uppercase letters,
 *   return “the length of the “longest palindrome” ” that can be built
 *   with those
 *   Letters are “case sensitive” , for example, ‘'Aa'’ is not considered a
 *   palindrome here.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s.length ≤ 2000’
 *   • ‘s’ consists of lowercase “and/or” uppercase Englishletters only.
 *
 */

struct q409 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int longestPalindrome(string s) {
      unordered_map<char, int> cnt;
      for (const auto &c : s) ++cnt[c];
      int res = 0;
      int single = 0;
      for (auto it = cnt.begin(); it != cnt.end(); ++it) {
        if (it->second % 2) {
          single = 1;
          res += it->second / 2 * 2;
        } else {
          res += it->second;
        }
      }
      return res + single;
    }
  };

  class Solution *solution;
};

TEST_F(q409, sample_input01) {
  solution = new Solution();
  string s = "abccccdd";
  int exp = 7;
  EXPECT_EQ(solution->longestPalindrome(s), exp);
  delete solution;
}

TEST_F(q409, sample_input02) {
  solution = new Solution();
  string s = "a";
  int exp = 1;
  EXPECT_EQ(solution->longestPalindrome(s), exp);
  delete solution;
}

TEST_F(q409, sample_input03) {
  solution = new Solution();
  string s = "bb";
  int exp = 2;
  EXPECT_EQ(solution->longestPalindrome(s), exp);
  delete solution;
}