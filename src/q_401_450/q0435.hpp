
#ifndef LEETCODE_Q435_H__
#define LEETCODE_Q435_H__
#include <iostream>
#include <limits>
#include <set>
#include <vector>

namespace l435 {
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 435. Non-overlapping Intervals
  *
  * Given an array of intervals intervals where
  * intervals[i] = [start⎽(i), end⎽(i)] , return the
  * minimum number of intervals you need to remove to make
  * the rest of the intervals non-overlapping .
  *
  * Constraints:
  * -  1 <= intervals.length <= 10^(5) 
  * -  intervals[i].length == 2 
  * -  -5 * 10^(4) <= start⎽(i) < end⎽(i) <= 5 * 10^(4) 
  *
*/
class Solution {
 public:
  int eraseOverlapIntervals(vector<vector<int>>& intervals) {
    set<pair<int, int>> uniq_intv;
    for (const auto& intv : intervals)
      uniq_intv.insert({intv[1], intv[0]});

    int res = intervals.size();
    int end = numeric_limits<int>::min();
    for (const auto intv : uniq_intv) {
      if (intv.second >= end || intv.first < end) {
        --res;
        end = intv.first;
      }
    }
    return res;
  }
};
}  // namespace l435
#endif