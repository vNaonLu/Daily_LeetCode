
#ifndef Q442_UNITTEST_H__
#define Q442_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0442.hpp"
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 442.
  *      Find All Duplicates in an Array
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given an integer array ‘nums’ of length ‘n’ where all the integers of
  *   ‘nums’ are in the range ‘[1, n]’ and each integer appears “once” or
  *   “twice” , return “an array of all the integers that appears “twice” ”.
  *   
  *   You must write an algorithm that runs in ‘O(n)’ time and uses only
  *   constant extra space.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘n = nums.length’
  *   • ‘1 ≤ n ≤ 10⁵’
  *   • ‘1 ≤ nums[i] ≤ n’
  *   • Each element in ‘nums’ appears “once” or “twice” .
  *
*/

TEST(q442, sample_input01) {
  l442::Solution solver;
  vector<int> nums = {4, 3, 2, 7, 8, 2, 3, 1};
  vector<int> exp = {2, 3};
  EXPECT_EQ(solver.findDuplicates(nums), exp);
}

TEST(q442, sample_input02) {
  l442::Solution solver;
  vector<int> nums = {1, 1, 2};
  vector<int> exp = {1};
  EXPECT_EQ(solver.findDuplicates(nums), exp);
}

TEST(q442, sample_input03) {
  l442::Solution solver;
  vector<int> nums = {1};
  vector<int> exp = {};
  EXPECT_EQ(solver.findDuplicates(nums), exp);
}

#endif