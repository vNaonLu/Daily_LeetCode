
#ifndef Q450_UNITTEST_H__
#define Q450_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0450.hpp"
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 450.
  *      Delete Node in a BST
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given a root node reference of a BST and a key, delete the node with
  *   the given key in the BST. Return the root node reference (possibly
  *   updated) of the BST.
  *   
  *   Basically, the deletion can be divided into two.
  *   
  *   - Search for a node to remove.
  *   
  *   - If the node is found, delete the node.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • The number of nodes in the tree is in the range ‘[0, 10⁴]’ .
  *   • ‘-10⁵ ≤ Node.val ≤ 10⁵’
  *   • Each node has a “unique” value.
  *   • ‘root’ is a valid binary search tree.
  *   • ‘-10⁵ ≤ key ≤ 10⁵’
  *
*/

TEST(q450, sample_input01) {
  l450::Solution solver;
  TreeNode* root = TreeNode::generate({5, 3, 6, 2, 4, NULL_TREENODE, 7});
  int key = 3;
  TreeNode* exp = TreeNode::generate({5, 4, 6, 2, NULL_TREENODE, NULL_TREENODE, 7});
  EXPECT_TREENODE_EQ(solver.deleteNode(root, key), exp);
}

TEST(q450, sample_input02) {
  l450::Solution solver;
  TreeNode* root = TreeNode::generate({5, 3, 6, 2, 4, NULL_TREENODE, 7});
  int key = 0;
  TreeNode* exp = TreeNode::generate({5, 3, 6, 2, 4, NULL_TREENODE, 7});
  EXPECT_TREENODE_EQ(solver.deleteNode(root, key), exp);
}

TEST(q450, sample_input03) {
  l450::Solution solver;
  TreeNode* root = TreeNode::generate({});
  int key = 0;
  TreeNode* exp = TreeNode::generate({});
  EXPECT_TREENODE_EQ(solver.deleteNode(root, key), exp);
}

#endif