
#ifndef Q435_UNITTEST_H__
#define Q435_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0435.hpp"
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 435. Non-overlapping Intervals
  *
  * Given an array of intervals intervals where
  * intervals[i] = [start⎽(i), end⎽(i)] , return the
  * minimum number of intervals you need to remove to make
  * the rest of the intervals non-overlapping .
  *
  * Constraints:
  * -  1 <= intervals.length <= 10^(5) 
  * -  intervals[i].length == 2 
  * -  -5 * 10^(4) <= start⎽(i) < end⎽(i) <= 5 * 10^(4) 
  *
*/

TEST(q435, sample_input01) {
  vector<vector<int>> intervals = {{1, 2}, {2, 3}, {3, 4}, {1, 3}};
  int exp = 1;
  l435::Solution solver;
  EXPECT_EQ(solver.eraseOverlapIntervals(intervals), exp);
}

TEST(q435, sample_input02) {
  vector<vector<int>> intervals = {{1, 2}, {1, 2}, {1, 2}};
  int exp = 2;
  l435::Solution solver;
  EXPECT_EQ(solver.eraseOverlapIntervals(intervals), exp);
}

TEST(q435, sample_input03) {
  vector<vector<int>> intervals = {{1, 2}, {2, 3}};
  int exp = 0;
  l435::Solution solver;
  EXPECT_EQ(solver.eraseOverlapIntervals(intervals), exp);
}

#endif