#include <gtest/gtest.h>
#include <iostream>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 434.
 *      Number of Segments in a String
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a string ‘s’ , return “the number of segments in the string”
 *   A “segment” is defined to be a contiguous sequence of “non-space
 *   characters” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘0 ≤ s.length ≤ 300’
 *   • ‘s’ consists of lowercase and uppercase English letters, digits, or one
 * of the following characters ‘'!@#$%^&amp;×()_+-=',.:'’ . • The only space
 * character in ‘s’ is ‘' '’ .
 *
 */

struct q434 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int countSegments(string s) {
      auto beg = s.begin();
      auto it  = s.begin();
      auto res = (int)0;
      while (it != s.end()) {
        if (*it == ' ') {
          res += it == beg ? 0 : 1;
          beg = it + 1;
        }
        ++it;
      }
      return res + (it != beg ? 1 : 0);
    }
  };

  class Solution *solution;
};

TEST_F(q434, sample_input01) {
  solution   = new Solution();
  string s   = "Hello, my name is John";
  int    exp = 5;
  int    act = solution->countSegments(s);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q434, sample_input02) {
  solution   = new Solution();
  string s   = "Hello";
  int    exp = 1;
  int    act = solution->countSegments(s);
  EXPECT_EQ(act, exp);
  delete solution;
}