#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 435.
 *      Non-overlapping Intervals
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an array of intervals ‘intervals’ where ‘intervals[i] = [startᵢ,
 *   endᵢ]’ , return “the minimum number of intervals you need to remove to
 *   make the rest of the intervals non-overlapping” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ intervals.length ≤ 10⁵’
 *   • ‘intervals[i].length = 2’
 *   • ‘-5 × 10⁴ ≤ startᵢ < endᵢ ≤ 5 × 10⁴’
 *
 */

struct q435 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int eraseOverlapIntervals(vector<vector<int>>& intervals) {
      set<pair<int, int>> uniq_intv;
      for (const auto& intv : intervals)
        uniq_intv.insert({intv[1], intv[0]});
      int res = intervals.size();
      int end = numeric_limits<int>::min();
      for (const auto intv : uniq_intv) {
        if (intv.second >= end || intv.first < end) {
          --res;
          end = intv.first;
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q435, sample_input01) {
  solution = new Solution();
  vector<vector<int>> intervals = {{1, 2}, {2, 3}, {3, 4}, {1, 3}};
  int exp = 1;
  EXPECT_EQ(solution->eraseOverlapIntervals(intervals), exp);
  delete solution;
}

TEST_F(q435, sample_input02) {
  solution = new Solution();
  vector<vector<int>> intervals = {{1, 2}, {1, 2}, {1, 2}};
  int exp = 2;
  EXPECT_EQ(solution->eraseOverlapIntervals(intervals), exp);
  delete solution;
}

TEST_F(q435, sample_input03) {
  solution = new Solution();
  vector<vector<int>> intervals = {{1, 2}, {2, 3}};
  int exp = 0;
  EXPECT_EQ(solution->eraseOverlapIntervals(intervals), exp);
  delete solution;
}