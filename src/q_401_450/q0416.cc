#include <gtest/gtest.h>
#include <iostream>
#include <numeric>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 416.
 *      Partition Equal Subset Sum
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a “non-empty” array ‘nums’ containing “only positive integers” ,
 *   find if the array can be partitioned into two subsets such that the
 *   sum of elements in both subsets is equal.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 200’
 *   • ‘1 ≤ nums[i] ≤ 100’
 *
 */

struct q416 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    bool canPartition(vector<int> &nums) {
      uint32_t sum = accumulate(nums.begin(), nums.end(), 0);
      if (sum % 2) return false;
      sum /= 2;
      vector<bool> dp(sum + 1, false);
      dp[0] = true;
      for (const auto &x : nums) {
        for (int i = sum; i >= x; --i) {
          dp[i] = dp[i] | dp[i - x];
        }
      }
      return dp.back();
    }
  };

  class Solution *solution;
};

TEST_F(q416, sample_input01) {
  solution = new Solution();
  vector<int> nums = {1, 5, 11, 5};
  bool exp = true;
  EXPECT_EQ(solution->canPartition(nums), exp);
  delete solution;
}

TEST_F(q416, sample_input02) {
  solution = new Solution();
  vector<int> nums = {1, 2, 3, 5};
  bool exp = false;
  EXPECT_EQ(solution->canPartition(nums), exp);
  delete solution;
}