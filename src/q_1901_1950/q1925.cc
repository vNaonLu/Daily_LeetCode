#include <gtest/gtest.h>
#include <iostream>
#include <unordered_set>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1925.
 *       Count Square Sum Triples
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   A “square triple” ‘(a,b,c)’ is a triple where ‘a’ , ‘b’ , and ‘c’ are
 *   “integers” and ‘a² + b² = c²’
 *   Given an integer ‘n’ , return “the number of “square triples” such
 *   that ” ‘1 ≤ a, b, c ≤ n’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ n ≤ 250’
 *
 */

struct q1925 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int countTriples(int n) {
      auto memo = unordered_set<int>();
      auto res  = (int)0;
      for (int i = 1; i <= n; ++i) {
        memo.emplace(i * i);
      }
      for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= n; ++j) {
          if (i == j) {
            continue;
          }
          if (memo.count(i * i + j * j)) {
            ++res;
          }
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1925, sample_input01) {
  solution = new Solution();
  int n    = 5;
  int exp  = 2;
  int act  = solution->countTriples(n);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1925, sample_input02) {
  solution = new Solution();
  int n    = 10;
  int exp  = 4;
  int act  = solution->countTriples(n);
  EXPECT_EQ(act, exp);
  delete solution;
}
