#include <gtest/gtest.h>
#include <iostream>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1903.
 *       Largest Odd Number in String
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given a string ‘num’ , representing a large integer. Return
 *   “the “largest-valued odd” integer (as a string) that is a “non-empty
 *   substring” of ” ‘num’ “, or an empty string ” ‘''’ “ if no odd integer
 *   exists”
 *   A “substring” is a contiguous sequence of characters within a string.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ num.length ≤ 10⁵’
 *   • ‘num’ only consists of digits and does not contain any leading zeros.
 *
 */

struct q1903 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    string largestOddNumber(string num) {
      while (!num.empty() && !((num.back() - '0') & 1)) {
        num.pop_back();
      }
      return num;
    }
  };

  class Solution *solution;
};

TEST_F(q1903, sample_input01) {
  solution = new Solution();
  string num = "52";
  string exp = "5";
  string act = solution->largestOddNumber(num);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1903, sample_input02) {
  solution = new Solution();
  string num = "4206";
  string exp = "";
  string act = solution->largestOddNumber(num);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1903, sample_input03) {
  solution = new Solution();
  string num = "35427";
  string exp = "35427";
  string act = solution->largestOddNumber(num);
  EXPECT_EQ(act, exp);
  delete solution;
}