#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1929.
 *       Concatenation of Array
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an integer array ‘nums’ of length ‘n’ , you want to create an
 *   array ‘ans’ of length ‘2n’ where ‘ans[i] = nums[i]’ and ‘ans[i + n] =
 *   nums[i]’ for ‘0 ≤ i < n’ ( “0-indexed”
 *   Specifically, ‘ans’ is the “concatenation” of two ‘nums’
 *   Return “the array ” ‘ans’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘n = nums.length’
 *   • ‘1 ≤ n ≤ 1000’
 *   • ‘1 ≤ nums[i] ≤ 1000’
 *
 */

struct q1929 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    vector<int> getConcatenation(vector<int>& nums) {
      vector<int> res(nums.size() * 2);
      for (int i = 0; i < nums.size(); ++i) {
        res[i] = res[i + nums.size()] = nums[i];
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1929, sample_input01) {
  solution = new Solution();
  vector<int> nums = {1, 2, 1};
  vector<int> exp = {1, 2, 1, 1, 2, 1};
  vector<int> act = solution->getConcatenation(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1929, sample_input02) {
  solution = new Solution();
  vector<int> nums = {1, 3, 2, 1};
  vector<int> exp = {1, 3, 2, 1, 1, 3, 2, 1};
  vector<int> act = solution->getConcatenation(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}