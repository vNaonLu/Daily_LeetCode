#include <gtest/gtest.h>
#include <iostream>
#include <unordered_map>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1074.
 *       Number of Submatrices That Sum to Target
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a ‘matrix’ and a ‘target’ , return the number of non-empty
 *   submatrices that sum to <font
 *   A submatrix ‘x1, y1, x2, y2’ is the set of all cells ‘matrix[x][y]’
 *   with ‘x1 ≤ x ≤ x2’ and ‘y1 ≤ y ≤ y2’
 *   Two submatrices ‘(x1, y1, x2, y2)’ and ‘(x1', y1', x2', y2')’ are
 *   different if they have some coordinatethat is different: for example,
 *   if ‘x1 ≠ x1'’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ matrix.length ≤ 100’
 *   • ‘1 ≤ matrix[0].length ≤ 100’
 *   • ‘-1000 ≤ matrix[i] ≤ 1000’
 *   • ‘-10^8 ≤ target ≤ 10^8’
 *
 */

struct q1074 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int numSubmatrixSumTarget(vector<vector<int>> &matrix, int target) {
      int m = matrix.size(),
          n = matrix.front().size();
      for (int i = 0; i < m; ++i) {
        for (int j = 1; j < n; ++j) {
          matrix[i][j] += matrix[i][j - 1];
        }
      }

      int res = 0;
      for (int i = 0; i < n; ++i) {
        for (int j = i; j < n; ++j) {
          unordered_map<int, int> cnt = {{0, 1}};
          int curr = 0;

          for (int k = 0; k < m; ++k) {
            curr += matrix[k][j] - (i == 0 ? 0 : matrix[k][i - 1]);
            auto find = cnt.find(curr - target);
            if (find != cnt.end()) {
              res += find->second;
            }
            ++cnt[curr];
          }
        }
      }

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1074, sample_input01) {
  solution = new Solution();
  vector<vector<int>> matrix = {{0, 1, 0}, {1, 1, 1}, {0, 1, 0}};
  int target = 0;
  int exp = 4;
  int act = solution->numSubmatrixSumTarget(matrix, target);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1074, sample_input02) {
  solution = new Solution();
  vector<vector<int>> matrix = {{1, -1}, {-1, 1}};
  int target = 0;
  int exp = 5;
  int act = solution->numSubmatrixSumTarget(matrix, target);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1074, sample_input03) {
  solution = new Solution();
  vector<vector<int>> matrix = {{904}};
  int target = 0;
  int exp = 0;
  int act = solution->numSubmatrixSumTarget(matrix, target);
  EXPECT_EQ(act, exp);
  delete solution;
}