#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1089.
 *       Duplicate Zeros
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a fixed-length integer array ‘arr’ , duplicate each occurrence
 *   of zero, shifting the remaining elements to the
 *    “Note” that elements beyond the length of the original array are not
 *   written. Do the above modifications to the input array in place and do
 *   not return anything.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ arr.length ≤ 10⁴’
 *   • ‘0 ≤ arr[i] ≤ 9’
 *
 */

struct q1089 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    void duplicateZeros(vector<int> &arr) {
      auto res = vector<int>(arr.size(), 0);
      auto it = res.begin();
      auto arr_it = arr.begin();

      while (it != res.end()) {
        *it++ = *arr_it;
        if (*arr_it++ == 0 && it != res.end()) {
          *it++ = 0;
        }
      }

      arr.swap(res);
    }
  };

  class Solution *solution;
};

TEST_F(q1089, sample_input01) {
  solution = new Solution();
  vector<int> arr = {1, 0, 2, 3, 0, 4, 5, 0};
  vector<int> exp = {1, 0, 0, 2, 3, 0, 0, 4};
  solution->duplicateZeros(arr);
  // Assume the first argument is answer.
  EXPECT_EQ(arr, exp);
  delete solution;
}

TEST_F(q1089, sample_input02) {
  solution = new Solution();
  vector<int> arr = {1, 2, 3};
  vector<int> exp = {1, 2, 3};
  solution->duplicateZeros(arr);
  // Assume the first argument is answer.
  EXPECT_EQ(arr, exp);
  delete solution;
}