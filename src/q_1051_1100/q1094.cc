#include <gtest/gtest.h>
#include <algorithm>
#include <iostream>
#include <queue>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1094.
 *       Car Pooling
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   There is a car with ‘capacity’ empty seats. The vehicle only drives
 *   east (i.e., it cannot turn around and drive
 *   You are given the integer ‘capacity’ and an array ‘trips’ where
 *   ‘trip[i] = [numPassengersᵢ, fromᵢ, toᵢ]’ indicates that the ‘iᵗʰ’ trip
 *   has ‘numPassengersᵢ’ passengers and the locations to pick them up and
 *   drop them off are ‘fromᵢ’ and ‘toᵢ’ respectively. The locations are
 *   given as the number of kilometers due east from the car's initial
 *   Return ‘true’ “ if it is possible to pick up and drop off all
 *   passengers for all the given trips, or ” ‘false’ “ otherwise” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ trips.length ≤ 1000’
 *   • ‘trips[i].length = 3’
 *   • ‘1 ≤ numPassengersᵢ ≤ 100’
 *   • ‘0 ≤ fromᵢ < toᵢ ≤ 1000’
 *   • ‘1 ≤ capacity ≤ 10⁵’
 *
 */

struct q1094 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    using trip_t = pair<int, int>;

   public:
    bool carPooling(vector<vector<int>>& trips, int capacity) {
      sort(trips.begin(), trips.end(), [](auto lhs, auto rhs) {
        return lhs[1] < rhs[1] || (lhs[1] == rhs[1] && lhs[2] < rhs[2]);
      });
      int cur = 0;
      priority_queue<trip_t, vector<trip_t>, greater<trip_t>> pq;
      for (int i = 0; i < trips.size(); ++i) {
        while (!pq.empty() && pq.top().first <= trips[i][1]) {
          cur -= pq.top().second; pq.pop();
        }
        pq.emplace(trips[i][2], trips[i][0]);
        cur += trips[i][0];
        if (cur > capacity) return false;
      }
      return true;
    }
  };

  class Solution *solution;
};

TEST_F(q1094, sample_input01) {
  solution = new Solution();
  vector<vector<int>> trips = {{2, 1, 5}, {3, 3, 7}};
  int capacity = 4;
  bool exp = false;
  bool act = solution->carPooling(trips, capacity);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1094, sample_input02) {
  solution = new Solution();
  vector<vector<int>> trips = {{2, 1, 5}, {3, 3, 7}};
  int capacity = 5;
  bool exp = true;
  bool act = solution->carPooling(trips, capacity);
  EXPECT_EQ(act, exp);
  delete solution;
}