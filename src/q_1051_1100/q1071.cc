#include <gtest/gtest.h>
#include <iostream>
#include <numeric>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1071.
 *       Greatest Common Divisor of Strings
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   For two strings ‘s’ and ‘t’ , we say ' ‘t’ divides ‘s’ ' if and only
 *   if ‘s = t + ... + t’ (i.e., ‘t’ is concatenated with itself one or
 *   more
 *   Given two strings ‘str1’ and ‘str2’ , return “the largest string ” ‘x’
 *   “ such that ” ‘x’ “ divides both ” ‘str1’ “ and ” ‘str2’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ str1.length, str2.length ≤ 1000’
 *   • ‘str1’ and ‘str2’ consist of English uppercase letters.
 *
 */

struct q1071 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    string gcdOfStrings(string str1, string str2) {
      return str1 + str2 == str2 + str1
                 ? str1.substr(0, gcd(str1.size(), str2.size()))
                 : "";
    }
  };

  class Solution *solution;
};

TEST_F(q1071, sample_input01) {
  solution    = new Solution();
  string str1 = "ABCABC";
  string str2 = "ABC";
  string exp  = "ABC";
  string act  = solution->gcdOfStrings(str1, str2);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1071, sample_input02) {
  solution    = new Solution();
  string str1 = "ABABAB";
  string str2 = "ABAB";
  string exp  = "AB";
  string act  = solution->gcdOfStrings(str1, str2);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1071, sample_input03) {
  solution    = new Solution();
  string str1 = "LEET";
  string str2 = "CODE";
  string exp  = "";
  string act  = solution->gcdOfStrings(str1, str2);
  EXPECT_EQ(act, exp);
  delete solution;
}