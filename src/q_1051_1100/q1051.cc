#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1051.
 *       Height Checker
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   A school is trying to take an annual photo of all the students. The
 *   students are asked to stand in a single file line in “non-decreasing
 *   order” by height. Let this ordering be represented by the integer
 *   array ‘expected’ where ‘expected[i]’ is the expected height of the
 *   ‘iᵗʰ’ student in
 *   You are given an integer array ‘heights’ representing the “current
 *   order” that the students are standing in. Each ‘heights[i]’ is the
 *   height of the ‘iᵗʰ’ student in line ( “0-indexed”
 *   Return “the “number of indices” where ” ‘heights[i] ≠ expected[i]’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ heights.length ≤ 100’
 *   • ‘1 ≤ heights[i] ≤ 100’
 *
 */

struct q1051 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int heightChecker(vector<int> &heights) {
      auto expected = heights;
      auto res      = (int)0;
      sort(expected.begin(), expected.end());
      for (auto i = 0; i < heights.size(); ++i) {
        if (heights[i] != expected[i]) {
          ++res;
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1051, sample_input01) {
  solution            = new Solution();
  vector<int> heights = {1, 1, 4, 2, 1, 3};
  int         exp     = 3;
  int         act     = solution->heightChecker(heights);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1051, sample_input02) {
  solution            = new Solution();
  vector<int> heights = {5, 1, 2, 3, 4};
  int         exp     = 5;
  int         act     = solution->heightChecker(heights);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1051, sample_input03) {
  solution            = new Solution();
  vector<int> heights = {1, 2, 3, 4, 5};
  int         exp     = 0;
  int         act     = solution->heightChecker(heights);
  EXPECT_EQ(act, exp);
  delete solution;
}