#include <gtest/gtest.h>
#include <iostream>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1342.
 *       Number of Steps to Reduce a Number to Zero
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an integer ‘num’ , return “the number of steps to reduce it to
 *   zero”
 *   In one step, if the current number is even, you have to divide it by
 *   ‘2’ , otherwise, you have to subtract ‘1’ from it.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘0 ≤ num ≤ 10⁶’
 *
 */

struct q1342 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int numberOfSteps(int num) {
      int res = 0;
      while (num != 0) {
        if (num & 1) {
          --num;
        } else {
          num >>= 1;
        }
        ++res;
      }

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1342, sample_input01) {
  solution = new Solution();
  int num = 14;
  int exp = 6;
  int act = solution->numberOfSteps(num);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1342, sample_input02) {
  solution = new Solution();
  int num = 8;
  int exp = 4;
  int act = solution->numberOfSteps(num);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1342, sample_input03) {
  solution = new Solution();
  int num = 123;
  int exp = 12;
  int act = solution->numberOfSteps(num);
  EXPECT_EQ(act, exp);
  delete solution;
}