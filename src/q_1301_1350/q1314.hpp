
#ifndef LEETCODE_Q1314_H__
#define LEETCODE_Q1314_H__
#include <iostream>
#include <vector>

namespace l1314 {
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1314.
 *       Matrix Block Sum
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a ‘m x n’ matrix ‘mat’ and an integer ‘k’ , return “a matrix”
 *   ‘answer’ “where each” ‘answer[i][j]’ “is the sum of all elements”
 *   ‘mat[r][c]’ “for”
 *       -  ‘i - k ≤ r ≤ i + k,’
 *       -  ‘j - k ≤ c ≤ j + k’ ,
 *       -  ‘(r, c)’ is a valid position in the matrix.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘m =mat.length’
 *   • ‘n =mat[i].length’
 *   • ‘1 ≤ m, n, k ≤ 100’
 *   • ‘1 ≤ mat[i][j] ≤ 100’
 *
 */

class Solution {
 public:
  vector<vector<int>> matrixBlockSum(vector<vector<int>>& mat, int k) {
    int m = mat.size(),
        n = mat[0].size();
    vector<vector<int>> res(m, vector<int>(n, 0));
    // prefix sum
    for (int i = 0; i < m; ++i)
      for (int j = 1; j < n; ++j)
        mat[i][j] += mat[i][j - 1];

    for (int i = 0; i < m; ++i) {
      int max_row = min(m - 1, i + k),
          min_row = max(0, i - k);
      for (int j = 0; j < n; ++j) {
        int max_col = min(n - 1, j + k),
            min_col = max(0, j - k);
        for (int k = min_row; k <= max_row; ++k)
          res[i][j] += mat[k][max_col];
        if (min_col > 0)
          for (int k = min_row; k <= max_row; ++k)
            res[i][j] -= mat[k][min_col - 1];
      }
    }

    return res;
  }
};
}  // namespace l1314

#endif