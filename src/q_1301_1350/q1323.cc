#include <gtest/gtest.h>
#include <iostream>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1323.
 *       Maximum 69 Number
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given a positive integer ‘num’ consisting only of digits ‘6’
 *   and ‘9’
 *   Return “the maximum number you can get by changing “at most” one digit
 *   (” ‘6’ “ becomes ” ‘9’ “, and ” ‘9’ “ becomes ” ‘6’ “)” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ num ≤ 10⁴’
 *   • ‘num’ consists of only ‘6’ and ‘9’ digits.
 *
 */

struct q1323 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int maximum69Number(int num) {
      int temp = 1;
      while (temp <= num) {
        temp *= 10;
      }
      temp /= 10;
      int res = 0;
      bool changed = false;
      while (num != 0) {
        if (changed == false && num / temp == 6) {
          changed = true;
          res += 9 * temp;
        } else {
          res += (num / temp) * temp;
        }
        num -= (num / temp) * temp;
        temp /= 10;
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1323, sample_input01) {
  solution = new Solution();
  int num = 9669;
  int exp = 9969;
  int act = solution->maximum69Number(num);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1323, sample_input02) {
  solution = new Solution();
  int num = 9996;
  int exp = 9999;
  int act = solution->maximum69Number(num);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1323, sample_input03) {
  solution = new Solution();
  int num = 9999;
  int exp = 9999;
  int act = solution->maximum69Number(num);
  EXPECT_EQ(act, exp);
  delete solution;
}