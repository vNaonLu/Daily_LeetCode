
#ifndef Q1314_UNITTEST_H__
#define Q1314_UNITTEST_H__
#include <gtest/gtest.h>

#include "q1314.hpp"
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1314.
 *       Matrix Block Sum
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a ‘m x n’ matrix ‘mat’ and an integer ‘k’ , return “a matrix”
 *   ‘answer’ “where each” ‘answer[i][j]’ “is the sum of all elements”
 *   ‘mat[r][c]’ “for”
 *       -  ‘i - k ≤ r ≤ i + k,’
 *       -  ‘j - k ≤ c ≤ j + k’ ,
 *       -  ‘(r, c)’ is a valid position in the matrix.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘m =mat.length’
 *   • ‘n =mat[i].length’
 *   • ‘1 ≤ m, n, k ≤ 100’
 *   • ‘1 ≤ mat[i][j] ≤ 100’
 *
 */

TEST(q1314, sample_input01) {
  l1314::Solution solver;
  vector<vector<int>> mat = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
  int k = 1;
  vector<vector<int>> exp = {{12, 21, 16}, {27, 45, 33}, {24, 39, 28}};
  EXPECT_EQ(solver.matrixBlockSum(mat, k), exp);
}

TEST(q1314, sample_input02) {
  l1314::Solution solver;
  vector<vector<int>> mat = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
  int k = 2;
  vector<vector<int>> exp = {{45, 45, 45}, {45, 45, 45}, {45, 45, 45}};
  EXPECT_EQ(solver.matrixBlockSum(mat, k), exp);
}

#endif