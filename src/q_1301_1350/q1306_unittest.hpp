
#ifndef Q1306_UNITTEST_H__
#define Q1306_UNITTEST_H__
#include <gtest/gtest.h>

#include "q1306.hpp"
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1306.
 *       Jump Game III
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an array of non-negative integers ‘arr’ , you are initially
 *   positioned at ‘start’ index of the array. When you are at index ‘i’ ,
 *   you can jumpto ‘i + arr[i]’ or ‘i - arr[i]’ , check if you can reach
 *   to “any” index with value
 *   Notice that you can not jump outside of the array at any time.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ arr.length ≤ 5 × 10⁴’
 *   • ‘0 ≤ arr[i] <arr.length’
 *   • ‘0 ≤ start < arr.length’
 *
 */

TEST(q1306, sample_input01) {
  l1306::Solution solver;
  vector<int> arr = {4, 2, 3, 0, 3, 1, 2};
  int start = 5;
  bool exp = true;
  EXPECT_EQ(solver.canReach(arr, start), exp);
}

TEST(q1306, sample_input02) {
  l1306::Solution solver;
  vector<int> arr = {4, 2, 3, 0, 3, 1, 2};
  int start = 0;
  bool exp = true;
  EXPECT_EQ(solver.canReach(arr, start), exp);
}

TEST(q1306, sample_input03) {
  l1306::Solution solver;
  vector<int> arr = {3, 0, 2, 1, 2};
  int start = 2;
  bool exp = false;
  EXPECT_EQ(solver.canReach(arr, start), exp);
}

#endif