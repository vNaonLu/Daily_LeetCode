#include <gtest/gtest.h>
#include <iostream>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1309.
 *       Decrypt String from Alphabet to Integer Mapping
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given a string ‘s’ formed by digits and ‘'#'’ . We want to map
 *   ‘s’ to English lowercase characters as
 *       - Characters ( ‘'a'’ to ‘'i')’ are represented by ( ‘'1'’ to ‘'9'’
 *   )
 *       - Characters ( ‘'j'’ to ‘'z')’ are represented by ( ‘'10#'’ to
 *   ‘'26#'’ )
 *   Return “the string formed after mapping”
 *   The test cases are generated so that a unique mapping will always
 *   exist.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s.length ≤ 1000’
 *   • ‘s’ consists of digits and the ‘'#'’ letter.
 *   • ‘s’ will be a valid string such that mapping is always possible.
 *
 */

struct q1309 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    string freqAlphabets(string s) {
      string res;
      for (int i = s.size() - 1; i >= 0; --i) {
        if (s[i] == '#') {
          res.push_back(stoi(s.substr(i - 2, 2)) - 10 + 'j');
          -- --i;
        } else {
          res.push_back(s[i] - '1' + 'a');
        }
      }
      reverse(res.begin(), res.end());

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1309, sample_input01) {
  solution = new Solution();
  string s = "10#11#12";
  string exp = "jkab";
  string act = solution->freqAlphabets(s);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1309, sample_input02) {
  solution = new Solution();
  string s = "1326#";
  string exp = "acz";
  string act = solution->freqAlphabets(s);
  EXPECT_EQ(act, exp);
  delete solution;
}