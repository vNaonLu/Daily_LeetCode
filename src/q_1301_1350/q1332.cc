// Copyright 2023 Naon Lu
//
// This file describes the solution of
// Remove Palindromic Subsequences
//
// https://leetcode.com/problems/remove-palindromic-subsequences/
//
// Question ID: 1332
// Difficult  : Easy
// Solve Date : 2022/06/08 18:02

#include <iosfwd>
#include <string>

// -- This header must be included after others --
#include "leetcode/testing/solution_test_helper.h"

using namespace std;
using namespace lcd;

// Description of |1332. Remove Palindromic Subsequences|:
//
// You are given a string |s| consisting only of letters |'a'| and |'b'|. In a
// single step you can remove one palindromic subsequence from |s|. Return the
// minimum number of steps to make the given string empty. A string is a
// subsequence of a given string if it is generated by deleting some characters
// of a given string without changing its order. Note that a subsequence does
// not necessarily need to be contiguous. A string is called palindrome if is
// one that reads the same backward as well as forward.
//

LEETCODE_BEGIN_RESOLVING(1332, RemovePalindromicSubsequences, Solution);

class Solution {
public:
  int removePalindromeSub(string s) {
    int l = 0, r = s.size() - 1;
    while (l < r) {
      if (s[l++] != s[r--]) {
        return 2;
      }
    }

    return 1;
  }
};

LEETCODE_END_RESOLVING(Solution);

///////////////////////////////////////////////////////////////////////////////
// The following is test data for unit test.
// Note that inputs should be obey the constraints mentioned in LeetCode:
// * |1 <= s.length <= 1000|
// * |s[i]| is either |'a'| or |'b'|.
///////////////////////////////////////////////////////////////////////////////

// [Example #1]
//  Input: s = "ababa"
// Output: 1
//
// s is already a palindrome, so its entirety can be removed in a single step.

LEETCODE_SOLUTION_UNITTEST(1332, RemovePalindromicSubsequences, example_1) {
  auto   solution = MakeSolution();
  string s        = "ababa";
  int    expect   = 1;
  int    actual   = solution->removePalindromeSub(s);
  LCD_EXPECT_EQ(expect, actual);
}

// [Example #2]
//  Input: s = "abb"
// Output: 2
//
// "abb" -> "bb" -> "".
// Remove palindromic subsequence "a" then "bb".

LEETCODE_SOLUTION_UNITTEST(1332, RemovePalindromicSubsequences, example_2) {
  auto   solution = MakeSolution();
  string s        = "abb";
  int    expect   = 2;
  int    actual   = solution->removePalindromeSub(s);
  LCD_EXPECT_EQ(expect, actual);
}

// [Example #3]
//  Input: s = "baabb"
// Output: 2
//
// "baabb" -> "b" -> "".
// Remove palindromic subsequence "baab" then "b".

LEETCODE_SOLUTION_UNITTEST(1332, RemovePalindromicSubsequences, example_3) {
  auto   solution = MakeSolution();
  string s        = "baabb";
  int    expect   = 2;
  int    actual   = solution->removePalindromeSub(s);
  LCD_EXPECT_EQ(expect, actual);
}
