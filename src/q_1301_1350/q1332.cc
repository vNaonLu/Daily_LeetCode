#include <gtest/gtest.h>
#include <iostream>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1332.
 *       Remove Palindromic Subsequences
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given a string ‘s’ consisting “only” of letters ‘'a'’ and
 *   ‘'b'’ . In a single step you can remove one “palindromic subsequence”
 *   from ‘s’
 *   Return “the “minimum” number of steps to make the given string empty”
 *   A string is a “subsequence” of a given string if it is generated by
 *   deleting some characters of a given string without changing its order.
 *   Note that a subsequence does “not” necessarily need to be
 *   A string is called “palindrome” if is one that reads the same backward
 *   as well as forward.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s.length ≤ 1000’
 *   • ‘s[i]’ is either ‘'a'’ or ‘'b'’ .
 *
 */

struct q1332 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int removePalindromeSub(string s) {
      int l = 0, r = s.size() - 1;
      while (l < r) {
        if (s[l++] != s[r--]) {
          return 2;
        }
      }

      return 1;
    }
  };

  class Solution *solution;
};

TEST_F(q1332, sample_input01) {
  solution = new Solution();
  string s = "ababa";
  int exp = 1;
  int act = solution->removePalindromeSub(s);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1332, sample_input02) {
  solution = new Solution();
  string s = "abb";
  int exp = 2;
  int act = solution->removePalindromeSub(s);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1332, sample_input03) {
  solution = new Solution();
  string s = "baabb";
  int exp = 2;
  int act = solution->removePalindromeSub(s);
  EXPECT_EQ(act, exp);
  delete solution;
}