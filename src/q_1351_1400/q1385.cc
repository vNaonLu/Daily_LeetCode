#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1385.
 *       Find the Distance Value Between Two Arrays
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given two integer arrays ‘arr1’ and ‘arr2’ , and the integer ‘d’ ,
 *   “return the distance value between the two arrays”
 *   The distance value is defined as the number of elements ‘arr1[i]’ such
 *   that there is not any element ‘arr2[j]’ where ‘|arr1[i]-arr2[j]| ≤ d’ 
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ arr1.length, arr2.length ≤ 500’
 *   • ‘-1000 ≤ arr1[i], arr2[j] ≤ 1000’
 *   • ‘0 ≤ d ≤ 100’
 *
 */

struct q1385 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int findTheDistanceValue(vector<int>& arr1, vector<int>& arr2, int d) {
      int m = arr1.size(), n = arr2.size();
      int res = m;
      sort(arr2.begin(), arr2.end());
      for (auto& x : arr1) {
        int l = 0, r = n - 1;
        int lb = x - d, rb = x + d;

        while (l <= r) {
          int m = l + (r - l) / 2;
          if (arr2[m] < lb) {
            l = m + 1;
          } else if (arr2[m] > rb) {
            r = m - 1;
          } else {
            --res;
            break;
          }
        }
      }

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1385, sample_input01) {
  solution = new Solution();
  vector<int> arr1 = {4, 5, 8};
  vector<int> arr2 = {10, 9, 1, 8};
  int d = 2;
  int exp = 2;
  int act = solution->findTheDistanceValue(arr1, arr2, d);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1385, sample_input02) {
  solution = new Solution();
  vector<int> arr1 = {1, 4, 2, 3};
  vector<int> arr2 = {-4, -3, 6, 10, 20, 30};
  int d = 3;
  int exp = 2;
  int act = solution->findTheDistanceValue(arr1, arr2, d);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1385, sample_input03) {
  solution = new Solution();
  vector<int> arr1 = {2, 1, 100, 3};
  vector<int> arr2 = {-5, -2, 10, -3, 7};
  int d = 6;
  int exp = 1;
  int act = solution->findTheDistanceValue(arr1, arr2, d);
  EXPECT_EQ(act, exp);
  delete solution;
}