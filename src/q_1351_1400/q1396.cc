#include <gtest/gtest.h>
#include <iostream>
#include <unordered_map>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1396.
 *       Design Underground System
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   An underground railway system is keeping track of customer travel
 *   times between different stations. They are using this data to
 *   calculate the average time it takes to travel from one station to
 *   Implement the ‘UndergroundSystem’
 *       -  ‘void checkIn(int id, string stationName, int t)’
 *           - A customer with a card ID equal to ‘id’ , checks in at the
 *   station ‘stationName’ at time ‘t’
 *           - A customer can only be checked into one place at a
 *      
 *       -  ‘void checkOut(int id, string stationName, int t)’
 *           - A customer with a card ID equal to ‘id’ , checks out from
 *   the station ‘stationName’ at time ‘t’
 *      
 *       -  ‘double getAverageTime(string startStation, string endStation)’
 *           - Returns the average time it takes to travel from
 *   ‘startStation’ to ‘endStation’
 *           - The average time is computed from all the previous traveling
 *   times from ‘startStation’ to ‘endStation’ that happened “directly” ,
 *   meaning a check in at ‘startStation’ followed by a check out from
 *   ‘endStation’
 *           - The time it takes to travel from ‘startStation’ to
 *   ‘endStation’ “may be different” from the time it takes to travel from
 *   ‘endStation’ to ‘startStation’
 *           - There will be at least one customer that has traveled from
 *   ‘startStation’ to ‘endStation’ before ‘getAverageTime’ is
 *      
 *   You may assume all calls to the ‘checkIn’ and ‘checkOut’ methods are
 *   consistent. If a customer checks in at time ‘t₁’ then checks out at
 *   time ‘t₂’ , then ‘t₁ < t₂’ . All events happen in chronological order.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ id, t ≤ 10⁶’
 *   • ‘1 ≤ stationName.length, startStation.length, endStation.length ≤ 10’
 *   • All strings consist of uppercase and lowercase English letters and digits.
 *   • There will be at most ‘2 × 10⁴’ calls “in total” to ‘checkIn’ , ‘checkOut’ , and ‘getAverageTime’ .
 *   • Answers within ‘10⁻⁵’ of the actual value will be accepted.
 *
 */

struct q1396 : public ::testing::Test {
  // Leetcode answer here
  class UndergroundSystem {
   private:
    unordered_map<string, unordered_map<string, pair<int, int>>> station_count;
    unordered_map<int, pair<string, int>> person;

   public:
    UndergroundSystem() {
    }

    void checkIn(int id, string stationName, int t) {
      person.emplace(id, make_pair(stationName, t));
    }

    void checkOut(int id, string stationName, int t) {
      auto x = person.find(id);
      if (x != person.end()) {
        auto &map = station_count[x->second.first];
        auto &[time, cnt] = map[stationName];
        time += t - x->second.second;
        ++cnt;
        person.erase(x);
      }
    }

    double getAverageTime(string startStation, string endStation) {
      auto start_find = station_count.find(startStation);
      if (start_find != station_count.end()) {
        auto end_find = start_find->second.find(endStation);
        if (end_find != start_find->second.end()) {
          auto &[t, cnt] = end_find->second;

          return (double)t / (double)cnt;
        }
      }

      return 0.0;
    }
  };

  class UndergroundSystem *underground_system;
};

TEST_F(q1396, sample_input01) {
  underground_system = new UndergroundSystem();
  underground_system->checkIn(45, "Leyton", 3);
  underground_system->checkIn(32, "Paradise", 8);
  underground_system->checkIn(27, "Leyton", 10);
  underground_system->checkOut(45, "Waterloo", 15);
  underground_system->checkOut(27, "Waterloo", 20);
  underground_system->checkOut(32, "Cambridge", 22);
  EXPECT_DOUBLE_EQ(underground_system->getAverageTime("Paradise", "Cambridge"), 14.00000);
  EXPECT_DOUBLE_EQ(underground_system->getAverageTime("Leyton", "Waterloo"), 11.00000);
  underground_system->checkIn(10, "Leyton", 24);
  EXPECT_DOUBLE_EQ(underground_system->getAverageTime("Leyton", "Waterloo"), 11.00000);
  underground_system->checkOut(10, "Waterloo", 38);
  EXPECT_DOUBLE_EQ(underground_system->getAverageTime("Leyton", "Waterloo"), 12.00000);
  delete underground_system;
}

TEST_F(q1396, sample_input02) {
  underground_system = new UndergroundSystem();
  underground_system->checkIn(10, "Leyton", 3);
  underground_system->checkOut(10, "Paradise", 8);
  EXPECT_DOUBLE_EQ(underground_system->getAverageTime("Leyton", "Paradise"), 5.00000);
  underground_system->checkIn(5, "Leyton", 10);
  underground_system->checkOut(5, "Paradise", 16);
  EXPECT_DOUBLE_EQ(underground_system->getAverageTime("Leyton", "Paradise"), 5.50000);
  underground_system->checkIn(2, "Leyton", 21);
  underground_system->checkOut(2, "Paradise", 30);
  EXPECT_DOUBLE_EQ(underground_system->getAverageTime("Leyton", "Paradise"), 6.666666666666667);
  delete underground_system;
}