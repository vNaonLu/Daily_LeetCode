#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1359.
 *       Count All Valid Pickup and Delivery Options
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given ‘n’ orders, each order consist in pickup and delivery
 *   Count all valid pickup/delivery possible sequences such that
 *   delivery(i) is always after
 *   Since the answermay be too large,return it modulo10^9 + 7.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ n ≤ 500’
 *
 */

struct q1359 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    constexpr static int kMod = 1e9 + 7;
    vector<vector<int>> memo;
    int helper(long unpicked, long undelivered) {
      if (unpicked == 0 && undelivered == 0) {
        return 1;
      }

      if (unpicked < 0 || undelivered < 0 || undelivered < unpicked) {
        return 0;
      }

      if (memo[unpicked][undelivered]) {
        return memo[unpicked][undelivered];
      }

      long res = 0;
      res += unpicked * helper(unpicked - 1, undelivered);
      res %= kMod;
      res += (undelivered - unpicked) * helper(unpicked, undelivered - 1);
      res %= kMod;
      return memo[unpicked][undelivered] = res;
    }

   public:
    int countOrders(int n) {
      memo.resize(n + 1, vector<int>(n + 1, 0));
      return helper(n, n);
    }
  };

  class Solution *solution;
};

TEST_F(q1359, sample_input01) {
  solution = new Solution();
  int n = 1;
  int exp = 1;
  int act = solution->countOrders(n);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1359, sample_input02) {
  solution = new Solution();
  int n = 2;
  int exp = 6;
  int act = solution->countOrders(n);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1359, sample_input03) {
  solution = new Solution();
  int n = 3;
  int exp = 90;
  int act = solution->countOrders(n);
  EXPECT_EQ(act, exp);
  delete solution;
}