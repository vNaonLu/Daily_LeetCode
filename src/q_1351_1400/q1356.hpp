
#ifndef LEETCODE_Q1356_H__
#define LEETCODE_Q1356_H__
#include <iostream>
#include <vector>

namespace l1356 {
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 1356.
  *       Sort Integers by The Number of 1 Bits
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given an integer array ‘arr’ . You have to sort the integers in the
  *   arrayin ascending order by the number of “1's” in their binary
  *   representation and in case of two or more integers have the same
  *   number of “1's” you have to sort them in ascending order.
  *   
  *   Return “the sorted array”.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘1 ≤ arr.length ≤ 500’
  *   • ‘0 ≤ arr[i] ≤ 10^4’
  *
*/

class Solution {
 public:
  vector<int> sortByBits(vector<int> &arr) {
    sort(arr.begin(), arr.end(), [](const int &a, const int &b) {
      int x = __builtin_popcount(a),
          y = __builtin_popcount(b);
      return x == y ? a < b : x < y;
    });
    return arr;
  }
};
}  // namespace l1356

#endif