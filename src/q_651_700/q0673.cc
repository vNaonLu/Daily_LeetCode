#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 673.
 *      Number of Longest Increasing Subsequence
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an integer array ‘nums’ , return “the number of longest
 *   increasing subsequences.”
 *    “Notice” that the sequence has to be “strictly” increasing.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 2000’
 *   • ‘-10⁶ ≤ nums[i] ≤ 10⁶’
 *
 */

struct q673 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int findNumberOfLIS(vector<int>& nums) {
      int n = nums.size();
      vector<pair<int, int>> dp(n, make_pair(1, 1));     int mx = 1;
      for (int i = 0; i < n; i++) {
        for (int j = 0; j < i; j++) {
          if (nums[i] > nums[j]) {
            int p = dp[i].first;
            dp[i].first = max(dp[i].first, 1 + dp[j].first);
            if (p != dp[i].first) {
              dp[i].second = dp[j].second;
            } else if (dp[i].first == 1 + dp[j].first) {
              dp[i].second += dp[j].second;
            }
            mx = max(mx, dp[i].first);
          }
        }
      }
      int res = 0;
      for (auto i : dp) {
        if (i.first == mx) res += i.second;
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q673, sample_input01) {
  solution = new Solution();
  vector<int> nums = {1, 3, 5, 4, 7};
  int exp = 2;
  EXPECT_EQ(solution->findNumberOfLIS(nums), exp);
  delete solution;
}

TEST_F(q673, sample_input02) {
  solution = new Solution();
  vector<int> nums = {2, 2, 2, 2, 2};
  int exp = 5;
  EXPECT_EQ(solution->findNumberOfLIS(nums), exp);
  delete solution;
}