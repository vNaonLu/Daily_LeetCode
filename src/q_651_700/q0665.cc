#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 665.
 *      Non-decreasing Array
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an array ‘nums’ with ‘n’ integers, your task is to check if it
 *   could become non-decreasing by modifying “at most one element”
 *   We define an array is non-decreasing if ‘nums[i] ≤ nums[i + 1]’ holds
 *   for every ‘i’ ( “0-based” ) such that ( ‘0 ≤ i ≤ n - 2’ ).
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘n = nums.length’
 *   • ‘1 ≤ n ≤ 10⁴’
 *   • ‘-10⁵ ≤ nums[i] ≤ 10⁵’
 *
 */

struct q665 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    bool checkPossibility(vector<int> &nums) {
      int cnt = 0;
      for (int i = 1; i < nums.size(); ++i) {
        if (nums[i - 1] > nums[i]) {
          if (++cnt > 1) {
            return false;
          }
          if (i == 1 || nums[i - 2] <= nums[i]) {
            nums[i - 1] = nums[i];
          } else {
            nums[i] = nums[i - 1];
          }
        }
      }
      return true;
    }
  };

  class Solution *solution;
};

TEST_F(q665, sample_input01) {
  solution = new Solution();
  vector<int> nums = {4, 2, 3};
  bool exp = true;
  bool act = solution->checkPossibility(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q665, sample_input02) {
  solution = new Solution();
  vector<int> nums = {4, 2, 1};
  bool exp = false;
  bool act = solution->checkPossibility(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}