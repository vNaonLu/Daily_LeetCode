
#ifndef LEETCODE_Q653_H__
#define LEETCODE_Q653_H__
#include <iostream>
#include <leetcode/treenode.hpp>
#include <set>

namespace l653 {
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 653. Two Sum IV - Input is a BST
  *
  * Given the root of a Binary Search Tree and a
  * target number k , return true if there exist two
  * elements in the BST such that their sum is equal to the
  * given target .
  *
  * Constraints:
  * - The number of nodes in the tree is in the range [1, 10^(4)] .
  * -  -10^(4)<= Node.val <= 10^(4) 
  * -  root is guaranteed to be a “valid“ binary search tree.
  * -  -10^(5)<= k <= 10^(5) 
  *
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
 private:
  set<int> nums;

 public:
  bool findTarget(TreeNode* root, int k) {
    if (root == nullptr) {
      return false;
    } else {
      if (nums.count(k - root->val)) {
        return true;
      } else {
        nums.insert(root->val);
        return findTarget(root->left, k) || findTarget(root->right, k);
      }
    }
  }
};
}  // namespace l653
#endif