
#ifndef LEETCODE_Q673_H__
#define LEETCODE_Q673_H__
#include <iostream>
#include <vector>

namespace l673 {
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 673.
  *      Number of Longest Increasing Subsequence
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given an integer array ‘nums’ , return “the number of longest
  *   increasing subsequences.”.
  *   
  *   “Notice” that the sequence has to be “strictly” increasing.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘1 ≤ nums.length ≤ 2000’
  *   • ‘-10⁶ ≤ nums[i] ≤ 10⁶’
  *
*/

class Solution {
 public:
  int findNumberOfLIS(vector<int>& nums) {
    int n = nums.size();
    vector<pair<int, int>> dp(n, make_pair(1, 1)); // length, cnt
    int mx = 1;
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < i; j++) {
        if (nums[i] > nums[j]) {
          int p = dp[i].first;
          dp[i].first = max(dp[i].first, 1 + dp[j].first);
          if (p != dp[i].first) {
            dp[i].second = dp[j].second;
          } else if (dp[i].first == 1 + dp[j].first) {
            dp[i].second += dp[j].second;
          }
          mx = max(mx, dp[i].first);
        }
      }
    }
    int res = 0;
    for (auto i : dp) {
      if (i.first == mx) res += i.second;
    }
    return res;
  }
};
}  // namespace l673

#endif