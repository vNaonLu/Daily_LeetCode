
#ifndef Q698_UNITTEST_H__
#define Q698_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0698.hpp"
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 698.
  *      Partition to K Equal Sum Subsets
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given an integer array ‘nums’ and an integer ‘k’ , return ‘true’ if it
  *   is possible to divide this array into ‘k’ non-empty subsets whose sums
  *   are all equal.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘1 ≤ k ≤ nums.length ≤ 16’
  *   • ‘1 ≤ nums[i] ≤ 10⁴’
  *   • The frequency of each element is in the range ‘[1, 4]’ .
  *
*/

TEST(q698, sample_input01) {
  l698::Solution solver;
  vector<int> nums = {4, 3, 2, 3, 5, 2, 1};
  int k = 4;
  bool exp = true;
  EXPECT_EQ(solver.canPartitionKSubsets(nums, k), exp);
}

TEST(q698, sample_input02) {
  l698::Solution solver;
  vector<int> nums = {1, 2, 3, 4};
  int k = 3;
  bool exp = false;
  EXPECT_EQ(solver.canPartitionKSubsets(nums, k), exp);
}

#endif