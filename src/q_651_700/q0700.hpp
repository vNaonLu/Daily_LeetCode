
#ifndef LEETCODE_Q700_H__
#define LEETCODE_Q700_H__
#include <iostream>
#include <leetcode/treenode.hpp>

namespace l700 {
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 700. Search in a Binary Search Tree
  *
  * You are given the root of a binary search tree
  * (BST) and an integer val .
  * Find the node in the BST that the node';s value
  * equals val and return the subtree rooted with that
  * node. If such a node does not exist, return null .
  *
  * Constraints:
  * - The number of nodes in the tree is in the range [1, 5000] .
  * -  1 <= Node.val <= 10^(7) 
  * -  root is a binary search tree.
  * -  1 <= val <= 10^(7) 
  *
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
 public:
  TreeNode* searchBST(TreeNode* root, int val) {
    while (root != nullptr && root->val != val) {
      if (root->val > val) {
        root = root->left;
      } else if (root->val < val) {
        root = root->right;
      }
    }
    return root;
  }
};
}  // namespace l700
#endif