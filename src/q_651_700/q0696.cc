#include <gtest/gtest.h>
#include <iostream>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 696.
 *      Count Binary Substrings
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a binary string ‘s’ , return the number of non-empty substrings
 *   that have the same number of ‘0’ 's and ‘1’ 's, and all the ‘0’ 's and
 *   all the ‘1’ 's in these substrings are grouped
 *   Substrings that occur multiple times are counted the number of times
 *   they occur.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s.length ≤ 10⁵’
 *   • ‘s[i]’ is either ‘'0'’ or ‘'1'’ .
 *
 */

struct q696 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int countBinarySubstrings(string s) {
      auto res      = (int)0;
      auto prev_cnt = (int)0;
      auto curr_cnt = (int)1;

      for (int i = 1; i < s.size(); ++i) {
        if (s[i] == s[i - 1]) {
          ++curr_cnt;
        } else {
          res += min(curr_cnt, prev_cnt);
          prev_cnt = curr_cnt;
          curr_cnt = 1;
        }
      }

      res += min(curr_cnt, prev_cnt);
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q696, sample_input01) {
  solution   = new Solution();
  string s   = "00110011";
  int    exp = 6;
  int    act = solution->countBinarySubstrings(s);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q696, sample_input02) {
  solution   = new Solution();
  string s   = "10101";
  int    exp = 4;
  int    act = solution->countBinarySubstrings(s);
  EXPECT_EQ(act, exp);
  delete solution;
}