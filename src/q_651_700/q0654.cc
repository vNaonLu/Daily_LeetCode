#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/treenode.hpp>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 654.
 *      Maximum Binary Tree
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an integer array ‘nums’ with no duplicates. A “maximum
 *   binary tree” can be built recursively from ‘nums’ using the following
 *       1. Create a root node whose value is the maximum value in ‘nums’
 *       2. Recursively build the left subtree on the “subarray prefix” to
 *   the “left” of the maximum
 *       3. Recursively build the right subtree on the “subarray suffix” to
 *   the “right” of the maximum
 *   Return “the “maximum binary tree” built from ” ‘nums’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 1000’
 *   • ‘0 ≤ nums[i] ≤ 1000’
 *   • All integers in ‘nums’ are “unique” .
 *
 */

struct q654 : public ::testing::Test {
  // Leetcode answer here
  /**
   * Definition for a binary tree node.
   * struct TreeNode {
   *     int val;
   *     TreeNode *left;
   *     TreeNode *right;
   *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
   *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
   *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
   * };
   */
  class Solution {
   private:
    template <typename Iter>
    TreeNode* buildTree(Iter curr, Iter beg, Iter end) {
      if (curr == end) {
        return nullptr;
      }

      auto left = buildTree(max_element(beg, curr), beg, curr),
           right = buildTree(max_element(curr + 1, end), curr + 1, end);

      return new TreeNode(*curr, left, right);
    }

   public:
    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
      return buildTree(max_element(nums.begin(), nums.end()), nums.begin(), nums.end());
    }
  };

  class Solution *solution;
};

TEST_F(q654, sample_input01) {
  solution = new Solution();
  vector<int> nums = {3, 2, 1, 6, 0, 5};
  TreeNode* exp = TreeNode::generate({6, 3, 5, NULL_TREENODE, 2, 0, NULL_TREENODE, NULL_TREENODE, 1});
  TreeNode* act = solution->constructMaximumBinaryTree(nums);
  EXPECT_TREENODE_EQ(act, exp);
  TreeNode::release(exp, act);
  delete solution;
}

TEST_F(q654, sample_input02) {
  solution = new Solution();
  vector<int> nums = {3, 2, 1};
  TreeNode* exp = TreeNode::generate({3, NULL_TREENODE, 2, NULL_TREENODE, 1});
  TreeNode* act = solution->constructMaximumBinaryTree(nums);
  EXPECT_TREENODE_EQ(act, exp);
  TreeNode::release(exp, act);
  delete solution;
}