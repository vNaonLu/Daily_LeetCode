#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/treenode.hpp>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 700.
 *      Search in a Binary Search Tree
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given the ‘root’ of a binary search tree (BST) and an integer
 *   ‘val’
 *   Find the node in the BST that the node's value equals ‘val’ and return
 *   the subtree rooted with that node. If such a node does not exist,
 *   return ‘null’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The number of nodes in the tree is in the range ‘[1, 5000]’ .
 *   • ‘1 ≤ Node.val ≤ 10⁷’
 *   • ‘root’ is a binary search tree.
 *   • ‘1 ≤ val ≤ 10⁷’
 *
 */

struct q700 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    TreeNode* searchBST(TreeNode* root, int val) {
      while (root != nullptr && root->val != val) {
        if (root->val > val) {
          root = root->left;
        } else if (root->val < val) {
          root = root->right;
        }
      }
      return root;
    }
  };

  class Solution *solution;
};

TEST_F(q700, sample_input01) {
  solution = new Solution();
  TreeNode* root = TreeNode::generate({4, 2, 7, 1, 3});
  int val = 2;
  TreeNode* exp = TreeNode::generate({2, 1, 3});
  EXPECT_TREENODE_EQ(solution->searchBST(root, val), exp);
  delete solution;
}

TEST_F(q700, sample_input02) {
  solution = new Solution();
  TreeNode* root = TreeNode::generate({4, 2, 7, 1, 3});
  int val = 5;
  TreeNode* exp = TreeNode::generate({});
  EXPECT_TREENODE_EQ(solution->searchBST(root, val), exp);
  delete solution;
}