
#ifndef Q653_UNITTEST_H__
#define Q653_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0653.hpp"
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 653. Two Sum IV - Input is a BST
  *
  * Given the root of a Binary Search Tree and a
  * target number k , return true if there exist two
  * elements in the BST such that their sum is equal to the
  * given target .
  *
  * Constraints:
  * - The number of nodes in the tree is in the range [1, 10^(4)] .
  * -  -10^(4)<= Node.val <= 10^(4) 
  * -  root is guaranteed to be a “valid“ binary search tree.
  * -  -10^(5)<= k <= 10^(5) 
  *
*/

TEST(q653, sample_input01) {
  TreeNode *root = TreeNode::generate({5, 3, 6, 2, 4, NULL_TREENODE, 7});
  int k = 9;
  bool exp = true;
  l653::Solution solver;
  EXPECT_EQ(solver.findTarget(root, k), exp);
}

TEST(q653, sample_input02) {
  TreeNode *root = TreeNode::generate({5, 3, 6, 2, 4, NULL_TREENODE, 7});
  int k = 28;
  bool exp = false;
  l653::Solution solver;
  EXPECT_EQ(solver.findTarget(root, k), exp);
}

TEST(q653, sample_input03) {
  TreeNode *root = TreeNode::generate({2, 1, 3});
  int k = 4;
  bool exp = true;
  l653::Solution solver;
  EXPECT_EQ(solver.findTarget(root, k), exp);
}

TEST(q653, sample_input04) {
  TreeNode *root = TreeNode::generate({2, 1, 3});
  int k = 1;
  bool exp = false;
  l653::Solution solver;
  EXPECT_EQ(solver.findTarget(root, k), exp);
}

TEST(q653, sample_input05) {
  TreeNode *root = TreeNode::generate({2, 1, 3});
  int k = 3;
  bool exp = true;
  l653::Solution solver;
  EXPECT_EQ(solver.findTarget(root, k), exp);
}

#endif