#include <algorithm>
#include <gtest/gtest.h>
#include <iostream>
#include <unordered_map>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 697.
 *      Degree of an Array
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a non-empty array of non-negative integers ‘nums’ , the “degree”
 *   of this array is defined as the maximum frequency of any one of its
 *   Your task is to find the smallest possible length of a (contiguous)
 *   subarray of ‘nums’ , that has the same degree as ‘nums’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘nums.length’ will be between 1 and 50,000.
 *   • ‘nums[i]’ will be an integer between 0 and 49,999.
 *
 */

struct q697 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int findShortestSubArray(vector<int> &nums) {
      auto left  = unordered_map<int, int>();
      auto right = unordered_map<int, int>();
      auto count = unordered_map<int, int>();
      for (int i = 0; i < nums.size(); ++i) {
        auto x = nums[i];
        if (!left.count(x)) {
          left[x] = i;
        }
        right[x] = i;
        ++count[x];
      }

      auto res = (int)nums.size();
      auto degree =
          max_element(count.begin(), count.end(), [](auto &x, auto &y) {
            return x.second < y.second;
          })->second;
      for (auto [x, c] : count) {
        if (c == degree) {
          res = min(res, right[x] - left[x] + 1);
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q697, sample_input01) {
  solution         = new Solution();
  vector<int> nums = {1, 2, 2, 3, 1};
  int         exp  = 2;
  int         act  = solution->findShortestSubArray(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q697, sample_input02) {
  solution         = new Solution();
  vector<int> nums = {1, 2, 2, 3, 1, 4, 2};
  int         exp  = 6;
  int         act  = solution->findShortestSubArray(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}