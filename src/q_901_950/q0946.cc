#include <gtest/gtest.h>
#include <iostream>
#include <stack>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 946.
 *      Validate Stack Sequences
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given two integer arrays ‘pushed’ and ‘popped’ each with distinct
 *   values, return ‘true’ “ if this could have been the result of a
 *   sequence of push and pop operations on an initially empty stack, or ”
 *   ‘false’ “ otherwise.” 
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ pushed.length ≤ 1000’
 *   • ‘0 ≤ pushed[i] ≤ 1000’
 *   • All the elements of ‘pushed’ are “unique” .
 *   • ‘popped.length = pushed.length’
 *   • ‘popped’ is a permutation of ‘pushed’ .
 *
 */

struct q946 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    bool validateStackSequences(vector<int>& pushed, vector<int>& popped) {
      stack<int> test;
      int pui = 0, poi = 0;
      while (pui < pushed.size() && poi < popped.size()) {
        if (!test.empty() && test.top() == popped[poi]) {
          test.pop();
          ++poi;
        } else {
          test.push(pushed[pui++]);
        }
      }
      while (!test.empty() && poi < popped.size()) {
        if (test.top() != popped[poi]) return false;
        test.pop();
        ++poi;
      }
      return test.empty();
    }
  };

  class Solution *solution;
};

TEST_F(q946, sample_input01) {
  solution = new Solution();
  vector<int> pushed = {1, 2, 3, 4, 5};
  vector<int> popped = {4, 5, 3, 2, 1};
  bool exp = true;
  EXPECT_EQ(solution->validateStackSequences(pushed, popped), exp);
  delete solution;
}

TEST_F(q946, sample_input02) {
  solution = new Solution();
  vector<int> pushed = {1, 2, 3, 4, 5};
  vector<int> popped = {4, 3, 5, 1, 2};
  bool exp = false;
  EXPECT_EQ(solution->validateStackSequences(pushed, popped), exp);
  delete solution;
}