
#ifndef LEETCODE_Q931_H__
#define LEETCODE_Q931_H__
#include <iostream>
#include <limits>
#include <vector>

namespace l931 {
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 931.
 *      Minimum Falling Path Sum
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an ‘n x n’ array of integers ‘matrix’ , return “the “minimum
 *   sum” of any “falling path” through” ‘matrix’
 *   A “falling path” starts at any element in the first row and chooses
 *   the element in the next row that is either directly below or
 *   diagonally left/right. Specifically, the next element from position
 *   ‘(row, col)’ will be ‘(row + 1, col - 1)’ , ‘(row + 1, col)’ , or
 *   ‘(row + 1, col + 1)’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘n = matrix.length’
 *   • ‘n = matrix[i].length’
 *   • ‘1 ≤ n ≤ 100’
 *   • ‘-100 ≤ matrix[i][j] ≤ 100’
 *
 */

class Solution {
 private:
  vector<vector<int>> dp;
  int helper(const vector<vector<int>>& m, int col, int row) {
    if (row >= m.size()) return 0;
    if (dp[row][col] == numeric_limits<int>::max()) {
      if (col == 0) {
        dp[row][col] = m[row][col] + min(helper(m, col, row + 1), helper(m, col + 1, row + 1));
      } else if (col == m.size() - 1) {
        dp[row][col] = m[row][col] + min(helper(m, col - 1, row + 1), helper(m, col, row + 1));
      } else {
        dp[row][col] = m[row][col] + min({helper(m, col - 1, row + 1),
                                          helper(m, col, row + 1),
                                          helper(m, col + 1, row + 1)});
      }
    }
    return dp[row][col];
  }

 public:
  int minFallingPathSum(vector<vector<int>>& matrix) {
    dp.resize(matrix.size(), vector<int>(matrix.size(),
                                         numeric_limits<int>::max()));
    int res = numeric_limits<int>::max();
    for (int i = 0; i < matrix.size(); ++i) {
      res = min(res, helper(matrix, i, 0));
    }
    return res;
  }
};
}  // namespace l931

#endif