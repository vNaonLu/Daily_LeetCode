#include <gtest/gtest.h>
#include <cmath>
#include <iostream>
#include <string>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 902.
 *      Numbers At Most N Given Digit Set
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an array of ‘digits’ which is sorted in “non-decreasing” order.
 *   You can write numbers using each ‘digits[i]’ as many times as we want.
 *   For example, if ‘digits = ['1','3','5']’ , we may write numbers such
 *   as ‘'13'’ , ‘'551'’ , and ‘'1351315'’
 *   Return “the number of positive integers that can be generated ” that
 *   are less than or equal to a given integer ‘n’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ digits.length ≤ 9’
 *   • ‘digits[i].length = 1’
 *   • ‘digits[i]’ is a digit from ‘'1'’ to ‘'9'’ .
 *   • All the values in ‘digits’ are “unique” .
 *   • ‘digits’ is sorted in “non-decreasing” order.
 *   • ‘1 ≤ n ≤ 10⁹’
 *
 */

struct q902 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int atMostNGivenDigitSet(vector<string>& digits, int n) {
      string      s = to_string(n);
      int         m = s.size();
      vector<int> dp(m + 1, 0); dp.back() = 1;
      for (int i = m - 1; i >= 0; --i) {
        int character = s[i] - '0';
        for (string d : digits) {
          if (stoi(d) < character)       dp[i] += pow(digits.size(), m - i - 1);
          else if (stoi(d) == character) dp[i] += dp[i + 1];
        }
      }
      for (int i = 1; i < m; ++i) dp[0] += pow(digits.size(), i);
      return dp.front();
    }
  };

  class Solution *solution;
};

TEST_F(q902, sample_input01) {
  solution = new Solution();
  vector<string> digits = {"1", "3", "5", "7"};
  int n = 100;
  int exp = 20;
  EXPECT_EQ(solution->atMostNGivenDigitSet(digits, n), exp);
  delete solution;
}

TEST_F(q902, sample_input02) {
  solution = new Solution();
  vector<string> digits = {"1", "4", "9"};
  int n = 1000000000;
  int exp = 29523;
  EXPECT_EQ(solution->atMostNGivenDigitSet(digits, n), exp);
  delete solution;
}

TEST_F(q902, sample_input03) {
  solution = new Solution();
  vector<string> digits = {"7"};
  int n = 8;
  int exp = 1;
  EXPECT_EQ(solution->atMostNGivenDigitSet(digits, n), exp);
  delete solution;
}