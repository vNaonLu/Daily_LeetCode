
#ifndef Q946_UNITTEST_H__
#define Q946_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0946.hpp"
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 946.
  *      Validate Stack Sequences
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given two integer arrays ‘pushed’ and ‘popped’ each with distinct
  *   values, return ‘true’ “ if this could have been the result of a
  *   sequence of push and pop operations on an initially empty stack, or ”
  *   ‘false’ “ otherwise.”.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘1 ≤ pushed.length ≤ 1000’
  *   • ‘0 ≤ pushed[i] ≤ 1000’
  *   • All the elements of ‘pushed’ are “unique” .
  *   • ‘popped.length = pushed.length’
  *   • ‘popped’ is a permutation of ‘pushed’ .
  *
*/

TEST(q946, sample_input01) {
  l946::Solution solver;
  vector<int> pushed = {1, 2, 3, 4, 5};
  vector<int> popped = {4, 5, 3, 2, 1};
  bool exp = true;
  EXPECT_EQ(solver.validateStackSequences(pushed, popped), exp);
}

TEST(q946, sample_input02) {
  l946::Solution solver;
  vector<int> pushed = {1, 2, 3, 4, 5};
  vector<int> popped = {4, 3, 5, 1, 2};
  bool exp = false;
  EXPECT_EQ(solver.validateStackSequences(pushed, popped), exp);
}

#endif