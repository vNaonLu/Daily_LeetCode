
#ifndef Q931_UNITTEST_H__
#define Q931_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0931.hpp"
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 931.
 *      Minimum Falling Path Sum
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an ‘n x n’ array of integers ‘matrix’ , return “the “minimum
 *   sum” of any “falling path” through” ‘matrix’
 *   A “falling path” starts at any element in the first row and chooses
 *   the element in the next row that is either directly below or
 *   diagonally left/right. Specifically, the next element from position
 *   ‘(row, col)’ will be ‘(row + 1, col - 1)’ , ‘(row + 1, col)’ , or
 *   ‘(row + 1, col + 1)’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘n = matrix.length’
 *   • ‘n = matrix[i].length’
 *   • ‘1 ≤ n ≤ 100’
 *   • ‘-100 ≤ matrix[i][j] ≤ 100’
 *
 */

TEST(q931, sample_input01) {
  l931::Solution solver;
  vector<vector<int>> matrix = {{2, 1, 3}, {6, 5, 4}, {7, 8, 9}};
  int exp = 13;
  EXPECT_EQ(solver.minFallingPathSum(matrix), exp);
}

TEST(q931, sample_input02) {
  l931::Solution solver;
  vector<vector<int>> matrix = {{-19, 57}, {-40, -5}};
  int exp = -59;
  EXPECT_EQ(solver.minFallingPathSum(matrix), exp);
}

TEST(q931, sample_input03) {
  l931::Solution solver;
  vector<vector<int>> matrix = {{-48}};
  int exp = -48;
  EXPECT_EQ(solver.minFallingPathSum(matrix), exp);
}

#endif