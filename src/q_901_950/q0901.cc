#include <gtest/gtest.h>
#include <iostream>
#include <stack>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 901.
 *      Online Stock Span
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Design an algorithm that collects daily price quotes for some stock
 *   and returns “the span” of that stock's price for the current
 *   The “span” of the stock's price today is defined as the maximum number
 *   of consecutive days (starting from today and going backward) for which
 *   the stock price was less than or equal to today's
 *       - For example, if the price of a stock over the next ‘7’ days were
 *   ‘[100,80,60,70,60,75,85]’ , then the stock spans would be
 *   ‘[1,1,1,2,1,4,6]’
 *   Implement the ‘StockSpanner’
 *       -  ‘StockSpanner()’ Initializes the object of the
 *       -  ‘int next(int price)’ Returns the “span” of the stock's price
 *   given that today's price is ‘price’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ price ≤ 10⁵’
 *   • At most ‘10⁴’ calls will be made to ‘next’ .
 *
 */

struct q901 : public ::testing::Test {
  // Leetcode answer here
  class StockSpanner {
  private:
    stack<pair<int, int>> stk_;

  public:
    StockSpanner() {}

    int next(int price) {
      int res = 1;
      while (!stk_.empty() && price >= stk_.top().first) {
        res += stk_.top().second;
        stk_.pop();
      }
      stk_.emplace(price, res);
      return res;
    }
  };

  class StockSpanner *stock_spanner;
};

TEST_F(q901, sample_input01) {
  stock_spanner = new StockSpanner();
  EXPECT_EQ(stock_spanner->next(100), 1);
  EXPECT_EQ(stock_spanner->next(80), 1);
  EXPECT_EQ(stock_spanner->next(60), 1);
  EXPECT_EQ(stock_spanner->next(70), 2);
  EXPECT_EQ(stock_spanner->next(60), 1);
  EXPECT_EQ(stock_spanner->next(75), 4);
  EXPECT_EQ(stock_spanner->next(85), 6);
  delete stock_spanner;
}