#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 922.
 *      Sort Array By Parity II
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an array of integers ‘nums’ , half of the integers in ‘nums’ are
 *   “odd” , and the other half are “even”
 *   Sort the array so that whenever ‘nums[i]’ is odd, ‘i’ is “odd” , and
 *   whenever ‘nums[i]’ is even, ‘i’ is “even”
 *   Return “any answer array that satisfies this condition” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘2 ≤ nums.length ≤ 2 × 10⁴’
 *   • ‘nums.length’ is even.
 *   • Half of the integers in ‘nums’ are even.
 *   • ‘0 ≤ nums[i] ≤ 1000’
 *
 */

struct q922 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    vector<int> sortArrayByParityII(vector<int>& nums) {
      int n = nums.size();
      int i = 0, j = 1;
      while (i < n && j < n) {
        if (nums[i] % 2 == 0) {
          i += 2;
        } else if (nums[j] % 2 == 1) {
          j += 2;
        } else {
          swap(nums[i], nums[j]);
        }
      }
      return nums;
    }
  };

  class Solution *solution;
};

TEST_F(q922, sample_input01) {
  solution = new Solution();
  vector<int> nums = {4, 2, 5, 7};
  vector<int> exp = {4, 5, 2, 7};
  EXPECT_EQ(solution->sortArrayByParityII(nums), exp);
  delete solution;
}

TEST_F(q922, sample_input02) {
  solution = new Solution();
  vector<int> nums = {2, 3};
  vector<int> exp = {2, 3};
  EXPECT_EQ(solution->sortArrayByParityII(nums), exp);
  delete solution;
}