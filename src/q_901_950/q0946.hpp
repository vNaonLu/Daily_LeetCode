
#ifndef LEETCODE_Q946_H__
#define LEETCODE_Q946_H__
#include <iostream>
#include <stack>
#include <vector>

namespace l946 {
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 946.
  *      Validate Stack Sequences
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given two integer arrays ‘pushed’ and ‘popped’ each with distinct
  *   values, return ‘true’ “ if this could have been the result of a
  *   sequence of push and pop operations on an initially empty stack, or ”
  *   ‘false’ “ otherwise.”.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘1 ≤ pushed.length ≤ 1000’
  *   • ‘0 ≤ pushed[i] ≤ 1000’
  *   • All the elements of ‘pushed’ are “unique” .
  *   • ‘popped.length = pushed.length’
  *   • ‘popped’ is a permutation of ‘pushed’ .
  *
*/

class Solution {
 public:
  bool validateStackSequences(vector<int>& pushed, vector<int>& popped) {
    stack<int> test;
    int pui = 0, poi = 0;
    while (pui < pushed.size() && poi < popped.size()) {
      if (!test.empty() && test.top() == popped[poi]) {
        test.pop();
        ++poi;
      } else {
        test.push(pushed[pui++]);
      }
    }
    while (!test.empty() && poi < popped.size()) {
      if (test.top() != popped[poi]) return false;
      test.pop();
      ++poi;
    }
    return test.empty();
  }
};
}  // namespace l946

#endif