#include <gtest/gtest.h>
#include <iostream>
#include <map>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 904.
 *      Fruit Into Baskets
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are visiting a farm that has a single row of fruit trees arranged
 *   from left to right. The trees are represented by an integer array
 *   ‘fruits’ where ‘fruits[i]’ is the “type” of fruit the ‘iᵗʰ’ tree
 *   You want to collect as much fruit as possible. However, the owner has
 *   some strict rules that you must
 *       - You only have “two” baskets, and each basket can only hold a
 *   “single type” of fruit. There is no limit on the amount of fruit each
 *   basket can
 *       - Starting from any tree of your choice, you must pick “exactly
 *   one fruit” from “every” tree (including the start tree) while moving
 *   to the right. The picked fruits must fit in one of your
 *       - Once you reach a tree with fruit that cannot fit in your
 *   baskets, you must
 *   Given the integer array ‘fruits’ , return “the “maximum” number of
 *   fruits you can pick” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ fruits.length ≤ 10⁵’
 *   • ‘0 ≤ fruits[i] < fruits.length’
 *
 */

struct q904 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int totalFruit(vector<int> &fruits) {
      int           cnt = 0;
      int           res = 0;
      map<int, int> memo;
      auto          beg = fruits.begin();
      auto          it  = beg;
      while (it != fruits.end()) {
        ++memo[*it];
        ++cnt;
        while (memo.size() > 2) {
          auto left = beg++;
          --memo[*left];
          --cnt;
          if (memo[*left] == 0) {
            memo.erase(*left);
          }
        }
        res = max(res, cnt);
        ++it;
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q904, sample_input01) {
  solution           = new Solution();
  vector<int> fruits = {1, 2, 1};
  int         exp    = 3;
  int         act    = solution->totalFruit(fruits);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q904, sample_input02) {
  solution           = new Solution();
  vector<int> fruits = {0, 1, 2, 2};
  int         exp    = 3;
  int         act    = solution->totalFruit(fruits);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q904, sample_input03) {
  solution           = new Solution();
  vector<int> fruits = {1, 2, 3, 2, 2};
  int         exp    = 4;
  int         act    = solution->totalFruit(fruits);
  EXPECT_EQ(act, exp);
  delete solution;
}
