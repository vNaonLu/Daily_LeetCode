#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 910.
 *      Smallest Range II
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an integer array ‘nums’ and an integer ‘k’
 *   For each index ‘i’ where ‘0 ≤ i < nums.length’ , change ‘nums[i]’ to
 *   be either ‘nums[i] + k’ or ‘nums[i] - k’
 *   The “score” of ‘nums’ is the difference between the maximum and
 *   minimum elements in ‘nums’
 *   Return “the minimum “score” of ” ‘nums’ “ after changing the values at
 *   each index” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 10⁴’
 *   • ‘0 ≤ nums[i] ≤ 10⁴’
 *   • ‘0 ≤ k ≤ 10⁴’
 *
 */

struct q910 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int smallestRangeII(vector<int>& nums, int k) {
      sort(nums.begin(), nums.end());
      int res = nums.back() - nums.front();
      for (int i = 0; i < nums.size() - 1; ++i) {
        int a = nums[i],
            b = nums[i + 1];
        int h = max(nums.back() - k, a + k);
        int l = min(nums.front() + k, b - k);
        res = min(res, h - l);
      }

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q910, sample_input01) {
  solution = new Solution();
  vector<int> nums = {1};
  int k = 0;
  int exp = 0;
  int act = solution->smallestRangeII(nums, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q910, sample_input02) {
  solution = new Solution();
  vector<int> nums = {0, 10};
  int k = 2;
  int exp = 6;
  int act = solution->smallestRangeII(nums, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q910, sample_input03) {
  solution = new Solution();
  vector<int> nums = {1, 3, 6};
  int k = 3;
  int exp = 3;
  int act = solution->smallestRangeII(nums, k);
  EXPECT_EQ(act, exp);
  delete solution;
}