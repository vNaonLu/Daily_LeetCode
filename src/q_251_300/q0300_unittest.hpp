
#ifndef Q300_UNITTEST_H__
#define Q300_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0300.hpp"
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 300.
  *      Longest Increasing Subsequence
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given an integer array ‘nums’ , return the length of the longest
  *   strictly increasing subsequence.
  *   
  *   A “subsequence” is a sequence that can be derived from an array by
  *   deleting some or no elements without changing the order of the
  *   remaining elements. For example, ‘[3,6,2,7]’ is a subsequence of the
  *   array ‘[0,3,1,6,2,2,7]’.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘1 ≤ nums.length ≤ 2500’
  *   • ‘-10⁴ ≤ nums[i] ≤ 10⁴’
  *
*/

TEST(q300, sample_input01) {
  l300::Solution solver;
  vector<int> nums = {10, 9, 2, 5, 3, 7, 101, 18};
  int exp = 4;
  EXPECT_EQ(solver.lengthOfLIS(nums), exp);
}

TEST(q300, sample_input02) {
  l300::Solution solver;
  vector<int> nums = {0, 1, 0, 3, 2, 3};
  int exp = 4;
  EXPECT_EQ(solver.lengthOfLIS(nums), exp);
}

TEST(q300, sample_input03) {
  l300::Solution solver;
  vector<int> nums = {7, 7, 7, 7, 7, 7, 7};
  int exp = 1;
  EXPECT_EQ(solver.lengthOfLIS(nums), exp);
}

TEST(q300, solution2_sample_input01) {
  l300::Solution_2 solver;
  vector<int> nums = {10, 9, 2, 5, 3, 7, 101, 18};
  int exp = 4;
  EXPECT_EQ(solver.lengthOfLIS(nums), exp);
}

TEST(q300, solution2_sample_input02) {
  l300::Solution_2 solver;
  vector<int> nums = {0, 1, 0, 3, 2, 3};
  int exp = 4;
  EXPECT_EQ(solver.lengthOfLIS(nums), exp);
}

TEST(q300, solution2_sample_input03) {
  l300::Solution_2 solver;
  vector<int> nums = {7, 7, 7, 7, 7, 7, 7};
  int exp = 1;
  EXPECT_EQ(solver.lengthOfLIS(nums), exp);
}

#endif