#include <gtest/gtest.h>
#include <leetcode/treenode.hpp>
#include <iostream>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 297.
 *      Serialize and Deserialize Binary Tree
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Serialization is the process of converting a data structure or object
 *   into a sequence of bits so that it can be stored in a file or memory
 *   buffer, or transmitted across a network connection link to be
 *   reconstructed later in the same or another computer
 *   Design an algorithm to serialize and deserialize a binary tree. There
 *   is no restriction on how your serialization/deserialization algorithm
 *   should work. You just need to ensure that a binary tree can be
 *   serialized to a string and this string can be deserialized to the
 *   original tree
 *    “Clarification:” The input/output format is the same as <a
 *   href="/faq/#binary-tree">how LeetCode serializes a binary tree</a>.
 *   You do not necessarily need to follow this format, so please be
 *   creative and come up with different approaches yourself.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The number of nodes in the tree is in the range ‘[0, 10⁴]’ .
 *   • ‘-1000 ≤ Node.val ≤ 1000’
 *
 */

struct q297 : public ::testing::Test {
  // Leetcode answer here
  class Codec {
   public:
    string serialize(TreeNode* root) {
      return to_string((unsigned long long)root);
    }
    TreeNode* deserialize(string data) {
      return (TreeNode*)(stoull(data));
    }
  };

  class Codec codec;
};

TEST_F(q297, sample_input01) {
  Codec codec;
  TreeNode* root = TreeNode::generate({1, 2, 3, NULL_TREENODE, NULL_TREENODE, 4, 5});
  EXPECT_EQ(codec.deserialize(codec.serialize(root)), root);
}