
#ifndef Q257_UNITTEST_H__
#define Q257_UNITTEST_H__
#include <gtest/gtest.h>

#include <leetcode/anyorder.hpp>

#include "q0257.hpp"
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 257.
  *      Binary Tree Paths
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given the ‘root’ of a binary tree, return “all root-to-leaf paths in
  *   “any order” ”.
  *   
  *   A “leaf” is a node with no children.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • The number of nodes in the tree is in the range ‘[1, 100]’ .
  *   • ‘-100 ≤ Node.val ≤ 100’
  *
*/

TEST(q257, sample_input01) {
  l257::Solution solver;
  TreeNode* root = TreeNode::generate({1, 2, 3, NULL_TREENODE, 5});
  vector<string> exp = {"1->2->5", "1->3"};
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solver.binaryTreePaths(root);, exp);
}

TEST(q257, sample_input02) {
  l257::Solution solver;
  TreeNode* root = TreeNode::generate({1});
  vector<string> exp = {"1"};
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solver.binaryTreePaths(root);, exp);
}

#endif