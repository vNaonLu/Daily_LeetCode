#include <gtest/gtest.h>
#include <iostream>
#include <unordered_set>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 268.
 *      Missing Number
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an array ‘nums’ containing ‘n’ distinct numbers in the range
 *   ‘[0, n]’ , return “the only number in the range that is missing from
 *   the array.” 
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘n = nums.length’
 *   • ‘1 ≤ n ≤ 10⁴’
 *   • ‘0 ≤ nums[i] ≤ n’
 *   • All the numbers of ‘nums’ are “unique” .
 *
 */

struct q268 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int missingNumber(vector<int> &nums) {
      unordered_set<int> exist;
      for (int i = 0; i < nums.size(); ++i) {
        exist.emplace(i);
      }

      for (auto &x : nums) {
        exist.erase(x);
      }

      return exist.empty() ? nums.size() : *exist.begin();
    }
  };

  class Solution *solution;
};

TEST_F(q268, sample_input01) {
  solution = new Solution();
  vector<int> nums = {3, 0, 1};
  int exp = 2;
  int act = solution->missingNumber(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q268, sample_input02) {
  solution = new Solution();
  vector<int> nums = {0, 1};
  int exp = 2;
  int act = solution->missingNumber(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q268, sample_input03) {
  solution = new Solution();
  vector<int> nums = {9, 6, 4, 2, 3, 5, 7, 0, 1};
  int exp = 8;
  int act = solution->missingNumber(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}