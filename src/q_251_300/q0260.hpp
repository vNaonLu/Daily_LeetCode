
#ifndef LEETCODE_Q260_H__
#define LEETCODE_Q260_H__
#include <iostream>
#include <unordered_map>
#include <vector>

namespace l260 {
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 260.
 *      Single Number III
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an integer array ‘nums’ , in which exactly two elements appear
 *   only once and all the other elements appear exactly twice. Find the
 *   two elements that appear only once. You can return the answer in “any
 *   order”
 *   You must write analgorithm that runs in linear runtime complexity and
 *   usesonly constant extra space.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘2 ≤ nums.length ≤ 3 × 10⁴’
 *   • ‘-2³¹ ≤ nums[i] ≤ 2³¹ - 1’
 *   • Each integer in ‘nums’ will appear twice, only two integers will appear once.
 *
 */

class Solution {
 public:
  vector<int> singleNumber(vector<int>& nums) {
    vector<int> res;
    res.reserve(nums.size());
    unordered_map<int, int> cnt;
    for (const auto& x : nums) ++cnt[x];

    for (auto it = cnt.begin(); it != cnt.end(); ++it)
      if (it->second == 1) res.emplace_back(it->first);

    return res;
  }
};
}  // namespace l260

#endif