
#ifndef LEETCODE_Q257_H__
#define LEETCODE_Q257_H__
#include <iostream>
#include <leetcode/treenode.hpp>
#include <vector>

namespace l257 {
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 257.
  *      Binary Tree Paths
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given the ‘root’ of a binary tree, return “all root-to-leaf paths in
  *   “any order” ”.
  *   
  *   A “leaf” is a node with no children.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • The number of nodes in the tree is in the range ‘[1, 100]’ .
  *   • ‘-100 ≤ Node.val ≤ 100’
  *
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *   int val;
 *   TreeNode *left;
 *   TreeNode *right;
 *   TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *   TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *   TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
 private:
  void helper(TreeNode *p, vector<string> &res, vector<int> &cur) {
    if (p == nullptr) return;

    cur.push_back(p->val);
    if (p->left == nullptr && p->right == nullptr) {
      string path = to_string(cur.front());
      for (int i = 1; i < cur.size(); ++i)
        path += "->" + to_string(cur[i]);
      res.push_back(path);
    }else{
      helper(p->left, res, cur);
      helper(p->right, res, cur);
    }
    cur.pop_back();
  }

 public:
  vector<string> binaryTreePaths(TreeNode *root) {
    vector<string> res;
    vector<int> tmp;
    helper(root, res, tmp);
    return res;
  }
};
}  // namespace l257

#endif