
#ifndef LEETCODE_Q297_H__
#define LEETCODE_Q297_H__
#include <iostream>
#include <leetcode/treenode.hpp>
#include <string>

namespace l297 {
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 297.
  *      Serialize and Deserialize Binary Tree
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Serialization is the process of converting a data structure or object
  *   into a sequence of bits so that it can be stored in a file or memory
  *   buffer, or transmitted across a network connection link to be
  *   reconstructed later in the same or another computer environment.
  *   
  *   Design an algorithm to serialize and deserialize a binary tree. There
  *   is no restriction on how your serialization/deserialization algorithm
  *   should work. You just need to ensure that a binary tree can be
  *   serialized to a string and this string can be deserialized to the
  *   original tree structure.
  *   
  *   “Clarification:” The input/output format is the same as <a
  *   href="/faq/#binary-tree">how LeetCode serializes a binary tree</a>.
  *   You do not necessarily need to follow this format, so please be
  *   creative and come up with different approaches yourself.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • The number of nodes in the tree is in the range ‘[0, 10⁴]’ .
  *   • ‘-1000 ≤ Node.val ≤ 1000’
  *
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *   int val;
 *   TreeNode *left;
 *   TreeNode *right;
 *   TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
 public:
  // Encodes a tree to a single string.
  string serialize(TreeNode* root) {
    return to_string((unsigned long long)root);
  }

  // Decodes your encoded data to tree.
  TreeNode* deserialize(string data) {
    return (TreeNode*)(stoull(data));
  }
};

// Your Codec object will be instantiated and called as such:
// Codec ser, deser;
// TreeNode* ans = deser.deserialize(ser.serialize(root));
}  // namespace l297

#endif