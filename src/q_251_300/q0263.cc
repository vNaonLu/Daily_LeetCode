#include <gtest/gtest.h>
#include <iostream>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 263.
 *      Ugly Number
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   An “ugly number” is a positive integer whose prime factors are limited
 *   to ‘2’ , ‘3’ , and ‘5’
 *   Given an integer ‘n’ , return ‘true’ “if” ‘n’ “is an “ugly number” ” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘-2³¹ ≤ n ≤ 2³¹ - 1’
 *
 */

struct q263 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    bool isUgly(int n) {
      if (n == 0) return false;
      if (n == 1) return true;
      while (n % 2 == 0)
        n /= 2;
      while (n % 3 == 0)
        n /= 3;
      while (n % 5 == 0)
        n /= 5;
      return n == 1;
    }
  };

  class Solution *solution;
};

TEST_F(q263, sample_input01) {
  solution = new Solution();
  int n = 6;
  bool exp = true;
  EXPECT_EQ(solution->isUgly(n), exp);
  delete solution;
}

TEST_F(q263, sample_input02) {
  solution = new Solution();
  int n = 8;
  bool exp = true;
  EXPECT_EQ(solution->isUgly(n), exp);
  delete solution;
}

TEST_F(q263, sample_input03) {
  solution = new Solution();
  int n = 14;
  bool exp = false;
  EXPECT_EQ(solution->isUgly(n), exp);
  delete solution;
}

TEST_F(q263, sample_input04) {
  solution = new Solution();
  int n = 1;
  bool exp = true;
  EXPECT_EQ(solution->isUgly(n), exp);
  delete solution;
}