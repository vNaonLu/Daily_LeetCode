#include <gtest/gtest.h>
#include <iostream>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 292.
 *      Nim Game
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are playing the following Nim Game with your
 *       - Initially, there is a heap of stones on the
 *       - You and your friend will alternate taking turns, and “you go
 *   first”
 *       - On each turn, the person whose turn it is will remove 1 to 3
 *   stones from the
 *       - The one who removes the last stone is the
 *   Given ‘n’ , the number of stones in the heap, return ‘true’ “ if you
 *   can win the game assuming both you and your friend play optimally,
 *   otherwise return ” ‘false’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ n ≤ 2³¹ - 1’
 *
 */

struct q292 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    bool canWinNim(int n) {
      return n & 3;
    }
  };

  class Solution *solution;
};

TEST_F(q292, sample_input01) {
  solution = new Solution();
  int n = 4;
  bool exp = false;
  bool act = solution->canWinNim(n);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q292, sample_input02) {
  solution = new Solution();
  int n = 1;
  bool exp = true;
  bool act = solution->canWinNim(n);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q292, sample_input03) {
  solution = new Solution();
  int n = 2;
  bool exp = true;
  bool act = solution->canWinNim(n);
  EXPECT_EQ(act, exp);
  delete solution;
}