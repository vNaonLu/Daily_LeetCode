#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 275.
 *      H-Index II
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an array of integers ‘citations’ where ‘citations[i]’ is the
 *   number of citations a researcher received for their ‘iᵗʰ’ paper and
 *   ‘citations’ is sorted in an “ascending order” , return compute the
 *   researcher's ‘h’ “-index”
 *   According to the <a href="https://en.wikipedia.org/wiki/H-index"
 *   target="_blank">definition of h-index on Wikipedia</a>: A scientist
 *   has an index ‘h’ if ‘h’ of their ‘n’ papers have at least ‘h’
 *   citations each, and the other ‘n &minus; h’ papers have no more than
 *   ‘h’ citations
 *   If there are several possible values for ‘h’ , the maximum one is
 *   taken as the ‘h’ “-index”
 *   You must write an algorithm that runs in logarithmic time.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘n = citations.length’
 *   • ‘1 ≤ n ≤ 10⁵’
 *   • ‘0 ≤ citations[i] ≤ 1000’
 *   • ‘citations’ is sorted in “ascending order” .
 *
 */

struct q275 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int hIndex(vector<int> &citations) {
      int n = citations.size();
      int lo = 0,
          hi = n - 1,
          res = 0;

      while (lo <= hi) {
        int mid = lo + (hi - lo) / 2;

        if (citations[mid] >= n - mid) {
          res = n - mid;
          hi = mid - 1;
        } else {
          lo = mid + 1;
        }
      }

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q275, sample_input01) {
  solution = new Solution();
  vector<int> citations = {0, 1, 3, 5, 6};
  int exp = 3;
  int act = solution->hIndex(citations);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q275, sample_input02) {
  solution = new Solution();
  vector<int> citations = {1, 2, 100};
  int exp = 2;
  int act = solution->hIndex(citations);
  EXPECT_EQ(act, exp);
  delete solution;
}