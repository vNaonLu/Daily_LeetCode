#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/anyorder.hpp>
#include <unordered_map>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 260.
 *      Single Number III
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an integer array ‘nums’ , in which exactly two elements appear
 *   only once and all the other elements appear exactly twice. Find the
 *   two elements that appear only once. You can return the answer in “any
 *   order”
 *   You must write analgorithm that runs in linear runtime complexity and
 *   usesonly constant extra space.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘2 ≤ nums.length ≤ 3 × 10⁴’
 *   • ‘-2³¹ ≤ nums[i] ≤ 2³¹ - 1’
 *   • Each integer in ‘nums’ will appear twice, only two integers will appear once.
 *
 */

struct q260 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    vector<int> singleNumber(vector<int>& nums) {
      vector<int> res;
      res.reserve(nums.size());
      unordered_map<int, int> cnt;
      for (const auto& x : nums) ++cnt[x];
      for (auto it = cnt.begin(); it != cnt.end(); ++it)
        if (it->second == 1) res.emplace_back(it->first);
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q260, sample_input01) {
  solution = new Solution();
  vector<int> nums = {1, 2, 1, 3, 2, 5};
  vector<int> exp = {3, 5};
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solution->singleNumber(nums), exp);
  delete solution;
}

TEST_F(q260, sample_input02) {
  solution = new Solution();
  vector<int> nums = {-1, 0};
  vector<int> exp = {-1, 0};
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solution->singleNumber(nums), exp);
  delete solution;
}

TEST_F(q260, sample_input03) {
  solution = new Solution();
  vector<int> nums = {0, 1};
  vector<int> exp = {1, 0};
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solution->singleNumber(nums), exp);
  delete solution;
}