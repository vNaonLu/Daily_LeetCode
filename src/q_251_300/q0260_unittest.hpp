
#ifndef Q260_UNITTEST_H__
#define Q260_UNITTEST_H__
#include <gtest/gtest.h>

#include <leetcode/anyorder.hpp>

#include "q0260.hpp"
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 260.
 *      Single Number III
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an integer array ‘nums’ , in which exactly two elements appear
 *   only once and all the other elements appear exactly twice. Find the
 *   two elements that appear only once. You can return the answer in “any
 *   order”
 *   You must write analgorithm that runs in linear runtime complexity and
 *   usesonly constant extra space.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘2 ≤ nums.length ≤ 3 × 10⁴’
 *   • ‘-2³¹ ≤ nums[i] ≤ 2³¹ - 1’
 *   • Each integer in ‘nums’ will appear twice, only two integers will appear once.
 *
 */

TEST(q260, sample_input01) {
  l260::Solution solver;
  vector<int> nums = {1, 2, 1, 3, 2, 5};
  vector<int> exp = {3, 5};
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solver.singleNumber(nums), exp);
}

TEST(q260, sample_input02) {
  l260::Solution solver;
  vector<int> nums = {-1, 0};
  vector<int> exp = {-1, 0};
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solver.singleNumber(nums), exp);
}

TEST(q260, sample_input03) {
  l260::Solution solver;
  vector<int> nums = {0, 1};
  vector<int> exp = {1, 0};
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solver.singleNumber(nums), exp);
}

#endif