#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 300.
 *      Longest Increasing Subsequence
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an integer array ‘nums’ , return the length of the longest
 *   strictly increasing
 *   A “subsequence” is a sequence that can be derived from an array by
 *   deleting some or no elements without changing the order of the
 *   remaining elements. For example, ‘[3,6,2,7]’ is a subsequence of the
 *   array ‘[0,3,1,6,2,2,7]’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 2500’
 *   • ‘-10⁴ ≤ nums[i] ≤ 10⁴’
 *
 */

struct q300 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int lengthOfLIS(vector<int>& nums) {
      int res = 0;
      vector<int> piles(nums.size(), numeric_limits<int>::max());
      for (int i = 0; i < nums.size(); ++i) {
        int idx = lower_bound(piles.begin(), piles.end(), nums[i]) - piles.begin();
        piles[idx] = nums[i];
        res = max(res, idx + 1);
      }
      return res;
    }
  };
  class Solution_2 {
   public:
    int lengthOfLIS(vector<int>& nums) {
      vector<int> dp;
      dp.reserve(nums.size());
      for (const auto& x : nums) {
        if (dp.empty() || dp.back() < x) dp.emplace_back(x);
        else *lower_bound(dp.begin(), dp.end(), x) = x;
      }
      return dp.size();
    }
  };

  class Solution *solution;
};

TEST_F(q300, sample_input01) {
  solution = new Solution();
  vector<int> nums = {10, 9, 2, 5, 3, 7, 101, 18};
  int exp = 4;
  EXPECT_EQ(solution->lengthOfLIS(nums), exp);
  delete solution;
}

TEST_F(q300, sample_input02) {
  solution = new Solution();
  vector<int> nums = {0, 1, 0, 3, 2, 3};
  int exp = 4;
  EXPECT_EQ(solution->lengthOfLIS(nums), exp);
  delete solution;
}

TEST_F(q300, sample_input03) {
  solution = new Solution();
  vector<int> nums = {7, 7, 7, 7, 7, 7, 7};
  int exp = 1;
  EXPECT_EQ(solution->lengthOfLIS(nums), exp);
  delete solution;
}