#include <gtest/gtest.h>
#include <iostream>
#include <numeric>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1658.
 *       Minimum Operations to Reduce X to Zero
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an integer array ‘nums’ and an integer ‘x’ . In one
 *   operation, you can either remove the leftmost or the rightmost element
 *   from the array ‘nums’ and subtract its value from ‘x’ . Note that this
 *   “modifies” the array for future
 *   Return “the “minimum number” of operations to reduce ” ‘x’ “to
 *   “exactly” ” ‘0’ “if it is possible”  “, otherwise, return ” ‘-1’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 10⁵’
 *   • ‘1 ≤ nums[i] ≤ 10⁴’
 *   • ‘1 ≤ x ≤ 10⁹’
 *
 */

struct q1658 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int minOperations(vector<int>& nums, int x) {
      int sum = accumulate(nums.begin(), nums.end(), 0);
      int target = sum - x;
      int res = numeric_limits<int>::min(),
          curr = 0,
          l = 0;
      for (int i = 0; i < nums.size(); ++i) {
        curr += nums[i];
        while (l <= i && curr > target) {
          curr -= nums[l++];
        }

        if (curr == target) {
          res = max(res, i - l + 1);
        }
      }

      return res == numeric_limits<int>::min() ? -1 : (nums.size() - res);
    }
  };

  class Solution *solution;
};

TEST_F(q1658, sample_input01) {
  solution = new Solution();
  vector<int> nums = {1, 1, 4, 2, 3};
  int x = 5;
  int exp = 2;
  int act = solution->minOperations(nums, x);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1658, sample_input02) {
  solution = new Solution();
  vector<int> nums = {5, 6, 7, 8, 9};
  int x = 4;
  int exp = -1;
  int act = solution->minOperations(nums, x);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1658, sample_input03) {
  solution = new Solution();
  vector<int> nums = {3, 2, 20, 1, 1, 3};
  int x = 10;
  int exp = 5;
  int act = solution->minOperations(nums, x);
  EXPECT_EQ(act, exp);
  delete solution;
}