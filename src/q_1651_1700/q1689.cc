#include <gtest/gtest.h>
#include <iostream>
#include <numeric>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1689.
 *       Partitioning Into Minimum Number Of Deci-Binary Numbers
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   A decimal number is called “deci-binary” if each of its digits is
 *   either ‘0’ or ‘1’ without any leading zeros. For example, ‘101’ and
 *   ‘1100’ are “deci-binary” , while ‘112’ and ‘3001’ are
 *   Given a string ‘n’ that represents a positive decimal integer, return
 *   “the “minimum” number of positive “deci-binary” numbers needed so that
 *   they sum up to ” ‘n’ “.”
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ n.length ≤ 10⁵’
 *   • ‘n’ consists of only digits.
 *   • ‘n’ does not contain any leading zeros and represents a positive integer.
 *
 */

struct q1689 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int minPartitions(string n) {

      return *max_element(n.begin(), n.end()) - '0';
    }
  };

  class Solution *solution;
};

TEST_F(q1689, sample_input01) {
  solution = new Solution();
  string n = "32";
  int exp = 3;
  int act = solution->minPartitions(n);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1689, sample_input02) {
  solution = new Solution();
  string n = "82734";
  int exp = 8;
  int act = solution->minPartitions(n);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1689, sample_input03) {
  solution = new Solution();
  string n = "27346209830709182346";
  int exp = 9;
  int act = solution->minPartitions(n);
  EXPECT_EQ(act, exp);
  delete solution;
}