#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1672.
 *       Richest Customer Wealth
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an ‘m x n’ integer grid ‘accounts’ where
 *   ‘accounts[i][j]’ is the amount of money the ‘i​​​​​^(​​​​​​th)​​​​’
 *   customer has in the ‘j​​​​​^(​​​​​​th)’ ​​​​ bank. Return “ the
 *   “wealth” that the richest customer has.”
 *   A customer's “wealth” is the amount of money they have in all their
 *   bank accounts. The richest customer is the customer that has the
 *   maximum “wealth” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘m =accounts.length’
 *   • ‘n =accounts[i].length’
 *   • ‘1 ≤ m, n ≤ 50’
 *   • ‘1 ≤ accounts[i][j] ≤ 100’
 *
 */

struct q1672 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int maximumWealth(vector<vector<int>> &accounts) {
      int res = 0;
      for (const auto &v : accounts) {
        int curr = 0;
        for (const auto &x : v) {
          curr += x;
        }
        res = max(res, curr);
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1672, sample_input01) {
  solution = new Solution();
  vector<vector<int>> accounts = {{1, 2, 3}, {3, 2, 1}};
  int exp = 6;
  int act = solution->maximumWealth(accounts);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1672, sample_input02) {
  solution = new Solution();
  vector<vector<int>> accounts = {{1, 5}, {7, 3}, {3, 5}};
  int exp = 10;
  int act = solution->maximumWealth(accounts);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1672, sample_input03) {
  solution = new Solution();
  vector<vector<int>> accounts = {{2, 8, 7}, {7, 1, 3}, {1, 9, 5}};
  int exp = 17;
  int act = solution->maximumWealth(accounts);
  EXPECT_EQ(act, exp);
  delete solution;
}