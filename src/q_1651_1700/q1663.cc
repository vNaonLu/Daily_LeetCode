#include <gtest/gtest.h>
#include <iostream>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1663.
 *       Smallest String With A Given Numeric Value
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   The “numeric value” of a “lowercase character” is defined as its
 *   position ‘(1-indexed)’ in the alphabet, so the numeric value of ‘a’ is
 *   ‘1’ , the numeric value of ‘b’ is ‘2’ , the numeric value of ‘c’ is
 *   ‘3’ , and so
 *   The “numeric value” of a “string” consisting of lowercase characters
 *   is defined as the sum of its characters' numeric values. For example,
 *   the numeric value of the string ‘'abe'’ is equal to ‘1 + 2 + 5 = 8’
 *   You are given two integers ‘n’ and ‘k’ . Return “the
 *   “lexicographically smallest string” with “length” equal to ‘n’ and
 *   “numeric value” equal to ‘k’ .”
 *   Note that a string ‘x’ is lexicographically smaller than string ‘y’ if
 *   ‘x’ comes before ‘y’ in dictionary order, that is, either ‘x’ is a
 *   prefix of ‘y’ , or if ‘i’ is the first position such that ‘x[i] ≠
 *   y[i]’ , then ‘x[i]’ comes before ‘y[i]’ in alphabetic order.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ n ≤ 10⁵’
 *   • ‘n ≤ k ≤ 26 × n’
 *
 */

struct q1663 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    string getSmallestString(int n, int k) {
      string res;
      res.assign(n, 'a');

      int curr = n,
          idx = n - 1;

      while (curr < k) {
        res[idx] = min(25, k - curr) + 'a';
        curr += res[idx--] - 'a';
      }

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1663, sample_input01) {
  solution = new Solution();
  int n = 3;
  int k = 27;
  string exp = "aay";
  string act = solution->getSmallestString(n, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1663, sample_input02) {
  solution = new Solution();
  int n = 5;
  int k = 73;
  string exp = "aaszz";
  string act = solution->getSmallestString(n, k);
  EXPECT_EQ(act, exp);
  delete solution;
}