#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1695.
 *       Maximum Erasure Value
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an array of positive integers ‘nums’ and want to erase a
 *   subarray containing “unique elements” . The “score” you get by erasing
 *   the subarray is equal to the “sum” of its
 *   Return “the “maximum score” you can get by erasing “exactly one”
 *   subarray.”
 *   An array ‘b’ is called to be a <span
 *   class="tex-font-style-it">subarray</span> of ‘a’ if it forms a
 *   contiguous subsequence of ‘a’ , that is, if it is equal to
 *   ‘a[l],a[l+1],...,a[r]’ for some ‘(l,r)’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 10⁵’
 *   • ‘1 ≤ nums[i] ≤ 10⁴’
 *
 */

struct q1695 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int maximumUniqueSubarray(vector<int>& nums) {
      int res = 0,
          local = 0,
          l = 0;
      vector<int> cnt(10001, 0);

      for (int i = 0; i < nums.size(); ++i) {
        local += nums[i];
        ++cnt[nums[i]];
        while (l <= i && cnt[nums[i]] > 1) {
          --cnt[nums[l]];
          local -= nums[l];
          ++l;
        }

        res = max(res, local);
      }

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1695, sample_input01) {
  solution = new Solution();
  vector<int> nums = {4, 2, 4, 5, 6};
  int exp = 17;
  int act = solution->maximumUniqueSubarray(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1695, sample_input02) {
  solution = new Solution();
  vector<int> nums = {5, 2, 1, 2, 5, 2, 1, 2, 5};
  int exp = 8;
  int act = solution->maximumUniqueSubarray(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}