#include <gtest/gtest.h>
#include <iostream>
#include <string>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1684.
 *       Count the Number of Consistent Strings
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given a string ‘allowed’ consisting of “distinct” characters
 *   and an array of strings ‘words’ . A string is “consistent ” if all
 *   characters in the string appear in the string ‘allowed’
 *   Return “ the number of “consistent” strings in the array ” ‘words’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ words.length ≤ 10⁴’
 *   • ‘1 ≤ allowed.length ≤^( )26’
 *   • ‘1 ≤ words[i].length ≤ 10’
 *   • The characters in ‘allowed’ are “distinct” .
 *   • ‘words[i]’ and ‘allowed’ contain only lowercase English letters.
 *
 */

struct q1684 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  private:
    template <typename It>
    bool isAllow(vector<bool> &memo, It beg, It end) {
      while (beg != end && memo[*beg - 'a']) {
        ++beg;
      }
      return beg == end;
    }

  public:
    int countConsistentStrings(string allowed, vector<string> &words) {
      auto memo = vector<bool>(26, false);
      auto res  = (int)0;
      for (auto c : allowed) {
        memo[c - 'a'] = true;
      }
      for (auto &s : words) {
        if (isAllow(memo, s.begin(), s.end())) {
          ++res;
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1684, sample_input01) {
  solution               = new Solution();
  string         allowed = "ab";
  vector<string> words   = {"ad", "bd", "aaab", "baa", "badab"};
  int            exp     = 2;
  int            act     = solution->countConsistentStrings(allowed, words);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1684, sample_input02) {
  solution               = new Solution();
  string         allowed = "abc";
  vector<string> words   = {"a", "b", "c", "ab", "ac", "bc", "abc"};
  int            exp     = 7;
  int            act     = solution->countConsistentStrings(allowed, words);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1684, sample_input03) {
  solution               = new Solution();
  string         allowed = "cad";
  vector<string> words   = {"cc", "acd", "b", "ba", "bac", "bad", "ac", "d"};
  int            exp     = 4;
  int            act     = solution->countConsistentStrings(allowed, words);
  EXPECT_EQ(act, exp);
  delete solution;
}
