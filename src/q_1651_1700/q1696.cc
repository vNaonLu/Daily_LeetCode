#include <gtest/gtest.h>
#include <iostream>
#include <queue>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1696.
 *       Jump Game VI
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given a “0-indexed” integer array ‘nums’ and an integer ‘k’
 *   You are initially standing at index ‘0’ . In one move, you can jump at
 *   most ‘k’ steps forward without going outside the boundaries of the
 *   array. That is, you can jump from index ‘i’ to any index in the range
 *   ‘[i + 1, min(n - 1, i + k)]’ “inclusive”
 *   You want to reach the last index of the array (index ‘n - 1’ ). Your
 *   “score” is the “sum” of all ‘nums[j]’ for each index ‘j’ you visited
 *   in the
 *   Return “the “maximum score” you can get” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length, k ≤ 10⁵’
 *   • ‘-10⁴ ≤ nums[i] ≤ 10⁴’
 *
 */

struct q1696 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int maxResult(vector<int> &nums, int k) {
      vector<int> dp(nums.size(), 0);
      dp.front() = nums.front();

      priority_queue<pair<int, int>> pq;
      pq.emplace(nums.front(), 0);

      for (int i = 1; i < nums.size(); ++i) {
        while (pq.top().second < i - k) {
          pq.pop();
        }

        dp[i] = nums[i] + pq.top().first;
        pq.emplace(dp[i], i);
      }

      return dp.back();
    }
  };

  class Solution *solution;
};

TEST_F(q1696, sample_input01) {
  solution = new Solution();
  vector<int> nums = {1, -1, -2, 4, -7, 3};
  int k = 2;
  int exp = 7;
  int act = solution->maxResult(nums, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1696, sample_input02) {
  solution = new Solution();
  vector<int> nums = {10, -5, -2, 4, 0, 3};
  int k = 3;
  int exp = 17;
  int act = solution->maxResult(nums, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1696, sample_input03) {
  solution = new Solution();
  vector<int> nums = {1, -5, -20, 4, -1, 3, -6, -3};
  int k = 2;
  int exp = 0;
  int act = solution->maxResult(nums, k);
  EXPECT_EQ(act, exp);
  delete solution;
}