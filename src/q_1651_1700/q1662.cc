#include <gtest/gtest.h>
#include <iostream>
#include <string>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1662.
 *       Check If Two String Arrays are Equivalent
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given two string arrays ‘word1’ and ‘word2’ , return “ ” ‘true’ “ if
 *   the two arrays “represent” the same string, and ” ‘false’ “
 *   otherwise.”
 *   A string is “represented” by an array if the array elements
 *   concatenated “in order” forms the string.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ word1.length, word2.length ≤ 10³’
 *   • ‘1 ≤ word1[i].length, word2[i].length ≤ 10³’
 *   • ‘1 ≤ sum(word1[i].length), sum(word2[i].length) ≤ 10³’
 *   • ‘word1[i]’ and ‘word2[i]’ consist of lowercase letters.
 *
 */

struct q1662 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    bool arrayStringsAreEqual(vector<string> &word1, vector<string> &word2) {
      auto s1 = string("");
      auto s2 = string("");
      for (auto &s : word1) {
        s1 += move(s);
      }
      for (auto &s : word2) {
        s2 += move(s);
      }
      return s1 == s2;
    }
  };

  class Solution *solution;
};

TEST_F(q1662, sample_input01) {
  solution             = new Solution();
  vector<string> word1 = {"ab", "c"};
  vector<string> word2 = {"a", "bc"};
  bool           exp   = true;
  bool           act   = solution->arrayStringsAreEqual(word1, word2);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1662, sample_input02) {
  solution             = new Solution();
  vector<string> word1 = {"a", "cb"};
  vector<string> word2 = {"ab", "c"};
  bool           exp   = false;
  bool           act   = solution->arrayStringsAreEqual(word1, word2);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1662, sample_input03) {
  solution             = new Solution();
  vector<string> word1 = {"abc", "d", "defg"};
  vector<string> word2 = {"abcddefg"};
  bool           exp   = true;
  bool           act   = solution->arrayStringsAreEqual(word1, word2);
  EXPECT_EQ(act, exp);
  delete solution;
}