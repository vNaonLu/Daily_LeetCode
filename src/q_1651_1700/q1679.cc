#include <gtest/gtest.h>
#include <iostream>
#include <unordered_map>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1679.
 *       Max Number of K-Sum Pairs
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an integer array ‘nums’ and an integer ‘k’
 *   In one operation, you can pick two numbers from the array whose sum
 *   equals ‘k’ and remove them from the
 *   Return “the maximum number of operations you can perform on the array”
 *   .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 10⁵’
 *   • ‘1 ≤ nums[i] ≤ 10⁹’
 *   • ‘1 ≤ k ≤ 10⁹’
 *
 */

struct q1679 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int maxOperations(vector<int> &nums, int k) {
      unordered_map<int, int> cnt;
      int res = 0;
      for (auto &x : nums) {
        auto f = cnt.find(k - x);
        if (f != cnt.end() && f->second > 0) {
          --f->second;
          ++res;
        } else {
          ++cnt[x];
        }
      }

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1679, sample_input01) {
  solution = new Solution();
  vector<int> nums = {1, 2, 3, 4};
  int k = 5;
  int exp = 2;
  int act = solution->maxOperations(nums, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1679, sample_input02) {
  solution = new Solution();
  vector<int> nums = {3, 1, 3, 4, 3};
  int k = 6;
  int exp = 1;
  int act = solution->maxOperations(nums, k);
  EXPECT_EQ(act, exp);
  delete solution;
}