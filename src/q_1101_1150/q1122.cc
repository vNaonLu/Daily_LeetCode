#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1122.
 *       Relative Sort Array
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given two arrays ‘arr1’ and ‘arr2’ , the elements of ‘arr2’ are
 *   distinct, and all elements in ‘arr2’ are also in ‘arr1’
 *   Sort the elements of ‘arr1’ such that the relative ordering of items
 *   in ‘arr1’ are the same as in ‘arr2’ . Elements that do not appear in
 *   ‘arr2’ should be placed at the end of ‘arr1’ in “ascending” order.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ arr1.length, arr2.length ≤ 1000’
 *   • ‘0 ≤ arr1[i], arr2[i] ≤ 1000’
 *   • All the elements of ‘arr2’ are “distinct” .
 *   • Each ‘arr2[i]’ is in ‘arr1’ .
 *
 */

struct q1122 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    vector<int> relativeSortArray(vector<int> &arr1, vector<int> &arr2) {
      vector<int> res(arr1.size());
      vector<int> count(1001, 0);
      for (const auto &x : arr1) ++count[x];
      int idx = 0;
      for (const auto &x : arr2) {
        while (count[x]--) {
          res[idx++] = x;
        }
      }
      for (int i = 0; i < count.size(); ++i) {
        while (count[i]-- > 0) {
          res[idx++] = i;
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1122, sample_input01) {
  solution = new Solution();
  vector<int> arr1 = {2, 3, 1, 3, 2, 4, 6, 7, 9, 2, 19};
  vector<int> arr2 = {2, 1, 4, 3, 9, 6};
  vector<int> exp = {2, 2, 2, 1, 4, 3, 3, 9, 6, 7, 19};
  vector<int> act = solution->relativeSortArray(arr1, arr2);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1122, sample_input02) {
  solution = new Solution();
  vector<int> arr1 = {28, 6, 22, 8, 44, 17};
  vector<int> arr2 = {22, 28, 8, 6};
  vector<int> exp = {22, 28, 8, 6, 17, 44};
  vector<int> act = solution->relativeSortArray(arr1, arr2);
  EXPECT_EQ(act, exp);
  delete solution;
}