
#ifndef Q1143_UNITTEST_H__
#define Q1143_UNITTEST_H__
#include <gtest/gtest.h>

#include "q1143.hpp"
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 1143.
  *       Longest Common Subsequence
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given two strings ‘text1’ and ‘text2’ , return “the length of their
  *   longest “common subsequence” . ” If there is no “common subsequence” ,
  *   return ‘0’.
  *   
  *   A “subsequence” of a string is a new string generated from the
  *   original string with some characters (can be none) deleted without
  *   changing the relative order of the remaining characters.
  *   
  *   - For example, ‘"ace"’ is a subsequence of ‘"abcde"’.
  *   
  *   A “common subsequence” of two strings is a subsequence that is common
  *   to both strings.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘1 ≤ text1.length, text2.length ≤ 1000’
  *   • ‘text1’ and ‘text2’ consist of only lowercase English characters.
  *
*/

TEST(q1143, sample_input01) {
  l1143::Solution solver;
  string text1 = "abcde";
  string text2 = "ace";
  int exp = 3;
  EXPECT_EQ(solver.longestCommonSubsequence(text1, text2), exp);
}

TEST(q1143, sample_input02) {
  l1143::Solution solver;
  string text1 = "abc";
  string text2 = "abc";
  int exp = 3;
  EXPECT_EQ(solver.longestCommonSubsequence(text1, text2), exp);
}

TEST(q1143, sample_input03) {
  l1143::Solution solver;
  string text1 = "abc";
  string text2 = "def";
  int exp = 0;
  EXPECT_EQ(solver.longestCommonSubsequence(text1, text2), exp);
}

#endif