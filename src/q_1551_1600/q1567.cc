#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 1567.
 *       Maximum Length of Subarray With Positive Product
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an array of integers ‘nums’ , findthe maximum length of a
 *   subarray where the product of all its elements is
 *   A subarray of an array is a consecutive sequence of zero or more
 *   values taken out of that
 *   Return “the maximum length of a subarray with positive product” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 10^5’
 *   • ‘-10^9 ≤ nums[i]≤ 10^9’
 *
 */

struct q1567 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int getMaxLen(vector<int>& nums) {
      int res = 0;
      int positives = 0, negatives = 0;
      for(const int &x : nums){
        if(x == 0) {
          positives = 0;
          negatives = 0;
        }else if(x < 0){
          swap(negatives, positives);
          ++negatives;
          positives = positives == 0 ? 0 : positives + 1;
        }else{
          ++positives;
          negatives = negatives == 0 ? 0 : negatives + 1;
        }
        res = max(res, positives);
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1567, sample_input01) {
  solution = new Solution();
  vector<int> nums = {1, -2, -3, 4};
  int exp = 4;
  EXPECT_EQ(solution->getMaxLen(nums), exp);
  delete solution;
}

TEST_F(q1567, sample_input02) {
  solution = new Solution();
  vector<int> nums = {0, 1, -2, -3, -4};
  int exp = 3;
  EXPECT_EQ(solution->getMaxLen(nums), exp);
  delete solution;
}

TEST_F(q1567, sample_input03) {
  solution = new Solution();
  vector<int> nums = {-1, -2, -3, 0, 1};
  int exp = 2;
  EXPECT_EQ(solution->getMaxLen(nums), exp);
  delete solution;
}

TEST_F(q1567, sample_input04) {
  solution = new Solution();
  vector<int> nums = {-1, 2};
  int exp = 1;
  EXPECT_EQ(solution->getMaxLen(nums), exp);
  delete solution;
}

TEST_F(q1567, sample_input05) {
  solution = new Solution();
  vector<int> nums = {1, 2, 3, 5, -6, 4, 0, 10};
  int exp = 4;
  EXPECT_EQ(solution->getMaxLen(nums), exp);
  delete solution;
}