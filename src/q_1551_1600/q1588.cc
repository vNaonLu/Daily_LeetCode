#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1588.
 *       Sum of All Odd Length Subarrays
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an array of positive integers ‘arr’ , calculate the sum of all
 *   possible odd-length
 *   A subarray is a contiguoussubsequence of the
 *   Return “the sum of all odd-length subarrays of” ‘arr’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ arr.length ≤ 100’
 *   • ‘1 ≤ arr[i] ≤ 1000’
 *
 */

struct q1588 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int sumOddLengthSubarrays(vector<int>& arr) {
      int length = 1,
          res = 0;

      vector<int> summary(arr.size() + 1, 0);
      for (int i = 0; i < arr.size(); ++i) {
        summary[i + 1] = summary[i] + arr[i];
      }

      while (length <= arr.size()) {
        for (int i = 0; i + length < summary.size(); ++i) {
          res += summary[i + length] - summary[i];
        }
        ++ ++length;
      }

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1588, sample_input01) {
  solution = new Solution();
  vector<int> arr = {1, 4, 2, 5, 3};
  int exp = 58;
  int act = solution->sumOddLengthSubarrays(arr);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1588, sample_input02) {
  solution = new Solution();
  vector<int> arr = {1, 2};
  int exp = 3;
  int act = solution->sumOddLengthSubarrays(arr);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1588, sample_input03) {
  solution = new Solution();
  vector<int> arr = {10, 11, 12};
  int exp = 66;
  int act = solution->sumOddLengthSubarrays(arr);
  EXPECT_EQ(act, exp);
  delete solution;
}