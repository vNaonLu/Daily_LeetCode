
#ifndef Q1559_UNITTEST_H__
#define Q1559_UNITTEST_H__
#include <gtest/gtest.h>

#include "q1559.hpp"
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1559.
 *       Detect Cycles in 2D Grid
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a 2D array of characters ‘grid’ of size ‘m x n’ , you need to
 *   find if there exists any cycle consisting of the “same value” in
 *   ‘grid’
 *   A cycle is a path of “length 4 or more” in the grid that starts and
 *   ends at the same cell. From a given cell, you can move to one of the
 *   cells adjacent to it - in one of the four directions (up, down, left,
 *   or right), if it has the “same value” of the current
 *   Also, you cannot move to the cell that you visited in your last move.
 *   For example, the cycle ‘(1, 1) -> (1, 2) -> (1, 1)’ is invalid because
 *   from ‘(1, 2)’ we visited ‘(1, 1)’ which was the last visited
 *   Return ‘true’ if any cycle of the same value exists in ‘grid’ ,
 *   otherwise, return ‘false’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘m = grid.length’
 *   • ‘n = grid[i].length’
 *   • ‘1 ≤ m, n ≤ 500’
 *   • ‘grid’ consists only of lowercase English letters.
 *
 */

TEST(q1559, sample_input01) {
  l1559::Solution solver;
  vector<vector<char>> grid = {{'a', 'a', 'a', 'a'}, {'a', 'b', 'b', 'a'}, {'a', 'b', 'b', 'a'}, {'a', 'a', 'a', 'a'}};
  bool exp = true;
  EXPECT_EQ(solver.containsCycle(grid), exp);
}

TEST(q1559, sample_input02) {
  l1559::Solution solver;
  vector<vector<char>> grid = {{'c', 'c', 'c', 'a'}, {'c', 'd', 'c', 'c'}, {'c', 'c', 'e', 'c'}, {'f', 'c', 'c', 'c'}};
  bool exp = true;
  EXPECT_EQ(solver.containsCycle(grid), exp);
}

TEST(q1559, sample_input03) {
  l1559::Solution solver;
  vector<vector<char>> grid = {{'a', 'b', 'b'}, {'b', 'z', 'b'}, {'b', 'b', 'a'}};
  bool exp = false;
  EXPECT_EQ(solver.containsCycle(grid), exp);
}

#endif