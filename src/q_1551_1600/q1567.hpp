
#ifndef LEETCODE_Q1567_H__
#define LEETCODE_Q1567_H__
#include <iostream>
#include <vector>

namespace l1567 {
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1567.
 *       Maximum Length of Subarray With Positive Product
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an array of integers ‘nums’ , findthe maximum length of a
 *   subarray where the product of all its elements is
 *   A subarray of an array is a consecutive sequence of zero or more
 *   values taken out of that
 *   Return “the maximum length of a subarray with positive product” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 10^5’
 *   • ‘-10^9 ≤ nums[i]≤ 10^9’
 *
 */

class Solution {
 public:
  int getMaxLen(vector<int>& nums) {
    int res = 0;
    int positives = 0, negatives = 0;
    for(const int &x : nums){
      if(x == 0) {
        positives = 0;
        negatives = 0;
      }else if(x < 0){
        swap(negatives, positives);
        ++negatives;
        positives = positives == 0 ? 0 : positives + 1;
      }else{
        ++positives;
        negatives = negatives == 0 ? 0 : negatives + 1;
      }
      res = max(res, positives);
    }
    return res;
  }
};
}  // namespace l1567

#endif