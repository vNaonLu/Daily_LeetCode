
#ifndef Q1557_UNITTEST_H__
#define Q1557_UNITTEST_H__
#include <gtest/gtest.h>

#include <leetcode/anyorder.hpp>

#include "q1557.hpp"
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 1557.
  *       Minimum Number of Vertices to Reach All Nodes
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given a “directed acyclic graph” ,with ‘n’ vertices numbered from ‘0’
  *   to ‘n-1’ ,and an array ‘edges’ where ‘edges[i] = [fromᵢ, toᵢ]’
  *   represents a directed edge from node ‘fromᵢ’ to node ‘toᵢ’.
  *   
  *   Find “the smallest set of vertices from which all nodes in the graph
  *   are reachable” . It's guaranteed that a unique solution exists.
  *   
  *   Notice that you can return the vertices in any order.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘2 ≤ n ≤ 10^5’
  *   • ‘1 ≤ edges.length ≤ min(10^5, n × (n - 1) / 2)’
  *   • ‘edges[i].length = 2’
  *   • ‘0 ≤ from⎽(i,)toᵢ < n’
  *   • All pairs ‘(fromᵢ, toᵢ)’ are distinct.
  *
*/

TEST(q1557, sample_input01) {
  l1557::Solution solver;
  int n = 6;
  vector<vector<int>> edges = {{0, 1}, {0, 2}, {2, 5}, {3, 4}, {4, 2}};
  vector<int> exp = {0, 3};
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solver.findSmallestSetOfVertices(n, edges), exp);
}

TEST(q1557, sample_input02) {
  l1557::Solution solver;
  int n = 5;
  vector<vector<int>> edges = {{0, 1}, {2, 1}, {3, 1}, {1, 4}, {2, 4}};
  vector<int> exp = {0, 2, 3};
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solver.findSmallestSetOfVertices(n, edges), exp);
}

#endif