#include <gtest/gtest.h>
#include <iostream>
#include <queue>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1582.
 *       Special Positions in a Binary Matrix
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an ‘m x n’ binary matrix ‘mat’ , return “the number of special
 *   positions in ” ‘mat’ “.”
 *   A position ‘(i, j)’ is called “special” if ‘mat[i][j] = 1’ and all
 *   other elements in row ‘i’ and column ‘j’ are ‘0’ (rows and columns are
 *   “0-indexed” ).
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘m = mat.length’
 *   • ‘n = mat[i].length’
 *   • ‘1 ≤ m, n ≤ 100’
 *   • ‘mat[i][j]’ is either ‘0’ or ‘1’ .
 *
 */

struct q1582 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int numSpecial(vector<vector<int>>& mat) {
      int                   m = mat.size(),
                            n = mat[0].size();
      int                   res = 0;
      queue<pair<int, int>> candidates;
      /// search rows
      for (int i = 0; i < m; ++i) {
        int first_j = 0;
        bool is_cand = true;
        while (first_j < n && mat[i][first_j] == 0) ++first_j;
        for (int j = first_j + 1; j < n; ++j) {
          if (mat[i][j] == 1) {
            is_cand = false;
            break;
          }
        }
        if (is_cand && first_j != n) {
          candidates.emplace(i, first_j);
        }
      }

      /// search cols
      while (true != candidates.empty()) {
        auto [r, c] = candidates.front(); candidates.pop();
        bool only_one = true;
        for (int i = 0; i < m && only_one; ++i) {
          if (i == r) continue;
          if (mat[i][c] == 1) only_one = false;
        }
        if (only_one) ++res;
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1582, sample_input01) {
  solution = new Solution();
  vector<vector<int>> mat = {{1, 0, 0}, {0, 0, 1}, {1, 0, 0}};
  int exp = 1;
  int act = solution->numSpecial(mat);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1582, sample_input02) {
  solution = new Solution();
  vector<vector<int>> mat = {{1, 0, 0}, {0, 1, 0}, {0, 0, 1}};
  int exp = 3;
  int act = solution->numSpecial(mat);
  EXPECT_EQ(act, exp);
  delete solution;
}