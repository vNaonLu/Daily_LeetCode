#include <gtest/gtest.h>
#include <iostream>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1576.
 *       Replace All ?'s to Avoid Consecutive Repeating Characters
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a string ‘s’ containing only lowercase English letters and the
 *   ‘'?'’ character, convert “all ” the ‘'?'’ characters into lowercase
 *   letters such that the final string does not contain any “consecutive
 *   repeating ” characters. You “cannot ” modify the non ‘'?'’
 *   It is “guaranteed ” that there are no consecutive repeating characters
 *   in the given string “except ” for ‘'?'’
 *   Return “the final string after all the conversions (possibly zero)
 *   have been made” . If there is more than one solution, return “any of
 *   them” . It can be shown that an answer is always possible with the
 *   given constraints.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s.length ≤ 100’
 *   • ‘s’ consist of lowercase English letters and ‘'?'’ .
 *
 */

struct q1576 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    string modifyString(string s) {
      string res = s;
      for (int i = 0; i < res.size(); ++i) {
        if (res[i] == '?') {
          char prev = i == 0 ? '?' : res[i - 1];
          char next = i == res.size() - 1 ? '?' : res[i + 1];

          for (auto repl = 'a'; repl <= 'z'; ++repl) {
            if (repl != prev && repl != next) {
              res[i] = repl;
              break;
            }
          }
        }
      }

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1576, sample_input01) {
  solution = new Solution();
  string s = "?zs";
  string exp = "azs";
  string act = solution->modifyString(s);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1576, sample_input02) {
  solution = new Solution();
  string s = "ubv?w";
  string exp = "ubvaw";
  string act = solution->modifyString(s);
  EXPECT_EQ(act, exp);
  delete solution;
}