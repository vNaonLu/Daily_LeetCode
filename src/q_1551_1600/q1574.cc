#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1574.
 *       Shortest Subarray to be Removed to Make Array Sorted
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an integer array ‘arr’ , remove a subarray (can be empty) from
 *   ‘arr’ such that the remaining elements in ‘arr’ are “non-decreasing”
 *   Return “the length of the shortest subarray to remove”
 *   A “subarray” is a contiguous subsequence of the array.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ arr.length ≤ 10⁵’
 *   • ‘0 ≤ arr[i] ≤ 10⁹’
 *
 */

struct q1574 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int findLengthOfShortestSubarray(vector<int> &arr) {
      int n = arr.size();
      int lo = 0, hi = n - 1;
      while (hi > 0 && arr[hi - 1] <= arr[hi]) {
        --hi;
      }

      int res = hi;
      while (lo < hi && (lo == 0 || arr[lo - 1] <= arr[lo])) {
        while (hi < n && arr[hi] < arr[lo]) {
          ++hi;
        }

        res = min(res, hi - lo - 1);
        ++lo;
      }

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1574, sample_input01) {
  solution = new Solution();
  vector<int> arr = {1, 2, 3, 10, 4, 2, 3, 5};
  int exp = 3;
  int act = solution->findLengthOfShortestSubarray(arr);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1574, sample_input02) {
  solution = new Solution();
  vector<int> arr = {5, 4, 3, 2, 1};
  int exp = 4;
  int act = solution->findLengthOfShortestSubarray(arr);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1574, sample_input03) {
  solution = new Solution();
  vector<int> arr = {1, 2, 3};
  int exp = 0;
  int act = solution->findLengthOfShortestSubarray(arr);
  EXPECT_EQ(act, exp);
  delete solution;
}