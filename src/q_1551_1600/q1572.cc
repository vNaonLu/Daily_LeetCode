#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1572.
 *       Matrix Diagonal Sum
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given asquarematrix ‘mat’ , return the sum of the matrix
 *   Only include the sum of all the elements on the primary diagonal and
 *   all the elements on the secondary diagonal that are not part of the
 *   primary diagonal.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘n = mat.length = mat[i].length’
 *   • ‘1 ≤ n ≤ 100’
 *   • ‘1 ≤ mat[i][j] ≤ 100’
 *
 */

struct q1572 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int diagonalSum(vector<vector<int>>& mat) {
      int n = mat.size(),
          res = 0;

      for (int i = 0; i < n; ++i) {
        res += mat[i][i] + mat[n - 1 - i][i];
      }

      if (n & 1) {
        res -= mat[n / 2][n / 2];
      }

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1572, sample_input01) {
  solution = new Solution();
  vector<vector<int>> mat = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
  int exp = 25;
  int act = solution->diagonalSum(mat);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1572, sample_input02) {
  solution = new Solution();
  vector<vector<int>> mat = {{1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}};
  int exp = 8;
  int act = solution->diagonalSum(mat);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1572, sample_input03) {
  solution = new Solution();
  vector<vector<int>> mat = {{5}};
  int exp = 5;
  int act = solution->diagonalSum(mat);
  EXPECT_EQ(act, exp);
  delete solution;
}