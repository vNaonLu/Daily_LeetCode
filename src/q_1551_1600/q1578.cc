#include <gtest/gtest.h>
#include <iostream>
#include <string>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1578.
 *       Minimum Time to Make Rope Colorful
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Alice has ‘n’ balloons arranged on a rope. You are given a “0-indexed”
 *   string ‘colors’ where ‘colors[i]’ is the color of the ‘iᵗʰ’
 *   Alice wants the rope to be “colorful” . She does not want “two
 *   consecutive balloons” to be of the same color, so she asks Bob for
 *   help. Bob can remove some balloons from the rope to make it “colorful”
 *   . You are given a “0-indexed” integer array ‘neededTime’ where
 *   ‘neededTime[i]’ is the time (in seconds) that Bob needs to remove the
 *   ‘iᵗʰ’ balloon from the
 *   Return “the “minimum time” Bob needs to make the rope “colorful” ” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘n = colors.length = neededTime.length’
 *   • ‘1 ≤ n ≤ 10⁵’
 *   • ‘1 ≤ neededTime[i] ≤ 10⁴’
 *   • ‘colors’ contains only lowercase English letters.
 *
 */

struct q1578 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int minCost(string colors, vector<int> &neededTime) {
      auto res = (int)0;
      auto cur = (int)0;
      for (int i = 0; i < colors.size(); ++i) {
        if (i > 0 && colors[i] != colors[i - 1]) {
          cur = 0;
        }

        res += min(cur, neededTime[i]);
        cur = max(cur, neededTime[i]);
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1578, sample_input01) {
  solution               = new Solution();
  string      colors     = "abaac";
  vector<int> neededTime = {1, 2, 3, 4, 5};
  int         exp        = 3;
  int         act        = solution->minCost(colors, neededTime);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1578, sample_input02) {
  solution               = new Solution();
  string      colors     = "abc";
  vector<int> neededTime = {1, 2, 3};
  int         exp        = 0;
  int         act        = solution->minCost(colors, neededTime);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1578, sample_input03) {
  solution               = new Solution();
  string      colors     = "aabaa";
  vector<int> neededTime = {1, 2, 3, 4, 1};
  int         exp        = 2;
  int         act        = solution->minCost(colors, neededTime);
  EXPECT_EQ(act, exp);
  delete solution;
}