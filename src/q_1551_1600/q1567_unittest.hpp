
#ifndef Q1567_UNITTEST_H__
#define Q1567_UNITTEST_H__
#include <gtest/gtest.h>

#include "q1567.hpp"
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 1567.
  *       Maximum Length of Subarray With Positive Product
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given an array of integers ‘nums’ , findthe maximum length of a
  *   subarray where the product of all its elements is
  *   A subarray of an array is a consecutive sequence of zero or more
  *   values taken out of that
  *   Return “the maximum length of a subarray with positive product” .
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘1 ≤ nums.length ≤ 10^5’
  *   • ‘-10^9 ≤ nums[i]≤ 10^9’
  *
*/

TEST(q1567, sample_input01) {
  l1567::Solution solver;
  vector<int> nums = {1, -2, -3, 4};
  int exp = 4;
  EXPECT_EQ(solver.getMaxLen(nums), exp);
}

TEST(q1567, sample_input02) {
  l1567::Solution solver;
  vector<int> nums = {0, 1, -2, -3, -4};
  int exp = 3;
  EXPECT_EQ(solver.getMaxLen(nums), exp);
}

TEST(q1567, sample_input03) {
  l1567::Solution solver;
  vector<int> nums = {-1, -2, -3, 0, 1};
  int exp = 2;
  EXPECT_EQ(solver.getMaxLen(nums), exp);
}

TEST(q1567, sample_input04) {
  l1567::Solution solver;
  vector<int> nums = {-1, 2};
  int exp = 1;
  EXPECT_EQ(solver.getMaxLen(nums), exp);
}

TEST(q1567, sample_input05) {
  l1567::Solution solver;
  vector<int> nums = {1, 2, 3, 5, -6, 4, 0, 10};
  int exp = 4;
  EXPECT_EQ(solver.getMaxLen(nums), exp);
}

#endif