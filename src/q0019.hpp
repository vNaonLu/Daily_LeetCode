
#ifndef LEETCODE_Q19_H__
#define LEETCODE_Q19_H__
#include <iostream>

namespace l19 {
using namespace std;

/**
  * this file is generated by gquestion.py

  *
  * 19. Remove Nth Node From End of List
  *
  * Given the head of a linked list, remove the
  * n^(th) node from the end of the list and return its
  * head.
  *
  * Constraints:
  * - The number of nodes in the list is sz .
  * -  1 <= sz <= 30 
  * -  0 <= Node.val <= 100 
  * -  1 <= n <= sz 
  *  “Follow up:“ Could you do this in one pass?
  *
*/

struct ListNode {
  int val;
  ListNode *next;
  ListNode() : val(0), next(nullptr) {}
  ListNode(int x) : val(x), next(nullptr) {}
  ListNode(int x, ListNode *next) : val(x), next(next) {}
};

class Solution {
 public:
  ListNode *removeNthFromEnd(ListNode *head, int n) {
    ListNode dummy(0, head);
    ListNode *p = &dummy;
    ListNode *fast = &dummy;

    while (n--) {
      fast = fast->next;
    }

    while (fast != nullptr && fast->next != nullptr) {
      fast = fast->next;
      p = p->next;
    }

    p->next = p->next->next;

    return dummy.next;
  }
};
}  // namespace l19
#endif