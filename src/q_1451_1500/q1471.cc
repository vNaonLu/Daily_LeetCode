#include <gtest/gtest.h>
#include <iostream>
#include <queue>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1471.
 *       The k Strongest Values in an Array
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an array of integers ‘arr’ and an integer ‘k’
 *   A value ‘arr[i]’ is said to be stronger than a value ‘arr[j]’ if
 *   ‘|arr[i] - m| > |arr[j] - m|’ where ‘m’ is the “median” of the
 *   array.<br
 *   If ‘|arr[i] - m| = |arr[j] - m|’ , then ‘arr[i]’ is said to be
 *   stronger than ‘arr[j]’ if ‘arr[i] > arr[j]’
 *   Return “a list of the strongest ‘k’ ” values in the array. return the
 *   answer “in any arbitrary order”
 *    “Median” is the middle value in an ordered integer list. More
 *   formally, if the length of the list is n, the median is the element in
 *   position ‘((n - 1) / 2)’ in the sorted list “(0-indexed)”
 *       - For ‘arr = [6, -3, 7, 2, 11]’ , ‘n = 5’ and the median is
 *   obtained by sorting the array ‘arr = [-3, 2, 6, 7, 11]’ and the median
 *   is ‘arr[m]’ where ‘m = ((5 - 1) / 2) = 2’ . The median is ‘6’
 *       - For ‘arr = [-7, 22, 17,&thinsp;3]’ , ‘n = 4’ and the median is
 *   obtained by sorting the array ‘arr = [-7, 3, 17, 22]’ and the median
 *   is ‘arr[m]’ where ‘m = ((4 - 1) / 2) = 1’ . The median is ‘3’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ arr.length ≤ 10⁵’
 *   • ‘-10⁵ ≤ arr[i] ≤ 10⁵’
 *   • ‘1 ≤ k ≤ arr.length’
 *
 */

struct q1471 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    vector<int> getStrongest(vector<int> &arr, int k) {
      sort(arr.begin(), arr.end());
      int mid = arr[(arr.size() - 1) / 2];

      priority_queue<pair<int, int>> pq;

      for (const auto &x : arr) {
        pq.emplace(abs(x - mid), x);
      }

      vector<int> res;
      while (k--) {
        res.emplace_back(pq.top().second);
        pq.pop();
      }

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1471, sample_input01) {
  solution = new Solution();
  vector<int> arr = {1, 2, 3, 4, 5};
  int k = 2;
  vector<int> exp = {5, 1};
  vector<int> act = solution->getStrongest(arr, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1471, sample_input02) {
  solution = new Solution();
  vector<int> arr = {1, 1, 3, 5, 5};
  int k = 2;
  vector<int> exp = {5, 5};
  vector<int> act = solution->getStrongest(arr, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1471, sample_input03) {
  solution = new Solution();
  vector<int> arr = {6, 7, 11, 7, 6, 8};
  int k = 5;
  vector<int> exp = {11, 8, 6, 6, 7};
  vector<int> act = solution->getStrongest(arr, k);
  EXPECT_EQ(act, exp);
  delete solution;
}