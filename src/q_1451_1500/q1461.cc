#include <gtest/gtest.h>
#include <iostream>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1461.
 *       Check If a String Contains All Binary Codes of Size K
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a binary string ‘s’ and an integer ‘k’ , return ‘true’ “if every
 *   binary code of length” ‘k’ “is a substring of” ‘s’ . Otherwise, return
 *   ‘false’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s.length ≤ 5 × 10⁵’
 *   • ‘s[i]’ is either ‘'0'’ or ‘'1'’ .
 *   • ‘1 ≤ k ≤ 20’
 *
 */

struct q1461 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    bool hasAllCodes(string s, int k) {
      int res = 1 << k;
      vector<bool> memo(res);
      int mask = res - 1, hash = 0;

      for (int i = 0; i < s.size(); ++i) {
        hash = ((hash << 1) & mask) | (s[i] - '0');

        if (i >= k - 1 && !memo[hash]) {
          memo[hash] = true;
          if (--res == 0) {
            return true;
          }
        }
      }

      return false;
    }
  };

  class Solution *solution;
};

TEST_F(q1461, sample_input01) {
  solution = new Solution();
  string s = "00110110";
  int k = 2;
  bool exp = true;
  bool act = solution->hasAllCodes(s, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1461, sample_input02) {
  solution = new Solution();
  string s = "0110";
  int k = 1;
  bool exp = true;
  bool act = solution->hasAllCodes(s, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1461, sample_input03) {
  solution = new Solution();
  string s = "0110";
  int k = 2;
  bool exp = false;
  bool act = solution->hasAllCodes(s, k);
  EXPECT_EQ(act, exp);
  delete solution;
}