#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1464.
 *       Maximum Product of Two Elements in an Array
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given the array of integers ‘nums’ , you will choose two different
 *   indices ‘i’ and ‘j’ of that array. “Return the maximum value of”
 *   ‘(nums[i]-1)×(nums[j]-1)’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘2 ≤ nums.length ≤ 500’
 *   • ‘1 ≤ nums[i] ≤ 10^3’
 *
 */

struct q1464 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int maxProduct(vector<int> &nums) {
      int mx = 0, sec = 0;
      for (const auto &x : nums) {
        if (x > mx) {
          sec = max(sec, mx);
          mx = x;
        } else if (x > sec) {
          sec = x;
        }
      }
      return (mx - 1) * (sec - 1);
    }
  };

  class Solution *solution;
};

TEST_F(q1464, sample_input01) {
  solution = new Solution();
  vector<int> nums = {3, 4, 5, 2};
  int exp = 12;
  int act = solution->maxProduct(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1464, sample_input02) {
  solution = new Solution();
  vector<int> nums = {1, 5, 4, 5};
  int exp = 16;
  int act = solution->maxProduct(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1464, sample_input03) {
  solution = new Solution();
  vector<int> nums = {3, 7};
  int exp = 12;
  int act = solution->maxProduct(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}