#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1498.
 *       Number of Subsequences That Satisfy the Given Sum Condition
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an array of integers ‘nums’ and an integer ‘target’
 *   Return “the number of “non-empty” subsequences of ” ‘nums’ “ such that
 *   the sum of the minimum and maximum element on it is less or equal to ”
 *   ‘target’ . Since the answer may be too large, return it “modulo” ‘10⁹
 *   + 7’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 10⁵’
 *   • ‘1 ≤ nums[i] ≤ 10⁶’
 *   • ‘1 ≤ target ≤ 10⁶’
 *
 */

struct q1498 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  private:
    inline constexpr static int kMod = 1e9 + 7;
    int64_t binaryExp(int64_t a, int64_t b) {
      int res = 1;
      while (b) {
        if (b & 1) {
          res = (res * a) % kMod;
        }
        a = (a * a) % kMod;
        b >>= 1;
      }
      return res % kMod;
    }

  public:
    int numSubseq(vector<int> &nums, int target) {
      int res = 0,
          single = 0;
      for (auto &x : nums) {
        single += (x + x) <= target ? 1 : 0;
      }
      sort(nums.begin(), nums.end());

      for (auto it = nums.begin(); it != nums.end(); ++it) {
        auto find = --upper_bound(it + 1, nums.end(), target - *it);
        if (find != nums.end()) {
          res += binaryExp(2, distance(it, find)) - 1;
          res %= kMod;
        }
      }

      return res + single;
    }
  };

  class Solution *solution;
};

TEST_F(q1498, sample_input01) {
  solution = new Solution();
  vector<int> nums = {3, 5, 6, 7};
  int target = 9;
  int exp = 4;
  int act = solution->numSubseq(nums, target);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1498, sample_input02) {
  solution = new Solution();
  vector<int> nums = {3, 3, 6, 8};
  int target = 10;
  int exp = 6;
  int act = solution->numSubseq(nums, target);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1498, sample_input03) {
  solution = new Solution();
  vector<int> nums = {2, 3, 3, 4, 6, 7};
  int target = 12;
  int exp = 61;
  int act = solution->numSubseq(nums, target);
  EXPECT_EQ(act, exp);
  delete solution;
}