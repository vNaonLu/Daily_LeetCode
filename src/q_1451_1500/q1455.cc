#include <gtest/gtest.h>
#include <iostream>
#include <string>
#include <string_view>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1455.
 *       Check If a Word Occurs As a Prefix of Any Word in a Sentence
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a ‘sentence’ that consists of some words separated by a “single
 *   space” , and a ‘searchWord’ , check if ‘searchWord’ is a prefix of any
 *   word in ‘sentence’
 *   Return “the index of the word in ” ‘sentence’ “ ( “1-indexed” ) where
 *   ” ‘searchWord’ “ is a prefix of this word” . If ‘searchWord’ is a
 *   prefix of more than one word, return the index of the first word
 *   “(minimum index)” . If there is no such word return ‘-1’
 *   A “prefix” of a string ‘s’ is any leading contiguous substring of ‘s’
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ sentence.length ≤ 100’
 *   • ‘1 ≤ searchWord.length ≤ 10’
 *   • ‘sentence’ consists of lowercase English letters and spaces.
 *   • ‘searchWord’ consists of lowercase English letters.
 *
 */

struct q1455 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  private:
    vector<string_view> splitWords(string const &s) {
      auto res = vector<string_view>();
      auto beg = s.begin();

      while (beg != s.end() && *beg == ' ') {
        ++beg;
      }

      auto it = beg;
      while (beg != s.end()) {
        if (*it == ' ' || it == s.end()) {
          res.emplace_back(s.data() + distance(s.begin(), beg),
                           distance(beg, it));
          while (it != s.end() && *it == ' ') {
            ++it;
          }
          beg = it;
        } else {
          ++it;
        }
      }
      return res;
    }

  public:
    int isPrefixOfWord(string sentence, string searchWord) {
      auto words = splitWords(sentence);
      auto idx   = (int)1;
      for (auto &s : words) {
        if (s.substr(0, searchWord.size()) == searchWord) {
          return idx;
        }
        ++idx;
      }
      return -1;
    }
  };

  class Solution *solution;
};

TEST_F(q1455, sample_input01) {
  solution          = new Solution();
  string sentence   = "i love eating burger";
  string searchWord = "burg";
  int    exp        = 4;
  int    act        = solution->isPrefixOfWord(sentence, searchWord);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1455, sample_input02) {
  solution          = new Solution();
  string sentence   = "this problem is an easy problem";
  string searchWord = "pro";
  int    exp        = 2;
  int    act        = solution->isPrefixOfWord(sentence, searchWord);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1455, sample_input03) {
  solution          = new Solution();
  string sentence   = "i am tired";
  string searchWord = "you";
  int    exp        = -1;
  int    act        = solution->isPrefixOfWord(sentence, searchWord);
  EXPECT_EQ(act, exp);
  delete solution;
}