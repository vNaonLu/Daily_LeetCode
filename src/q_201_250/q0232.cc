#include <gtest/gtest.h>
#include <iostream>
#include <queue>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 232.
 *      Implement Queue using Stacks
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Implement a first in first out (FIFO) queue using only two stacks. The
 *   implemented queue should support all the functions of a normal queue (
 *   ‘push’ , ‘peek’ , ‘pop’ , and ‘empty’
 *   Implement the ‘MyQueue’
 *       -  ‘void push(int x)’ Pushes element x to the back of the
 *       -  ‘int pop()’ Removes the element from the front of the queue and
 *   returns
 *       -  ‘int peek()’ Returns the element at the front of the
 *       -  ‘boolean empty()’ Returns ‘true’ if the queue is empty, ‘false’
 *    “Notes:”
 *       - You must use “only” standard operations of a stack, which means
 *   only ‘push to top’ , ‘peek/pop from top’ , ‘size’ , and ‘is empty’
 *   operations are
 *       - Depending on your language, the stack may not be supported
 *   natively. You may simulate a stack using a list or deque (double-ended
 *   queue) as long as you use only a stack's standard operations.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ x ≤ 9’
 *   • At most ‘100’ calls will be made to ‘push’ , ‘pop’ , ‘peek’ , and ‘empty’
 * . • All the calls to ‘pop’ and ‘peek’ are valid.
 *
 */

struct q232 : public ::testing::Test {
  // Leetcode answer here
  class MyQueue {
  private:
    queue<int> stk;

  public:
    MyQueue() {}

    void push(int x) {
      auto tmp = queue<int>();
      while (!stk.empty()) {
        tmp.emplace(stk.front());
        stk.pop();
      }
      tmp.emplace(x);
      while (!tmp.empty()) {
        stk.emplace(tmp.front());
        tmp.pop();
      }
    }

    int pop() {
      auto res = stk.front();
      stk.pop();
      return res;
    }

    int peek() { return stk.front(); }

    bool empty() { return stk.empty(); }
  };

  /**
   * Your MyQueue object will be instantiated and called as such:
   * MyQueue* obj = new MyQueue();
   * obj->push(x);
   * int param_2 = obj->pop();
   * int param_3 = obj->peek();
   * bool param_4 = obj->empty();
   */

  class MyQueue *my_queue;
};

TEST_F(q232, sample_input01) {
  my_queue = new MyQueue();
  my_queue->push(1);
  my_queue->push(2);
  EXPECT_EQ(my_queue->peek(), 1);
  EXPECT_EQ(my_queue->pop(), 1);
  EXPECT_EQ(my_queue->empty(), false);
  delete my_queue;
}