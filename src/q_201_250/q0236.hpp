
#ifndef LEETCODE_Q236_H__
#define LEETCODE_Q236_H__
#include <iostream>
#include <leetcode/treenode.hpp>

namespace l236 {
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 236.
  *      Lowest Common Ancestor of a Binary Tree
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given a binary tree, find the lowest common ancestor (LCA) of two
  *   given nodes in the tree.
  *   
  *   According to the <a href="https://en.wikipedia
  *   org/wiki/Lowest_common_ancestor" target="_blank">definition of LCA on
  *   Wikipedia</a>: “The lowest common ancestor is defined between two
  *   nodes ‘p’ and ‘q’ as the lowest node in ‘T’ that has both ‘p’ and ‘q’
  *   as descendants (where we allow “a node to be a descendant of itself” ).
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • The number of nodes in the tree is in the range ‘[2, 10⁵]’ .
  *   • ‘-10⁹ ≤ Node.val ≤ 10⁹’
  *   • All ‘Node.val’ are “unique” .
  *   • ‘p ≠ q’
  *   • ‘p’ and ‘q’ will exist in the tree.
  *
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
 private:
  bool trace(TreeNode* root, TreeNode* p, vector<TreeNode*>& path) {
    if (root == nullptr) return false;
    path.push_back(root);
    if (root == p)
      return true;
    else if (trace(root->left, p, path) || trace(root->right, p, path))
      return true;
    path.pop_back();
    return false;
  }

 public:
  TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
    vector<TreeNode*> trace_p, trace_q;
    if (trace(root, p, trace_p) && trace(root, q, trace_q)) {
      TreeNode* res = nullptr;
      for (int i = 0; i < trace_p.size() && i < trace_q.size() && trace_p[i] == trace_q[i]; ++i) {
        res = trace_p[i];
      }
      return res;
    }
    return nullptr;
  }
};
}  // namespace l236

#endif