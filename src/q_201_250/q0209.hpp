
#ifndef LEETCODE_Q209_H__
#define LEETCODE_Q209_H__
#include <iostream>
#include <vector>

namespace l209 {
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 209. Minimum Size Subarray Sum
  * Given an array of positive integers nums and a
  * positive integer target , return the minimal length
  * of a “contiguous subarray“ [nums⎽(l), nums⎽(l+1),
  * ..., nums⎽(r-1), nums⎽(r)] of which the sum is
  * greater than or equal to target . If there is no such
  * subarray, return 0 instead.
  *
  * Constraints:
  * -  1 <= target <= 10^(9) 
  * -  1 <= nums.length <= 10^(5) 
  * -  1 <= nums[i] <= 10^(5) 
  *  “Follow up:“ If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log(n)) .
  *
*/
class Solution {
 public:
  int minSubArrayLen(int target, vector<int>& nums) {
    int res = nums.size() + 1;
    int r = 0, sum = 0;
    while (sum < target && r < nums.size()) {
      sum += nums[r++];
    }
    if (sum >= target) res = r;
    for (int i = 0; i < nums.size(); ++i) {
      sum -= nums[i];

      while (sum < target && r < nums.size())
        sum += nums[r++];

      if (sum >= target) {
        res = min(res, r - i - 1);
      }
    }
    return res > nums.size() ? 0 : res;
  }
};
}  // namespace l209
#endif