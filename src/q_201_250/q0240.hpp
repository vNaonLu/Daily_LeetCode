
#ifndef LEETCODE_Q240_H__
#define LEETCODE_Q240_H__
#include <iostream>
#include <vector>

namespace l240 {
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 240. Search a 2D Matrix II
  *
  * Write an efficient algorithm that searches for a
  * target value in an m x n integer matrix . The
  * matrix has the following properties:
  * - Integers in each row are sorted in ascending
  * from left to right.
  * - Integers in each column are sorted in ascending
  * from top to bottom.
  *
  * Constraints:
  * -  m == matrix.length 
  * -  n == matrix[i].length 
  * -  1 <= n, m <= 300 
  * -  -10^(9) <= matrix[i][j] <= 10^(9) 
  * - All the integers in each row are “sorted“ in ascending order.
  * - All the integers in each column are “sorted“ in ascending order.
  * -  -10^(9) <= target <= 10^(9) 
  *
*/
class Solution {
 public:
  bool searchMatrix(vector<vector<int>>& matrix, int target) {
    int r = 0, c = matrix[0].size() - 1;
    while (r < matrix.size() && c >= 0) {
      if (matrix[r][c] == target)
        return true;
      else if (matrix[r][c] > target)
        --c;
      else
        ++r;
    }
    return false;
  }
};
}  // namespace l240
#endif