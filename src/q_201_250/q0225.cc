#include <gtest/gtest.h>
#include <iostream>
#include <queue>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 225.
 *      Implement Stack using Queues
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Implement a last-in-first-out (LIFO) stack using only two queues. The
 *   implemented stack should support all the functions of a normal stack (
 *   ‘push’ , ‘top’ , ‘pop’ , and ‘empty’
 *   Implement the ‘MyStack’
 *       -  ‘void push(int x)’ Pushes element x to the top of the
 *       -  ‘int pop()’ Removes the element on the top of the stack and
 *   returns
 *       -  ‘int top()’ Returns the element on the top of the
 *       -  ‘boolean empty()’ Returns ‘true’ if the stack is empty, ‘false’
 *    “Notes:”
 *       - You must use “only” standard operations of a queue, which means
 *   that only ‘push to back’ , ‘peek/pop from front’ , ‘size’ and ‘is
 *   empty’ operations are
 *       - Depending on your language, the queue may not be supported
 *   natively. You may simulate a queue using a list or deque (double-ended
 *   queue) as long as you use only a queue's standard operations.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ x ≤ 9’
 *   • At most ‘100’ calls will be made to ‘push’ , ‘pop’ , ‘top’ , and ‘empty’ .
 *   • All the calls to ‘pop’ and ‘top’ are valid.
 *
 */

struct q225 : public ::testing::Test {
  // Leetcode answer here
  class MyStack {
   private:
    queue<int> q;
    int peek = -1;

   public:
    MyStack() {
    }

    void push(int x) {
      peek = x;
      q.push(x);
    }

    int pop() {
      int n = q.size() - 1;
      while (n--) {
        peek = q.front();
        q.push(peek);
        q.pop();
      }

      int res = q.front();
      q.pop();

      return res;
    }

    int top() {
      return peek;
    }

    bool empty() {
      return q.size() == 0;
    }
  };

  class MyStack *my_stack;
};

TEST_F(q225, sample_input01) {
  my_stack = new MyStack();
  my_stack->push(1);
  my_stack->push(2);
  EXPECT_EQ(my_stack->top(), 2);
  EXPECT_EQ(my_stack->pop(), 2);
  EXPECT_EQ(my_stack->empty(), false);
  delete my_stack;
}