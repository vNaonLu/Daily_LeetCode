
#ifndef LEETCODE_Q230_H__
#define LEETCODE_Q230_H__
#include <iostream>
#include <leetcode/treenode.hpp>
#include <stack>

namespace l230 {
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 230.
  *      Kth Smallest Element in a BST
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given the ‘root’ of a binary search tree, and an integer ‘k’ , return
  *   “the” ‘kᵗʰ’ “smallest value ( “1-indexed” ) of all the values of the
  *   nodes in the tree”.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • The number of nodes in the tree is ‘n’ .
  *   • ‘1 ≤ k ≤ n ≤ 10⁴’
  *   • ‘0 ≤ Node.val ≤ 10⁴’
  *
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *   int val;
 *   TreeNode *left;
 *   TreeNode *right;
 *   TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *   TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *   TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
 public:
  int kthSmallest(TreeNode* root, int k) {
    stack<TreeNode*> traverse;
    while(true){
      while(root != nullptr){
        traverse.push(root);
        root = root->left;
      }
      root = traverse.top();
      traverse.pop();
      if (--k == 0) return root->val;
      root = root->right;
    }
  }
};
}  // namespace l230

#endif