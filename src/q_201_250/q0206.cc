#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/listnode.hpp>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 206.
 *      Reverse Linked List
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given the ‘head’ of a singly linked list, reverse the list, and return
 *   “the reversed list” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The number of nodes in the list is the range ‘[0, 5000]’ .
 *   • ‘-5000 ≤ Node.val ≤ 5000’
 *
 */

struct q206 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    ListNode* reverseList(ListNode* head) {
      ListNode *p = head, *prev = nullptr;
      while (p) {
        ListNode* q = p->next;
        p->next = prev;
        prev = p;
        p = q;
      }
      return prev;
    }
  };

  class Solution *solution;
};

TEST_F(q206, sample_input01) {
  solution = new Solution();
  ListNode* head = ListNode::generate({1, 2, 3, 4, 5});
  ListNode* exp = ListNode::generate({5, 4, 3, 2, 1});
  ListNode* act = solution->reverseList(head);
  EXPECT_LISTNODE_EQ(act, exp);
  ListNode::release(head, exp, act);
  delete solution;
}

TEST_F(q206, sample_input02) {
  solution = new Solution();
  ListNode* head = ListNode::generate({1, 2});
  ListNode* exp = ListNode::generate({2, 1});
  ListNode* act = solution->reverseList(head);
  EXPECT_LISTNODE_EQ(act, exp);
  ListNode::release(head, exp, act);
  delete solution;
}

TEST_F(q206, sample_input03) {
  solution = new Solution();
  ListNode* head = ListNode::generate({});
  ListNode* exp = ListNode::generate({});
  ListNode* act = solution->reverseList(head);
  EXPECT_LISTNODE_EQ(act, exp);
  ListNode::release(head, exp, act);
  delete solution;
}