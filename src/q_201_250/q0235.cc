#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/treenode.hpp>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 235.
 *      Lowest Common Ancestor of a Binary Search Tree
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a binary search tree (BST), find the lowest common ancestor
 *   (LCA) of two given nodes in the
 *   According to the <a
 *   href="https://en.wikipedia.org/wiki/Lowest_common_ancestor"
 *   target="_blank">definition of LCA on Wikipedia</a>: “The lowest common
 *   ancestor is defined between two nodes ‘p’ and ‘q’ as the lowest node
 *   in ‘T’ that has both ‘p’ and ‘q’ as descendants (where we allow “a
 *   node to be a descendant of itself” ).”
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The number of nodes in the tree is in the range ‘[2, 10⁵]’ .
 *   • ‘-10⁹ ≤ Node.val ≤ 10⁹’
 *   • All ‘Node.val’ are “unique” .
 *   • ‘p ≠ q’
 *   • ‘p’ and ‘q’ will exist in the BST.
 *
 */

struct q235 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    bool isChild(TreeNode* root, TreeNode* p) {
      if (root == p)
        return true;
      else if (root == nullptr)
        return false;
      else
        return isChild(root->right, p) || isChild(root->left, p);
    }
   public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
      if (root == p || root == q) return root;
      auto p_exsit_right = isChild(root->right, p);
      auto q_exsit_right = isChild(root->right, q);
      if (p_exsit_right && q_exsit_right)
        return lowestCommonAncestor(root->right, p, q);
      else if (!p_exsit_right && !q_exsit_right)
        return lowestCommonAncestor(root->left, p, q);
      else
        return root;
    }
  };

  class Solution *solution;
};

TEST_F(q235, sample_input01) {
  solution = new Solution();
  TreeNode* root = TreeNode::generate({6, 2, 8, 0, 4, 7, 9, NULL_TREENODE, NULL_TREENODE, 3, 5});
  TreeNode* p = TreeNode::generate({});
  TreeNode* q = TreeNode::generate({});
  TreeNode* exp = TreeNode::generate({});
  TreeNode* act = solution->lowestCommonAncestor(root, p, q);
  EXPECT_TREENODE_EQ(act, exp);
  TreeNode::release(root, p, q, exp, act);
  delete solution;
}

TEST_F(q235, sample_input02) {
  solution = new Solution();
  TreeNode* root = TreeNode::generate({6, 2, 8, 0, 4, 7, 9, NULL_TREENODE, NULL_TREENODE, 3, 5});
  TreeNode* p = TreeNode::generate({});
  TreeNode* q = TreeNode::generate({});
  TreeNode* exp = TreeNode::generate({});
  TreeNode* act = solution->lowestCommonAncestor(root, p, q);
  EXPECT_TREENODE_EQ(act, exp);
  TreeNode::release(root, p, q, exp, act);
  delete solution;
}

TEST_F(q235, sample_input03) {
  solution = new Solution();
  TreeNode* root = TreeNode::generate({2, 1});
  TreeNode* p = TreeNode::generate({});
  TreeNode* q = TreeNode::generate({});
  TreeNode* exp = TreeNode::generate({});
  TreeNode* act = solution->lowestCommonAncestor(root, p, q);
  EXPECT_TREENODE_EQ(act, exp);
  TreeNode::release(root, p, q, exp, act);
  delete solution;
}