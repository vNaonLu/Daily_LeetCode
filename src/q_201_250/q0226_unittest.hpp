
#ifndef Q226_UNITTEST_H__
#define Q226_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0226.hpp"
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 226. Invert Binary Tree
  *
  * Given the root of a binary tree, invert the tree,
  * and return its root .
  *
  * Constraints:
  * - The number of nodes in the tree is in the range [0, 100] .
  * -  -100 <= Node.val <= 100 
  *
*/

TEST(q226, sample_input01) {
  int null = -1;
  TreeNode *root = TreeNode::generate({4, 2, 7, 1, 3, 6, 9}, null);
  TreeNode *exp = TreeNode::generate({4, 7, 2, 9, 6, 3, 1}, null);
  l226::Solution solver;
  EXPECT_TRUE(TreeNode::equal(solver.invertTree(root), exp));
  TreeNode::release(root);
  TreeNode::release(exp);
}

TEST(q226, sample_input02) {
  int null = -1;
  TreeNode *root = TreeNode::generate({2,1,3}, null);
  TreeNode *exp = TreeNode::generate({2, 3, 1}, null);
  l226::Solution solver;
  EXPECT_TRUE(TreeNode::equal(solver.invertTree(root), exp));
  TreeNode::release(root);
  TreeNode::release(exp);
}

TEST(q226, sample_input03) {
  int null = -1;
  TreeNode *root = TreeNode::generate({}, null);
  TreeNode *exp = TreeNode::generate({}, null);
  l226::Solution solver;
  EXPECT_TRUE(TreeNode::equal(solver.invertTree(root), exp));
  TreeNode::release(root);
  TreeNode::release(exp);
}

#endif