
#ifndef Q213_UNITTEST_H__
#define Q213_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0213.hpp"
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 213.
  *      House Robber II
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   You are a professional robber planning to rob houses along a street.
  *   Each house has a certain amount of money stashed. All houses at this
  *   place are “arranged in a circle.” That means the first house is the
  *   neighbor of the last one. Meanwhile, adjacent houses have a security
  *   system connected, and “it will automatically contact the police if two
  *   adjacent houses were broken into on the same night”.
  *   
  *   Given an integer array ‘nums’ representing the amount of money of each
  *   house, return “the maximum amount of money you can rob tonight
  *   “without alerting the police” ”.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘1 ≤ nums.length ≤ 100’
  *   • ‘0 ≤ nums[i] ≤ 1000’
  *
*/

TEST(q213, sample_input01) {
  l213::Solution solver;
  vector<int> nums = {2, 3, 2};
  int exp = 3;
  EXPECT_EQ(solver.rob(nums), exp);
}

TEST(q213, sample_input02) {
  l213::Solution solver;
  vector<int> nums = {1, 2, 3, 1};
  int exp = 4;
  EXPECT_EQ(solver.rob(nums), exp);
}

TEST(q213, sample_input03) {
  l213::Solution solver;
  vector<int> nums = {1, 2, 3};
  int exp = 3;
  EXPECT_EQ(solver.rob(nums), exp);
}

#endif