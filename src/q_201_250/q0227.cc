#include <gtest/gtest.h>
#include <iostream>
#include <stack>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 227.
 *      Basic Calculator II
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a string ‘s’ which represents an expression, “evaluate this
 *   expression and return its value”
 *   The integer division should truncate toward
 *   You may assume that the given expression is always valid. All
 *   intermediate results will be in the range of ‘[-2³¹, 2³¹ - 1]’
 *    “Note:” You are not allowed to use any built-in function which
 *   evaluates strings as mathematical expressions, such as ‘eval()’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s.length ≤ 3 × 10⁵’
 *   • ‘s’ consists of integers and operators ‘('+', '-', '×', '/')’ separated by some number of spaces.
 *   • ‘s’ represents “a valid expression” .
 *   • All the integers in the expression are non-negative integers in the range ‘[0, 2³¹ - 1]’ .
 *   • The answer is “guaranteed” to fit in a “32-bit integer” .
 *
 */

struct q227 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int calculate(string s) {
      int res = 0;
      stack<int> nums;
      char prev_op = '+';
      int cur = 0;
      for (int i = 0; i < s.size(); ++i) {
        char &c = s[i];
        if (isdigit(c)) cur = cur * 10 + (c - '0');

        if (!isdigit(c) && !iswspace(c) || i == s.size() - 1) {
          switch (prev_op) {
            case '+':
              nums.emplace(cur);
              break;
            case '-':
              nums.emplace(cur * -1);
              break;
            case '*':
              cur *= nums.top(); nums.pop();
              nums.emplace(cur);
              break;
            case '/':
              cur = nums.top() / cur; nums.pop();
              nums.emplace(cur);
              break;
            default:
              break;
          }
          prev_op = c;
          cur = 0;
        }
      }
      while (!nums.empty()) {
        res += nums.top(); nums.pop();
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q227, sample_input01) {
  solution = new Solution();
  string s = "3+2*2";
  int exp = 7;
  int act = solution->calculate(s);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q227, sample_input02) {
  solution = new Solution();
  string s = " 3/2 ";
  int exp = 1;
  int act = solution->calculate(s);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q227, sample_input03) {
  solution = new Solution();
  string s = " 3+5 / 2 ";
  int exp = 5;
  int act = solution->calculate(s);
  EXPECT_EQ(act, exp);
  delete solution;
}