
#ifndef Q235_UNITTEST_H__
#define Q235_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0235.hpp"
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 235. Lowest Common Ancestor of a Binary Search Tree
  *
  * Given a binary search tree (BST), find the lowest
  * common ancestor (LCA) of two given nodes in the
  * BST.
  * According to the <a
  * href="https://en.wikipedia.org/wiki/Lowest_common_ancestor"
  * target="_blank">definition of LCA on Wikipedia</a>: “The lowest
  * common ancestor is defined between two nodes p and q as
  * the lowest node in T that has both p and q as
  * descendants (where we allow  “a node to be a
  * descendant of itself” ).”
  *
  * Constraints:
  * - The number of nodes in the tree is in the range [2, 10^(5)] .
  * -  -10^(9) <= Node.val <= 10^(9) 
  * - All Node.val are “unique“ .
  * -  p != q 
  * -  p and q will exist in the BST.
  *
*/

TEST(q235, sample_input01) {
  l235::Solution solver;
  TreeNode *root = TreeNode::generate({6, 2, 8, 0, 4, 7, 9, NULL_TREENODE, NULL_TREENODE, 3, 5});
  TreeNode *p = root->left;
  TreeNode *q = root->right;
  TreeNode *exp = TreeNode::generate({6, 2, 8, 0, 4, 7, 9, NULL_TREENODE, NULL_TREENODE, 3, 5});
  EXPECT_TREENODE_EQ(solver.lowestCommonAncestor(root, p, q), exp);
}

TEST(q235, sample_input02) {
  l235::Solution solver;
  TreeNode *root = TreeNode::generate({6, 2, 8, 0, 4, 7, 9, NULL_TREENODE, NULL_TREENODE, 3, 5});
  TreeNode *p = root->left;
  TreeNode *q = root->left->right;
  TreeNode *exp = TreeNode::generate({2, 0, 4, NULL_TREENODE, NULL_TREENODE, 3, 5});
  EXPECT_TREENODE_EQ(solver.lowestCommonAncestor(root, p, q), exp);
}

TEST(q235, sample_input03) {
  l235::Solution solver;
  TreeNode *root = TreeNode::generate({2, 1});
  TreeNode *p = root;
  TreeNode *q = root->left;
  TreeNode *exp = TreeNode::generate({2, 1});
  EXPECT_TREENODE_EQ(solver.lowestCommonAncestor(root, p, q), exp);
}

#endif