
#ifndef LEETCODE_Q238_H__
#define LEETCODE_Q238_H__
#include <iostream>
#include <vector>

namespace l238 {
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 238. Product of Array Except Self
  * Given an integer array nums , return an array
  * answer such that answer[i] is equal to the product of
  * all the elements of nums except nums[i] .
  * The product of any prefix or suffix of nums is
  * “guaranteed“ to fit in a “32-bit“ integer.
  * You must write an algorithm that runs in O(n)
  * time and without using the division operation.
  *
  * Constraints:
  * -  2 <= nums.length <= 10^(5) 
  * -  -30 <= nums[i] <= 30 
  * - The product of any prefix or suffix of nums is “guaranteed“ to fit in a “32-bit“ integer.
  *  “Follow up:“ Can you solve the problem in O(1) extraspace complexity? (The output array “does not“ count as extra space for space complexity analysis.)
  *
*/
class Solution {
 public:
  vector<int> productExceptSelf(vector<int>& nums) {
    vector<int> res(nums.size(), 0);
    long total_prod = 1;
    int zero_cnt = 0;
    for (const auto& n : nums) {
      if (n == 0) {
        ++zero_cnt;
      } else {
        total_prod *= n;
      }
    }

    if (zero_cnt <= 1) {
      for (int i = 0; i < nums.size(); ++i) {
        res[i] = zero_cnt == 0 ? total_prod / nums[i] : (nums[i] == 0 ? total_prod : 0);
      }
    }
    return res;
  }
};
}  // namespace l238
#endif