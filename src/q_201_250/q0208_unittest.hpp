
#ifndef Q208_UNITTEST_H__
#define Q208_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0208.hpp"
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 208.
  *      Implement Trie (Prefix Tree)
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   A <a href="https://en.wikipedia.org/wiki/Trie" target="_blank"> “trie”
  *   </a> (pronounced as "try") or “prefix tree” is a tree data structure
  *   used to efficiently store and retrieve keys in a dataset of strings.
  *   There are various applications of this data structure, such as
  *   autocomplete and spellchecker.
  *   
  *   Implement the Trie.
  *   
  *   - ‘Trie()’ Initializes the trie object.
  *   
  *   - ‘void insert(String word)’ Inserts the string ‘word’ into the trie.
  *   
  *   - ‘boolean search(String word)’ Returns ‘true’ if the string ‘word’
  *   is in the trie (i.e., was inserted before), and ‘false’ otherwise.
  *   
  *   - ‘boolean startsWith(String prefix)’ Returns ‘true’ if there is a
  *   previously inserted string ‘word’ that has the prefix ‘prefix’ , and
  *   ‘false’ otherwise.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘1 ≤ word.length, prefix.length ≤ 2000’
  *   • ‘word’ and ‘prefix’ consist only of lowercase English letters.
  *   • At most ‘3 × 10⁴’ calls “in total” will be made to ‘insert’ , ‘search’ , and ‘startsWith’ .
  *
*/

TEST(q208, sample_input01) {
  l208::Trie trie;
  trie.insert("apple");
  EXPECT_EQ(trie.search("apple"), true);
  EXPECT_EQ(trie.search("app"), false);
  EXPECT_EQ(trie.startsWith("app"), true);
  trie.insert("app");
  EXPECT_EQ(trie.search("app"), true);
}

#endif