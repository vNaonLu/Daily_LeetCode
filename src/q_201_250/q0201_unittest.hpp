
#ifndef Q201_UNITTEST_H__
#define Q201_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0201.hpp"
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 201.
  *      Bitwise AND of Numbers Range
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given two integers ‘left’ and ‘right’ that represent the range ‘[left,
  *   right]’ , return “the bitwise AND of all numbers in this range,
  *   inclusive”.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘0 ≤ left ≤ right ≤ 2³¹ - 1’
  *
*/

TEST(q201, sample_input01) {
  l201::Solution solver;
  int left = 5;
  int right = 7;
  int exp = 4;
  EXPECT_EQ(solver.rangeBitwiseAnd(left, right), exp);
}

TEST(q201, sample_input02) {
  l201::Solution solver;
  int left = 0;
  int right = 0;
  int exp = 0;
  EXPECT_EQ(solver.rangeBitwiseAnd(left, right), exp);
}

TEST(q201, sample_input03) {
  l201::Solution solver;
  int left = 1;
  int right = 2147483647;
  int exp = 0;
  EXPECT_EQ(solver.rangeBitwiseAnd(left, right), exp);
}

TEST(q201, input01) {
  l201::Solution solver;
  int left = 2147483646;
  int right = 2147483647;
  int exp = 2147483646;
  EXPECT_EQ(solver.rangeBitwiseAnd(left, right), exp);
}

TEST(q201, input02) {
  l201::Solution solver;
  int left = 2147483647;
  int right = 2147483647;
  int exp = 2147483647;
  EXPECT_EQ(solver.rangeBitwiseAnd(left, right), exp);
}

#endif