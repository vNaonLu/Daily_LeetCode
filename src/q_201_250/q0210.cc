#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 210.
 *      Course Schedule II
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   There are a total of ‘numCourses’ courses you have to take, labeled
 *   from ‘0’ to ‘numCourses - 1’ . You are given an array ‘prerequisites’
 *   where ‘prerequisites[i] = [aᵢ, bᵢ]’ indicates that you “must” take
 *   course ‘bᵢ’ first if you want to take course ‘aᵢ’
 *       - For example, the pair ‘[0, 1]’ , indicates that to take course
 *   ‘0’ you have to first take course ‘1’
 *   Return “the ordering of courses you should take to finish all courses”
 *   . If there are many valid answers, return “any” of them. If it is
 *   impossible to finish all courses, return “an empty array” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ numCourses ≤ 2000’
 *   • ‘0 ≤ prerequisites.length ≤ numCourses × (numCourses - 1)’
 *   • ‘prerequisites[i].length = 2’
 *   • ‘0 ≤ aᵢ, bᵢ < numCourses’
 *   • ‘aᵢ ≠ bᵢ’
 *   • All the pairs ‘[aᵢ, bᵢ]’ are “distinct” .
 *
 */

struct q210 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    bool loop(vector<vector<int>> &graph, vector<int> &list, vector<int> &res, int i) {
      list[i] = 1;
      for (const auto &p : graph[i]) {
        if (list[p] == 1) return true;
        if (list[p] == 0)
          if (loop(graph, list, res, p)) return true;
      }
      list[i] = 2;
      res.push_back(i);
      return false;
    }

   public:
    vector<int> findOrder(int numCourses, vector<vector<int>> &prerequisites) {
      vector<int> res, list(numCourses, 0);
      vector<vector<int>> graph(numCourses);
      for (const auto &pre : prerequisites)
        graph[pre[0]].push_back(pre[1]);
      for (int i = 0; i < numCourses; ++i)
        if (list[i] == 0)
          if (loop(graph, list, res, i)) return vector<int>{};
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q210, sample_input01) {
  solution = new Solution();
  int numCourses = 2;
  vector<vector<int>> prerequisites = {{1, 0}};
  vector<int> exp = {0, 1};
  vector<int> act = solution->findOrder(numCourses, prerequisites);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q210, sample_input02) {
  solution = new Solution();
  int numCourses = 4;
  vector<vector<int>> prerequisites = {{1, 0}, {2, 0}, {3, 1}, {3, 2}};
  vector<int> exp = {0, 1, 2, 3};
  vector<int> act = solution->findOrder(numCourses, prerequisites);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q210, sample_input03) {
  solution = new Solution();
  int numCourses = 1;
  vector<vector<int>> prerequisites = {};
  vector<int> exp = {0};
  vector<int> act = solution->findOrder(numCourses, prerequisites);
  EXPECT_EQ(act, exp);
  delete solution;
}