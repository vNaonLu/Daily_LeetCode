
#ifndef Q236_UNITTEST_H__
#define Q236_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0236.hpp"
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 236.
  *      Lowest Common Ancestor of a Binary Tree
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given a binary tree, find the lowest common ancestor (LCA) of two
  *   given nodes in the tree.
  *   
  *   According to the <a href="https://en.wikipedia
  *   org/wiki/Lowest_common_ancestor" target="_blank">definition of LCA on
  *   Wikipedia</a>: “The lowest common ancestor is defined between two
  *   nodes ‘p’ and ‘q’ as the lowest node in ‘T’ that has both ‘p’ and ‘q’
  *   as descendants (where we allow “a node to be a descendant of itself” ).
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • The number of nodes in the tree is in the range ‘[2, 10⁵]’ .
  *   • ‘-10⁹ ≤ Node.val ≤ 10⁹’
  *   • All ‘Node.val’ are “unique” .
  *   • ‘p ≠ q’
  *   • ‘p’ and ‘q’ will exist in the tree.
  *
*/

TEST(q236, sample_input01) {
  l236::Solution solver;
  TreeNode* root = TreeNode::generate({3, 5, 1, 6, 2, 0, 8, NULL_TREENODE, NULL_TREENODE, 7, 4});
  TreeNode* p = root->left;
  TreeNode* q = root->right;
  TreeNode* exp = root;
  EXPECT_EQ(solver.lowestCommonAncestor(root, p, q), exp);
}

TEST(q236, sample_input02) {
  l236::Solution solver;
  TreeNode* root = TreeNode::generate({3, 5, 1, 6, 2, 0, 8, NULL_TREENODE, NULL_TREENODE, 7, 4});
  TreeNode* p = root->left;
  TreeNode* q = p->right->right;
  TreeNode* exp = p;
  EXPECT_EQ(solver.lowestCommonAncestor(root, p, q), exp);
}

TEST(q236, sample_input03) {
  l236::Solution solver;
  TreeNode* root = TreeNode::generate({1, 2});
  TreeNode* p = root;
  TreeNode* q = root->left;
  TreeNode* exp = root;
  EXPECT_EQ(solver.lowestCommonAncestor(root, p, q), exp);
}

#endif