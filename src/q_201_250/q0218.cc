#include <gtest/gtest.h>
#include <iostream>
#include <map>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 218.
 *      The Skyline Problem
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   A city's “skyline” is the outer contour of the silhouette formed by
 *   all the buildings in that city when viewed from a distance. Given the
 *   locations and heights of all the buildings, return “the “skyline”
 *   formed by these buildings collectively”
 *   The geometric information of each building is given in the array
 *   ‘buildings’ where ‘buildings[i] = [leftᵢ, rightᵢ, heightᵢ]’
 *       -  ‘leftᵢ’ is the x coordinate of the left edge of the ‘iᵗʰ’
 *       -  ‘rightᵢ’ is the x coordinate of the right edge of the ‘iᵗʰ’
 *       -  ‘heightᵢ’ is the height of the ‘iᵗʰ’
 *   You may assume all buildings are perfect rectangles grounded on an
 *   absolutely flat surface at height ‘0’
 *   The “skyline” should be represented as a list of 'key points' “sorted
 *   by their x-coordinate” in the form ‘[[x₁,y₁],[x₂,y₂],...]’ . Each key
 *   point is the left endpoint of some horizontal segment in the skyline
 *   except the last point in the list, which always has a y-coordinate ‘0’
 *   and is used to mark the skyline's termination where the rightmost
 *   building ends. Any ground between the leftmost and rightmost buildings
 *   should be part of the skyline's
 *    “Note:” There must be no consecutive horizontal lines of equal height
 *   in the output skyline. For instance, ‘[...,[2 3],[4 5],[7 5],[11
 *   5],[12 7],...]’ is not acceptable; the three lines of height 5 should
 *   be merged into one in the final output as such: ‘[...,[2 3],[4 5],[12
 *   7],...]’
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ buildings.length ≤ 10⁴’
 *   • ‘0 ≤ leftᵢ < rightᵢ ≤ 2³¹ - 1’
 *   • ‘1 ≤ heightᵢ ≤ 2³¹ - 1’
 *   • ‘buildings’ is sorted by ‘leftᵢ’ innon-decreasing order.
 *
 */

struct q218 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    vector<vector<int>> getSkyline(vector<vector<int>> &buildings) {
      auto coord = vector<pair<int, int>>();
      auto freq  = map<int, int>();
      auto res   = vector<vector<int>>();

      for (auto &v : buildings) {
        /// minus means front
        coord.emplace_back(v[0], -v[2]);
        coord.emplace_back(v[1], v[2]);
      }
      sort(coord.begin(), coord.end());

      freq[0] = 1;
      for (auto [x, y] : coord) {
        if (y < 0) {
          ++freq[-y];
        } else {
          if (--freq[y] == 0) {
            freq.erase(y);
          }
        }

        auto tallest = freq.rbegin()->first;
        if (!res.empty()) {
          auto prev_x = res.back()[0];
          auto prev_y = res.back()[1];

          if (prev_y == tallest) {
            continue;
          }

          if (prev_x == x) {
            res.pop_back();
          }
        }

        res.emplace_back(vector<int>{x, tallest});
      }

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q218, sample_input01) {
  solution                      = new Solution();
  vector<vector<int>> buildings = {
      { 2,  9, 10},
      { 3,  7, 15},
      { 5, 12, 12},
      {15, 20, 10},
      {19, 24,  8}
  };
  vector<vector<int>> exp = {
      { 2, 10},
      { 3, 15},
      { 7, 12},
      {12,  0},
      {15, 10},
      {20,  8},
      {24,  0}
  };
  vector<vector<int>> act = solution->getSkyline(buildings);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q218, sample_input02) {
  solution                      = new Solution();
  vector<vector<int>> buildings = {
      {0, 2, 3},
      {2, 5, 3}
  };
  vector<vector<int>> exp = {
      {0, 3},
      {5, 0}
  };
  vector<vector<int>> act = solution->getSkyline(buildings);
  EXPECT_EQ(act, exp);
  delete solution;
}