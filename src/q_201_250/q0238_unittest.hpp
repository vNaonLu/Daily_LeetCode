
#ifndef Q238_UNITTEST_H__
#define Q238_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0238.hpp"
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 238. Product of Array Except Self
  * Given an integer array nums , return an array
  * answer such that answer[i] is equal to the product of
  * all the elements of nums except nums[i] .
  * The product of any prefix or suffix of nums is
  * “guaranteed“ to fit in a “32-bit“ integer.
  * You must write an algorithm that runs in O(n)
  * time and without using the division operation.
  *
  * Constraints:
  * -  2 <= nums.length <= 10^(5) 
  * -  -30 <= nums[i] <= 30 
  * - The product of any prefix or suffix of nums is “guaranteed“ to fit in a “32-bit“ integer.
  *  “Follow up:“ Can you solve the problem in O(1) extraspace complexity? (The output array “does not“ count as extra space for space complexity analysis.)
  *
*/

TEST(q238, sample_input01) {
  vector<int> nums = {1, 2, 3, 4};
  vector<int> exp = {24, 12, 8, 6};
  l238::Solution solver;
  EXPECT_EQ(solver.productExceptSelf(nums), exp);
}

TEST(q238, sample_input02) {
  vector<int> nums = {-1, 1, 0, -3, 3};
  vector<int> exp = {0, 0, 9, 0, 0};
  l238::Solution solver;
  EXPECT_EQ(solver.productExceptSelf(nums), exp);
}

#endif