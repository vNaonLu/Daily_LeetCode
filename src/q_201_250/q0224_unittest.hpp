
#ifndef Q224_UNITTEST_H__
#define Q224_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0224.hpp"
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 224. Basic Calculator
  *
  * Given a string s representing a valid expression,
  * implement a basic calculator to evaluate it, and
  * return the result of the evaluation .
  * “Note:“ You are “not“ allowed to use any
  * built-in function which evaluates strings as mathematical
  * expressions, such as eval() .
  *
  * Constraints:
  * -  1 <= s.length <= 3* 10^(5) 
  * -  s consists of digits, ';+'; , ';-'; , ';('; , ';)'; , and '; '; .
  * -  s represents a valid expression.
  * -  ';+'; is not used as a unary operation.
  * -  ';-'; could be used as a unary operation but it has to be inside parentheses.
  * - There will be no two consecutive operators in the input.
  * - Every number and running calculation will fit in a signed 32-bit integer.
  *
*/

TEST(q224, sample_input01) {
  string s = "1 + 1";
  int exp = 2;
  l224::Solution solver;
  EXPECT_EQ(solver.calculate(s), exp);
}

TEST(q224, sample_input02) {
  string s = " 2-1 + 2 ";
  int exp = 3;
  l224::Solution solver;
  EXPECT_EQ(solver.calculate(s), exp);
}

TEST(q224, sample_input03) {
  string s = "(1+(4+5+2)-3)+(6+8)";
  int exp = 23;
  l224::Solution solver;
  EXPECT_EQ(solver.calculate(s), exp);
}

#endif