#include <gtest/gtest.h>
#include <iostream>
#include <string>
#include <unordered_map>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 205.
 *      Isomorphic Strings
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given two strings ‘s’ and ‘t’ , “determine if they are isomorphic”
 *   Two strings ‘s’ and ‘t’ are isomorphic if the characters in ‘s’ can be
 *   replaced to get ‘t’
 *   All occurrences of a character must be replaced with another character
 *   while preserving the order of characters. No two characters may map to
 *   the same character, but a character may map to itself.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s.length ≤ 5 × 10⁴’
 *   • ‘t.length = s.length’
 *   • ‘s’ and ‘t’ consist of any valid ascii character.
 *
 */

struct q205 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  private:
    class Dictionary {
    private:
      int                      it;
      unordered_map<char, int> mp;

    public:
      Dictionary() : it{0} {}

      int get(char c) {
        auto find = mp.find(c);
        if (find == mp.end()) {
          return mp[c] = ++it;
        }
        return find->second;
      }
    };

  public:
    bool isIsomorphic(string s, string t) {
      if (s.size() != t.size()) {
        return false;
      }
      auto dict_s = Dictionary{};
      auto dict_t = Dictionary{};
      auto sbeg   = s.begin();
      auto tbeg   = t.begin();
      while (sbeg != s.end()) {
        if (dict_s.get(*sbeg++) != dict_t.get(*tbeg++)) {
          return false;
        }
      }
      return true;
    }
  };

  class Solution *solution;
};

TEST_F(q205, sample_input01) {
  solution   = new Solution();
  string s   = "egg";
  string t   = "add";
  bool   exp = true;
  bool   act = solution->isIsomorphic(s, t);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q205, sample_input02) {
  solution   = new Solution();
  string s   = "foo";
  string t   = "bar";
  bool   exp = false;
  bool   act = solution->isIsomorphic(s, t);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q205, sample_input03) {
  solution   = new Solution();
  string s   = "paper";
  string t   = "title";
  bool   exp = true;
  bool   act = solution->isIsomorphic(s, t);
  EXPECT_EQ(act, exp);
  delete solution;
}