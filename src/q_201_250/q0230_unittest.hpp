
#ifndef Q230_UNITTEST_H__
#define Q230_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0230.hpp"
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 230.
  *      Kth Smallest Element in a BST
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given the ‘root’ of a binary search tree, and an integer ‘k’ , return
  *   “the” ‘kᵗʰ’ “smallest value ( “1-indexed” ) of all the values of the
  *   nodes in the tree”.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • The number of nodes in the tree is ‘n’ .
  *   • ‘1 ≤ k ≤ n ≤ 10⁴’
  *   • ‘0 ≤ Node.val ≤ 10⁴’
  *
*/

TEST(q230, sample_input01) {
  l230::Solution solver;
  TreeNode* root = TreeNode::generate({3, 1, 4, NULL_TREENODE, 2});
  int k = 1;
  int exp = 1;
  EXPECT_EQ(solver.kthSmallest(root, k), exp);
}

TEST(q230, sample_input02) {
  l230::Solution solver;
  TreeNode* root = TreeNode::generate({5, 3, 6, 2, 4, NULL_TREENODE, NULL_TREENODE, 1});
  int k = 3;
  int exp = 3;
  EXPECT_EQ(solver.kthSmallest(root, k), exp);
}

#endif