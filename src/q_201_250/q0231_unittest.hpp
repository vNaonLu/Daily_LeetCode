
#ifndef Q231_UNITTEST_H__
#define Q231_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0231.hpp"
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 231. Power of Two
  *
  * Given an integer n , return true if it is a power
  * of two. Otherwise, return false .
  * An integer n is a power of two, if there exists
  * an integer x such that n == 2^(x) .
  *
  * Constraints:
  * -  -2^(31) <= n <= 2^(31) - 1 
  *  “Follow up:“ Could you solve it without loops/recursion?
  *
*/

TEST(q231, sample_input01) {
  int n = 1;
  bool exp = true;
  l231::Solution solver;
  EXPECT_EQ(solver.isPowerOfTwo(n), exp);
}

TEST(q231, sample_input02) {
  int n = 16;
  bool exp = true;
  l231::Solution solver;
  EXPECT_EQ(solver.isPowerOfTwo(n), exp);
}

TEST(q231, sample_input03) {
  int n = 3;
  bool exp = false;
  l231::Solution solver;
  EXPECT_EQ(solver.isPowerOfTwo(n), exp);
}

TEST(q231, sample_input04) {
  int n = 4;
  bool exp = true;
  l231::Solution solver;
  EXPECT_EQ(solver.isPowerOfTwo(n), exp);
}

TEST(q231, sample_input05) {
  int n = 5;
  bool exp = false;
  l231::Solution solver;
  EXPECT_EQ(solver.isPowerOfTwo(n), exp);
}

#endif