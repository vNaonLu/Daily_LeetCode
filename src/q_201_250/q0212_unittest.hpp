
#ifndef Q212_UNITTEST_H__
#define Q212_UNITTEST_H__
#include <gtest/gtest.h>

#include <leetcode/anyorder.hpp>

#include "q0212.hpp"
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 212.
  *      Word Search II
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given an ‘m x n’  ‘board’ of characters and a list of strings ‘words’
  *   , return “all words on the board”.
  *   
  *   Each word must be constructed from letters of sequentially adjacent
  *   cells, where “adjacent cells” are horizontally or vertically
  *   neighboring. The same letter cell may not be used more than once in a
  *   word.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘m = board.length’
  *   • ‘n = board[i].length’
  *   • ‘1 ≤ m, n ≤ 12’
  *   • ‘board[i][j]’ is a lowercase English letter.
  *   • ‘1 ≤ words.length ≤ 3 × 10⁴’
  *   • ‘1 ≤ words[i].length ≤ 10’
  *   • ‘words[i]’ consists of lowercase English letters.
  *   • All the strings of ‘words’ are unique.
  *
*/

TEST(q212, sample_input01) {
  l212::Solution solver;
  vector<vector<char>> board = {{'o', 'a', 'a', 'n'},
                                {'e', 't', 'a', 'e'},
                                {'i', 'h', 'k', 'r'},
                                {'i', 'f', 'l', 'v'}};
  vector<string> words = {"oath", "pea", "eat", "rain"};
  vector<string> exp = {"eat", "oath"};
  EXPECT_EQ_ANY_ORDER(solver.findWords(board, words), exp);
}

TEST(q212, sample_input02) {
  l212::Solution solver;
  vector<vector<char>> board = {{'a', 'b'},
                                {'c', 'd'}};
  vector<string> words = {"abcb"};
  vector<string> exp = {};
  EXPECT_EQ_ANY_ORDER(solver.findWords(board, words), exp);
}

#endif