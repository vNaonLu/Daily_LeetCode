
#ifndef Q240_UNITTEST_H__
#define Q240_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0240.hpp"
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 240. Search a 2D Matrix II
  *
  * Write an efficient algorithm that searches for a
  * target value in an m x n integer matrix . The
  * matrix has the following properties:
  * - Integers in each row are sorted in ascending
  * from left to right.
  * - Integers in each column are sorted in ascending
  * from top to bottom.
  *
  * Constraints:
  * -  m == matrix.length 
  * -  n == matrix[i].length 
  * -  1 <= n, m <= 300 
  * -  -10^(9) <= matrix[i][j] <= 10^(9) 
  * - All the integers in each row are “sorted“ in ascending order.
  * - All the integers in each column are “sorted“ in ascending order.
  * -  -10^(9) <= target <= 10^(9) 
  *
*/

TEST(q240, sample_input01) {
  vector<vector<int>> matrix = {{1, 4, 7, 11, 15},
                                {2, 5, 8, 12, 19},
                                {3, 6, 9, 16, 22},
                                {10, 13, 14, 17, 24},
                                {18, 21, 23, 26, 30}};
  int target = 5;
  bool exp = true;
  l240::Solution solver;
  EXPECT_EQ(solver.searchMatrix(matrix, target), exp);
}

TEST(q240, sample_input02) {
  vector<vector<int>> matrix = {{1, 4, 7, 11, 15},
                                {2, 5, 8, 12, 19},
                                {3, 6, 9, 16, 22},
                                {10, 13, 14, 17, 24},
                                {18, 21, 23, 26, 30}};
  int target = 20;
  bool exp = false;
  l240::Solution solver;
  EXPECT_EQ(solver.searchMatrix(matrix, target), exp);
}

#endif