#include <gtest/gtest.h>
#include <iostream>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 231.
 *      Power of Two
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an integer ‘n’ , return “ ‘true’ if it is a power of two.
 *   Otherwise, return ‘false’ ”
 *   An integer ‘n’ is a power of two, if there exists an integer ‘x’ such
 *   that ‘n = 2ˣ’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘-2³¹ ≤ n ≤ 2³¹ - 1’
 *
 */

struct q231 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    bool isPowerOfTwo(int n) {
      return n > 0 && (n & (n - 1)) == 0;
    }
  };

  class Solution *solution;
};

TEST_F(q231, sample_input01) {
  solution = new Solution();
  int n = 1;
  bool exp = true;
  EXPECT_EQ(solution->isPowerOfTwo(n), exp);
  delete solution;
}

TEST_F(q231, sample_input02) {
  solution = new Solution();
  int n = 16;
  bool exp = true;
  EXPECT_EQ(solution->isPowerOfTwo(n), exp);
  delete solution;
}

TEST_F(q231, sample_input03) {
  solution = new Solution();
  int n = 3;
  bool exp = false;
  EXPECT_EQ(solution->isPowerOfTwo(n), exp);
  delete solution;
}

TEST_F(q231, sample_input04) {
  solution = new Solution();
  int n = 4;
  bool exp = true;
  EXPECT_EQ(solution->isPowerOfTwo(n), exp);
  delete solution;
}

TEST_F(q231, sample_input05) {
  solution = new Solution();
  int n = 5;
  bool exp = false;
  EXPECT_EQ(solution->isPowerOfTwo(n), exp);
  delete solution;
}