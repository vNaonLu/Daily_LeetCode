#include <gtest/gtest.h>
#include <iostream>
#include <unordered_set>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 202.
 *      Happy Number
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Write an algorithm to determine if a number ‘n’ is
 *   A “happy number” is a number defined by the following
 *       - Starting with any positive integer, replace the number by the
 *   sum of the squares of its
 *       - Repeat the process until the number equals 1 (where it will
 *   stay), or it “loops endlessly in a cycle” which does not include
 *       - Those numbers for which this process “ends in 1” are
 *   Return ‘true’ “if” ‘n’ “is a happy number, and” ‘false’ “if not” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ n ≤ 2³¹ - 1’
 *
 */

struct q202 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    bool isHappy(int n) {
      unordered_set<int> appeared;
      while (n != 1) {
        if (appeared.count(n)) return false;
        appeared.insert(n);
        int next = 0;
        while (n != 0) {
          int digit = n % 10;
          next += digit * digit;
          n /= 10;
        }
        n = next;
      }
      return true;
    }
  };

  class Solution *solution;
};

TEST_F(q202, sample_input01) {
  solution = new Solution();
  int n = 19;
  bool exp = true;
  EXPECT_EQ(solution->isHappy(n), exp);
  delete solution;
}

TEST_F(q202, sample_input02) {
  solution = new Solution();
  int n = 2;
  bool exp = false;
  EXPECT_EQ(solution->isHappy(n), exp);
  delete solution;
}