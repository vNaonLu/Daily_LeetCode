
#ifndef Q63_UNITTEST_H__
#define Q63_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0063.hpp"
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 63.
 *     Unique Paths II
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   A robot is located at the top-left corner of a ‘m x n’ grid (marked
 *   'Start' in the diagram
 *   The robot can only move either down or right at any point in time. The
 *   robot is trying to reach the bottom-right corner of the grid (marked
 *   'Finish' in the diagram
 *   Now consider if some obstacles are added to the grids. How many unique
 *   paths would there
 *   An obstacle and space is marked as ‘1’ and ‘0’ respectively in the
 *   grid.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘m =obstacleGrid.length’
 *   • ‘n =obstacleGrid[i].length’
 *   • ‘1 ≤ m, n ≤ 100’
 *   • ‘obstacleGrid[i][j]’ is ‘0’ or ‘1’ .
 *
 */

TEST(q63, sample_input01) {
  l63::Solution solver;
  vector<vector<int>> obstacleGrid = {{0, 0, 0}, {0, 1, 0}, {0, 0, 0}};
  int exp = 2;
  EXPECT_EQ(solver.uniquePathsWithObstacles(obstacleGrid), exp);
}

TEST(q63, sample_input02) {
  l63::Solution solver;
  vector<vector<int>> obstacleGrid = {{0, 1}, {0, 0}};
  int exp = 1;
  EXPECT_EQ(solver.uniquePathsWithObstacles(obstacleGrid), exp);
}

#endif