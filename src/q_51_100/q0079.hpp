
#ifndef LEETCODE_Q79_H__
#define LEETCODE_Q79_H__
#include <iostream>
#include <string>
#include <vector>

namespace l79 {
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 79.
  *     Word Search
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given an ‘m x n’ grid of characters ‘board’ and a string ‘word’ ,
  *   return ‘true’ “if” ‘word’ “exists in the grid”.
  *   
  *   The word can be constructed from letters of sequentially adjacent
  *   cells, where adjacent cells are horizontally or vertically neighboring
  *   The same letter cell may not be used more than once.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘m = board.length’
  *   • ‘n = board[i].length’
  *   • ‘1 ≤ m, n ≤ 6’
  *   • ‘1 ≤ word.length ≤ 15’
  *   • ‘board’ and ‘word’ consists of only lowercase and uppercase English letters.
  *
*/

class Solution {
 private:
  int m = 0;
  int n = 0;
  vector<int> direct = {1, 0, 0, 1, -1, 0, 0, -1};
  bool searching(vector<vector<char>> &b, string &s, int i, int j, int index = 0) {
    if (index >= s.size() || i >= m || i < 0 || j >= n || j < 0 || b[i][j] == ' ')
      return false;

    if (index == s.size() - 1)
      return true;

    bool res = false;
    char ch = b[i][j];
    b[i][j] = ' ';

    if (i + 1 < m && b[i + 1][j] == s[index + 1])
      res |= searching(b, s, i + 1, j, index + 1);

    if (i - 1 >= 0 && b[i - 1][j] == s[index + 1])
      res |= searching(b, s, i - 1, j, index + 1);

    if (j + 1 < n && b[i][j + 1] == s[index + 1])
      res |= searching(b, s, i, j + 1, index + 1);

    if (j - 1 >= 0 && b[i][j - 1] == s[index + 1])
      res |= searching(b, s, i, j - 1, index + 1);

    b[i][j] = ch;

    return res;
  }

 public:
  bool exist(vector<vector<char>> &board, string word) {
    m = board.size();
    n = board[0].size();
    for (int i = 0; i < m; ++i) {
      for (int j = 0; j < n; ++j) {
        if (board[i][j] == word[0] && searching(board, word, i, j))
          return true;
      }
    }
    return false;
  }
};
}  // namespace l79

#endif