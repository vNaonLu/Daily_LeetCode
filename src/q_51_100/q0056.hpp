
#ifndef LEETCODE_Q56_H__
#define LEETCODE_Q56_H__
#include <iostream>
#include <vector>

namespace l56 {
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 56. Merge Intervals
  *
  * Given an arrayof intervals where intervals[i] =
  * [start⎽(i), end⎽(i)] , merge all overlapping
  * intervals, and return an array of the non-overlapping
  * intervals that cover all the intervals in the input
  * .
  *
  * Constraints:
  * -  1 <= intervals.length <= 10^(4) 
  * -  intervals[i].length == 2 
  * -  0 <= start⎽(i) <= end⎽(i) <= 10^(4) 
  *
*/
class Solution {
 public:
  vector<vector<int>> merge(vector<vector<int>>& intervals) {
    if (intervals.size() == 0) return vector<vector<int>>();
    sort(intervals.begin(), intervals.end());
    vector<vector<int>> ret;
    vector<int> cur;
    for (int i = 0; i < intervals.size(); i++) {
      if (cur.empty()) {
        cur = intervals[i];
      } else {
        if (cur[1] >= intervals[i][0]) {
          cur[1] = max(intervals[i][1], cur[1]);
        } else {
          ret.push_back(cur);
          cur = intervals[i];
        }
      }
    }
    if (!cur.empty()) ret.push_back(cur);
    return ret;
  }
};
}  // namespace l56
#endif