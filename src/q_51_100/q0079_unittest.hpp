
#ifndef Q79_UNITTEST_H__
#define Q79_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0079.hpp"
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 79.
  *     Word Search
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given an ‘m x n’ grid of characters ‘board’ and a string ‘word’ ,
  *   return ‘true’ “if” ‘word’ “exists in the grid”.
  *   
  *   The word can be constructed from letters of sequentially adjacent
  *   cells, where adjacent cells are horizontally or vertically neighboring
  *   The same letter cell may not be used more than once.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘m = board.length’
  *   • ‘n = board[i].length’
  *   • ‘1 ≤ m, n ≤ 6’
  *   • ‘1 ≤ word.length ≤ 15’
  *   • ‘board’ and ‘word’ consists of only lowercase and uppercase English letters.
  *
*/

TEST(q79, sample_input01) {
  l79::Solution solver;
  vector<vector<char>> board = {{'A', 'B', 'C', 'E'}, {'S', 'F', 'C', 'S'}, {'A', 'D', 'E', 'E'}};
  string word = "ABCCED";
  bool exp = true;
  EXPECT_EQ(solver.exist(board, word), exp);
}

TEST(q79, sample_input02) {
  l79::Solution solver;
  vector<vector<char>> board = {{'A', 'B', 'C', 'E'}, {'S', 'F', 'C', 'S'}, {'A', 'D', 'E', 'E'}};
  string word = "SEE";
  bool exp = true;
  EXPECT_EQ(solver.exist(board, word), exp);
}

TEST(q79, sample_input03) {
  l79::Solution solver;
  vector<vector<char>> board = {{'A', 'B', 'C', 'E'}, {'S', 'F', 'C', 'S'}, {'A', 'D', 'E', 'E'}};
  string word = "ABCB";
  bool exp = false;
  EXPECT_EQ(solver.exist(board, word), exp);
}

#endif