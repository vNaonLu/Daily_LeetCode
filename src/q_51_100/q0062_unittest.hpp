
#ifndef Q62_UNITTEST_H__
#define Q62_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0062.hpp"
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 62.
  *     Unique Paths
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   A robot is located at the top-left corner of a ‘m x n’ grid (marked
  *   'Start' in the diagram below).
  *   
  *   The robot can only move either down or right at any point in time. The
  *   robot is trying to reach the bottom-right corner of the grid (marked
  *   'Finish' in the diagram below).
  *   
  *   How many possible unique paths are.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘1 ≤ m, n ≤ 100’
  *   • It&#39;s guaranteed that the answer will be less than or equal to ‘2 × 10⁹’ .
  *
*/

TEST(q62, sample_input01) {
  l62::Solution solver;
  int m = 3;
  int n = 7;
  int exp = 28;
  EXPECT_EQ(solver.uniquePaths(m, n), exp);
}

TEST(q62, sample_input02) {
  l62::Solution solver;
  int m = 3;
  int n = 2;
  int exp = 3;
  EXPECT_EQ(solver.uniquePaths(m, n), exp);
}

TEST(q62, sample_input03) {
  l62::Solution solver;
  int m = 7;
  int n = 3;
  int exp = 28;
  EXPECT_EQ(solver.uniquePaths(m, n), exp);
}

TEST(q62, sample_input04) {
  l62::Solution solver;
  int m = 3;
  int n = 3;
  int exp = 6;
  EXPECT_EQ(solver.uniquePaths(m, n), exp);
}

#endif