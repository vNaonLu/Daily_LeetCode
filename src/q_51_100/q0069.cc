#include <gtest/gtest.h>
#include <iostream>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 69.
 *     Sqrt(x)
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a non-negative integer ‘x’ ,compute and return “the square root
 *   of” ‘x’
 *   Since the return typeis an integer, the decimal digits are “truncated”
 *   , and only “the integer part” of the resultis
 *    “Note:” You are not allowed to use any built-in exponent function or
 *   operator, such as ‘pow(x, 0.5)’ or ‘x ×× 0.5’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘0 ≤ x ≤ 2³¹ - 1’
 *
 */

struct q69 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int mySqrt(int x) {
      if (x <= 1) return x;
      int64_t l = 1, r = x;
      while (r - l > 1) {
        int64_t mid = l + (r - l) / 2;
        if (mid * mid < x) {
          l = mid;
        } else if (mid * mid > x) {
          r = mid - 1;
        } else return mid;
      }
      return r * r <= x ? r : l;
    }
  };

  class Solution *solution;
};

TEST_F(q69, sample_input01) {
  solution = new Solution();
  int x = 4;
  int exp = 2;
  int act = solution->mySqrt(x);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q69, sample_input02) {
  solution = new Solution();
  int x = 8;
  int exp = 2;
  int act = solution->mySqrt(x);
  EXPECT_EQ(act, exp);
  delete solution;
}