
#ifndef LEETCODE_Q96_H__
#define LEETCODE_Q96_H__
#include <iostream>

namespace l96 {
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 96.
  *     Unique Binary Search Trees
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given an integer ‘n’ , return “the number of structurally unique
  *   “BST&#39;” s (binary search trees) which has exactly ” ‘n’ “ nodes of
  *   unique values from” ‘1’ “to” ‘n’.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘1 ≤ n ≤ 19’
  *
*/

class Solution {
 public:
  int numTrees(int n) {
    vector<int> dp(n + 1, 1);
    dp[0] = 0;
    for (int i = 2; i < dp.size(); ++i) {
      dp[i] = 2 * dp[i - 1];
      for (int j = 2; j < i; ++j)
        dp[i] += dp[j - 1] * dp[i - j];
    }
    return dp.back();
  }
};
}  // namespace l96

#endif