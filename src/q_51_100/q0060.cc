#include <gtest/gtest.h>
#include <iostream>
#include <string>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 60.
 *     Permutation Sequence
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   The set ‘[1, 2, 3, ...,n]’ contains a total of ‘n!’ unique
 *   By listing and labeling all of the permutations in order, we get the
 *   following sequence for ‘n = 3’
 *       1.  ‘'123'’
 *       2.  ‘'132'’
 *       3.  ‘'213'’
 *       4.  ‘'231'’
 *       5.  ‘'312'’
 *       6.  ‘'321'’
 *   Given ‘n’ and ‘k’ , return the ‘kᵗʰ’ permutation sequence.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ n ≤ 9’
 *   • ‘1 ≤ k ≤ n!’
 *
 */

struct q60 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    string getPermutation(int n, int k) {
      string      raw = "123456789";
      string      res;
      vector<int> step_table(n, 1);
      for (int i = 1; i < n; ++i) step_table[i] = step_table[i - 1] * i;
      --k;
      for (int i = n - 1; i >= 0; --i) {
        int idx = k / step_table[i];
        k %= step_table[i];
        res.push_back(raw[idx]);
        raw.erase(raw.begin() + idx);
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q60, sample_input01) {
  solution = new Solution();
  int n = 3;
  int k = 3;
  string exp = "213";
  string act = solution->getPermutation(n, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q60, sample_input02) {
  solution = new Solution();
  int n = 4;
  int k = 9;
  string exp = "2314";
  string act = solution->getPermutation(n, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q60, sample_input03) {
  solution = new Solution();
  int n = 3;
  int k = 1;
  string exp = "123";
  string act = solution->getPermutation(n, k);
  EXPECT_EQ(act, exp);
  delete solution;
}