#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/treenode.hpp>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 98.
 *     Validate Binary Search Tree
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given the ‘root’ of a binary tree, “determine if it is a valid binary
 *   search tree (BST)”
 *   A “valid BST” is defined as
 *       - The left subtree of a node contains only nodes with keys “less
 *   than” the node's
 *       - The right subtree of a node contains only nodes with keys
 *   “greater than” the node's
 *       - Both the left and right subtrees must also be binary search
 *   trees.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The number of nodes in the tree is in the range ‘[1, 10⁴]’ .
 *   • ‘-2³¹ ≤ Node.val ≤ 2³¹ - 1’
 *
 */

struct q98 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    bool isBST(TreeNode* p, long min, long max) {
      if (!p) return true;
      if (p->val <= min || p->val >= max) return false;
      return isBST(p->left, min, p->val) && isBST(p->right, p->val, max);
    }
   public:
    bool isValidBST(TreeNode* root) {
      return isBST(root, numeric_limits<long>::min(), numeric_limits<long>::max());
    }
  };

  class Solution *solution;
};

TEST_F(q98, sample_input01) {
  solution = new Solution();
  TreeNode* root = TreeNode::generate({2, 1, 3});
  bool exp = true;
  EXPECT_EQ(solution->isValidBST(root), exp);
  delete solution;
}

TEST_F(q98, sample_input02) {
  solution = new Solution();
  TreeNode* root = TreeNode::generate({5, 1, 4, NULL_TREENODE, NULL_TREENODE, 3, 6});
  bool exp = false;
  EXPECT_EQ(solution->isValidBST(root), exp);
  delete solution;
}