#include <gtest/gtest.h>
#include <iostream>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 96.
 *     Unique Binary Search Trees
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an integer ‘n’ , return “the number of structurally unique
 *   “BST'” s (binary search trees) which has exactly ” ‘n’ “ nodes of
 *   unique values from” ‘1’ “to” ‘n’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ n ≤ 19’
 *
 */

struct q96 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int numTrees(int n) {
      vector<int> dp(n + 1, 1);
      dp[0] = 0;
      for (int i = 2; i < dp.size(); ++i) {
        dp[i] = 2 * dp[i - 1];
        for (int j = 2; j < i; ++j)
          dp[i] += dp[j - 1] * dp[i - j];
      }
      return dp.back();
    }
  };

  class Solution *solution;
};

TEST_F(q96, sample_input01) {
  solution = new Solution();
  int n = 3;
  int exp = 5;
  EXPECT_EQ(solution->numTrees(n), exp);
  delete solution;
}

TEST_F(q96, sample_input02) {
  solution = new Solution();
  int n = 1;
  int exp = 1;
  EXPECT_EQ(solution->numTrees(n), exp);
  delete solution;
}