#include <array>
#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 54.
 *     Spiral Matrix
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an ‘m x n’  ‘matrix’ , return “all elements of the” ‘matrix’ “in
 *   spiral order” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘m = matrix.length’
 *   • ‘n = matrix[i].length’
 *   • ‘1 ≤ m, n ≤ 10’
 *   • ‘-100 ≤ matrix[i][j] ≤ 100’
 *
 */

struct q54 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  private:
    inline constexpr static array<pair<int, int>, 4> dir = {
        make_pair(0, 1), make_pair(-1, 0), make_pair(0, -1), make_pair(1, 0)};

  public:
    vector<int> spiralOrder(vector<vector<int>> &matrix) {
      auto m       = matrix.size();
      auto n       = matrix.front().size();
      auto res     = vector<int>(m * n, 0);
      auto step    = 0;
      auto curr    = make_pair(0, 0);
      auto beg     = res.begin();
      *beg++       = matrix[0][0];
      matrix[0][0] = -101;
      while (beg != res.end()) {
        auto &[x, y]   = curr;
        auto &[dx, dy] = dir[step & 3];

        if (x + dx >= 0 && x + dx < m && y + dy >= 0 && y + dy < n &&
            matrix[x + dx][y + dy] != -101) {
          x += dx;
          y += dy;
          *beg++       = matrix[x][y];
          matrix[x][y] = -101;
        } else {
          ++step;
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q54, sample_input01) {
  solution                   = new Solution();
  vector<vector<int>> matrix = {
      {1, 2, 3},
      {4, 5, 6},
      {7, 8, 9}
  };
  vector<int> exp = {1, 2, 3, 6, 9, 8, 7, 4, 5};
  EXPECT_EQ(solution->spiralOrder(matrix), exp);
  delete solution;
}

TEST_F(q54, sample_input02) {
  solution                   = new Solution();
  vector<vector<int>> matrix = {
      {1,  2,  3,  4},
      {5,  6,  7,  8},
      {9, 10, 11, 12}
  };
  vector<int> exp = {1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7};
  EXPECT_EQ(solution->spiralOrder(matrix), exp);
  delete solution;
}