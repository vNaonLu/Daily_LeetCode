#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 54.
 *     Spiral Matrix
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an ‘m x n’  ‘matrix’ , return “all elements of the” ‘matrix’ “in
 *   spiral order” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘m = matrix.length’
 *   • ‘n = matrix[i].length’
 *   • ‘1 ≤ m, n ≤ 10’
 *   • ‘-100 ≤ matrix[i][j] ≤ 100’
 *
 */

struct q54 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    typedef pair<int, int> coord;
    vector<coord> dir = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
    int null = -100;
   public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
      int cur_dir = 0;
      int m = matrix.size(), n = matrix[0].size();
      int i = -1;
      coord p = {0, -1};
      vector<int> res(m * n, 0);
      while (i < m * n - 1) {
        coord np = p;
        np.first += dir[cur_dir].first;
        np.second += dir[cur_dir].second;
        if (np.first >= 0 && np.first < m &&
            np.second >= 0 && np.second < n &&
            matrix[np.first][np.second] > null) {
          res[++i] = matrix[np.first][np.second];
          matrix[np.first][np.second] = null;
          p = np;
        } else {
          cur_dir = (cur_dir + 1) % 4;
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q54, sample_input01) {
  solution = new Solution();
  vector<vector<int>> matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
  vector<int> exp = {1, 2, 3, 6, 9, 8, 7, 4, 5};
  EXPECT_EQ(solution->spiralOrder(matrix), exp);
  delete solution;
}

TEST_F(q54, sample_input02) {
  solution = new Solution();
  vector<vector<int>> matrix = {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}};
  vector<int> exp = {1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7};
  EXPECT_EQ(solution->spiralOrder(matrix), exp);
  delete solution;
}