#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/treenode.hpp>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 99.
 *     Recover Binary Search Tree
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given the ‘root’ of a binary search tree (BST), where the
 *   values of “exactly” two nodes of the tree were swapped by mistake.
 *   “Recover the tree without changing its structure” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The number of nodes in the tree is in the range ‘[2, 1000]’ .
 *   • ‘-2³¹ ≤ Node.val ≤ 2³¹ - 1’
 *
 */

struct q99 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    void find(TreeNode *p, TreeNode *&pre, TreeNode *&first, TreeNode *&second) {
      if (nullptr == p) {
        return;
      }

      find(p->left, pre, first, second);

      if (first == nullptr && p->val < pre->val) {
        first = pre;
      }

      if (first != nullptr && p->val < pre->val) {
        second = p;
      }

      pre = p;

      find(p->right, pre, first, second);
    }

   public:
    void recoverTree(TreeNode *root) {
      TreeNode *p = new TreeNode(numeric_limits<int>::min()),
               *miss_1 = nullptr,
               *miss_2 = nullptr;
      find(root, p, miss_1, miss_2);
      swap(miss_1->val, miss_2->val);
    }
  };

  class Solution *solution;
};

TEST_F(q99, sample_input01) {
  solution = new Solution();
  TreeNode* root = TreeNode::generate({1, 3, NULL_TREENODE, NULL_TREENODE, 2});
  TreeNode* exp = TreeNode::generate({3, 1, NULL_TREENODE, NULL_TREENODE, 2});
  solution->recoverTree(root);
  // Assume the first argument is answer.
  EXPECT_TREENODE_EQ(root, exp);
  TreeNode::release(root);
  delete solution;
}

TEST_F(q99, sample_input02) {
  solution = new Solution();
  TreeNode* root = TreeNode::generate({3, 1, 4, NULL_TREENODE, NULL_TREENODE, 2});
  TreeNode* exp = TreeNode::generate({2, 1, 4, NULL_TREENODE, NULL_TREENODE, 3});
  solution->recoverTree(root);
  // Assume the first argument is answer.
  EXPECT_TREENODE_EQ(root, exp);
  TreeNode::release(root);
  delete solution;
}