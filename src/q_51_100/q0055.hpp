
#ifndef LEETCODE_Q55_H__
#define LEETCODE_Q55_H__
#include <algorithm>
#include <iostream>
#include <vector>

namespace l55 {
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 55.
  *     Jump Game
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   You are given an integer array ‘nums’ . You are initially positioned
  *   at the array&#39;s “first index” , and each element in the array
  *   represents your maximum jump length at that position.
  *   
  *   Return ‘true’ “ if you can reach the last index, or ” ‘false’ “
  *   otherwise”.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘1 ≤ nums.length ≤ 10⁴’
  *   • ‘0 ≤ nums[i] ≤ 10⁵’
  *
*/

class Solution {
 public:
  bool canJump(vector<int>& nums) {
    int current_position = 0;
    for (int i = 0; i < nums.size() && current_position < nums.size(); ++i) {
      if (current_position < i) return false;
      current_position = max(current_position,
                             nums[i] + i);
    }
    return true;
  }
};
}  // namespace l55

#endif