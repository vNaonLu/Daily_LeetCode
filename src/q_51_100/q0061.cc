#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/listnode.hpp>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 61.
 *     Rotate List
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given the ‘head’ of a linkedlist, rotate the list to the right by ‘k’
 *   places.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The number of nodes in the list is in the range ‘[0, 500]’ .
 *   • ‘-100 ≤ Node.val ≤ 100’
 *   • ‘0 ≤ k ≤ 2 × 10⁹’
 *
 */

struct q61 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    ListNode* rotateRight(ListNode* head, int k) {
      if (head == nullptr) return head;
      int n = 0;
      auto *p = head, *last = head;
      while (p) {
        n++;
        last = p;
        p = p->next;
      }

      int cnt = n - k % n;

      if (cnt == n) return head;
      int cur = 1;
      auto* newLast = head;
      while (cur < cnt) {
        cur++;
        newLast = newLast->next;
      }
      p = newLast->next;
      newLast->next = nullptr;
      last->next = head;

      return p;
    }
  };

  class Solution *solution;
};

TEST_F(q61, sample_input01) {
  solution = new Solution();
  ListNode* head = ListNode::generate({1, 2, 3, 4, 5});
  int k = 2;
  ListNode* exp = ListNode::generate({4, 5, 1, 2, 3});
  ListNode* act = solution->rotateRight(head, k);
  EXPECT_LISTNODE_EQ(act, exp);
  ListNode::release(head, exp, act);
  delete solution;
}

TEST_F(q61, sample_input02) {
  solution = new Solution();
  ListNode* head = ListNode::generate({0, 1, 2});
  int k = 4;
  ListNode* exp = ListNode::generate({2, 0, 1});
  ListNode* act = solution->rotateRight(head, k);
  EXPECT_LISTNODE_EQ(act, exp);
  ListNode::release(head, exp, act);
  delete solution;
}