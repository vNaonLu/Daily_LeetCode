#include <gtest/gtest.h>
#include <iostream>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 97.
 *     Interleaving String
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given strings ‘s1’ , ‘s2’ , and ‘s3’ , find whether ‘s3’ is formed by
 *   an “interleaving” of ‘s1’ and ‘s2’
 *   An “interleaving” of two strings ‘s’ and ‘t’ is a configuration where
 *   they are divided into “non-empty” substrings such
 *       -  ‘s = s₁ + s₂ + ... + sₙ’
 *       -  ‘t = t₁ + t₂ + ... + tₘ’
 *       -  ‘|n - m| ≤ 1’
 *       - The “interleaving” is ‘s₁ + t₁ + s₂ + t₂ + s₃ + t₃ + ...’ or ‘t₁
 *   + s₁ + t₂ + s₂ + t₃ + s₃ + ...’
 *    “Note:” ‘a + b’ is the concatenation of strings ‘a’ and ‘b’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘0 ≤ s1.length, s2.length ≤ 100’
 *   • ‘0 ≤ s3.length ≤ 200’
 *   • ‘s1’ , ‘s2’ , and ‘s3’ consist of lowercase English letters.
 *
 */

struct q97 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    bool isInterleave(string s1, string s2, string s3) {
      if (s1.size() + s2.size() != s3.size()) {
        return false;
      }

      vector<int> dp(s2.size() + 1);
      for (int i = 0; i <= s1.size(); ++i) {
        for (int j = 0; j <= s2.size(); ++j) {
          if (i == 0 && j == 0) {
            dp[j] = true;
          } else if (i == 0) {
            dp[j] = dp[j - 1] && s2[j - 1] == s3[i + j - 1];
          } else if (j == 0) {
            dp[j] = dp[j] && s1[i - 1] == s3[i + j - 1];
          } else {
            dp[j] = (dp[j] && s1[i - 1] == s3[i + j - 1] || dp[j - 1] && s2[j - 1] == s3[i + j - 1]);
          }
        }
      }

      return dp.back();
    }
  };

  class Solution *solution;
};

TEST_F(q97, sample_input01) {
  solution = new Solution();
  string s1 = "aabcc";
  string s2 = "dbbca";
  string s3 = "aadbbcbcac";
  bool exp = true;
  bool act = solution->isInterleave(s1, s2, s3);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q97, sample_input02) {
  solution = new Solution();
  string s1 = "aabcc";
  string s2 = "dbbca";
  string s3 = "aadbbbaccc";
  bool exp = false;
  bool act = solution->isInterleave(s1, s2, s3);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q97, sample_input03) {
  solution = new Solution();
  string s1 = "";
  string s2 = "";
  string s3 = "";
  bool exp = true;
  bool act = solution->isInterleave(s1, s2, s3);
  EXPECT_EQ(act, exp);
  delete solution;
}