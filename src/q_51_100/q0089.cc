#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 89.
 *     Gray Code
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   An “n-bit gray code sequence” is a sequence of ‘2ⁿ’ integers
 *       - Every integer is in the “inclusive” range ‘[0, 2ⁿ - 1]’
 *       - The first integer is ‘0’
 *       - An integer appears “no more than once” in the
 *       - The binary representation of every pair of “adjacent” integers
 *   differs by “exactly one bit” ,
 *       - The binary representation of the “first” and “last” integers
 *   differs by “exactly one bit”
 *   Given an integer ‘n’ , return “any valid “n-bit gray code sequence” ”
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ n ≤ 16’
 *
 */

struct q89 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  private:
    void solve(vector<int> &res, int n, int &x, int p) {
      if (n == 0) {
        res.emplace_back(x);
      } else {
        auto mask = 1 << p;
        solve(res, n - 1, x, p + 1);
        x ^= mask;
        solve(res, n - 1, x, p + 1);
      }
    }

  public:
    vector<int> grayCode(int n) {
      auto res = vector<int>();
      auto x = 0;

      solve(res, n, x, 0);

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q89, sample_input01) {
  solution = new Solution();
  int n = 2;
  vector<int> exp = {0, 2, 3, 1};
  vector<int> act = solution->grayCode(n);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q89, sample_input02) {
  solution = new Solution();
  int n = 1;
  vector<int> exp = {0, 1};
  vector<int> act = solution->grayCode(n);
  EXPECT_EQ(act, exp);
  delete solution;
}