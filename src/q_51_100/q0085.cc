#include <gtest/gtest.h>
#include <iostream>
#include <stack>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 85.
 *     Maximal Rectangle
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a ‘rows x cols’ binary ‘matrix’ filled with ‘0’ 's and ‘1’ 's,
 *   find the largest rectangle containing only ‘1’ 's and return “its
 *   area” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘rows = matrix.length’
 *   • ‘cols = matrix[i].length’
 *   • ‘1 ≤ row, cols ≤ 200’
 *   • ‘matrix[i][j]’ is ‘'0'’ or ‘'1'’ .
 *
 */

struct q85 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int maximalRectangle(vector<vector<char>>& matrix) {
      if (matrix.empty()) return 0;
      int m = matrix.size(),
          n = matrix[0].size();
      vector<vector<int>> grid(m, vector<int>(n, 0));
      int area = 0;
      for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
          if (i == 0) {
            grid[i][j] = matrix[i][j] - '0';
          } else {
            if (matrix[i][j] == '0')
              grid[i][j] = 0;
            else
              grid[i][j] = 1 + grid[i - 1][j];
          }
        }
        vector<int> left(n), right(n);
        stack<int> stk;
        for (int j = 0; j < n; ++j) {
          int cur = grid[i][j];
          while (!stk.empty() && grid[i][stk.top()] >= cur) stk.pop();
          if (stk.empty())
            left[j] = -1;
          else
            left[j] = stk.top();
          stk.emplace(j);
        }
        stk = {};
        for (int j = n - 1; j >= 0; --j) {
          int cur = grid[i][j];
          while (!stk.empty() && grid[i][stk.top()] >= cur) stk.pop();
          if (stk.empty())
            right[j] = n;
          else
            right[j] = stk.top();
          stk.emplace(j);
        }
        for (int j = 0; j < n; ++j)
          area = max(area, (grid[i][j] * (right[j] - left[j] - 1)));
      }
      return area;
    }
  };

  class Solution *solution;
};

TEST_F(q85, sample_input01) {
  solution = new Solution();
  vector<vector<char>> matrix = {{'1', '0', '1', '0', '0'}, {'1', '0', '1', '1', '1'}, {'1', '1', '1', '1', '1'}, {'1', '0', '0', '1', '0'}};
  int exp = 6;
  EXPECT_EQ(solution->maximalRectangle(matrix), exp);
  delete solution;
}

TEST_F(q85, sample_input02) {
  solution = new Solution();
  vector<vector<char>> matrix = {{'0'}};
  int exp = 0;
  EXPECT_EQ(solution->maximalRectangle(matrix), exp);
  delete solution;
}

TEST_F(q85, sample_input03) {
  solution = new Solution();
  vector<vector<char>> matrix = {{'1'}};
  int exp = 1;
  EXPECT_EQ(solution->maximalRectangle(matrix), exp);
  delete solution;
}