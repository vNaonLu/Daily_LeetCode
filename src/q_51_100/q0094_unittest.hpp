
#ifndef Q94_UNITTEST_H__
#define Q94_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0094.hpp"
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 94. Binary Tree Inorder Traversal
  *
  * Given the root of a binary tree, return the
  * inorder traversal of its nodes'; values .
  *
  * Constraints:
  * - The number of nodes in the tree is in the range [0, 100] .
  * -  -100 <= Node.val <= 100 
  *  “Follow up:“ Recursive solution is trivial, could you do it iteratively?
  *
*/

TEST(q94, sample_input01) {
  TreeNode *root = TreeNode::generate({1, NULL_TREENODE, 2, NULL_TREENODE, NULL_TREENODE, 3});
  vector<int> exp = {1, 3, 2};
  l94::Solution solver;
  EXPECT_EQ(solver.inorderTraversal(root), exp);
}

TEST(q94, sample_input02) {
  TreeNode *root = TreeNode::generate({});
  vector<int> exp = {};
  l94::Solution solver;
  EXPECT_EQ(solver.inorderTraversal(root), exp);
}

TEST(q94, sample_input03) {
  TreeNode *root = TreeNode::generate({1});
  vector<int> exp = {1};
  l94::Solution solver;
  EXPECT_EQ(solver.inorderTraversal(root), exp);
}

TEST(q94, sample_input04) {
  TreeNode *root = TreeNode::generate({1, 2});
  vector<int> exp = {2, 1};
  l94::Solution solver;
  EXPECT_EQ(solver.inorderTraversal(root), exp);
}

TEST(q94, sample_input05) {
  TreeNode *root = TreeNode::generate({1, NULL_TREENODE, 2});
  vector<int> exp = {1, 2};
  l94::Solution solver;
  EXPECT_EQ(solver.inorderTraversal(root), exp);
}

#endif