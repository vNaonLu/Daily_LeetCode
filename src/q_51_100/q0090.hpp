
#ifndef LEETCODE_Q90_H__
#define LEETCODE_Q90_H__
#include <algorithm>
#include <iostream>
#include <vector>

namespace l90 {
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * #90
  *     Subsets II
  *
  *============================= Description =============================
  *
  *   Given an integer array ‘nums‘ that may contain duplicates, return all
  *   possible subsets (the power set).
  *   
  *   The solution set “must not” contain duplicate subsets. Return the
  *   solution in “any order”.
  *
  * ============================= Constraints =============================
  *
  *   • ‘1 <= nums.length <= 10‘
  *   • ‘-10 <= nums[i] <= 10‘
  *
*/

class Solution {
 public:
  vector<vector<int>> subsetsWithDup(vector<int>& nums) {
    vector<vector<int>> res(1, vector<int>());
    sort(nums.begin(), nums.end());
    int n = nums.size(), last = nums.front();
    int size = 1;
    for (int i = 0; i < n; i++) {
      if (last != nums[i]) {
        last = nums[i];
        size = res.size();
      }
      int len = res.size();
      for (int j = len - size; j < len; ++j) {
        res.push_back(res[j]);
        res.back().push_back(nums[i]);
      }
    }

    return res;
  }
};
}  // namespace l90

#endif