
#ifndef Q75_UNITTEST_H__
#define Q75_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0075.hpp"
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 75. Sort Colors
  *
  * Given an array nums with n objects colored red,
  * white, or blue, sort them “<a
  * href="https://en.wikipedia.org/wiki/In-place_algorithm"
  * target="_blank">in-place</a>“ so that objects of the same color
  * are adjacent, with the colors in the order red,
  * white, and blue.
  * We will use the integers 0 , 1 , and 2 to
  * represent the color red, white, and blue, respectively.
  * You must solve this problem without using the
  * library';s sort function.
  *
  * Constraints:
  * -  n == nums.length 
  * -  1 <= n <= 300 
  * -  nums[i] is 0 , 1 , or 2 .
  *  “Follow up:“ Could you come up with a one-pass algorithm using onlyconstant extra space?
  *
*/

TEST(q75, sample_input01) {
  vector<int> nums = {2, 0, 2, 1, 1, 0};
  vector<int> exp = {0, 0, 1, 1, 2, 2};
  l75::Solution solver;
  solver.sortColors(nums);
  EXPECT_EQ(nums, exp);
}

TEST(q75, sample_input02) {
  vector<int> nums = {2, 0, 1};
  vector<int> exp = {0, 1, 2};
  l75::Solution solver;
  solver.sortColors(nums);
  EXPECT_EQ(nums, exp);
}

TEST(q75, sample_input03) {
  vector<int> nums = {0};
  vector<int> exp = {0};
  l75::Solution solver;
  solver.sortColors(nums);
  EXPECT_EQ(nums, exp);
}

TEST(q75, sample_input04) {
  vector<int> nums = {1};
  vector<int> exp = {1};
  l75::Solution solver;
  solver.sortColors(nums);
  EXPECT_EQ(nums, exp);
}

#endif