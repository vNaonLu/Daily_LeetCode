
#ifndef LEETCODE_Q82_H__
#define LEETCODE_Q82_H__
#include <iostream>
#include <leetcode/listnode.hpp>

namespace l82 {
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 82. Remove Duplicates from Sorted List II
  *
  * Given the head of a sorted linked list, delete
  * all nodes that have duplicate numbers, leaving only
  * distinct numbers from the original list . Return
  * the linked list “sorted“ as well .
  *
  * Constraints:
  * - The number of nodes in the list is in the range [0, 300] .
  * -  -100 <= Node.val <= 100 
  * - The list is guaranteed to be “sorted“ in ascending order.
  *
*/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
 public:
  ListNode* deleteDuplicates(ListNode* head) {
    ListNode dummy(-101, head);
    ListNode* p = &dummy;

    while (head != nullptr) {
      if (head->next != nullptr && head->val == head->next->val) {
        while (head->next != nullptr && head->val == head->next->val) {
          head = head->next;
        }
        p->next = head->next;
      } else {
        p = p->next;
      }
      head = head->next;
    }

    return dummy.next;
  }
};
}  // namespace l82
#endif