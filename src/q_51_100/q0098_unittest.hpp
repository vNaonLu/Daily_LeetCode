
#ifndef Q98_UNITTEST_H__
#define Q98_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0098.hpp"
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 98. Validate Binary Search Tree
  *
  * Given the root of a binary tree, determine if it
  * is a valid binary search tree (BST) .
  * A “valid BST“ is defined as follows:
  * - The left subtree of a node contains only nodes
  * with keys “less than“ the node';s key.
  * - The right subtree of a node contains only nodes
  * with keys “greater than“ the node';s key.
  * - Both the left and right subtrees must also be
  * binary search trees.
  *
  * Constraints:
  * - The number of nodes in the tree is in the range [1, 10^(4)] .
  * -  -2^(31) <= Node.val <= 2^(31) - 1 
  *
*/

TEST(q98, sample_input01) {
  int null = -1;
  TreeNode *root = TreeNode::generate({2, 1, 3}, null);
  bool exp = true;
  l98::Solution solver;
  EXPECT_EQ(solver.isValidBST(root), exp);
}

TEST(q98, sample_input02) {
  int null = -1;
  TreeNode *root = TreeNode::generate({5, 1, 4, null, null, 3, 6}, null);
  bool exp = false;
  l98::Solution solver;
  EXPECT_EQ(solver.isValidBST(root), exp);
}

#endif