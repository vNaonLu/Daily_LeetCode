#include <gtest/gtest.h>
#include <iostream>
#include <stack>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 84.
 *     Largest Rectangle in Histogram
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an array of integers ‘heights’ representing the histogram's bar
 *   height where the width of each bar is ‘1’ , return “the area of the
 *   largest rectangle in the histogram” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ heights.length ≤ 10⁵’
 *   • ‘0 ≤ heights[i] ≤ 10⁴’
 *
 */

struct q84 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int largestRectangleArea(vector<int>& heights) {
      stack<int> stk;
      int        res = 0;
      int        i = 0;
      while (i < heights.size()) {
        if (stk.empty() || heights[i] >= heights[stk.top()]) {
          stk.push(i++);
        } else {
          int curr = stk.top(); stk.pop();
          int area = heights[curr] * (stk.empty() ? i : i - 1 - stk.top());
          res = max(res, area);
        }
      }
      while (!stk.empty()) {
        int curr = stk.top(); stk.pop();
        int area = heights[curr] * (stk.empty() ? i : i - 1 - stk.top());
        res = max(res, area);
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q84, sample_input01) {
  solution = new Solution();
  vector<int> heights = {2, 1, 5, 6, 2, 3};
  int exp = 10;
  int act = solution->largestRectangleArea(heights);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q84, sample_input02) {
  solution = new Solution();
  vector<int> heights = {2, 4};
  int exp = 4;
  int act = solution->largestRectangleArea(heights);
  EXPECT_EQ(act, exp);
  delete solution;
}