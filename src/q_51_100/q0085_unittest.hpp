
#ifndef Q85_UNITTEST_H__
#define Q85_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0085.hpp"
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 85.
 *     Maximal Rectangle
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a ‘rows x cols’ binary ‘matrix’ filled with ‘0’ 's and ‘1’ 's,
 *   find the largest rectangle containing only ‘1’ 's and return “its
 *   area” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘rows = matrix.length’
 *   • ‘cols = matrix[i].length’
 *   • ‘0 ≤ row, cols ≤ 200’
 *   • ‘matrix[i][j]’ is ‘'0'’ or ‘'1'’ .
 *
 */

TEST(q85, sample_input01) {
  l85::Solution solver;
  vector<vector<char>> matrix = {{'1', '0', '1', '0', '0'}, {'1', '0', '1', '1', '1'}, {'1', '1', '1', '1', '1'}, {'1', '0', '0', '1', '0'}};
  int exp = 6;
  EXPECT_EQ(solver.maximalRectangle(matrix), exp);
}

TEST(q85, sample_input02) {
  l85::Solution solver;
  vector<vector<char>> matrix = {};
  int exp = 0;
  EXPECT_EQ(solver.maximalRectangle(matrix), exp);
}

TEST(q85, sample_input03) {
  l85::Solution solver;
  vector<vector<char>> matrix = {{'0'}};
  int exp = 0;
  EXPECT_EQ(solver.maximalRectangle(matrix), exp);
}

TEST(q85, sample_input04) {
  l85::Solution solver;
  vector<vector<char>> matrix = {{'1'}};
  int exp = 1;
  EXPECT_EQ(solver.maximalRectangle(matrix), exp);
}

TEST(q85, sample_input05) {
  l85::Solution solver;
  vector<vector<char>> matrix = {{'0', '0'}};
  int exp = 0;
  EXPECT_EQ(solver.maximalRectangle(matrix), exp);
}

#endif