#include <gtest/gtest.h>
#include <iostream>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 65.
 *     Valid Number
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   A “valid number” can be split up into these components (in
 *       1. A “decimal number” or an “integer”
 *       2. (Optional) An ‘'e'’ or ‘'E'’ , followed by an “integer”
 *   A “decimal number” can be split up into these components (in
 *       1. (Optional) A sign character (either ‘'+'’ or ‘'-'’
 *       2. One of the following
 *           1. One or more digits, followed by a dot ‘'.'’
 *           2. One or more digits, followed by a dot ‘'.'’ , followed by
 *   one or more
 *           3. A dot ‘'.'’ , followed by one or more
 *      
 *   An “integer” can be split up into these components (in
 *       1. (Optional) A sign character (either ‘'+'’ or ‘'-'’
 *       2. One or more
 *   For example, all the following are valid numbers: ‘['2', '0089',
 *   '-0.1', '+3.14', '4.', '-.9', '2e10', '-90E3', '3e+7', '+6e-1',
 *   '53.5e93', '-123.456e789']’ , while the following are not valid
 *   numbers: ‘['abc', '1a', '1e', 'e3', '99e2.5', '--6', '-+3',
 *   '95a54e53']’
 *   Given a string ‘s’ , return ‘true’ “ if ” ‘s’ “ is a “valid number” ” 
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s.length ≤ 20’
 *   • ‘s’ consists of only English letters (both uppercase and lowercase), digits ( ‘0-9’ ), plus ‘'+'’ , minus ‘'-'’ , or dot ‘'.'’ .
 *
 */

struct q65 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    bool isNumber(string s) {
      int i = 0, n = s.length();
      bool dot = false, exponent = true;
      // Decimal or Integer
      if (s[i] == '+' || s[i] == '-') ++i;
      while (i < n && s[i] >= '0' && s[i] <= '9') ++i, dot = true;
      if (i < n && s[i] == '.') {
        ++i; dot |= false;
        while (i < n && s[i] >= '0' && s[i] <= '9') ++i, dot = true;
      }
      if (!dot) return false;

      // Exponent with Integer
      if (i < n && (s[i] == 'e' || s[i] == 'E')) {
        ++i; exponent = false;
        if (s[i] == '+' || s[i] == '-') ++i;
        while (i < n && s[i] >= '0' && s[i] <= '9') ++i, exponent = true;
      }
      if (!exponent) return false;

      return i == n;
    }
  };

  class Solution *solution;
};

TEST_F(q65, sample_input01) {
  solution = new Solution();
  string s = "0";
  bool exp = true;
  bool act = solution->isNumber(s);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q65, sample_input02) {
  solution = new Solution();
  string s = "e";
  bool exp = false;
  bool act = solution->isNumber(s);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q65, sample_input03) {
  solution = new Solution();
  string s = ".";
  bool exp = false;
  bool act = solution->isNumber(s);
  EXPECT_EQ(act, exp);
  delete solution;
}