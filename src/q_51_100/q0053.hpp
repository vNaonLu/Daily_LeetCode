
#ifndef LEETCODE_Q53_H__
#define LEETCODE_Q53_H__
#include <iostream>
#include <vector>

namespace l53 {
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 53.
  *     Maximum Subarray
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given an integer array ‘nums’ , find the contiguous subarray
  *   (containing at least one number) which has the largest sum and return
  *   “its sum”
  *   A “subarray” is a “contiguous” part of an array.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘1 ≤ nums.length ≤ 10⁵’
  *   • ‘-10⁴ ≤ nums[i] ≤ 10⁴’
  *
*/

class Solution {
 public:
  int maxSubArray(vector<int>& nums) {
    int res = nums[0], mx = nums[0];
    for (int i = 1; i < nums.size(); ++i) {
      mx = max(nums[i], nums[i] + mx);
      res = max(res, mx);
    }
    return res;
  }
};
}  // namespace l53

#endif