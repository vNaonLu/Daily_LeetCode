
#ifndef LEETCODE_Q83_H__
#define LEETCODE_Q83_H__
#include <iostream>
#include <leetcode/list_node.hpp>

namespace l83 {
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 83. Remove Duplicates from Sorted List
  *
  * Given the head of a sorted linked list, delete
  * all duplicates such that each element appears only
  * once . Return the linked list “sorted“ as well .
  *
  * Constraints:
  * - The number of nodes in the list is in the range [0, 300] .
  * -  -100 <= Node.val <= 100 
  * - The list is guaranteed to be “sorted“ in ascending order.
  *
*/
class Solution {
 public:
  ListNode* deleteDuplicates(ListNode* head) {
    ListNode dummy(101, head);
    ListNode *p = head, *pre = &dummy;
    while (p != nullptr) {
      if (pre->val != p->val) {
        pre->next = p;
        pre = p;
      } else {
        pre->next = nullptr;
      }
      p = p->next;
    }
    return dummy.next;
  }
};
}  // namespace l83
#endif