
#ifndef LEETCODE_Q54_H__
#define LEETCODE_Q54_H__
#include <iostream>
#include <vector>

namespace l54 {
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 54. Spiral Matrix
  *
  * Given an m x n matrix , return all elements of
  * the matrix in spiral order .
  *
  * Constraints:
  * -  m == matrix.length 
  * -  n == matrix[i].length 
  * -  1 <= m, n <= 10 
  * -  -100 <= matrix[i][j] <= 100 
  *
*/
class Solution {
 private:
  typedef pair<int, int> coord;
  vector<coord> dir = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
  int null = -100;

 public:
  vector<int> spiralOrder(vector<vector<int>>& matrix) {
    int cur_dir = 0;
    int m = matrix.size(), n = matrix[0].size();
    int i = -1;
    coord p = {0, -1};
    vector<int> res(m * n, 0);
    while (i < m * n - 1) {
      coord np = p;
      np.first += dir[cur_dir].first;
      np.second += dir[cur_dir].second;
      if (np.first >= 0 && np.first < m &&
          np.second >= 0 && np.second < n &&
          matrix[np.first][np.second] > null) {
        res[++i] = matrix[np.first][np.second];
        matrix[np.first][np.second] = null;
        p = np;
      } else {
        cur_dir = (cur_dir + 1) % 4;
      }
    }
    return res;
  }
};
}  // namespace l54
#endif