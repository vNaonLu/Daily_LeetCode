#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/anyorder.hpp>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 78.
 *     Subsets
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an integer array ‘nums’ of “unique” elements, return “all
 *   possible subsets (the power set)”
 *   The solution set “must not” contain duplicate subsets. Return the
 *   solution in “any order” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 10’
 *   • ‘-10 ≤ nums[i] ≤ 10’
 *   • All the numbers of ‘nums’ are “unique” .
 *
 */

struct q78 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    vector<vector<int>> subsets(vector<int>& nums) {
      vector<vector<int>> res;
      res.push_back({});
      for (const auto& n : nums) {
        int len = res.size();
        for (int i = 0; i < len; ++i) {
          vector<int> tmp = res[i];
          tmp.push_back(n);
          res.push_back(tmp);
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q78, sample_input01) {
  solution = new Solution();
  vector<int> nums = {1, 2, 3};
  vector<vector<int>> exp = {{}, {1}, {2}, {1, 2}, {3}, {1, 3}, {2, 3}, {1, 2, 3}};
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solution->subsets(nums), exp);
  delete solution;
}

TEST_F(q78, sample_input02) {
  solution = new Solution();
  vector<int> nums = {0};
  vector<vector<int>> exp = {{}, {0}};
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solution->subsets(nums), exp);
  delete solution;
}