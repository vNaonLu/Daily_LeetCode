
#ifndef Q96_UNITTEST_H__
#define Q96_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0096.hpp"
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 96.
  *     Unique Binary Search Trees
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given an integer ‘n’ , return “the number of structurally unique
  *   “BST&#39;” s (binary search trees) which has exactly ” ‘n’ “ nodes of
  *   unique values from” ‘1’ “to” ‘n’.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘1 ≤ n ≤ 19’
  *
*/

TEST(q96, sample_input01) {
  l96::Solution solver;
  int n = 3;
  int exp = 5;
  EXPECT_EQ(solver.numTrees(n), exp);
}

TEST(q96, sample_input02) {
  l96::Solution solver;
  int n = 1;
  int exp = 1;
  EXPECT_EQ(solver.numTrees(n), exp);
}

TEST(q96, input01) {
  l96::Solution solver;
  int n = 19;
  int exp = 1767263190;
  EXPECT_EQ(solver.numTrees(n), exp);
}

#endif