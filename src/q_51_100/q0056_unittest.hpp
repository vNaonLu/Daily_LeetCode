
#ifndef Q56_UNITTEST_H__
#define Q56_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0056.hpp"
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 56. Merge Intervals
  *
  * Given an arrayof intervals where intervals[i] =
  * [start⎽(i), end⎽(i)] , merge all overlapping
  * intervals, and return an array of the non-overlapping
  * intervals that cover all the intervals in the input
  * .
  *
  * Constraints:
  * -  1 <= intervals.length <= 10^(4) 
  * -  intervals[i].length == 2 
  * -  0 <= start⎽(i) <= end⎽(i) <= 10^(4) 
  *
*/

TEST(q56, sample_input01) {
  vector<vector<int>> intervals = {{1, 3}, {2, 6}, {8, 10}, {15, 18}};
  vector<vector<int>> exp = {{1, 6}, {8, 10}, {15, 18}};
  l56::Solution solver;
  EXPECT_EQ(solver.merge(intervals), exp);
}

TEST(q56, sample_input02) {
  vector<vector<int>> intervals = {{1, 4}, {4, 5}};
  vector<vector<int>> exp = {{1, 5}};
  l56::Solution solver;
  EXPECT_EQ(solver.merge(intervals), exp);
}

#endif