#include <gtest/gtest.h>
#include <iostream>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 87.
 *     Scramble String
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   We can scramble a string s to get a string t using the following
 *       1. If the length of the string is 1,
 *       2. If the length of the string is > 1, do the
 *           - Split the string into two non-empty substrings at a random
 *   index, i.e., if the string is ‘s’ , divide it to ‘x’ and ‘y’ where ‘s
 *   = x + y’
 *           -  “Randomly” decide to swap the two substrings or to keep
 *   them in the same order. i.e., after this step, ‘s’ may become ‘s = x +
 *   y’ or ‘s = y + x’
 *           - Apply step 1 recursively on each of the two substrings ‘x’
 *   and ‘y’
 *
 *   Given two strings ‘s1’ and ‘s2’ of “the same length” , return ‘true’
 *   if ‘s2’ is a scrambled string of ‘s1’ , otherwise, return ‘false’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘s1.length = s2.length’
 *   • ‘1 ≤ s1.length ≤ 30’
 *   • ‘s1’ and ‘s2’ consist of lowercase English letters.
 *
 */

struct q87 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    bool isScramble(string s1, string s2) {
      auto n = s1.size();
      bool dp[n][n][n];
      memset(&dp, 0, sizeof(dp));

      for (auto i = 0; i < n; ++i) {
        for (auto j = 0; j < n; ++j) {
          dp[i][j][0] = s1[i] == s2[j];
        }
      }

      for (auto length = 2; length <= n; ++length) {
        for (auto i = 0; i <= n - length; ++i) {
          for (auto j = 0; j <= n - length; ++j) {
            for (auto len1 = 1; len1 < length; ++len1) {
              auto len2 = length - len1;
              dp[i][j][length - 1] |=
                  dp[i][j][len1 - 1] && dp[i + len1][j + len1][len2 - 1];
              dp[i][j][length - 1] |=
                  dp[i + len1][j][len2 - 1] && dp[i][j + len2][len1 - 1];
            }
          }
        }
      }

      return dp[0][0][n - 1];
    }
  };

  class Solution *solution;
};

TEST_F(q87, sample_input01) {
  solution   = new Solution();
  string s1  = "great";
  string s2  = "rgeat";
  bool   exp = true;
  bool   act = solution->isScramble(s1, s2);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q87, sample_input02) {
  solution   = new Solution();
  string s1  = "abcde";
  string s2  = "caebd";
  bool   exp = false;
  bool   act = solution->isScramble(s1, s2);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q87, sample_input03) {
  solution   = new Solution();
  string s1  = "a";
  string s2  = "a";
  bool   exp = true;
  bool   act = solution->isScramble(s1, s2);
  EXPECT_EQ(act, exp);
  delete solution;
}