
#ifndef Q1178_UNITTEST_H__
#define Q1178_UNITTEST_H__
#include <gtest/gtest.h>

#include "q1178.hpp"
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1178.
 *       Number of Valid Words for Each Puzzle
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   With respect to a given ‘puzzle’ string, a ‘word’ is “valid” if both
 *   the following conditions are
 *       -  ‘word’ contains the first letter of ‘puzzle’
 *       - For each letter in ‘word’ , that letter is in ‘puzzle’
 *           - For example, if the puzzle is ‘'abcdefg'’ , then valid words
 *   are ‘'faced'’ , ‘'cabbage'’ , and ‘'baggage'’ ,
 *           - invalid words are ‘'beefed'’ (does not include ‘'a'’ ) and
 *   ‘'based'’ (includes ‘'s'’ which is not in the
 *      
 *   Return “an array ” ‘answer’ “, where ” ‘answer[i]’ “ is the number of
 *   words in the given word list ” ‘words’ “ that is valid with respect to
 *   the puzzle ” ‘puzzles[i]’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ words.length ≤ 10⁵’
 *   • ‘4 ≤ words[i].length ≤ 50’
 *   • ‘1 ≤ puzzles.length ≤ 10⁴’
 *   • ‘puzzles[i].length = 7’
 *   • ‘words[i]’ and ‘puzzles[i]’ consist of lowercase English letters.
 *   • Each ‘puzzles[i] ’ does not contain repeated characters.
 *
 */

TEST(q1178, sample_input01) {
  l1178::Solution solver;
  vector<string> words = {"aaaa", "asas", "able", "ability", "actt", "actor", "access"};
  vector<string> puzzles = {"aboveyz", "abrodyz", "abslute", "absoryz", "actresz", "gaswxyz"};
  vector<int> exp = {1, 1, 3, 2, 4, 0};
  EXPECT_EQ(solver.findNumOfValidWords(words, puzzles), exp);
}

TEST(q1178, sample_input02) {
  l1178::Solution solver;
  vector<string> words = {"apple", "pleas", "please"};
  vector<string> puzzles = {"aelwxyz", "aelpxyz", "aelpsxy", "saelpxy", "xaelpsy"};
  vector<int> exp = {0, 1, 3, 2, 0};
  EXPECT_EQ(solver.findNumOfValidWords(words, puzzles), exp);
}

#endif