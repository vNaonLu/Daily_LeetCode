#include <gtest/gtest.h>

#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1510.
 *       Stone Game IV
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Alice and Bob take turns playing a game, with Alice starting
 *   Initially, there are ‘n’ stones in a pile. On each player's turn, that
 *   player makes a “move” consisting of removing “any” non-zero “square
 *   number” of stones in the
 *   Also, if a player cannot make a move, he/she loses the
 *   Given a positive integer ‘n’ , return ‘true’ if and only if Alice wins
 *   the game otherwise return ‘false’ , assuming both players play
 *   optimally.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ n ≤ 10⁵’
 *
 */

struct q1510 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    bool winnerSquareGame(int n) {
      vector<bool> dp(n + 1, false);
      for (int i = 0; i <= n; ++i) {
        if (dp[i]) continue;
        for (int k = 1; i + k * k <= n; ++k) {
          dp[i + k * k] = true;
        }
      }
      return dp.back();
    }
  };

  class Solution *solution;
};

TEST_F(q1510, sample_input01) {
  solution = new Solution();
  int n = 1;
  bool exp = true;
  bool act = solution->winnerSquareGame(n);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1510, sample_input02) {
  solution = new Solution();
  int n = 2;
  bool exp = false;
  bool act = solution->winnerSquareGame(n);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1510, sample_input03) {
  solution = new Solution();
  int n = 4;
  bool exp = true;
  bool act = solution->winnerSquareGame(n);
  EXPECT_EQ(act, exp);
  delete solution;
}