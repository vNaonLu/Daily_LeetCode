#include <gtest/gtest.h>
#include <iostream>
#include <string>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1531.
 *       String Compression II
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   <a href="http://en.wikipedia.org/wiki/Run-length_encoding">Run-length
 *   encoding</a> is a string compression method that works byreplacing
 *   consecutive identical characters (repeated 2 or more times) with the
 *   concatenation of the character and the number marking the count of the
 *   characters (length of the run). For example, to compress the string
 *   ‘'aabccc'’ we replace <font face="monospace"> ‘'aa'’ </font>by<font
 *   face="monospace"> ‘'a2'’ </font>and replace <font face="monospace">
 *   ‘'ccc'’ </font>by<font face="monospace"> ‘'c3'’ </font>. Thus the
 *   compressed string becomes <font face="monospace"> ‘'a2bc3'’
 *   Notice that in this problem, we are not adding ‘'1'’ after single
 *   Given astring ‘s’ and an integer ‘k’ . You need to delete “at most”
 *   ‘k’ characters from ‘s’ such that the run-length encoded version of
 *   ‘s’ has minimum
 *   Find the “minimum length of the run-length encodedversion of ” ‘s’ “
 *   after deleting at most ” ‘k’ “ characters” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s.length ≤ 100’
 *   • ‘0 ≤ k ≤ s.length’
 *   • ‘s’ contains only lowercase English letters.
 *
 */

struct q1531 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  private:
    int lengthOfDigit(int x) {
      return x == 1 ? 0 : (x < 10 ? 1 : (x < 100 ? 2 : 3));
    }

    int helper(vector<vector<int>> &dp, string &str, int left, int k) {
      if (k < 0) {
        return dp.size();
      }
      if (left >= str.size() || str.size() - left <= k) {
        return 0;
      }

      int &res = dp[left][k];
      if (res != -1) {
        return res;
      }
      res = str.size();

      auto cnt = vector<int>(26, 0);
      for (int i = left, most = 0; i < str.size(); ++i) {
        most = max(most, ++cnt[str[i] - 'a']);
        res  = min(res, 1 + lengthOfDigit(most) +
                            helper(dp, str, i + 1, (k - (i - left + 1 - most))));
      }
      return res;
    }

  public:
    int getLengthOfOptimalCompression(string s, int k) {
      auto dp = vector<vector<int>>(127, vector<int>(127, -1));
      return helper(dp, s, 0, k);
    }
  };

  class Solution *solution;
};

TEST_F(q1531, sample_input01) {
  solution   = new Solution();
  string s   = "aaabcccd";
  int    k   = 2;
  int    exp = 4;
  int    act = solution->getLengthOfOptimalCompression(s, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1531, sample_input02) {
  solution   = new Solution();
  string s   = "aabbaa";
  int    k   = 2;
  int    exp = 2;
  int    act = solution->getLengthOfOptimalCompression(s, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1531, sample_input03) {
  solution   = new Solution();
  string s   = "aaaaaaaaaaa";
  int    k   = 0;
  int    exp = 3;
  int    act = solution->getLengthOfOptimalCompression(s, k);
  EXPECT_EQ(act, exp);
  delete solution;
}