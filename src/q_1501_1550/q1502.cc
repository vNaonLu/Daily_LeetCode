#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1502.
 *       Can Make Arithmetic Progression From Sequence
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   A sequence of numbers is called an “arithmetic progression” if the
 *   difference between any two consecutive elements is the
 *   Given an array of numbers ‘arr’ , return ‘true’ “if the array can be
 *   rearranged to form an “arithmetic progression” . Otherwise, return”
 *   ‘false’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘2 ≤ arr.length ≤ 1000’
 *   • ‘-10⁶ ≤ arr[i] ≤ 10⁶’
 *
 */

struct q1502 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    bool canMakeArithmeticProgression(vector<int>& arr) {
      sort(arr.begin(), arr.end());
      int diff = arr[1] - arr[0];
      for (int i = 2; i < arr.size(); ++i) {
        if (diff != arr[i] - arr[i - 1]) {
          return false;
        }
      }

      return true;
    }
  };

  class Solution *solution;
};

TEST_F(q1502, sample_input01) {
  solution = new Solution();
  vector<int> arr = {3, 5, 1};
  bool exp = true;
  bool act = solution->canMakeArithmeticProgression(arr);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1502, sample_input02) {
  solution = new Solution();
  vector<int> arr = {1, 2, 4};
  bool exp = false;
  bool act = solution->canMakeArithmeticProgression(arr);
  EXPECT_EQ(act, exp);
  delete solution;
}