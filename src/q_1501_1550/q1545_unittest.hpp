
#ifndef Q1545_UNITTEST_H__
#define Q1545_UNITTEST_H__
#include <gtest/gtest.h>

#include "q1545.hpp"
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 1545.
  *       Find Kth Bit in Nth Binary String
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given two positive integers ‘n’ and ‘k’ ,the binary string ‘Sₙ’ is
  *   formed as.
  *   
  *   - ‘S₁= "0"’.
  *   
  *   - ‘S⎽(<span style="font-size: 10.8333px;">i</span>)=S⎽(<span
  *   style="font-size: 10.8333px;">i-1</span>)+ "1" +
  *   reverse(invert(S⎽(<span style="font-size: 10.8333px;">i-1</span>)))’
  *   for ‘i > 1’.
  *   
  *   Where ‘+’ denotes the concatenation operation, ‘reverse(x)’ returns
  *   the reversed string <font face="monospace">x,</font>and ‘invert(x)’
  *   inverts all the bits in <font face="monospace">x</font> (0 changes to
  *   1 and 1 changes to 0).
  *   
  *   For example, the first 4 strings in the above sequence.
  *   
  *   - ‘S⎽(1)= "0"’.
  *   
  *   - ‘S⎽(2)= "0 “1” 1"’.
  *   
  *   - ‘S⎽(3)= "011 “1” 001"’.
  *   
  *   - ‘S₄ = "0111001 “1” 0110001"’.
  *   
  *   Return “the” ‘kᵗʰ’ “bit”  “in”  ‘Sₙ’ . It is guaranteed that ‘k’ is
  *   valid for the given ‘n’.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘1 ≤ n ≤ 20’
  *   • ‘1 ≤ k ≤ 2ⁿ - 1’
  *
*/

TEST(q1545, sample_input01) {
  l1545::Solution solver;
  int n = 3;
  int k = 1;
  char exp = '0';
  EXPECT_EQ(solver.findKthBit(n, k), exp);
}

TEST(q1545, sample_input02) {
  l1545::Solution solver;
  int n = 4;
  int k = 11;
  char exp = '1';
  EXPECT_EQ(solver.findKthBit(n, k), exp);
}

TEST(q1545, sample_input03) {
  l1545::Solution solver;
  int n = 1;
  int k = 1;
  char exp = '0';
  EXPECT_EQ(solver.findKthBit(n, k), exp);
}

TEST(q1545, sample_input04) {
  l1545::Solution solver;
  int n = 2;
  int k = 3;
  char exp = '1';
  EXPECT_EQ(solver.findKthBit(n, k), exp);
}

#endif