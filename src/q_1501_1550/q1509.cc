#include <gtest/gtest.h>
#include <algorithm>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1509.
 *       Minimum Difference Between Largest and Smallest Value in Three Moves
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an integer array ‘nums’ . In one move, you can choose
 *   one element of ‘nums’ and change it by “any value”
 *   Return “the minimum difference between the largest and smallest value
 *   of ‘nums’ after performing “at most three moves” ” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 10⁵’
 *   • ‘-10⁹ ≤ nums[i] ≤ 10⁹’
 *
 */

struct q1509 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int minDifference(vector<int>& nums) {
      int n = nums.size();
      sort(nums.begin(), nums.end());
      if (nums.size() <= 4) return 0;
      return min({nums[n - 4] - nums[0],
                  nums[n - 3] - nums[1],
                  nums[n - 2] - nums[2],
                  nums[n - 1] - nums[3]});
    }
  };

  class Solution *solution;
};

TEST_F(q1509, sample_input01) {
  solution = new Solution();
  vector<int> nums = {5, 3, 2, 4};
  int exp = 0;
  int act = solution->minDifference(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1509, sample_input02) {
  solution = new Solution();
  vector<int> nums = {1, 5, 0, 10, 14};
  int exp = 1;
  int act = solution->minDifference(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}