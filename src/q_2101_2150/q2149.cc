#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 2149.
 *       Rearrange Array Elements by Sign
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given a “0-indexed” integer array ‘nums’ of “even” length
 *   consisting of an “equal” number of positive and negative
 *   You should “rearrange” the elements of ‘nums’ such that the modified
 *   array follows the given
 *       1. Every “consecutive pair” of integers have “opposite signs”
 *       2. For all integers with the same sign, the “order” in which they
 *   were present in ‘nums’ is “preserved”
 *       3. The rearranged array begins with a positive
 *   Return “the modified array after rearranging the elements to satisfy
 *   the aforementioned conditions” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘2 ≤ nums.length ≤ 2 × 10⁵’
 *   • ‘nums.length’ is “even”
 *   • ‘1 ≤ |nums[i]| ≤ 10⁵’
 *   • ‘nums’ consists of “equal” number of positive and negative integers.
 *
 */

struct q2149 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    vector<int> rearrangeArray(vector<int>& nums) {
      int n = nums.size();
      int i = 0, j = 1;
      auto it = nums.begin();
      vector<int> res(n, 0);

      while (i < n || j < n) {
        if (*it > 0) {
          res[i] = *it;
          ++ ++i;
        } else {
          res[j] = *it;
          ++ ++j;
        }

        ++it;
      }

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q2149, sample_input01) {
  solution = new Solution();
  vector<int> nums = {3, 1, -2, -5, 2, -4};
  vector<int> exp = {3, -2, 1, -5, 2, -4};
  vector<int> act = solution->rearrangeArray(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2149, sample_input02) {
  solution = new Solution();
  vector<int> nums = {-1, 1};
  vector<int> exp = {1, -1};
  vector<int> act = solution->rearrangeArray(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}