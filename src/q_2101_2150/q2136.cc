#include <algorithm>
#include <gtest/gtest.h>
#include <iostream>
#include <numeric>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 2136.
 *       Earliest Possible Day of Full Bloom
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You have ‘n’ flower seeds. Every seed must be planted first before it
 *   can begin to grow, then bloom. Planting a seed takes time and so does
 *   the growth of a seed. You are given two “0-indexed” integer arrays
 *   ‘plantTime’ and ‘growTime’ , of length ‘n’
 *       -  ‘plantTime[i]’ is the number of “full days” it takes you to
 *   “plant” the ‘iᵗʰ’ seed. Every day, you can work on planting exactly
 *   one seed. You “do not” have to work on planting the same seed on
 *   consecutive days, but the planting of a seed is not complete “until”
 *   you have worked ‘plantTime[i]’ days on planting it in
 *       -  ‘growTime[i]’ is the number of “full days” it takes the ‘iᵗʰ’
 *   seed to grow after being completely planted. “After” the last day of
 *   its growth, the flower “blooms” and stays bloomed
 *   From the beginning of day ‘0’ , you can plant the seeds in “any”
 *   Return “the “earliest” possible day where “all” seeds are blooming” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘n = plantTime.length = growTime.length’
 *   • ‘1 ≤ n ≤ 10⁵’
 *   • ‘1 ≤ plantTime[i], growTime[i] ≤ 10⁴’
 *
 */

struct q2136 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int earliestFullBloom(vector<int> &plantTime, vector<int> &growTime) {
      auto idx = vector<int>(plantTime.size());
      iota(idx.begin(), idx.end(), 0);
      sort(idx.begin(), idx.end(),
           [&](int i, int j) { return growTime[i] > growTime[j]; });
      auto res = (int)0;
      auto cur = (int)0;
      for (auto i : idx) {
        cur += plantTime[i];
        res = max(res, cur + growTime[i]);
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q2136, sample_input01) {
  solution              = new Solution();
  vector<int> plantTime = {1, 4, 3};
  vector<int> growTime  = {2, 3, 1};
  int         exp       = 9;
  int         act       = solution->earliestFullBloom(plantTime, growTime);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2136, sample_input02) {
  solution              = new Solution();
  vector<int> plantTime = {1, 2, 3, 2};
  vector<int> growTime  = {2, 1, 2, 1};
  int         exp       = 9;
  int         act       = solution->earliestFullBloom(plantTime, growTime);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2136, sample_input03) {
  solution              = new Solution();
  vector<int> plantTime = {1};
  vector<int> growTime  = {1};
  int         exp       = 2;
  int         act       = solution->earliestFullBloom(plantTime, growTime);
  EXPECT_EQ(act, exp);
  delete solution;
}