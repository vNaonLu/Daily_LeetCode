#include <gtest/gtest.h>
#include <iostream>
#include <string>
#include <vector>

using namespace std;

/**
 * The file is generated by LeetCodeDailyTools
 *
 * 2194.
 *       Cells in a Range on an Excel Sheet
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   A cell ‘(r, c)’ of an excel sheet is represented as a string
 *   ‘'<col><row>'’
 *       -  ‘<col>’ denotes the column number ‘c’ of the cell. It is
 *   represented by “alphabetical letters”
 *           - For example, the ‘1ˢᵗ’ column is denoted by ‘'A'’ , the
 *   ‘2ⁿᵈ’ by ‘'B'’ , the ‘3ʳᵈ’ by ‘'C'’ , and so
 *
 *       -  ‘<row>’ is the row number ‘r’ of the cell. The ‘rᵗʰ’ row is
 *   represented by the “integer” ‘r’
 *   You are given a string ‘s’ inthe format ‘'<col1><row1>:<col2><row2>'’
 *   , where ‘<col1>’ represents the column ‘c1’ , ‘<row1>’ represents the
 *   row ‘r1’ , ‘<col2>’ represents the column ‘c2’ , and ‘<row2>’
 *   represents the row ‘r2’ , such that ‘r1 ≤ r2’ and ‘c1 ≤ c2’
 *   Return “the “list of cells” ” ‘(x, y)’ “such that” ‘r1 ≤ x ≤ r2’ “and”
 *   ‘c1 ≤ y ≤ c2’ . The cells should be represented as “strings” in the
 *   format mentioned above and be sorted in “non-decreasing” order first
 *   by columns and then by rows.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘s.length = 5’
 *   • ‘'A' ≤ s[0] ≤ s[3] ≤ 'Z'’
 *   • ‘'1' ≤ s[1] ≤ s[4] ≤ '9'’
 *   • ‘s’ consists of uppercase English letters, digits and ‘':'’ .
 *
 * see more details:
 * https://leetcode.com/problems/cells-in-a-range-on-an-excel-sheet/
 */

struct q2194 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    vector<string> cellsInRange(string s) {
      vector<string> res;
      auto           beg     = s[0];
      auto           end     = s[3] + 1;
      auto           num_beg = s[1];
      auto           num_end = s[4] + 1;
      string         tmp(2, 0);
      for (tmp[0] = beg; tmp[0] < end; ++tmp[0]) {
        for (tmp[1] = num_beg; tmp[1] < num_end; ++tmp[1]) {
          res.emplace_back(tmp);
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q2194, sample_input01) {
  solution           = new Solution();
  string         s   = "K1:L2";
  vector<string> exp = {"K1", "K2", "L1", "L2"};
  vector<string> act = solution->cellsInRange(s);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2194, sample_input02) {
  solution           = new Solution();
  string         s   = "A1:F1";
  vector<string> exp = {"A1", "B1", "C1", "D1", "E1", "F1"};
  vector<string> act = solution->cellsInRange(s);
  EXPECT_EQ(act, exp);
  delete solution;
}
