#include <gtest/gtest.h>
#include <iostream>
#include <unordered_set>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 2200.
 *       Find All K-Distant Indices in an Array
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given a “0-indexed” integer array ‘nums’ and two integers
 *   ‘key’ and ‘k’ . A “k-distant index” is an index ‘i’ of ‘nums’ for
 *   which there exists at least one index ‘j’ such that ‘|i - j| ≤ k’ and
 *   ‘nums[j] = key’
 *   Return “a list of all k-distant indices sorted in “increasing order” ”
 *   .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 1000’
 *   • ‘1 ≤ nums[i] ≤ 1000’
 *   • ‘key’ is an integer from the array ‘nums’ .
 *   • ‘1 ≤ k ≤ nums.length’
 *
 */

struct q2200 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    vector<int> findKDistantIndices(vector<int>& nums, int key, int k) {
      unordered_set<int> memos, res;

      for (int i = 0; i < nums.size(); ++i) {
        if (nums[i] == key) {
          for (int j = max<int>(0, i - k); j < min<int>(nums.size(), i + k + 1); ++j) {
            res.insert(j);
          }
        }
      }

      vector<int> ans(res.begin(), res.end());
      sort(ans.begin(), ans.end());
      return ans;
    }
  };

  class Solution *solution;
};

TEST_F(q2200, sample_input01) {
  solution = new Solution();
  vector<int> nums = {3, 4, 9, 1, 3, 9, 5};
  int key = 9;
  int k = 1;
  vector<int> exp = {1, 2, 3, 4, 5, 6};
  vector<int> act = solution->findKDistantIndices(nums, key, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2200, sample_input02) {
  solution = new Solution();
  vector<int> nums = {2, 2, 2, 2, 2};
  int key = 2;
  int k = 2;
  vector<int> exp = {0, 1, 2, 3, 4};
  vector<int> act = solution->findKDistantIndices(nums, key, k);
  EXPECT_EQ(act, exp);
  delete solution;
}