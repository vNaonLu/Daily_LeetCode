#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/treenode.hpp>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 701.
 *      Insert into a Binary Search Tree
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given the ‘root’ node of a binary search tree (BST) and a
 *   ‘value’ to insert into the tree. Return “the root node of the BST
 *   after the insertion” . It is “guaranteed” that the new value does not
 *   exist in the original
 *    “Notice” that there may existmultiple valid ways for theinsertion, as
 *   long as the tree remains a BST after insertion. You can return “any of
 *   them” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The number of nodes inthe tree will be in the range ‘[0,10⁴]’ .
 *   • ‘-10⁸ ≤ Node.val ≤ 10⁸’
 *   • All the values ‘Node.val’ are “unique” .
 *   • ‘-10⁸ ≤ val ≤ 10⁸’
 *   • It's “guaranteed” that ‘val’ does not exist in the original BST.
 *
 */

struct q701 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    TreeNode* insertIntoBST(TreeNode* root, int val) {
      TreeNode *p = root, *pre = nullptr;
      while (p != nullptr) {
        pre = p;
        if (p->val > val) {
          p = p->left;
        } else {
          p = p->right;
        }
      }
      if (pre == nullptr) {
        root = new TreeNode(val);
      } else {
        if (pre->val > val) {
          pre->left = new TreeNode(val);
        } else {
          pre->right = new TreeNode(val);
        }
      }
      return root;
    }
  };

  class Solution *solution;
};

TEST_F(q701, sample_input01) {
  solution = new Solution();
  TreeNode* root = TreeNode::generate({4, 2, 7, 1, 3});
  int val = 5;
  TreeNode* exp = TreeNode::generate({4, 2, 7, 1, 3, 5});
  TreeNode* act = solution->insertIntoBST(root, val);
  EXPECT_TREENODE_EQ(act, exp);
  TreeNode::release(root, exp, act);
  delete solution;
}

TEST_F(q701, sample_input02) {
  solution = new Solution();
  TreeNode* root = TreeNode::generate({40, 20, 60, 10, 30, 50, 70});
  int val = 25;
  TreeNode* exp = TreeNode::generate({40, 20, 60, 10, 30, 50, 70, NULL_TREENODE, NULL_TREENODE, 25});
  TreeNode* act = solution->insertIntoBST(root, val);
  EXPECT_TREENODE_EQ(act, exp);
  TreeNode::release(root, exp, act);
  delete solution;
}

TEST_F(q701, sample_input03) {
  solution = new Solution();
  TreeNode* root = TreeNode::generate({4, 2, 7, 1, 3, NULL_TREENODE, NULL_TREENODE, NULL_TREENODE, NULL_TREENODE, NULL_TREENODE, NULL_TREENODE});
  int val = 5;
  TreeNode* exp = TreeNode::generate({4, 2, 7, 1, 3, 5});
  TreeNode* act = solution->insertIntoBST(root, val);
  EXPECT_TREENODE_EQ(act, exp);
  TreeNode::release(root, exp, act);
  delete solution;
}