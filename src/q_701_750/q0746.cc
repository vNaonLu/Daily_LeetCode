#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 746.
 *      Min Cost Climbing Stairs
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an integer array ‘cost’ where ‘cost[i]’ is the cost of
 *   ‘iᵗʰ’ step on a staircase. Once you pay the cost, you can either climb
 *   one or two
 *   You can either start from the step with index ‘0’ , or the step with
 *   index ‘1’
 *   Return “the minimum cost to reach the top of the floor” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘2 ≤ cost.length ≤ 1000’
 *   • ‘0 ≤ cost[i] ≤ 999’
 *
 */

struct q746 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int minCostClimbingStairs(vector<int>& cost) {
      vector<int> dp(cost.size() + 1, 0);
      for (int i = 2; i < dp.size(); ++i)
        dp[i] = min(dp[i - 1] + cost[i - 1], dp[i - 2] + cost[i - 2]);
      return dp.back();
    }
  };

  class Solution *solution;
};

TEST_F(q746, sample_input01) {
  solution = new Solution();
  vector<int> cost = {10, 15, 20};
  int exp = 15;
  EXPECT_EQ(solution->minCostClimbingStairs(cost), exp);
  delete solution;
}

TEST_F(q746, sample_input02) {
  solution = new Solution();
  vector<int> cost = {1, 100, 1, 1, 1, 100, 1, 1, 100, 1};
  int exp = 6;
  EXPECT_EQ(solution->minCostClimbingStairs(cost), exp);
  delete solution;
}