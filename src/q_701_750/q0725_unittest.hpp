
#ifndef Q725_UNITTEST_H__
#define Q725_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0725.hpp"
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 725.
  *      Split Linked List in Parts
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Given the ‘head’ of a singly linked list and an integer ‘k’ , split
  *   the linked list into ‘k’ consecutive linked list parts.
  *   
  *   The length of each part should be as equal as possible: no two parts
  *   should have a size differing by more than one. This may lead to some
  *   parts being null.
  *   
  *   The parts should be in the order of occurrence in the input list, and
  *   parts occurring earlier should always have a size greater than or
  *   equal to parts occurring later.
  *   
  *   Return “an array of the ” ‘k’ “ parts”.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • The number of nodes in the list is in the range ‘[0, 1000]’ .
  *   • ‘0 ≤ Node.val ≤ 1000’
  *   • ‘1 ≤ k ≤ 50’
  *
*/

TEST(q725, sample_input01) {
  l725::Solution solver;
  ListNode* head = ListNode::generate({1, 2, 3});
  int k = 5;
  vector<ListNode*> exp = {ListNode::generate({1}), ListNode::generate({2}), ListNode::generate({3}), ListNode::generate({}), ListNode::generate({})};
  vector<ListNode*> ans = solver.splitListToParts(head, k);
  EXPECT_EQ(ans.size(), exp.size());
  for (int i = 0; i < ans.size(); ++i) {
    EXPECT_LISTNODE_EQ(ans[i], exp[i]);
  }
}

TEST(q725, sample_input02) {
  l725::Solution solver;
  ListNode* head = ListNode::generate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10});
  int k = 3;
  vector<ListNode*> exp = {ListNode::generate({1, 2, 3, 4}), ListNode::generate({5, 6, 7}), ListNode::generate({8, 9, 10})};
  vector<ListNode*> ans = solver.splitListToParts(head, k);
  EXPECT_EQ(ans.size(), exp.size());
  for (int i = 0; i < ans.size(); ++i) {
    EXPECT_LISTNODE_EQ(ans[i], exp[i]);
  }
}

#endif