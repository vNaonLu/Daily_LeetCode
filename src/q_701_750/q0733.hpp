
#ifndef LEETCODE_Q733_H__
#define LEETCODE_Q733_H__
#include <iostream>
#include <queue>
#include <vector>

namespace l733 {
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 733. Flood Fill
  *
  * An image is represented by an m x n integer grid
  * image where image[i][j] represents the pixel value
  * of the image.
  * You are also given three integers sr , sc , and
  * newColor . You should perform a “flood fill“ on the
  * image starting from the pixel image[sr][sc] .
  * To perform a “flood fill“ , consider the starting
  * pixel, plus any pixels connected
  * “4-directionally“ to the starting pixel of the same color as the
  * starting pixel, plus any pixels connected
  * “4-directionally“ to those pixels (also with the same
  * color), and so on. Replace the color of all of the
  * aforementioned pixels with newColor .
  * Return the modified image after performing the
  * flood fill .
  *
  * Constraints:
  * -  m == image.length 
  * -  n == image[i].length 
  * -  1 <= m, n <= 50 
  * -  0 <= image[i][j], newColor < 2^(16) 
  * -  0 <= sr <m 
  * -  0 <= sc <n 
  *
*/
class Solution {
 private:
  vector<pair<int, int>> dir{{1, 0}, {-1, 0}, {0, 1}, {0, -1}};

 public:
  vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) {
    vector<vector<bool>> visit(image.size(), vector<bool>(image[0].size(), false));
    queue<pair<int, int>> q;
    int color = image[sr][sc];
    q.push({sr, sc});
    while (!q.empty()) {
      auto point = q.front();
      q.pop();
      image[point.first][point.second] = newColor;
      for (int i = 0; i < 4; ++i) {
        pair<int, int> new_p = {point.first + dir[i].first,
                                point.second + dir[i].second};
        if (new_p.first >= 0 &&
            new_p.first < image.size() &&
            new_p.second >= 0 &&
            new_p.second < image[0].size() &&
            !visit[new_p.first][new_p.second] &&
            image[new_p.first][new_p.second] == color) {
          visit[new_p.first][new_p.second] = true;
          q.push(new_p);
        }
      }
    }
    return image;
  }
};
}  // namespace l733
#endif