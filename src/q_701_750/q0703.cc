#include <gtest/gtest.h>
#include <iostream>
#include <queue>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 703.
 *      Kth Largest Element in a Stream
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Design a class to find the ‘kᵗʰ’ largest element in a stream. Note
 *   that it is the ‘kᵗʰ’ largest element in the sorted order, not the
 *   ‘kᵗʰ’ distinct
 *   Implement ‘KthLargest’
 *       -  ‘KthLargest(int k, int[] nums)’ Initializes the object with the
 *   integer ‘k’ and the stream of integers ‘nums’
 *       -  ‘int add(int val)’ Appends the integer ‘val’ to the stream and
 *   returns the element representing the ‘kᵗʰ’ largest element in the
 *   stream.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ k ≤ 10⁴’
 *   • ‘0 ≤ nums.length ≤ 10⁴’
 *   • ‘-10⁴ ≤ nums[i] ≤ 10⁴’
 *   • ‘-10⁴ ≤ val ≤ 10⁴’
 *   • At most ‘10⁴’ calls will be made to ‘add’ .
 *   • It is guaranteed that there will be at least ‘k’ elements in the array when you search for the ‘kᵗʰ’ element.
 *
 */

struct q703 : public ::testing::Test {
  // Leetcode answer here
  class KthLargest {
   private:
    priority_queue<int, vector<int>, greater<int>> data_;
    int target_;

    void adjust() {
      while (data_.size() > target_) {
        data_.pop();
      }
    }

   public:
    KthLargest(int k, vector<int>& nums)
        : target_{k} {
      for (auto& x : nums) {
        data_.emplace(x);
        adjust();
      }
    }

    int add(int val) {
      data_.emplace(val);
      adjust();
      return data_.top();
    }
  };

  class KthLargest *kth_largest;
};

TEST_F(q703, sample_input01) {
  int k = 3;
  vector<int> nums = {4, 5, 8, 2};
  kth_largest = new KthLargest(k, nums);
  EXPECT_EQ(kth_largest->add(3), 4);
  EXPECT_EQ(kth_largest->add(5), 5);
  EXPECT_EQ(kth_largest->add(10), 5);
  EXPECT_EQ(kth_largest->add(9), 8);
  EXPECT_EQ(kth_largest->add(4), 8);
  delete kth_largest;
}