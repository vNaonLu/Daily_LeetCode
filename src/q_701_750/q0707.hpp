
#ifndef LEETCODE_Q707_H__
#define LEETCODE_Q707_H__
#include <iostream>

namespace l707 {
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 707.
  *      Design Linked List
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   Design your implementation of the linked list. You can choose to use a
  *   singly or doubly linked list.<br.
  *   
  *   A node in a singly linked list should have two attributes: ‘val’ and
  *   ‘next’ . ‘val’ is the value of the current node, and ‘next’ is a
  *   pointer/reference to the next node.<br.
  *   
  *   If you want to use the doubly linked list, you will need one more
  *   attribute ‘prev’ to indicate the previous node in the linked list.
  *   Assume all nodes in the linked list are “0-indexed”.
  *   
  *   Implement the ‘MyLinkedList’.
  *   
  *   - ‘MyLinkedList()’ Initializes the ‘MyLinkedList’ object.
  *   
  *   - ‘int get(int index)’ Get the value of the ‘indexᵗʰ’ node in the
  *   linked list. If the index is invalid, return ‘-1’.
  *   
  *   - ‘void addAtHead(int val)’ Add a node of value ‘val’ before the
  *   first element of the linked list. After the insertion, the new node
  *   will be the first node of the linked list.
  *   
  *   - ‘void addAtTail(int val)’ Append a node of value ‘val’ as the last
  *   element of the linked list.
  *   
  *   - ‘void addAtIndex(int index, int val)’ Add a node of value ‘val’
  *   before the ‘indexᵗʰ’ node in the linked list. If ‘index’ equals the
  *   length of the linked list, the node will be appended to the end of the
  *   linked list. If ‘index’ is greater than the length, the node “will not
  *   be inserted”.
  *   
  *   - ‘void deleteAtIndex(int index)’ Delete the ‘indexᵗʰ’ node in the
  *   linked list, if the index is valid.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘0 ≤ index, val ≤ 1000’
  *   • Please do not use the built-in LinkedList library.
  *   • At most ‘2000’ calls will be made to ‘get’ , ‘addAtHead’ , ‘addAtTail’ , ‘addAtIndex’ and ‘deleteAtIndex’ .
  *
*/

class MyLinkedList {
 private:
  struct node {
    int val;
    node *next;

    node(int val) : next(nullptr),
                    val(val) {}
  } * m_node;
  size_t m_size;

 public:
  MyLinkedList() {
    m_node = nullptr;
    m_size = 0;
  }

  void print(string pmt) {
    node *p = m_node;
    cout << "after " << pmt << ", size: " << m_size << "  ";
    while (p != nullptr) {
      cout << p->val << " ";
      p = p->next;
    }
    cout << endl;
  }

  int get(int index) {
    if (index >= m_size) return -1;
    node *p = m_node;
    while (index > 0) {
      --index;
      p = p->next;
    }
    return p->val;
  }

  void addAtHead(int val) {
    node *p = new node(val);
    if (m_node == nullptr) {
      m_node = p;
    } else {
      p->next = m_node;
      m_node = p;
    }
    ++m_size;
  }

  void addAtTail(int val) {
    node *lead = m_node;
    while (lead != nullptr && lead->next != nullptr) {
      lead = lead->next;
    }
    if (lead == nullptr) {
      m_node = new node(val);
    } else {
      lead->next = new node(val);
    }
    ++m_size;
  }

  void addAtIndex(int index, int val) {
    if (index > m_size) return;
    if (index == 0) {
      addAtHead(val);
    } else {
      node *p = new node(val);
      node *lead = m_node;
      while (--index > 0) {
        lead = lead->next;
      }
      p->next = lead->next;
      lead->next = p;
    }
    ++m_size;
  }

  void deleteAtIndex(int index) {
    if (index >= m_size) return;
    if (index == 0) {
      node *p = m_node;
      m_node = m_node->next;
      delete p;
    } else {
      node *lead = m_node;
      while (--index > 0) {
        lead = lead->next;
      }
      node *p = lead->next;
      lead->next = p->next;
      delete p;
    }
    --m_size;
  }
};

/**
 * Your MyLinkedList object will be instantiated and called as such:
 * MyLinkedList* obj = new MyLinkedList();
 * int param_1 = obj->get(index);
 * obj->addAtHead(val);
 * obj->addAtTail(val);
 * obj->addAtIndex(index,val);
 * obj->deleteAtIndex(index);
 */
}  // namespace l707

#endif