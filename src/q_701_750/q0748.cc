#include <gtest/gtest.h>
#include <iostream>
#include <string>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 748.
 *      Shortest Completing Word
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a string ‘licensePlate’ and an array of strings ‘words’ , find
 *   the “shortest completing” word in ‘words’
 *   A “completing” word is a word that “contains all the letters” in
 *   ‘licensePlate’ . “Ignore numbers and spaces” in ‘licensePlate’ , and
 *   treat letters as “case insensitive” . If a letter appears more than
 *   once in ‘licensePlate’ , then it must appear in the word the same
 *   number of times or
 *   For example, if ‘licensePlate’  ‘ = 'aBc 12c'’ , then it contains
 *   letters ‘'a'’ , ‘'b'’ (ignoring case), and ‘'c'’ twice. Possible
 *   “completing” words are ‘'abccdef'’ , ‘'caaacab'’ , and ‘'cbca'’
 *   Return “the shortest “completing” word in ” ‘words’ “.” It is
 *   guaranteed an answer exists. If there are multiple shortest
 *   “completing” words, return the “first” one that occurs in ‘words’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ licensePlate.length ≤ 7’
 *   • ‘licensePlate’ contains digits, letters (uppercase or lowercase), or
 * space ‘' '’ . • ‘1 ≤ words.length ≤ 1000’ • ‘1 ≤ words[i].length ≤ 15’ •
 * ‘words[i]’ consists of lower case English letters.
 *
 */

struct q748 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    string shortestCompletingWord(string licensePlate, vector<string> &words) {
      vector<int> cntlic(26, 0);
      for (auto ch : licensePlate) {
        if (isalpha(ch)) {
          ++cntlic[tolower(ch) - 'a'];
        }
      }

      int    minL = numeric_limits<int>::max();
      string res;
      for (auto &str : words) {
        vector<int> cnt(26, 0);
        for (auto ch : str) {
          ++cnt[ch - 'a'];
        }

        bool complete = true;
        for (int i = 0; i < 26; ++i) {
          if (cnt[i] < cntlic[i]) {
            complete = false;
            break;
          }
        }

        if (complete && str.length() < (size_t)minL) {
          res  = str;
          minL = str.length();
        }
      }

      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q748, sample_input01) {
  solution                    = new Solution();
  string         licensePlate = "1s3 PSt";
  vector<string> words        = {"step", "steps", "stripe", "stepple"};
  string         exp          = "steps";
  string         act = solution->shortestCompletingWord(licensePlate, words);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q748, sample_input02) {
  solution                    = new Solution();
  string         licensePlate = "1s3 456";
  vector<string> words        = {"looks", "pest", "stew", "show"};
  string         exp          = "pest";
  string         act = solution->shortestCompletingWord(licensePlate, words);
  EXPECT_EQ(act, exp);
  delete solution;
}