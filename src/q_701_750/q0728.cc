#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 728.
 *      Self Dividing Numbers
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   A “self-dividing number” is a number that is divisible by every digit
 *   it
 *       - For example, ‘128’ is “a self-dividing number” because ‘128 % 1
 *   = 0’ , ‘128 % 2 = 0’ , and ‘128 % 8 = 0’
 *   A “self-dividing number” is not allowed to contain the digit
 *   Given two integers ‘left’ and ‘right’ , return “a list of all the
 *   “self-dividing numbers” in the range” ‘[left, right]’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ left ≤ right ≤ 10⁴’
 *
 */

struct q728 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  private:
    bool isSelfDividing(int x) {
      auto t = x;
      while (t != 0) {
        auto c = t % 10;
        if (c == 0 || x % c != 0) {
          return false;
        }
        t /= 10;
      }
      return true;
    }

  public:
    vector<int> selfDividingNumbers(int left, int right) {
      auto res = vector<int>();
      for (int i = left; i <= right; ++i) {
        if (isSelfDividing(i)) {
          res.emplace_back(i);
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q728, sample_input01) {
  solution          = new Solution();
  int         left  = 1;
  int         right = 22;
  vector<int> exp   = {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22};
  vector<int> act   = solution->selfDividingNumbers(left, right);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q728, sample_input02) {
  solution          = new Solution();
  int         left  = 47;
  int         right = 85;
  vector<int> exp   = {48, 55, 66, 77};
  vector<int> act   = solution->selfDividingNumbers(left, right);
  EXPECT_EQ(act, exp);
  delete solution;
}