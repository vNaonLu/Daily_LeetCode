#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 740.
 *      Delete and Earn
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an integer array ‘nums’ . You want to maximize the
 *   number of points you get by performing the following operation any
 *   number of
 *       - Pick any ‘nums[i]’ and delete it to earn ‘nums[i]’ points.
 *   Afterwards, you must delete “every” element equal to ‘nums[i] - 1’ and
 *   “every” element equal to ‘nums[i] + 1’
 *   Return “the “maximum number of points” you can earn by applying the
 *   above operation some number of times” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 2 × 10⁴’
 *   • ‘1 ≤ nums[i] ≤ 10⁴’
 *
 */

struct q740 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int deleteAndEarn(vector<int>& nums) {
      map<int, int> freq;
      for (const auto& x : nums) ++freq[x];
      int res = 0;
      int avoid = 0, prev = 0;
      auto beg = freq.begin();
      while (beg != freq.end()) {
        int earn = prev == beg->first - 1 ? avoid + beg->first * beg->second : max(avoid, res) + beg->first * beg->second;
        avoid = res;
        res = max(res, earn);
        prev = (beg++)->first;
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q740, sample_input01) {
  solution = new Solution();
  vector<int> nums = {3, 4, 2};
  int exp = 6;
  EXPECT_EQ(solution->deleteAndEarn(nums), exp);
  delete solution;
}

TEST_F(q740, sample_input02) {
  solution = new Solution();
  vector<int> nums = {2, 2, 3, 3, 3, 4};
  int exp = 9;
  EXPECT_EQ(solution->deleteAndEarn(nums), exp);
  delete solution;
}