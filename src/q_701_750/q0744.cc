#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 744.
 *      Find Smallest Letter Greater Than Target
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a characters array ‘letters’ that is sorted in “non-decreasing”
 *   order and a character ‘target’ , return “the smallest character in the
 *   array that is larger than ” ‘target’
 *    “Note” that the letters wrap
 *       - For example, if ‘target = 'z'’ and ‘letters = ['a', 'b']’ , the
 *   answer is ‘'a'’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘2 ≤ letters.length ≤ 10⁴’
 *   • ‘letters[i]’ is a lowercase English letter.
 *   • ‘letters’ is sorted in “non-decreasing” order.
 *   • ‘letters’ contains at least two different characters.
 *   • ‘target’ is a lowercase English letter.
 *
 */

struct q744 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    char nextGreatestLetter(vector<char>& letters, char target) {
      int l = 0, r = letters.size();
      while (l < r) {
        int m = l + (r - l) / 2;
        if (letters[m] <= target) {
          l = m + 1;
        } else {
          r = m;
        }
      }
      return letters[l % letters.size()];
    }
  };

  class Solution *solution;
};

TEST_F(q744, sample_input01) {
  solution = new Solution();
  vector<char> letters = {'c', 'f', 'j'};
  char target = 'a';
  char exp = 'c';
  char act = solution->nextGreatestLetter(letters, target);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q744, sample_input02) {
  solution = new Solution();
  vector<char> letters = {'c', 'f', 'j'};
  char target = 'c';
  char exp = 'f';
  char act = solution->nextGreatestLetter(letters, target);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q744, sample_input03) {
  solution = new Solution();
  vector<char> letters = {'c', 'f', 'j'};
  char target = 'd';
  char exp = 'f';
  char act = solution->nextGreatestLetter(letters, target);
  EXPECT_EQ(act, exp);
  delete solution;
}