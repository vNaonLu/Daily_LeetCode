
#ifndef LEETCODE_Q701_H__
#define LEETCODE_Q701_H__
#include <iostream>
#include <leetcode/treenode.hpp>

namespace l701 {
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 701. Insert into a Binary Search Tree
  *
  * You are given the root node of a binary search
  * tree (BST) and a value to insert into the tree.
  * Return the root node of the BST after the insertion .
  * It is “guaranteed“ that the new value does not
  * exist in the original BST.
  * “Notice“ that there may existmultiple valid ways
  * for theinsertion, as long as the tree remains a
  * BST after insertion. You can return “any of them“ .
  *
  * Constraints:
  * - The number of nodes inthe tree will be in the range [0,10^(4)] .
  * -  -10^(8) <= Node.val <= 10^(8) 
  * - All the values Node.val are “unique“ .
  * -  -10^(8) <= val <= 10^(8) 
  * - It';s “guaranteed“ that val does not exist in the original BST.
  *
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
 public:
  TreeNode* insertIntoBST(TreeNode* root, int val) {
    TreeNode *p = root, *pre = nullptr;
    while (p != nullptr) {
      pre = p;
      if (p->val > val) {
        p = p->left;
      } else {
        p = p->right;
      }
    }
    if (pre == nullptr) {
      root = new TreeNode(val);
    } else {
      if (pre->val > val) {
        pre->left = new TreeNode(val);
      } else {
        pre->right = new TreeNode(val);
      }
    }
    return root;
  }
};
}  // namespace l701
#endif