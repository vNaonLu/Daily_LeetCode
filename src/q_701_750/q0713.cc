#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 713.
 *      Subarray Product Less Than K
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an array of integers ‘nums’ and an integer ‘k’ , return “the
 *   number of contiguous subarrays where the product of all the elements
 *   in the subarray is strictly less than ” ‘k’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ nums.length ≤ 3 × 10⁴’
 *   • ‘1 ≤ nums[i] ≤ 1000’
 *   • ‘0 ≤ k ≤ 10⁶’
 *
 */

struct q713 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int numSubarrayProductLessThanK(vector<int>& nums, int k) {
      if (k <= 1) return 0;
      int res = 0;
      int product = 1;
      int r = 0, l = 0;
      for (; r < nums.size(); ++r) {
        product *= nums[r];
        while (product >= k) product /= nums[l++];
        res += r - l + 1;
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q713, sample_input01) {
  solution = new Solution();
  vector<int> nums = {10, 5, 2, 6};
  int k = 100;
  int exp = 8;
  EXPECT_EQ(solution->numSubarrayProductLessThanK(nums, k), exp);
  delete solution;
}

TEST_F(q713, sample_input02) {
  solution = new Solution();
  vector<int> nums = {1, 2, 3};
  int k = 0;
  int exp = 0;
  EXPECT_EQ(solution->numSubarrayProductLessThanK(nums, k), exp);
  delete solution;
}