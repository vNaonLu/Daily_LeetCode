
#ifndef LEETCODE_Q740_H__
#define LEETCODE_Q740_H__
#include <iostream>
#include <map>
#include <vector>

namespace l740 {
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 740.
  *      Delete and Earn
  *
  * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
  *
  *   You are given an integer array ‘nums’ . You want to maximize the
  *   number of points you get by performing the following operation any
  *   number of.
  *   
  *   - Pick any ‘nums[i]’ and delete it to earn ‘nums[i]’ points.
  *   Afterwards, you must delete “every” element equal to ‘nums[i] - 1’ and
  *   “every” element equal to ‘nums[i] + 1’.
  *   
  *   Return “the “maximum number of points” you can earn by applying the
  *   above operation some number of times”.
  *
  * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
  *
  *   • ‘1 ≤ nums.length ≤ 2 × 10⁴’
  *   • ‘1 ≤ nums[i] ≤ 10⁴’
  *
*/

class Solution {
 public:
  int deleteAndEarn(vector<int>& nums) {
    map<int, int> freq;
    for (const auto& x : nums) ++freq[x];
    int res = 0;
    int avoid = 0, prev = 0;
    auto beg = freq.begin();
    while (beg != freq.end()) {
      int earn = prev == beg->first - 1 ? avoid + beg->first * beg->second : max(avoid, res) + beg->first * beg->second;
      avoid = res;
      res = max(res, earn);
      prev = (beg++)->first;
    }
    return res;
  }
};
}  // namespace l740

#endif