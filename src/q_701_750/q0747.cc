#include <gtest/gtest.h>
#include <iostream>
#include <numeric>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 747.
 *      Largest Number At Least Twice of Others
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an integer array ‘nums’ where the largest integer is
 *   “unique”
 *   Determine whether the largest element in the array is “at least twice”
 *   as much as every other number in the array. If it is, return “the
 *   “index” of the largest element, or return ” ‘-1’ “ otherwise” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘2 ≤ nums.length ≤ 50’
 *   • ‘0 ≤ nums[i] ≤ 100’
 *   • The largest element in ‘nums’ is unique.
 *
 */

struct q747 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int dominantIndex(vector<int> &nums) {
      auto mx = max_element(nums.begin(), nums.end());
      for (auto it = nums.begin(); it != nums.end(); ++it) {
        if (it != mx && *mx < *it * 2) {
          return -1;
        }
      }
      return distance(nums.begin(), mx);
    }
  };

  class Solution *solution;
};

TEST_F(q747, sample_input01) {
  solution         = new Solution();
  vector<int> nums = {3, 6, 1, 0};
  int         exp  = 1;
  int         act  = solution->dominantIndex(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q747, sample_input02) {
  solution         = new Solution();
  vector<int> nums = {1, 2, 3, 4};
  int         exp  = -1;
  int         act  = solution->dominantIndex(nums);
  EXPECT_EQ(act, exp);
  delete solution;
}