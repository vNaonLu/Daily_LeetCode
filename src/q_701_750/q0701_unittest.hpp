
#ifndef Q701_UNITTEST_H__
#define Q701_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0701.hpp"
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 701. Insert into a Binary Search Tree
  *
  * You are given the root node of a binary search
  * tree (BST) and a value to insert into the tree.
  * Return the root node of the BST after the insertion .
  * It is “guaranteed“ that the new value does not
  * exist in the original BST.
  * “Notice“ that there may existmultiple valid ways
  * for theinsertion, as long as the tree remains a
  * BST after insertion. You can return “any of them“ .
  *
  * Constraints:
  * - The number of nodes inthe tree will be in the range [0,10^(4)] .
  * -  -10^(8) <= Node.val <= 10^(8) 
  * - All the values Node.val are “unique“ .
  * -  -10^(8) <= val <= 10^(8) 
  * - It';s “guaranteed“ that val does not exist in the original BST.
  *
*/

TEST(q701, sample_input01) {
  int null = -1;
  TreeNode *root = TreeNode::generate({4, 2, 7, 1, 3}, null);
  int val = 5;
  TreeNode *exp = TreeNode::generate({4, 2, 7, 1, 3, 5}, null);
  l701::Solution solver;
  EXPECT_TRUE(TreeNode::equal(solver.insertIntoBST(root, val), exp));
  TreeNode::release(root);
  TreeNode::release(exp);
}

TEST(q701, sample_input02) {
  int null = -1;
  TreeNode *root = TreeNode::generate({40, 20, 60, 10, 30, 50, 70}, null);
  int val = 25;
  TreeNode *exp = TreeNode::generate({40, 20, 60, 10, 30, 50, 70, null, null, 25}, null);
  l701::Solution solver;
  EXPECT_TRUE(TreeNode::equal(solver.insertIntoBST(root, val), exp));
  TreeNode::release(root);
  TreeNode::release(exp);
}

TEST(q701, sample_input03) {
  int null = -1;
  TreeNode *root = TreeNode::generate({4, 2, 7, 1, 3, null, null, null, null, null, null}, null);
  int val = 5;
  TreeNode *exp = TreeNode::generate({4, 2, 7, 1, 3, 5}, null);
  l701::Solution solver;
  EXPECT_TRUE(TreeNode::equal(solver.insertIntoBST(root, val), exp));
  TreeNode::release(root);
  TreeNode::release(exp);
}

#endif