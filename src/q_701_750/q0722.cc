#include <gtest/gtest.h>
#include <iostream>
#include <string>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 722.
 *      Remove Comments
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a C++ program, remove comments from it. The program source is an
 *   array of strings ‘source’ where ‘source[i]’ is the ‘iᵗʰ’ line of the
 *   source code. This represents the result of splitting the original
 *   source code string by the newline character ‘'\n'’
 *   In C++, there are two types of comments, line comments, and block
 *       - The string ‘'//'’ denotes a line comment, which represents that
 *   it and the rest of the characters to the right of it in the same line
 *   should be
 *       - The string ‘'/×'’ denotes a block comment, which represents that
 *   all characters until the next (non-overlapping) occurrence of ‘'×/'’
 *   should be ignored. (Here, occurrences happen in reading order: line by
 *   line from left to right.) To be clear, the string ‘'/×/'’ does not yet
 *   end the block comment, as the ending would be overlapping the
 *   The first effective comment takes precedence over
 *       - For example, if the string ‘'//'’ occurs in a block comment, it
 *   is
 *       - Similarly, if the string ‘'/×'’ occurs in a line or block
 *   comment, it is also
 *   If a certain line of code is empty after removing comments, you must
 *   not output that line: each string in the answer list will be
 *   There will be no control characters, single quote, or double quote
 *       - For example, ‘source = 'string s = '/× Not a comment. ×/';'’
 *   will not be a test
 *   Also, nothing else such as defines or macros will interfere with the
 *   It is guaranteed that every open block comment will eventually be
 *   closed, so ‘'/×'’ outside of a line or block comment always starts a
 *   new
 *   Finally, implicit newline characters can be deleted by block comments.
 *   Please see the examples below for
 *   After removing the comments from the source code, return “the source
 *   code in the same format” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ source.length ≤ 100’
 *   • ‘0 ≤ source[i].length ≤ 80’
 *   • ‘source[i]’ consists of printable “ASCII” characters.
 *   • Every open block comment is eventually closed.
 *   • There are no single-quote ordouble-quote in the input.
 *
 */

struct q722 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    vector<string> removeComments(vector<string> &source) {
      auto res     = vector<string>();
      auto s       = string("");
      auto comment = false;
      for (int i = 0; i < source.size(); i++) {
        for (int j = 0; j < source[i].size(); j++) {
          if (!comment && j + 1 < source[i].size() && source[i][j] == '/' &&
              source[i][j + 1] == '/') {
            break;
          } else if (!comment && j + 1 < source[i].size() &&
                     source[i][j] == '/' && source[i][j + 1] == '*') {
            comment = true;
            j++;
          } else if (comment && j + 1 < source[i].size() &&
                     source[i][j] == '*' && source[i][j + 1] == '/') {
            comment = false;
            j++;
          } else if (!comment) {
            s.push_back(source[i][j]);
          }
        }

        if (!comment && !s.empty()) {
          res.push_back(move(s));
        }
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q722, sample_input01) {
  solution              = new Solution();
  vector<string> source = {"/*Test program */",
                           "int main()",
                           "{ ",
                           "  // variable declaration ",
                           "int a, b, c;",
                           "/* This is a test",
                           "   multiline  ",
                           "   comment for ",
                           "   testing */",
                           "a = b + c;",
                           "}"};
  vector<string> exp    = {"int main()",   "{ ",         "  ",
                           "int a, b, c;", "a = b + c;", "}"};
  vector<string> act    = solution->removeComments(source);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q722, sample_input02) {
  solution              = new Solution();
  vector<string> source = {"a/*comment", "line", "more_comment*/b"};
  vector<string> exp    = {"ab"};
  vector<string> act    = solution->removeComments(source);
  EXPECT_EQ(act, exp);
  delete solution;
}