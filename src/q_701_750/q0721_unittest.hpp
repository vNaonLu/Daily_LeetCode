
#ifndef Q721_UNITTEST_H__
#define Q721_UNITTEST_H__
#include <gtest/gtest.h>

#include <leetcode/anyorder.hpp>

#include "q0721.hpp"
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 721.
 *      Accounts Merge
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a list of ‘accounts’ where each element ‘accounts[i]’ is a list
 *   of strings, where the first element ‘accounts[i][0]’ is a name, and
 *   the rest of the elements are “emails” representing emails of the
 *   Now, we would like to merge these accounts. Two accounts definitely
 *   belong to the same person if there is some common email to both
 *   accounts. Note that even if two accounts have the same name, they may
 *   belong to different people as people could have the same name. A
 *   person can have any number of accounts initially, but all of their
 *   accounts definitely have the same
 *   After merging the accounts, return the accounts in the following
 *   format: the first element of each account is the name, and the rest of
 *   the elements are emails “in sorted order” . The accounts themselves
 *   can be returned in “any order” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ accounts.length ≤ 1000’
 *   • ‘2 ≤ accounts[i].length ≤ 10’
 *   • ‘1 ≤ accounts[i][j] ≤ 30’
 *   • ‘accounts[i][0]’ consists of English letters.
 *   • ‘accounts[i][j] (for j > 0)’ is a valid email.
 *
 */

TEST(q721, sample_input01) {
  l721::Solution solver;
  vector<vector<string>> accounts = {{"John", "johnsmith@mail.com", "john_newyork@mail.com"}, {"John", "johnsmith@mail.com", "john00@mail.com"}, {"Mary", "mary@mail.com"}, {"John", "johnnybravo@mail.com"}};
  vector<vector<string>> exp = {{"John", "john00@mail.com", "john_newyork@mail.com", "johnsmith@mail.com"}, {"Mary", "mary@mail.com"}, {"John", "johnnybravo@mail.com"}};
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solver.accountsMerge(accounts), exp);
}

TEST(q721, sample_input02) {
  l721::Solution solver;
  vector<vector<string>> accounts = {{"Gabe", "Gabe0@m.co", "Gabe3@m.co", "Gabe1@m.co"}, {"Kevin", "Kevin3@m.co", "Kevin5@m.co", "Kevin0@m.co"}, {"Ethan", "Ethan5@m.co", "Ethan4@m.co", "Ethan0@m.co"}, {"Hanzo", "Hanzo3@m.co", "Hanzo1@m.co", "Hanzo0@m.co"}, {"Fern", "Fern5@m.co", "Fern1@m.co", "Fern0@m.co"}};
  vector<vector<string>> exp = {{"Ethan", "Ethan0@m.co", "Ethan4@m.co", "Ethan5@m.co"}, {"Gabe", "Gabe0@m.co", "Gabe1@m.co", "Gabe3@m.co"}, {"Hanzo", "Hanzo0@m.co", "Hanzo1@m.co", "Hanzo3@m.co"}, {"Kevin", "Kevin0@m.co", "Kevin3@m.co", "Kevin5@m.co"}, {"Fern", "Fern0@m.co", "Fern1@m.co", "Fern5@m.co"}};
  // Try EXPECT_EQ_ANY_ORDER_RECURSIVE
  // if the element is also matched in any order.
  EXPECT_EQ_ANY_ORDER(solver.accountsMerge(accounts), exp);
}

#endif