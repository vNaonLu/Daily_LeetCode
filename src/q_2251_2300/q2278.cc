#include <gtest/gtest.h>
#include <iostream>
#include <string>
#include <unordered_map>

using namespace std;

/**
 * The file is generated by LeetCodeDailyTools
 *
 * 2278.
 *       Percentage of Letter in String
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a string ‘s’ and a character ‘letter’ , return “ the
 *   “percentage” of characters in ” ‘s’ “ that equal ” ‘letter’ “ “rounded
 *   down” to the nearest whole percent.”
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ s.length ≤ 100’
 *   • ‘s’ consists of lowercase English letters.
 *   • ‘letter’ is a lowercase English letter.
 *
 * see more details:
 * https://leetcode.com/problems/percentage-of-letter-in-string/
 */

struct q2278 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int percentageLetter(string s, char letter) {
      unordered_map<char, int> freq;
      for (auto c : s) {
        ++freq[c];
      }
      return static_cast<int>(static_cast<double>(freq[letter]) * 100.0 /
                              s.size());
    }
  };

  class Solution *solution;
};

TEST_F(q2278, sample_input01) {
  solution      = new Solution();
  string s      = "foobar";
  char   letter = 'o';
  int    exp    = 33;
  int    act    = solution->percentageLetter(s, letter);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2278, sample_input02) {
  solution      = new Solution();
  string s      = "jjjj";
  char   letter = 'k';
  int    exp    = 0;
  int    act    = solution->percentageLetter(s, letter);
  EXPECT_EQ(act, exp);
  delete solution;
}
