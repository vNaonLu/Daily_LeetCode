#include <gtest/gtest.h>
#include <iostream>
#include <string>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 2266.
 *       Count Number of Texts
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Alice is texting Bob using her phone. The “mapping” of digits to
 *   letters is shown in the figure
 *   In order to “add” a letter, Alice has to “press” the key of the
 *   corresponding digit ‘i’ times, where ‘i’ is the position of the letter
 *   in the
 *       - For example, to add the letter ‘'s'’ , Alice has to press ‘'7'’
 *   four times. Similarly, to add the letter ‘'k'’ , Alice has to press
 *   ‘'5'’
 *       - Note that the digits ‘'0'’ and ‘'1'’ do not map to any letters,
 *   so Alice “does not” use
 *   However, due to an error in transmission, Bob did not receive Alice's
 *   text message but received a “string of pressed keys”
 *       - For example, when Alice sent the message ‘'bob'’ , Bob received
 *   the string ‘'2266622'’
 *   Given a string ‘pressedKeys’ representing the string received by Bob,
 *   return “the “total number of possible text messages” Alice could have
 *   sent”
 *   Since the answer may be very large, return it “modulo” ‘10⁹ + 7’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ pressedKeys.length ≤ 10⁵’
 *   • ‘pressedKeys’ only consists of digits from ‘'2'’ - ‘'9'’ .
 *
 */

struct q2266 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    constexpr static int kMod = 1e9 + 7;

    int helper(int i, string_view s, vector<int> &dp) {
      if (i == 0) {
        return 1;
      }

      if (dp[i] != -1) {
        return dp[i];
      }

      int res = helper(i - 1, s, dp) % kMod;

      if (i - 2 >= 0 && s[i - 1] == s[i - 2]) {
        res += helper(i - 2, s, dp);
        res %= kMod;

        if (i - 3 >= 0 && s[i - 2] == s[i - 3]) {
          res += helper(i - 3, s, dp);
          res %= kMod;

          if (i - 4 >= 0 && s[i - 3] == s[i - 4] && (s[i - 3] == '7' || s[i - 3] == '9')) {
            res += helper(i - 4, s, dp);
            res %= kMod;
          }
        }
      }

      return dp[i] = res;
    }

   public:
    int countTexts(string pressedKeys) {
      vector<int> dp(pressedKeys.size() + 1, -1);

      return helper(pressedKeys.size(), pressedKeys, dp);
    }
  };

  class Solution *solution;
};

TEST_F(q2266, sample_input01) {
  solution = new Solution();
  string pressedKeys = "22233";
  int exp = 8;
  int act = solution->countTexts(pressedKeys);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2266, sample_input02) {
  solution = new Solution();
  string pressedKeys = "222222222222222222222222222222222222";
  int exp = 82876089;
  int act = solution->countTexts(pressedKeys);
  EXPECT_EQ(act, exp);
  delete solution;
}