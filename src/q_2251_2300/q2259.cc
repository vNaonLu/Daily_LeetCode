#include <gtest/gtest.h>
#include <iostream>
#include <string>

using namespace std;

/**
 * The file is generated by LeetCodeDailyTools
 *
 * 2259.
 *       Remove Digit From Number to Maximize Result
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given a string ‘number’ representing a “positive integer” and
 *   a character ‘digit’
 *   Return “the resulting string after removing “exactly one occurrence”
 *   of ” ‘digit’ “ from ” ‘number’ “ such that the value of the resulting
 *   string in “decimal” form is “maximized” ” . The test cases are
 *   generated such that ‘digit’ occurs at least once in ‘number’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘2 ≤ number.length ≤ 100’
 *   • ‘number’ consists of digits from ‘'1'’ to ‘'9'’ .
 *   • ‘digit’ is a digit from ‘'1'’ to ‘'9'’ .
 *   • ‘digit’ occurs at least once in ‘number’ .
 *
 * see more details:
 * https://leetcode.com/problems/remove-digit-from-number-to-maximize-result/
 */

struct q2259 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    string removeDigit(string number, char digit) {
      auto beg   = number.begin();
      auto slice = beg;
      while (beg != number.end()) {
        if (*beg == digit) {
          slice = beg;
          if (beg + 1 == number.end() || digit < *(beg + 1)) {
            break;
          }
        }
        ++beg;
      }
      number.erase(slice);
      return number;
    }
  };

  class Solution *solution;
};

TEST_F(q2259, sample_input01) {
  solution      = new Solution();
  string number = "123";
  char   digit  = '3';
  string exp    = "12";
  string act    = solution->removeDigit(number, digit);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2259, sample_input02) {
  solution      = new Solution();
  string number = "1231";
  char   digit  = '1';
  string exp    = "231";
  string act    = solution->removeDigit(number, digit);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2259, sample_input03) {
  solution      = new Solution();
  string number = "551";
  char   digit  = '5';
  string exp    = "51";
  string act    = solution->removeDigit(number, digit);
  EXPECT_EQ(act, exp);
  delete solution;
}
