#include <gtest/gtest.h>
#include <iostream>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 762.
 *      Prime Number of Set Bits in Binary Representation
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given two integers ‘left’ and ‘right’ , return “the “count” of numbers
 *   in the “inclusive” range ” ‘[left, right]’ “ having a “prime number of
 *   set bits” in their binary representation”
 *   Recall that the “number of set bits” an integer has is the number of
 *   ‘1’ 's present when written in
 *       - For example, ‘21’ written in binary is ‘10101’ , which has ‘3’
 *   set bits.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ left ≤ right ≤ 10⁶’
 *   • ‘0 ≤ right - left ≤ 10⁴’
 *
 */

struct q762 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int countPrimeSetBits(int left, int right) {
      vector<bool> primes(33, true);
      primes[0] = primes[1] = false;
      for (int i = 2; i * i <= 32; ++i)
        if (primes[i])
          for (int j = 2; j * i <= 32; ++j)
            primes[i * j] = false;
      int res = 0;
      while (left <= right)
        if (primes[__builtin_popcount(left++)])
          ++res;
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q762, sample_input01) {
  solution = new Solution();
  int left = 6;
  int right = 10;
  int exp = 4;
  EXPECT_EQ(solution->countPrimeSetBits(left, right), exp);
  delete solution;
}

TEST_F(q762, sample_input02) {
  solution = new Solution();
  int left = 10;
  int right = 15;
  int exp = 5;
  EXPECT_EQ(solution->countPrimeSetBits(left, right), exp);
  delete solution;
}