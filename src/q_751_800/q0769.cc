#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 769.
 *      Max Chunks To Make Sorted
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an integer array ‘arr’ of length ‘n’ that represents a
 *   permutation of the integers in the range ‘[0, n - 1]’
 *   We split ‘arr’ into some number of “chunks” (i.e., partitions), and
 *   individually sort each chunk. After concatenating them, the result
 *   should equal the sorted
 *   Return “the largest number of chunks we can make to sort the array” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘n = arr.length’
 *   • ‘1 ≤ n ≤ 10’
 *   • ‘0 ≤ arr[i] < n’
 *   • All the elements of ‘arr’ are “unique” .
 *
 */

struct q769 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int maxChunksToSorted(vector<int>& arr) {
      int res = 0,
          cur = -1;
      for (int i = 0; i < arr.size(); ++i) {
        cur = max({cur, i, arr[i]});
        if (cur <= i) ++res;
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q769, sample_input01) {
  solution = new Solution();
  vector<int> arr = {4, 3, 2, 1, 0};
  int exp = 1;
  int act = solution->maxChunksToSorted(arr);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q769, sample_input02) {
  solution = new Solution();
  vector<int> arr = {1, 0, 2, 3, 4};
  int exp = 4;
  int act = solution->maxChunksToSorted(arr);
  EXPECT_EQ(act, exp);
  delete solution;
}