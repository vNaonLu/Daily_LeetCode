#include <gtest/gtest.h>
#include <array>
#include <iostream>
#include <string>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 794.
 *      Valid Tic-Tac-Toe State
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a Tic-Tac-Toe board as a string array ‘board’ , return ‘true’ if
 *   and only if it is possible to reach this board position during the
 *   course of a valid tic-tac-toe
 *   The board is a ‘3 x 3’ array that consists of characters ‘' '’ , ‘'X'’
 *   , and ‘'O'’ . The ‘' '’ character represents an empty
 *   Here are the rules of
 *       - Players take turns placing characters into empty squares ‘' '’
 *       - The first player always places ‘'X'’ characters, while the
 *   second player always places ‘'O'’
 *       -  ‘'X'’ and ‘'O'’ characters are always placed into empty
 *   squares, never filled
 *       - The game ends when there are three of the same (non-empty)
 *   character filling any row, column, or
 *       - The game also ends if all squares are
 *       - No more moves can be played if the game is over.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘board.length = 3’
 *   • ‘board[i].length = 3’
 *   • ‘board[i][j]’ is either ‘'X'’ , ‘'O'’ , or ‘' '’ .
 *
 */

struct q794 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    /**
     * 0 1 2
     * 3 4 5
     * 6 7 8
     */
    inline static constexpr array<array<int, 3>, 8> lines{
        array<int, 3>{0, 1, 2}, array<int, 3>{3, 4, 5}, array<int, 3>{6, 7, 8},
        array<int, 3>{0, 3, 6}, array<int, 3>{1, 4, 7}, array<int, 3>{2, 5, 8},
        array<int, 3>{0, 4, 8}, array<int, 3>{2, 4, 6}};

    inline static constexpr array<pair<int, int>, 9> conv{
        pair<int, int>{0, 0},
        pair<int, int>{0, 1},
        pair<int, int>{0, 2},
        pair<int, int>{1, 0},
        pair<int, int>{1, 1},
        pair<int, int>{1, 2},
        pair<int, int>{2, 0},
        pair<int, int>{2, 1},
        pair<int, int>{2, 2},
    };

    bool is_winner(char c, vector<string> &b) {
      for (auto &l : lines) {
        auto &[x1, y1] = conv[l[0]];
        auto &[x2, y2] = conv[l[1]];
        auto &[x3, y3] = conv[l[2]];

        if (b[x1][y1] == c && b[x1][y1] == b[x2][y2] && b[x2][y2] == b[x3][y3]) {
          return true;
        }
      }

      return false;
    }

   public:
    bool validTicTacToe(vector<string> &board) {
      int X_cnt = 0,
          O_cnt = 0;

      for (auto &s : board) {
        for (auto &c : s) {
          if (c == 'X') {
            ++X_cnt;
          } else if (c == 'O') {
            ++O_cnt;
          }
        }
      }

      if (X_cnt - O_cnt > 1 || X_cnt < O_cnt) {
        return false;
      } else if (is_winner('X', board) && X_cnt == O_cnt) {
        return false;
      } else if (is_winner('O', board) && O_cnt != X_cnt) {
        return false;
      }

      return true;
    }
  };

  class Solution *solution;
};

TEST_F(q794, sample_input01) {
  solution = new Solution();
  vector<string> board = {"O  ", "   ", "   "};
  bool exp = false;
  bool act = solution->validTicTacToe(board);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q794, sample_input02) {
  solution = new Solution();
  vector<string> board = {"XOX", " X ", "   "};
  bool exp = false;
  bool act = solution->validTicTacToe(board);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q794, sample_input03) {
  solution = new Solution();
  vector<string> board = {"XOX", "O O", "XOX"};
  bool exp = true;
  bool act = solution->validTicTacToe(board);
  EXPECT_EQ(act, exp);
  delete solution;
}