
#ifndef Q784_UNITTEST_H__
#define Q784_UNITTEST_H__
#include <gtest/gtest.h>

#include <algorithm>

#include "q0784.hpp"
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 784. Letter Case Permutation
  *
  * Given a string s , we can transform every letter
  * individually to be lowercase or uppercase to
  * create another string.
  * Return a list of all possible strings we could
  * create . You can return the outputin “any order“ .
  *
  * Constraints:
  * -  s will be a string with length between 1 and 12 .
  * -  s will consist only of letters or digits.
  *
*/

TEST(q784, sample_input01) {
  string s = "a1b2";
  l784::Solution solver;
  vector<string> act = solver.letterCasePermutation(s);
  vector<string> exp = {"a1b2", "A1b2", "a1B2", "A1B2"};
  sort(act.begin(), act.end());
  sort(exp.begin(), exp.end());
  EXPECT_EQ(act, exp);
}

TEST(q784, sample_input02) {
  string s = "3z4";
  l784::Solution solver;
  vector<string> act = solver.letterCasePermutation(s);
  vector<string> exp = {"3z4", "3Z4"};
  sort(act.begin(), act.end());
  sort(exp.begin(), exp.end());
  EXPECT_EQ(act, exp);
}

TEST(q784, sample_input03) {
  string s = "12345";
  l784::Solution solver;
  vector<string> act = solver.letterCasePermutation(s);
  vector<string> exp = {"12345"};
  sort(act.begin(), act.end());
  sort(exp.begin(), exp.end());
  EXPECT_EQ(act, exp);
}

TEST(q784, sample_input04) {
  string s = "0";
  l784::Solution solver;
  vector<string> act = solver.letterCasePermutation(s);
  vector<string> exp = {"0"};
  sort(act.begin(), act.end());
  sort(exp.begin(), exp.end());
  EXPECT_EQ(act, exp);
}

#endif