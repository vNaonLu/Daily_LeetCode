#include <gtest/gtest.h>
#include <iostream>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 779.
 *      K-th Symbol in Grammar
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   We build a table of ‘n’ rows ( “1-indexed” ). We start by writing ‘0’
 *   in the ‘1ˢᵗ’ row. Now in every subsequent row, we look at the previous
 *   row and replace each occurrence of ‘0’ with ‘01’ , and each occurrence
 *   of ‘1’ with ‘10’
 *       - For example, for ‘n = 3’ , the ‘1ˢᵗ’ row is ‘0’ , the ‘2ⁿᵈ’ row
 *   is ‘01’ , and the ‘3ʳᵈ’ row is ‘0110’
 *   Given two integer ‘n’ and ‘k’ , return the ‘kᵗʰ’ ( “1-indexed” )
 *   symbol in the ‘nᵗʰ’ row of a table of ‘n’ rows.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ n ≤ 30’
 *   • ‘1 ≤ k ≤ 2^(n - 1)’
 *
 */

struct q779 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int kthGrammar(int n, int k) {
      if (n == 1)      return 0;
      else if (k == 1) return 0;
      int x = kthGrammar(n - 1, (k + 1) / 2);
      return x == 0 ? (k & 1 ? 0 : 1) : (k & 1 ? 1 : 0);
    }
  };

  class Solution *solution;
};

TEST_F(q779, sample_input01) {
  solution = new Solution();
  int n = 1;
  int k = 1;
  int exp = 0;
  int act = solution->kthGrammar(n, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q779, sample_input02) {
  solution = new Solution();
  int n = 2;
  int k = 1;
  int exp = 0;
  int act = solution->kthGrammar(n, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q779, sample_input03) {
  solution = new Solution();
  int n = 2;
  int k = 2;
  int exp = 1;
  int act = solution->kthGrammar(n, k);
  EXPECT_EQ(act, exp);
  delete solution;
}