
#ifndef Q782_UNITTEST_H__
#define Q782_UNITTEST_H__
#include <gtest/gtest.h>

#include "q0782.hpp"
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 782. Transform to Chessboard
  * You are given an n x n binary grid board . In
  * each move, you can swap any two rows with each other,
  * or any two columns with each other.
  * Return the minimum number of moves to transform
  * the board into a “chessboard board” . If the task
  * is impossible, return -1 .
  * A “chessboard board” is a board where no 0 ';s
  * and no 1 ';s are 4-directionally adjacent.
  *
  * Constraints:
  * -  n == board.length 
  * -  n == board[i].length 
  * -  2 <= n <= 30 
  * -  board[i][j] is either 0 or 1 .
  *
*/

TEST(q782, sample_input01) {
  l782::Solution solver;
  vector<vector<int>> board = {{0, 1, 1, 0}, {0, 1, 1, 0}, {1, 0, 0, 1}, {1, 0, 0, 1}};
  int exp = 2;
  EXPECT_EQ(solver.movesToChessboard(board), exp);
}

TEST(q782, sample_input02) {
  l782::Solution solver;
  vector<vector<int>> board = {{0, 1}, {1, 0}};
  int exp = 0;
  EXPECT_EQ(solver.movesToChessboard(board), exp);
}

TEST(q782, sample_input03) {
  l782::Solution solver;
  vector<vector<int>> board = {{1, 0}, {1, 0}};
  int exp = -1;
  EXPECT_EQ(solver.movesToChessboard(board), exp);
}

#endif