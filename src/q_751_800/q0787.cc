#include <gtest/gtest.h>
#include <iostream>
#include <queue>
#include <unordered_map>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 787.
 *      Cheapest Flights Within K Stops
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   There are ‘n’ cities connected by some number of flights. You are
 *   given an array ‘flights’ where ‘flights[i] = [fromᵢ, toᵢ, priceᵢ]’
 *   indicates that there is a flight from city ‘fromᵢ’ to city ‘toᵢ’ with
 *   cost ‘priceᵢ’
 *   You are also given three integers ‘src’ , ‘dst’ , and ‘k’ , return “
 *   “the cheapest price” from ” ‘src’ “ to ” ‘dst’ “ with at most ” ‘k’ “
 *   stops. ” If there is no such route, return “ ” ‘-1’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ n ≤ 100’
 *   • ‘0 ≤ flights.length ≤ (n × (n - 1) / 2)’
 *   • ‘flights[i].length = 3’
 *   • ‘0 ≤ fromᵢ, toᵢ < n’
 *   • ‘fromᵢ ≠ toᵢ’
 *   • ‘1 ≤ priceᵢ ≤ 10⁴’
 *   • There will not be any multiple flights between two cities.
 *   • ‘0 ≤ src, dst, k < n’
 *   • ‘src ≠ dst’
 *
 */

struct q787 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int findCheapestPrice(int n, vector<vector<int>> &flights, int src, int dst,
                          int k) {
      unordered_map<int, vector<pair<int, int>>> graph;
      for (auto &e : flights) {
        graph[e[0]].emplace_back(e[1], e[2]);
      }
      vector<int>           prices(n, -1);
      queue<pair<int, int>> q;
      q.emplace(src, 0);
      ++k;
      while (!q.empty() && k) {
        auto tmp = std::move(q);
        while (!tmp.empty()) {
          auto [cur, p] = tmp.front();
          tmp.pop();
          for (auto e : graph[cur]) {
            auto price = p + e.second;
            if (prices[e.first] == -1 || price < prices[e.first]) {
              prices[e.first] = price;
              q.emplace(e.first, price);
            }
          }
        }
        --k;
      }
      return prices[dst];
    }
  };

  class Solution *solution;
};

TEST_F(q787, sample_input01) {
  solution                    = new Solution();
  int                 n       = 4;
  vector<vector<int>> flights = {
      {0, 1, 100},
      {1, 2, 100},
      {2, 0, 100},
      {1, 3, 600},
      {2, 3, 200}
  };
  int src = 0;
  int dst = 3;
  int k   = 1;
  int exp = 700;
  int act = solution->findCheapestPrice(n, flights, src, dst, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q787, sample_input02) {
  solution                    = new Solution();
  int                 n       = 3;
  vector<vector<int>> flights = {
      {0, 1, 100},
      {1, 2, 100},
      {0, 2, 500}
  };
  int src = 0;
  int dst = 2;
  int k   = 1;
  int exp = 200;
  int act = solution->findCheapestPrice(n, flights, src, dst, k);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q787, sample_input03) {
  solution                    = new Solution();
  int                 n       = 3;
  vector<vector<int>> flights = {
      {0, 1, 100},
      {1, 2, 100},
      {0, 2, 500}
  };
  int src = 0;
  int dst = 2;
  int k   = 0;
  int exp = 500;
  int act = solution->findCheapestPrice(n, flights, src, dst, k);
  EXPECT_EQ(act, exp);
  delete solution;
}
