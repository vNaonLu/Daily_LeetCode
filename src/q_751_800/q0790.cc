#include <gtest/gtest.h>
#include <iostream>

using namespace std;

/**
 * This file is generated by leetcode_add.py v1.0
 *
 * 790.
 *      Domino and Tromino Tiling
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You have two types of tiles: a ‘2 x 1’ domino shape and a tromino
 *   shape. You may rotate these
 *   Given an integer n, return “the number of ways to tile an” ‘2 x n’
 *   “board” . Since the answer may be very large, return it “modulo” ‘10⁹
 *   + 7’
 *   In a tiling, every square must be covered by a tile. Two tilings are
 *   different if and only if there are two 4-directionally adjacent cells
 *   on the board such that exactly one of the tilings has both squares
 *   occupied by a tile.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ n ≤ 1000’
 *
 */

struct q790 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int numTilings(int n) {
      uint32_t _module = 1 << 9 + 7;
      vector<uint32_t> dp(1001, 0);
      dp[1] = 1; dp[2] = 2; dp[3] = 5;
      for (int i = 4; i <= n; ++i)
        dp[i] = (2 * dp[i - 1] + dp[i - 3]) % 1000000007;
      return dp[n];
    }
  };

  class Solution *solution;
};

TEST_F(q790, sample_input01) {
  solution = new Solution();
  int n = 3;
  int exp = 5;
  EXPECT_EQ(solution->numTilings(n), exp);
  delete solution;
}

TEST_F(q790, sample_input02) {
  solution = new Solution();
  int n = 1;
  int exp = 1;
  EXPECT_EQ(solution->numTilings(n), exp);
  delete solution;
}