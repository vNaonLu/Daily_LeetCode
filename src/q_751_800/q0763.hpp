
#ifndef LEETCODE_Q763_H__
#define LEETCODE_Q763_H__
#include <iostream>
#include <vector>
#include <string>

namespace l763 {
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 768. Partition Labels
  * You are given a string s . We want to partition
  * the string into as many parts as possible so that
  * each letter appears in at most one part.
  * Return a list of integers representing the size
  * of these parts .
  *
  * Constraints:
  * -  1 <= s.length <= 500 
  * -  s consists of lowercase English letters.
  *
*/
class Solution {
 public:
  vector<int> partitionLabels(string s) {
    vector<int> letter_last_appear(26, s.size());
    for (int i = 0; i < s.size(); ++i) letter_last_appear[s[i] - 'a'] = i;

    int last = 0, l = 0;
    vector<int> res;
    for (int i = 0; i < s.size(); ++i) {
      last = max(last, letter_last_appear[s[i] - 'a']);
      if (i == last) {
        res.push_back(i - l + 1);
        l = i + 1;
      }
    }
    return res;
  }
};
}  // namespace l763
#endif