
#ifndef LEETCODE_Q797_H__
#define LEETCODE_Q797_H__
#include <vector>
#include <iostream>

namespace l797 {
using namespace std;

/**
  * This file is generated by leetcode_add.py
  *
  * 797. All Paths From Source to Target
  * Given a directed acyclic graph ( “DAG” ) of n
  * nodes labeled from 0 to n - 1 , find all possible
  * paths from node 0 to node n - 1 and return them in
  * “any order” .
  * The graph is given as follows: graph[i] is a list
  * of all nodes you can visit from node i (i.e.,
  * there is a directed edge from node i to node
  * graph[i][j] ).
  *
  * Constraints:
  * -  n == graph.length 
  * -  2 <= n <= 15 
  * -  0 <= graph[i][j] < n 
  * -  graph[i][j] != i (i.e., there will be no self-loops).
  * - All the elements of graph[i] are “unique” .
  * - The input graph is “guaranteed” to be a “DAG” .
  *
*/

class Solution {
 private:
  void helper(vector<vector<int>> &graph, vector<vector<int>> &r, vector<int> &path, int target = 0) {
    path.push_back(target);
    if (target == graph.size() - 1) {
      r.push_back(path);
    } else {
      for (const int &dest : graph[target]) {
        if (find(path.begin(), path.end(), dest) == path.end())
          helper(graph, r, path, dest);
      }
    }
    path.pop_back();
  }

 public:
  vector<vector<int>> allPathsSourceTarget(vector<vector<int>> &graph) {
    vector<vector<int>> res;
    vector<int> path;
    helper(graph, res, path);
    return res;
  }
};
}  // namespace l797

#endif