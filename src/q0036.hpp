
#ifndef LEETCODE_Q36_H__
#define LEETCODE_Q36_H__
#include <iostream>
#include <vector>

namespace l36 {
using namespace std;

/**
  * this file is generated by gquestion.py

  *
  * 36. Valid Sudoku
  *
  * Determine if a 9 x 9 Sudoku boardis valid.Only
  * the filled cells need to be validated “according to
  * the following rules“ :
  * - Each rowmust contain thedigits 1-9 without
  * repetition.
  * - Each column must contain the digits 1-9 without
  * repetition.
  * - Each of the nine 3 x 3 sub-boxes of the grid
  * must contain the digits 1-9 without repetition.
  * “Note:“ 
  * - A Sudoku board (partially filled) could be
  * valid but is not necessarily solvable.
  * - Only the filled cells need to be validated
  * according to the mentionedrules.
  *
  * Constraints:
  * -  board.length == 9 
  * -  board[i].length == 9 
  * -  board[i][j] is a digit 1-9 or ';.'; .
  *
*/
class Solution {
 public:
  bool isValidSudoku(vector<vector<char>>& board) {
    return helper(board, 0, 0);
  }

 private:
  bool helper(vector<vector<char>>& b, int c, int r) {
    if (r > 8) return true;
    if (c > 8) return helper(b, 0, r + 1);
    if (b[r][c] != '.') {
      char current = b[r][c];

      for (int i = 0; i < 9; ++i) {
        if (i == c) continue;
        if (b[r][i] == current) return false;
      }
      for (int i = 0; i < 9; ++i) {
        if (i == r) continue;
        if (b[i][c] == current) return false;
      }
      int block_col = c / 3 * 3,
          block_row = r / 3 * 3;
      for (int i = block_row; i < block_row + 3; ++i) {
        for (int j = block_col; j < block_col + 3; ++j) {
          if (i == r && j == c) continue;
          if (b[i][j] == current) return false;
        }
      }
    }

    return helper(b, c + 1, r);
  }
};
}  // namespace l36
#endif