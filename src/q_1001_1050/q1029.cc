#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1029.
 *       Two City Scheduling
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   A company is planning to interview ‘2n’ people. Given the array
 *   ‘costs’ where ‘costs[i] = [aCostᵢ, bCostᵢ]’ ,the cost of flying the
 *   ‘iᵗʰ’ person to city ‘a’ is ‘aCostᵢ’ , and the cost of flying the
 *   ‘iᵗʰ’ person to city ‘b’ is ‘bCostᵢ’
 *   Return “the minimum cost to fly every person to a city” such that
 *   exactly ‘n’ people arrive in each city.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘2 × n = costs.length’
 *   • ‘2 ≤ costs.length ≤ 100’
 *   • ‘costs.length’ is even.
 *   • ‘1 ≤ aCostᵢ, bCostᵢ ≤ 1000’
 *
 */

struct q1029 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int twoCitySchedCost(vector<vector<int>> &costs) {
      int         n = costs.size() / 2,
                  res = 0;
      vector<int> refund;
      for (const auto &v : costs) {
        res += v[0];
        refund.emplace_back(v[0] - v[1]);
      }
      sort(refund.rbegin(), refund.rend());
      for (int i = 0; i < n; ++i) {
        res -= refund[i];
      }
      return res;
    }
  };

  class Solution *solution;
};

TEST_F(q1029, sample_input01) {
  solution = new Solution();
  vector<vector<int>> costs = {{10, 20}, {30, 200}, {400, 50}, {30, 20}};
  int exp = 110;
  int act = solution->twoCitySchedCost(costs);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1029, sample_input02) {
  solution = new Solution();
  vector<vector<int>> costs = {{259, 770}, {448, 54}, {926, 667}, {184, 139}, {840, 118}, {577, 469}};
  int exp = 1859;
  int act = solution->twoCitySchedCost(costs);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1029, sample_input03) {
  solution = new Solution();
  vector<vector<int>> costs = {{515, 563}, {451, 713}, {537, 709}, {343, 819}, {855, 779}, {457, 60}, {650, 359}, {631, 42}};
  int exp = 3086;
  int act = solution->twoCitySchedCost(costs);
  EXPECT_EQ(act, exp);
  delete solution;
}