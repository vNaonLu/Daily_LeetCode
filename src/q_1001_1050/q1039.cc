#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1039.
 *       Minimum Score Triangulation of Polygon
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You have a convex ‘n’ -sided polygon where each vertex has an integer
 *   value. You are given an integer array ‘values’ where ‘values[i]’ is
 *   the value of the ‘iᵗʰ’ vertex (i.e., “clockwise order”
 *   You will “triangulate” the polygon into ‘n - 2’ triangles. For each
 *   triangle, the value of that triangle is the product of the values of
 *   its vertices, and the total score of the triangulation is the sum of
 *   these values over all ‘n - 2’ triangles in the
 *   Return “the smallest possible total score that you can achieve with
 *   some triangulation of the polygon” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘n = values.length’
 *   • ‘3 ≤ n ≤ 50’
 *   • ‘1 ≤ values[i] ≤ 100’
 *
 */

struct q1039 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int minScoreTriangulation(vector<int>& values) {
      int                 n = values.size();
      vector<vector<int>> dp(n - 1, vector<int>(n - 1));
      for (int k = 0; k < n - 1; ++k) {
        for (int i = 0, j = k; j < n - 1; ++i, ++j) {
          if (k == 0) {
            dp[i][j] = 0;
          } else if (k == 1) {
            dp[i][j] = values[i] * values[j] * values[j + 1];
          } else {
            int min_cost = numeric_limits<int>::max();
            for (int t = i; t < j; ++t) {
              int lc = dp[i][t],
                  rc = dp[t + 1][j],
                  mc = values[i] * values[t + 1] * values[j + 1],
                  tc = lc + rc + mc;
              min_cost = min(min_cost, tc);
            }
            dp[i][j] = min_cost;
          }
        }
      }
      return dp[0][n - 2];
    }
  };

  class Solution *solution;
};

TEST_F(q1039, sample_input01) {
  solution = new Solution();
  vector<int> values = {1, 2, 3};
  int exp = 6;
  int act = solution->minScoreTriangulation(values);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1039, sample_input02) {
  solution = new Solution();
  vector<int> values = {3, 7, 4, 5};
  int exp = 144;
  int act = solution->minScoreTriangulation(values);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1039, sample_input03) {
  solution = new Solution();
  vector<int> values = {1, 3, 1, 4, 1, 5};
  int exp = 13;
  int act = solution->minScoreTriangulation(values);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1039, input01) {
  solution = new Solution();
  vector<int> values = {3, 7, 4, 5};
  int exp = 144;
  int act = solution->minScoreTriangulation(values);
  EXPECT_EQ(act, exp);
  delete solution;
}