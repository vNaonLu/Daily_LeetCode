
#ifndef Q1032_UNITTEST_H__
#define Q1032_UNITTEST_H__
#include <gtest/gtest.h>

#include "q1032.hpp"
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1032.
 *       Stream of Characters
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Design an algorithm that accepts a stream of characters and checks if
 *   a suffix of these characters is a string of a given array of strings
 *   ‘words’
 *   For example, if ‘words = ['abc', 'xyz']’ and the stream added the four
 *   characters (one by one) ‘'a'’ , ‘'x'’ , ‘'y'’ , and ‘'z'’ , your
 *   algorithm should detect that the suffix ‘'xyz'’ of the characters
 *   ‘'axyz'’ matches ‘'xyz'’ from ‘words’
 *   Implement the ‘StreamChecker’
 *       -  ‘StreamChecker(String[] words)’ Initializes the object with the
 *   strings array ‘words’
 *       -  ‘boolean query(char letter)’ Accepts a new character from the
 *   stream and returns ‘true’ if any non-empty suffix from the stream
 *   forms a word that is in ‘words’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ words.length ≤ 2000’
 *   • ‘1 ≤ words[i].length ≤ 2000’
 *   • ‘words[i]’ consists of lowercase English letters.
 *   • ‘letter’ is a lowercase English letter.
 *   • At most ‘4 × 10⁴’ calls will be made to query.
 *
 */

TEST(q1032, sample_input01) {
  vector<string> words = {"cd", "f", "kl"};
  l1032::StreamChecker *stream_checker = new l1032::StreamChecker(words);
  EXPECT_EQ(stream_checker->query('a'), false);
  EXPECT_EQ(stream_checker->query('b'), false);
  EXPECT_EQ(stream_checker->query('c'), false);
  EXPECT_EQ(stream_checker->query('d'), true);
  EXPECT_EQ(stream_checker->query('e'), false);
  EXPECT_EQ(stream_checker->query('f'), true);
  EXPECT_EQ(stream_checker->query('g'), false);
  EXPECT_EQ(stream_checker->query('h'), false);
  EXPECT_EQ(stream_checker->query('i'), false);
  EXPECT_EQ(stream_checker->query('j'), false);
  EXPECT_EQ(stream_checker->query('k'), false);
  EXPECT_EQ(stream_checker->query('l'), true);
  delete stream_checker;
}

#endif