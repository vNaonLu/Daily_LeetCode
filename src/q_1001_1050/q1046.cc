#include <gtest/gtest.h>
#include <iostream>
#include <queue>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1046.
 *       Last Stone Weight
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given an array of integers ‘stones’ where ‘stones[i]’ is the
 *   weight of the ‘iᵗʰ’
 *   We are playing a game with the stones. On each turn, we choose the
 *   “heaviest two stones” and smash them together. Suppose the heaviest
 *   two stones have weights ‘x’ and ‘y’ with ‘x ≤ y’ . The result of this
 *   smash
 *       - If ‘x = y’ , both stones are destroyed,
 *       - If ‘x ≠ y’ , the stone of weight ‘x’ is destroyed, and the stone
 *   of weight ‘y’ has new weight ‘y - x’
 *   At the end of the game, there is “at most one” stone
 *   Return “the smallest possible weight of the left stone” . If there are
 *   no stones left, return ‘0’ .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ stones.length ≤ 30’
 *   • ‘1 ≤ stones[i] ≤ 1000’
 *
 */

struct q1046 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int lastStoneWeight(vector<int> &stones) {
      priority_queue<int> pq;
      for (auto &x : stones) {
        pq.emplace(x);
      }

      while (pq.size() > 1) {
        auto x = pq.top(); pq.pop();
        auto y = pq.top(); pq.pop();
        if (x != y) {
          pq.emplace(x - y);
        }
      }

      return pq.empty() ? 0 : pq.top();
    }
  };

  class Solution *solution;
};

TEST_F(q1046, sample_input01) {
  solution = new Solution();
  vector<int> stones = {2, 7, 4, 1, 8, 1};
  int exp = 1;
  int act = solution->lastStoneWeight(stones);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1046, sample_input02) {
  solution = new Solution();
  vector<int> stones = {1};
  int exp = 1;
  int act = solution->lastStoneWeight(stones);
  EXPECT_EQ(act, exp);
  delete solution;
}