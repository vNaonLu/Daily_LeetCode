
#ifndef Q1043_UNITTEST_H__
#define Q1043_UNITTEST_H__
#include <gtest/gtest.h>

#include "q1043.hpp"
using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1043.
 *       Partition Array for Maximum Sum
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an integer array ‘arr’ , partition the array into (contiguous)
 *   subarrays of length “at most” ‘k’ . After partitioning, each subarray
 *   has their values changed to become the maximum value of that
 *   Return “the largest sum of the given array after partitioning. Test
 *   cases are generated so that the answer fits in a “32-bit” integer.” 
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ arr.length ≤ 500’
 *   • ‘0 ≤ arr[i] ≤ 10⁹’
 *   • ‘1 ≤ k ≤ arr.length’
 *
 */

TEST(q1043, sample_input01) {
  l1043::Solution solver;
  vector<int> arr = {1, 15, 7, 9, 2, 5, 10};
  int k = 3;
  int exp = 84;
  EXPECT_EQ(solver.maxSumAfterPartitioning(arr, k), exp);
}

TEST(q1043, sample_input02) {
  l1043::Solution solver;
  vector<int> arr = {1, 4, 1, 5, 7, 3, 6, 1, 9, 9, 3};
  int k = 4;
  int exp = 83;
  EXPECT_EQ(solver.maxSumAfterPartitioning(arr, k), exp);
}

TEST(q1043, sample_input03) {
  l1043::Solution solver;
  vector<int> arr = {1};
  int k = 1;
  int exp = 1;
  EXPECT_EQ(solver.maxSumAfterPartitioning(arr, k), exp);
}

#endif