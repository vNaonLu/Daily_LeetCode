#include <gtest/gtest.h>
#include <iostream>
#include <leetcode/treenode.hpp>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1022.
 *       Sum of Root To Leaf Binary Numbers
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   You are given the ‘root’ of a binary tree where each node has a value
 *   ‘0’ or ‘1’ . Each root-to-leaf path represents a binary number
 *   starting with the most significant
 *       - For example, if the path is ‘0 -> 1 -> 1 -> 0 -> 1’ , then this
 *   could represent ‘01101’ in binary, which is ‘13’
 *   For all leaves in the tree, consider the numbers represented by the
 *   path from the root to that leaf. Return “the sum of these numbers”
 *   The test cases are generated so that the answer fits in a “32-bits”
 *   integer.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • The number of nodes in the tree is in the range ‘[1, 1000]’ .
 *   • ‘Node.val’ is ‘0’ or ‘1’ .
 *
 */

struct q1022 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    int binaryNumber(TreeNode* p, int current = 0) {
      if (nullptr == p) return current;
      current <<= 1;
      current += p->val;
      if      (nullptr == p->left) return binaryNumber(p->right, current);
      else if (nullptr == p->right) return binaryNumber(p->left, current);
      else return binaryNumber(p->left, current) + binaryNumber(p->right, current);
    }

   public:
    int sumRootToLeaf(TreeNode* root) {
      return binaryNumber(root);
    }
  };

  class Solution *solution;
};

TEST_F(q1022, sample_input01) {
  solution = new Solution();
  TreeNode* root = TreeNode::generate({1, 0, 1, 0, 1, 0, 1});
  int exp = 22;
  int act = solution->sumRootToLeaf(root);
  EXPECT_EQ(act, exp);
  TreeNode::release(root);
  delete solution;
}

TEST_F(q1022, sample_input02) {
  solution = new Solution();
  TreeNode* root = TreeNode::generate({0});
  int exp = 0;
  int act = solution->sumRootToLeaf(root);
  EXPECT_EQ(act, exp);
  TreeNode::release(root);
  delete solution;
}