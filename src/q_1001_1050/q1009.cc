#include <gtest/gtest.h>
#include <iostream>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1009.
 *       Complement of Base 10 Integer
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   The “complement” of an integer is the integer you get when you flip
 *   all the ‘0’ 's to ‘1’ 's and all the ‘1’ 's to ‘0’ 's in its binary
 *       - For example, The integer ‘5’ is ‘'101'’ in binary and its
 *   “complement” is ‘'010'’ which is the integer ‘2’
 *   Given an integer ‘n’ , return “its complement” .
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘0 ≤ n < 10⁹’
 *
 */

struct q1009 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   public:
    int bitwiseComplement(int n) {
      if (n == 0) return 1;
      unsigned mask = ~0;
      while (mask & n) mask <<= 1;
      return ~n ^ mask;
    }
  };

  class Solution *solution;
};

TEST_F(q1009, sample_input01) {
  solution = new Solution();
  int n = 5;
  int exp = 2;
  int act = solution->bitwiseComplement(n);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1009, sample_input02) {
  solution = new Solution();
  int n = 7;
  int exp = 0;
  int act = solution->bitwiseComplement(n);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1009, sample_input03) {
  solution = new Solution();
  int n = 10;
  int exp = 5;
  int act = solution->bitwiseComplement(n);
  EXPECT_EQ(act, exp);
  delete solution;
}