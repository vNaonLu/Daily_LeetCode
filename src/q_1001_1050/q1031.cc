#include <gtest/gtest.h>
#include <iostream>
#include <vector>

using namespace std;

/**
 * This file is generated by leetcode_add.py
 *
 * 1031.
 *       Maximum Sum of Two Non-Overlapping Subarrays
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given an integer array ‘nums’ and two integers ‘firstLen’ and
 *   ‘secondLen’ , return “the maximum sum of elements in two
 *   non-overlapping “subarrays” with lengths ” ‘firstLen’ “ and ”
 *   ‘secondLen’
 *   The array with length ‘firstLen’ could occur before or after the array
 *   with length ‘secondLen’ , but they have to be
 *   A “subarray” is a “contiguous” part of an array.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ firstLen, secondLen ≤ 1000’
 *   • ‘2 ≤ firstLen + secondLen ≤ 1000’
 *   • ‘firstLen + secondLen ≤ nums.length ≤ 1000’
 *   • ‘0 ≤ nums[i] ≤ 1000’
 *
 */

struct q1031 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
   private:
    int impl(vector<int> &nums, int f, int s) noexcept {
      int res = 0,
          first_window = 0;
      for (int i = 0; (i + f + s - 1) < nums.size(); ++i) {
        int second_window = nums[i + f + s - 1] - (i + f - 1 >= 0 ? nums[i + f - 1] : 0);
        first_window = max(first_window, nums[i + f - 1] - (i - 1 >= 0 ? nums[i - 1] : 0));
        res = max(res, first_window + second_window);
      }
      return res;
    }

   public:
    int maxSumTwoNoOverlap(vector<int> &nums, int firstLen, int secondLen) {
      for (int i = 1; i < nums.size(); ++i) nums[i] += nums[i - 1];
      return max(impl(nums, firstLen, secondLen), impl(nums, secondLen, firstLen));
    }
  };

  class Solution *solution;
};

TEST_F(q1031, sample_input01) {
  solution = new Solution();
  vector<int> nums = {0, 6, 5, 2, 2, 5, 1, 9, 4};
  int firstLen = 1;
  int secondLen = 2;
  int exp = 20;
  int act = solution->maxSumTwoNoOverlap(nums, firstLen, secondLen);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1031, sample_input02) {
  solution = new Solution();
  vector<int> nums = {3, 8, 1, 3, 2, 1, 8, 9, 0};
  int firstLen = 3;
  int secondLen = 2;
  int exp = 29;
  int act = solution->maxSumTwoNoOverlap(nums, firstLen, secondLen);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q1031, sample_input03) {
  solution = new Solution();
  vector<int> nums = {2, 1, 5, 6, 0, 9, 5, 0, 3, 8};
  int firstLen = 4;
  int secondLen = 3;
  int exp = 31;
  int act = solution->maxSumTwoNoOverlap(nums, firstLen, secondLen);
  EXPECT_EQ(act, exp);
  delete solution;
}