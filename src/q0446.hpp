
#ifndef LEETCODE_Q446_H__
#define LEETCODE_Q446_H__
#include <iostream>
#include <map>
#include <vector>

namespace l446 {
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 446. Arithmetic Slices II - Subsequence
  *
  * Given an integer array nums , return the number
  * of all the “arithmetic subsequences“ of nums .
  * A sequence of numbers is called arithmetic if it
  * consists of “at least three elements“ and if the
  * difference between any two consecutive elements is
  * the same.
  * - For example, [1, 3, 5, 7, 9] , [7, 7, 7, 7] ,
  * and [3, -1, -5, -9] are arithmetic sequences.
  * - For example, [1, 1, 2, 5, 7] is not an
  * arithmetic sequence.
  * A “subsequence“ of an array is a sequence that
  * can be formed by removing some elements (possibly
  * none) of the array.
  * - For example, [2,5,10] is a subsequence of
  * [1,2,1, “<u>2</u>“ ,4,1,<u> “5“ </u>,<u> “10“ </u>] .
  * The test cases are generated so that the answer
  * fits in “32-bit“ integer.
  *
  * Constraints:
  * -  1 <= nums.length <= 1000 
  * -  -2^(31) <= nums[i] <= 2^(31) - 1 
  *
*/
class Solution {
 public:
  int numberOfArithmeticSlices(vector<int>& nums) {
    int n = nums.size();
    long long res = 0;
    vector<map<long long, int>> cnt(n);
    for (int i = 1; i < n; ++i) {
      for (int j = 0; j < i; ++j) {
        long long d = (long long)nums[i] - (long long)nums[j];
        int sum = 0;
        if (cnt[j].find(d) != cnt[j].end()) {
          sum = cnt[j][d];
        }
        cnt[i][d] += sum + 1;
        res += sum;
      }
    }
    return res;
  }
};
}  // namespace l446
#endif