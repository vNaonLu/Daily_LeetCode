#include <gtest/gtest.h>
#include <iostream>

using namespace std;

/**
 * The file is generated by LeetCodeDailyTools
 *
 * 2485.
 *       Find the Pivot Integer
 *
 * ––––––––––––––––––––––––––––– Description –––––––––––––––––––––––––––––
 *
 *   Given a positive integer ‘n’ , find the “pivot integer” ‘x’ such
 *       - The sum of all elements between ‘1’ and ‘x’ inclusively equals
 *   the sum of all elements between ‘x’ and ‘n’
 *   Return “the pivot integer ” ‘x’ . If no such integer exists, return
 *   ‘-1’ . It is guaranteed that there will be at most one pivot index for
 *   the given input.
 *
 * ––––––––––––––––––––––––––––– Constraints –––––––––––––––––––––––––––––
 *
 *   • ‘1 ≤ n ≤ 1000’
 *
 * see more details: https://leetcode.com/problems/find-the-pivot-integer/
 */

struct q2485 : public ::testing::Test {
  // Leetcode answer here
  class Solution {
  public:
    int pivotInteger(int n) {
      int lsum = 0;
      int rsum = 0;
      for (int i=0; i<=n; ++i) {
        lsum += i;
      }
      for (int i=n; i>0; --i) {
        rsum += i;
        if (lsum == rsum) {
          return i;
        }
        lsum -= i;
      }

      return -1;
    }
  };

  class Solution *solution;
};

TEST_F(q2485, sample_input01) {
  solution = new Solution();
  int n    = 8;
  int exp  = 6;
  int act  = solution->pivotInteger(n);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2485, sample_input02) {
  solution = new Solution();
  int n    = 1;
  int exp  = 1;
  int act  = solution->pivotInteger(n);
  EXPECT_EQ(act, exp);
  delete solution;
}

TEST_F(q2485, sample_input03) {
  solution = new Solution();
  int n    = 4;
  int exp  = -1;
  int act  = solution->pivotInteger(n);
  EXPECT_EQ(act, exp);
  delete solution;
}
