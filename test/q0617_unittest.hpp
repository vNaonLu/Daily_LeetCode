
#ifndef Q617_UNITTEST_H__
#define Q617_UNITTEST_H__
#include <gtest/gtest.h>

#include "../src/q0617.hpp"
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 617. Merge Two Binary Trees
  *
  * You are given two binary trees root1 and root2 .
  * Imagine that when you put one of them to cover
  * the other, some nodes of the two trees are
  * overlapped while the others are not. You need to merge the
  * two trees into a new binary tree. The merge rule
  * is that if two nodes overlap, then sum node values
  * up as the new value of the merged node. Otherwise,
  * the NOT null node will be used as the node of the
  * new tree.
  * Return the merged tree .
  * “Note:“ The merging process must start from the
  * root nodes of both trees.
  *
  * Constraints:
  * - The number of nodes in both trees is in the range [0, 2000] .
  * -  -10^(4) <= Node.val <= 10^(4) 
  *
*/

TEST(q617, sample_input01) {
  int null = 0;
  TreeNode *root1 = TreeNode::generate({1, 3, 2, 5}, null),
           *root2 = TreeNode::generate({2, 1, 3, null, 4, null, 7}, null);
  TreeNode *exp = TreeNode::generate({3, 4, 5, 5, 4, null, 7}, null);
  l617::Solution solver;
  EXPECT_TRUE(TreeNode::equal(solver.mergeTrees(root1, root2), exp));
}

TEST(q617, sample_input02) {
  int null = 0;
  TreeNode *root1 = TreeNode::generate({1}, null),
           *root2 = TreeNode::generate({1, 2}, null);
  TreeNode *exp = TreeNode::generate({2, 2}, null);
  l617::Solution solver;
  EXPECT_TRUE(TreeNode::equal(solver.mergeTrees(root1, root2), exp));
}

#endif