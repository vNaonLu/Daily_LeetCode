
#ifndef Q733_UNITTEST_H__
#define Q733_UNITTEST_H__
#include <gtest/gtest.h>

#include "../src/q0733.hpp"
using namespace std;

/**
  * this file is generated by gquestion.py
  *
  * 733. Flood Fill
  *
  * An image is represented by an m x n integer grid
  * image where image[i][j] represents the pixel value
  * of the image.
  * You are also given three integers sr , sc , and
  * newColor . You should perform a “flood fill“ on the
  * image starting from the pixel image[sr][sc] .
  * To perform a “flood fill“ , consider the starting
  * pixel, plus any pixels connected
  * “4-directionally“ to the starting pixel of the same color as the
  * starting pixel, plus any pixels connected
  * “4-directionally“ to those pixels (also with the same
  * color), and so on. Replace the color of all of the
  * aforementioned pixels with newColor .
  * Return the modified image after performing the
  * flood fill .
  *
  * Constraints:
  * -  m == image.length 
  * -  n == image[i].length 
  * -  1 <= m, n <= 50 
  * -  0 <= image[i][j], newColor < 2^(16) 
  * -  0 <= sr <m 
  * -  0 <= sc <n 
  *
*/

TEST(q733, sample_input01) {
  vector<vector<int>> image = {{1, 1, 1}, {1, 1, 0}, {1, 0, 1}};
  int sr = 1,
      sc = 1;
  int newColor = 2;
  vector<vector<int>> exp = {{2, 2, 2}, {2, 2, 0}, {2, 0, 1}};
  l733::Solution solver;
  EXPECT_EQ(solver.floodFill(image, sr, sc, newColor), exp);
}

TEST(q733, sample_input02) {
  vector<vector<int>> image = {{0, 0, 0}, {0, 0, 0}};
  int sr = 0,
      sc = 0;
  int newColor = 2;
  vector<vector<int>> exp = {{2, 2, 2}, {2, 2, 2}};
  l733::Solution solver;
  EXPECT_EQ(solver.floodFill(image, sr, sc, newColor), exp);
}

#endif