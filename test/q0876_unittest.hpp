
#ifndef Q876_UNITTEST_H__
#define Q876_UNITTEST_H__
#include <gtest/gtest.h>

#include <vector>

#include "../src/q0876.hpp"
using namespace std;

/**
  * this file is generated by gquestion.py

  *
  * 876. Middle of the Linked List
  *
  * Given the head of a singly linked list, return
  * the middle node of the linked list .
  * If there are two middle nodes, return “the second
  * middle“ node.
  *
  * Constraints:
  * - The number of nodes in the list is in the range [1, 100] .
  * -  1 <= Node.val <= 100 
  *
*/

namespace l876 {
void release(l876::ListNode *p) {
  if (!p) return;
  release(p->next);
  delete p;
}

inline l876::ListNode *generate(const vector<int> &v) {
  l876::ListNode *res = new l876::ListNode(v[0]);
  l876::ListNode *p = res;
  for (auto it = v.begin() + 1; it != v.end(); ++it) {
    p->next = new l876::ListNode(*it);
    p = p->next;
  }
  return res;
}

inline bool compare(l876::ListNode *p, l876::ListNode *q) {
  while (p != nullptr && q != nullptr) {
    if (p->val != q->val) return false;
    p = p->next;
    q = q->next;
  }
  return p == nullptr && q == nullptr;
}
}  // namespace l876

TEST(q876, sample_input01) {
  l876::ListNode *p = l876::generate({1, 2, 3, 4, 5});
  l876::ListNode *exp = l876::generate({3, 4, 5});
  l876::Solution solver;
  EXPECT_TRUE(compare(solver.middleNode(p), exp));
  release(p);
  release(exp);
}

TEST(q876, sample_input02) {
  l876::ListNode *p = l876::generate({1, 2, 3, 4, 5, 6});
  l876::ListNode *exp = l876::generate({4, 5, 6});
  l876::Solution solver;
  EXPECT_TRUE(compare(solver.middleNode(p), exp));
  release(p);
  release(exp);
}

#endif