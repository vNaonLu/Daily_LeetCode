
#ifndef Q74_UNITTEST_H__
#define Q74_UNITTEST_H__
#include <gtest/gtest.h>

#include "../src/q0074.hpp"
using namespace std;

/**
  * this file is generated by gquestion.py

  *
  * 74. Search a 2D Matrix
  *
  * Write an efficient algorithm that searches for a
  * value in an m x n matrix. This matrix has the
  * following properties:
  * - Integers in each row are sorted from left to
  * right.
  * - The first integer of each row is greater than
  * the last integer of the previous row.
  *
  * Constraints:
  * -  m == matrix.length 
  * -  n == matrix[i].length 
  * -  1 <= m, n <= 100 
  * -  -10^(4) <= matrix[i][j], target <= 10^(4) 
  *
*/

TEST(q74, sample_input01) {
  vector<vector<int>> matrix = {{1, 3, 5, 7}, {10, 11, 16, 20}, {23, 30, 34, 60}};
  int target = 3;
  bool exp = true;
  l74::Solution solver;
  EXPECT_EQ(solver.searchMatrix(matrix, target), exp);
}

TEST(q74, sample_input02) {
  vector<vector<int>> matrix = {{1, 3, 5, 7}, {10, 11, 16, 20}, {23, 30, 34, 60}};
  int target = 13;
  bool exp = false;
  l74::Solution solver;
  EXPECT_EQ(solver.searchMatrix(matrix, target), exp);
}

#endif